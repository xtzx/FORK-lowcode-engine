(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory(require('@alifd/next')['ConfigProvider']);
    else if (typeof define === 'function' && define.amd) define([['@alifd/next', 'ConfigProvider']], factory);
    else if (typeof exports === 'object')
        exports['AliLowCodeReactRenderer'] = factory(require('@alifd/next')['ConfigProvider']);
    else root['AliLowCodeReactRenderer'] = factory(root['Next']['ConfigProvider']);
})(window, function (__WEBPACK_EXTERNAL_MODULE__49__) {
    return /******/ (function (modules) {
        // webpackBootstrap
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/
        /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/
            /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) {
                /******/ return installedModules[moduleId].exports;
                /******/
            }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = (installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {},
                /******/
            });
            /******/
            /******/ // Execute the module function
            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ // Flag the module as loaded
            /******/ module.l = true;
            /******/
            /******/ // Return the exports of the module
            /******/ return module.exports;
            /******/
        }
        /******/
        /******/
        /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/
        /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/
        /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function (exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) {
                /******/ Object.defineProperty(exports, name, { enumerable: true, get: getter });
                /******/
            }
            /******/
        };
        /******/
        /******/ // define __esModule on exports
        /******/ __webpack_require__.r = function (exports) {
            /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                /******/
            }
            /******/ Object.defineProperty(exports, '__esModule', { value: true });
            /******/
        };
        /******/
        /******/ // create a fake namespace object
        /******/ // mode & 1: value is a module id, require it
        /******/ // mode & 2: merge all properties of value into the ns
        /******/ // mode & 4: return value when already ns object
        /******/ // mode & 8|1: behave like require
        /******/ __webpack_require__.t = function (value, mode) {
            /******/ if (mode & 1) value = __webpack_require__(value);
            /******/ if (mode & 8) return value;
            /******/ if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
            /******/ var ns = Object.create(null);
            /******/ __webpack_require__.r(ns);
            /******/ Object.defineProperty(ns, 'default', { enumerable: true, value: value });
            /******/ if (mode & 2 && typeof value != 'string')
                for (var key in value)
                    __webpack_require__.d(
                        ns,
                        key,
                        function (key) {
                            return value[key];
                        }.bind(null, key),
                    );
            /******/ return ns;
            /******/
        };
        /******/
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function (module) {
            /******/ var getter =
                module && module.__esModule
                    ? /******/ function getDefault() {
                          return module['default'];
                      }
                    : /******/ function getModuleExports() {
                          return module;
                      };
            /******/ __webpack_require__.d(getter, 'a', getter);
            /******/ return getter;
            /******/
        };
        /******/
        /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/
        /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = '/';
        /******/
        /******/
        /******/ // Load entry module and return exports
        /******/ return __webpack_require__((__webpack_require__.s = 50));
        /******/
    })(
        /************************************************************************/
        /******/ [
            /* 0 */
            /***/ function (module, __webpack_exports__, __webpack_require__) {
                'use strict';
                // ESM COMPAT FLAG
                __webpack_require__.r(__webpack_exports__);

                // EXPORTS
                __webpack_require__.d(__webpack_exports__, 'RuntimeDataSourceStatus', function () {
                    return /* reexport */ RuntimeDataSourceStatus;
                });
                __webpack_require__.d(__webpack_exports__, 'ActivityType', function () {
                    return /* reexport */ ActivityType;
                });
                __webpack_require__.d(__webpack_exports__, 'AssetLevel', function () {
                    return /* reexport */ AssetLevel;
                });
                __webpack_require__.d(__webpack_exports__, 'AssetLevels', function () {
                    return /* reexport */ AssetLevels;
                });
                __webpack_require__.d(__webpack_exports__, 'AssetType', function () {
                    return /* reexport */ AssetType;
                });
                __webpack_require__.d(__webpack_exports__, 'GlobalEvent', function () {
                    return /* reexport */ event_namespaceObject;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicTypeLocationDetailType', function () {
                    return /* reexport */ IPublicTypeLocationDetailType;
                });
                __webpack_require__.d(__webpack_exports__, 'LocationDetailType', function () {
                    return /* reexport */ LocationDetailType;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicModelDragObject', function () {
                    return /* reexport */ IPublicModelDragObject;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumEventNames', function () {
                    return /* reexport */ IPublicEnumEventNames;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumTransitionType', function () {
                    return /* reexport */ IPublicEnumTransitionType;
                });
                __webpack_require__.d(__webpack_exports__, 'TransitionType', function () {
                    return /* reexport */ TransitionType;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumTransformStage', function () {
                    return /* reexport */ IPublicEnumTransformStage;
                });
                __webpack_require__.d(__webpack_exports__, 'TransformStage', function () {
                    return /* reexport */ TransformStage;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumDragObjectType', function () {
                    return /* reexport */ IPublicEnumDragObjectType;
                });
                __webpack_require__.d(__webpack_exports__, 'DragObjectType', function () {
                    return /* reexport */ DragObjectType;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumPropValueChangedType', function () {
                    return /* reexport */ IPublicEnumPropValueChangedType;
                });
                __webpack_require__.d(__webpack_exports__, 'PROP_VALUE_CHANGED_TYPE', function () {
                    return /* reexport */ PROP_VALUE_CHANGED_TYPE;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumPluginRegisterLevel', function () {
                    return /* reexport */ IPublicEnumPluginRegisterLevel;
                });
                __webpack_require__.d(__webpack_exports__, 'IPublicEnumContextMenuType', function () {
                    return /* reexport */ IPublicEnumContextMenuType;
                });
                __webpack_require__.d(__webpack_exports__, 'isActionContentObject', function () {
                    return /* reexport */ isActionContentObject;
                });
                __webpack_require__.d(__webpack_exports__, 'isCustomView', function () {
                    return /* reexport */ isCustomView;
                });
                __webpack_require__.d(__webpack_exports__, 'isDOMText', function () {
                    return /* reexport */ isDOMText;
                });
                __webpack_require__.d(__webpack_exports__, 'isDynamicSetter', function () {
                    return /* reexport */ isDynamicSetter;
                });
                __webpack_require__.d(__webpack_exports__, 'isI18nData', function () {
                    return /* reexport */ isI18nData;
                });
                __webpack_require__.d(__webpack_exports__, 'isJSBlock', function () {
                    return /* reexport */ isJSBlock;
                });
                __webpack_require__.d(__webpack_exports__, 'isJSExpression', function () {
                    return /* reexport */ isJSExpression;
                });
                __webpack_require__.d(__webpack_exports__, 'isJSFunction', function () {
                    return /* reexport */ isJSFunction;
                });
                __webpack_require__.d(__webpack_exports__, 'isJSSlot', function () {
                    return /* reexport */ isJSSlot;
                });
                __webpack_require__.d(__webpack_exports__, 'isLowCodeComponentType', function () {
                    return /* reexport */ isLowCodeComponentType;
                });
                __webpack_require__.d(__webpack_exports__, 'isNodeSchema', function () {
                    return /* reexport */ isNodeSchema;
                });
                __webpack_require__.d(__webpack_exports__, 'isPlainObject', function () {
                    return /* reexport */ isPlainObject;
                });
                __webpack_require__.d(__webpack_exports__, 'isProCodeComponentType', function () {
                    return /* reexport */ isProCodeComponentType;
                });
                __webpack_require__.d(__webpack_exports__, 'isProjectSchema', function () {
                    return /* reexport */ isProjectSchema;
                });
                __webpack_require__.d(__webpack_exports__, 'isReactClass', function () {
                    return /* reexport */ isReactClass;
                });
                __webpack_require__.d(__webpack_exports__, 'isReactComponent', function () {
                    return /* reexport */ isReactComponent;
                });
                __webpack_require__.d(__webpack_exports__, 'isSetterConfig', function () {
                    return /* reexport */ isSetterConfig;
                });
                __webpack_require__.d(__webpack_exports__, 'isTitleConfig', function () {
                    return /* reexport */ isTitleConfig;
                });

                // NAMESPACE OBJECT: ../types/src/event/prop.ts
                var prop_namespaceObject = {};
                __webpack_require__.r(prop_namespaceObject);
                __webpack_require__.d(prop_namespaceObject, 'Change', function () {
                    return Change;
                });
                __webpack_require__.d(prop_namespaceObject, 'InnerChange', function () {
                    return InnerChange;
                });

                // NAMESPACE OBJECT: ../types/src/event/node.ts
                var node_namespaceObject = {};
                __webpack_require__.r(node_namespaceObject);
                __webpack_require__.d(node_namespaceObject, 'Prop', function () {
                    return prop_namespaceObject;
                });
                __webpack_require__.d(node_namespaceObject, 'Rerender', function () {
                    return Rerender;
                });

                // NAMESPACE OBJECT: ../types/src/event/index.ts
                var event_namespaceObject = {};
                __webpack_require__.r(event_namespaceObject);
                __webpack_require__.d(event_namespaceObject, 'Node', function () {
                    return node_namespaceObject;
                });

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/data-source.js
                /** 数据源的状态 */
                var RuntimeDataSourceStatus;
                (function (RuntimeDataSourceStatus) {
                    /** 初始状态，尚未加载 */
                    RuntimeDataSourceStatus['Initial'] = 'init';
                    /** 正在加载 */
                    RuntimeDataSourceStatus['Loading'] = 'loading';
                    /** 已加载(无错误) */
                    RuntimeDataSourceStatus['Loaded'] = 'loaded';
                    /** 加载出错了 */
                    RuntimeDataSourceStatus['Error'] = 'error';
                })(RuntimeDataSourceStatus || (RuntimeDataSourceStatus = {}));
                //# sourceMappingURL=data-source.js.map
                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/data-source-handlers.js

                //# sourceMappingURL=data-source-handlers.js.map
                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/data-source-interpret.js

                //# sourceMappingURL=data-source-interpret.js.map
                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/data-source-runtime.js

                //# sourceMappingURL=data-source-runtime.js.map
                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/value-type.js

                //# sourceMappingURL=value-type.js.map
                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/ExtraConfig.js

                //# sourceMappingURL=ExtraConfig.js.map
                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-types/es/index.js

                //# sourceMappingURL=index.js.map
                // CONCATENATED MODULE: ../types/src/editor.ts

                // CONCATENATED MODULE: ../types/src/activity.ts
                var ActivityType;
                (function (ActivityType) {
                    ActivityType['ADDED'] = 'added';
                    ActivityType['DELETED'] = 'deleted';
                    ActivityType['MODIFIED'] = 'modified';
                    ActivityType['COMPOSITE'] = 'composite';
                })(ActivityType || (ActivityType = {}));
                // CONCATENATED MODULE: ../types/src/code-intermediate.ts

                // CONCATENATED MODULE: ../types/src/code-result.ts

                // CONCATENATED MODULE: ../types/src/assets.ts
                var AssetLevel;
                (function (AssetLevel) {
                    // 环境依赖库 比如 react, react-dom
                    AssetLevel[(AssetLevel['Environment'] = 1)] = 'Environment';
                    // 基础类库，比如 lodash deep fusion antd
                    AssetLevel[(AssetLevel['Library'] = 2)] = 'Library';
                    // 主题
                    AssetLevel[(AssetLevel['Theme'] = 3)] = 'Theme';
                    // 运行时
                    AssetLevel[(AssetLevel['Runtime'] = 4)] = 'Runtime';
                    // 业务组件
                    AssetLevel[(AssetLevel['Components'] = 5)] = 'Components';
                    // 应用 & 页面
                    AssetLevel[(AssetLevel['App'] = 6)] = 'App';
                })(AssetLevel || (AssetLevel = {}));
                var AssetLevels = [
                    AssetLevel.Environment,
                    AssetLevel.Library,
                    AssetLevel.Theme,
                    AssetLevel.Runtime,
                    AssetLevel.Components,
                    AssetLevel.App,
                ];
                var AssetType;
                (function (AssetType) {
                    AssetType['JSUrl'] = 'jsUrl';
                    AssetType['CSSUrl'] = 'cssUrl';
                    AssetType['CSSText'] = 'cssText';
                    AssetType['JSText'] = 'jsText';
                    AssetType['Bundle'] = 'bundle';
                })(AssetType || (AssetType = {}));
                // CONCATENATED MODULE: ../types/src/event/prop.ts
                /**
                 * Node Prop 变化事件
                 * @Deprecated Please Replace With InnerPropChange
                 */
                var Change = 'node.prop.change';
                /** Node Prop 变化事件 */
                var InnerChange = 'node.innerProp.change';
                // CONCATENATED MODULE: ../types/src/event/node.ts

                var Rerender = 'node.edit.rerender.time';
                // CONCATENATED MODULE: ../types/src/event/index.ts

                // CONCATENATED MODULE: ../types/src/shell/type/location.ts
                // eslint-disable-next-line no-shadow
                var IPublicTypeLocationDetailType;
                (function (IPublicTypeLocationDetailType) {
                    IPublicTypeLocationDetailType['Children'] = 'Children';
                    IPublicTypeLocationDetailType['Prop'] = 'Prop';
                })(IPublicTypeLocationDetailType || (IPublicTypeLocationDetailType = {}));
                /**
                 * @deprecated please use IPublicTypeLocationDetailType
                 */
                var LocationDetailType;
                (function (LocationDetailType) {
                    LocationDetailType['Children'] = 'Children';
                    LocationDetailType['Prop'] = 'Prop';
                })(LocationDetailType || (LocationDetailType = {}));
                // CONCATENATED MODULE: ../types/src/shell/type/active-target.ts

                // CONCATENATED MODULE: ../types/src/shell/type/component-instance.ts

                // CONCATENATED MODULE: ../types/src/shell/type/node-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/disposable.ts

                // CONCATENATED MODULE: ../types/src/shell/type/assets-json.ts

                // CONCATENATED MODULE: ../types/src/shell/type/metadata-transducer.ts

                // CONCATENATED MODULE: ../types/src/shell/type/component-action.ts

                // CONCATENATED MODULE: ../types/src/shell/type/preference-value-type.ts

                // CONCATENATED MODULE: ../types/src/shell/type/project-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/block-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/component-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/container-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/page-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/root-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/props-transducer.ts

                // CONCATENATED MODULE: ../types/src/shell/type/registered-setter.ts

                // CONCATENATED MODULE: ../types/src/shell/type/custom-view.ts

                // CONCATENATED MODULE: ../types/src/shell/type/widget-base-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/node-data.ts

                // CONCATENATED MODULE: ../types/src/shell/type/icon-type.ts

                // CONCATENATED MODULE: ../types/src/shell/type/transformed-component-metadata.ts

                // CONCATENATED MODULE: ../types/src/shell/type/i8n-data.ts

                // CONCATENATED MODULE: ../types/src/shell/type/npm-info.ts

                // CONCATENATED MODULE: ../types/src/shell/type/drag-node-data-object.ts

                // CONCATENATED MODULE: ../types/src/shell/type/drag-node-object.ts

                // CONCATENATED MODULE: ../types/src/shell/type/prop-change-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/drag-any-object.ts

                // CONCATENATED MODULE: ../types/src/shell/type/drag-object.ts

                // CONCATENATED MODULE: ../types/src/shell/type/composite-value.ts

                // CONCATENATED MODULE: ../types/src/shell/type/props-map.ts

                // CONCATENATED MODULE: ../types/src/shell/type/props-list.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin-declaration-property.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin-declaration.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin-meta.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin-creater.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin.ts

                // CONCATENATED MODULE: ../types/src/shell/type/setter-type.ts

                // CONCATENATED MODULE: ../types/src/shell/type/set-value-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/field-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/field-extra-props.ts

                // CONCATENATED MODULE: ../types/src/shell/type/component-sort.ts
                /**
                 * 用于描述组件面板中的 tab 和 category
                 */

                // CONCATENATED MODULE: ../types/src/shell/type/component-metadata.ts

                // CONCATENATED MODULE: ../types/src/shell/type/reference.ts

                // CONCATENATED MODULE: ../types/src/shell/type/component-description.ts

                // CONCATENATED MODULE: ../types/src/shell/type/remote-component-description.ts

                // CONCATENATED MODULE: ../types/src/shell/type/package.ts

                // CONCATENATED MODULE: ../types/src/shell/type/action-content-object.ts

                // CONCATENATED MODULE: ../types/src/shell/type/title-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/title-content.ts

                // CONCATENATED MODULE: ../types/src/shell/type/prop-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/prop-types.ts

                // CONCATENATED MODULE: ../types/src/shell/type/snippet.ts

                // CONCATENATED MODULE: ../types/src/shell/type/advanced.ts

                // CONCATENATED MODULE: ../types/src/shell/type/configure.ts

                // CONCATENATED MODULE: ../types/src/shell/type/value-type.ts

                // CONCATENATED MODULE: ../types/src/shell/type/tip-content.ts

                // CONCATENATED MODULE: ../types/src/shell/type/metadata.ts

                // CONCATENATED MODULE: ../types/src/shell/type/dynamic-setter.ts

                // CONCATENATED MODULE: ../types/src/shell/type/icon-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/dom-text.ts

                // CONCATENATED MODULE: ../types/src/shell/type/i18n-map.ts

                // CONCATENATED MODULE: ../types/src/shell/type/app-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/npm.ts

                // CONCATENATED MODULE: ../types/src/shell/type/dynamic-props.ts

                // CONCATENATED MODULE: ../types/src/shell/type/setter-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/tip-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/widget-config-area.ts

                // CONCATENATED MODULE: ../types/src/shell/type/hotkey-callback.ts

                // CONCATENATED MODULE: ../types/src/shell/type/plugin-register-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/resource-list.ts

                // CONCATENATED MODULE: ../types/src/shell/type/engine-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/on-change-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/slot-schema.ts

                // CONCATENATED MODULE: ../types/src/shell/type/node-data-type.ts

                // CONCATENATED MODULE: ../types/src/shell/type/node-instance.ts

                // CONCATENATED MODULE: ../types/src/shell/type/editor-value-key.ts

                // CONCATENATED MODULE: ../types/src/shell/type/editor-get-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/editor-get-result.ts

                // CONCATENATED MODULE: ../types/src/shell/type/editor-register-options.ts

                // CONCATENATED MODULE: ../types/src/shell/type/editor-view.ts

                // CONCATENATED MODULE: ../types/src/shell/type/resource-type.ts

                // CONCATENATED MODULE: ../types/src/shell/type/resource-type-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/editor-view-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/hotkey-callback-config.ts

                // CONCATENATED MODULE: ../types/src/shell/type/hotkey-callbacks.ts

                // CONCATENATED MODULE: ../types/src/shell/type/scrollable.ts

                // CONCATENATED MODULE: ../types/src/shell/type/simulator-renderer.ts

                // CONCATENATED MODULE: ../types/src/shell/type/config-transducer.ts

                // CONCATENATED MODULE: ../types/src/shell/type/context-menu.ts

                // CONCATENATED MODULE: ../types/src/shell/type/command.ts

                // CONCATENATED MODULE: ../types/src/shell/type/index.ts
                // this folder contains all interfaces/types working as type definition
                //   - some exists as type TypeName
                //   - some althought exists as interfaces , but there won`t be any class implements them.
                // all of above cases will with prefix IPublicType, eg. IPublicTypeSomeName

                // CONCATENATED MODULE: ../types/src/shell/api/common.ts

                // CONCATENATED MODULE: ../types/src/shell/api/event.ts

                // CONCATENATED MODULE: ../types/src/shell/api/hotkey.ts

                // CONCATENATED MODULE: ../types/src/shell/api/material.ts

                // CONCATENATED MODULE: ../types/src/shell/api/project.ts

                // CONCATENATED MODULE: ../types/src/shell/api/setters.ts

                // CONCATENATED MODULE: ../types/src/shell/api/simulator-host.ts

                // CONCATENATED MODULE: ../types/src/shell/api/skeleton.ts

                // CONCATENATED MODULE: ../types/src/shell/api/plugins.ts

                // CONCATENATED MODULE: ../types/src/shell/api/logger.ts

                // CONCATENATED MODULE: ../types/src/shell/api/canvas.ts

                // CONCATENATED MODULE: ../types/src/shell/api/workspace.ts

                // CONCATENATED MODULE: ../types/src/shell/api/commonUI.ts

                // CONCATENATED MODULE: ../types/src/shell/api/command.ts

                // CONCATENATED MODULE: ../types/src/shell/api/index.ts

                // CONCATENATED MODULE: ../types/src/shell/model/component-meta.ts

                // CONCATENATED MODULE: ../types/src/shell/model/detecting.ts

                // CONCATENATED MODULE: ../types/src/shell/model/document-model.ts

                // CONCATENATED MODULE: ../types/src/shell/model/drag-object.ts
                function _typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        _typeof(o)
                    );
                }
                function _defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, _toPropertyKey(o.key), o);
                    }
                }
                function _createClass(e, r, t) {
                    return (
                        r && _defineProperties(e.prototype, r),
                        t && _defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function _toPropertyKey(t) {
                    var i = _toPrimitive(t, 'string');
                    return 'symbol' == _typeof(i) ? i : i + '';
                }
                function _toPrimitive(t, r) {
                    if ('object' != _typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != _typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function _classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                var IPublicModelDragObject = /*#__PURE__*/ _createClass(function IPublicModelDragObject() {
                    _classCallCheck(this, IPublicModelDragObject);
                });
                // CONCATENATED MODULE: ../types/src/shell/model/dragon.ts

                // CONCATENATED MODULE: ../types/src/shell/model/drop-location.ts

                // CONCATENATED MODULE: ../types/src/shell/model/history.ts

                // CONCATENATED MODULE: ../types/src/shell/model/locate-event.ts

                // CONCATENATED MODULE: ../types/src/shell/model/modal-nodes-manager.ts

                // CONCATENATED MODULE: ../types/src/shell/model/node-children.ts

                // CONCATENATED MODULE: ../types/src/shell/model/node.ts

                // CONCATENATED MODULE: ../types/src/shell/model/prop.ts

                // CONCATENATED MODULE: ../types/src/shell/model/props.ts
                // CONCATENATED MODULE: ../types/src/shell/model/selection.ts

                // CONCATENATED MODULE: ../types/src/shell/model/setting-prop-entry.ts

                // CONCATENATED MODULE: ../types/src/shell/model/setting-top-entry.ts

                // CONCATENATED MODULE: ../types/src/shell/model/window.ts

                // CONCATENATED MODULE: ../types/src/shell/model/scroll-target.ts

                // CONCATENATED MODULE: ../types/src/shell/model/scroller.ts

                // CONCATENATED MODULE: ../types/src/shell/model/active-tracker.ts

                // CONCATENATED MODULE: ../types/src/shell/model/exclusive-group.ts

                // CONCATENATED MODULE: ../types/src/shell/model/plugin-context.ts

                // CONCATENATED MODULE: ../types/src/shell/model/setting-target.ts

                // CONCATENATED MODULE: ../types/src/shell/model/engine-config.ts

                // CONCATENATED MODULE: ../types/src/shell/model/editor.ts

                // CONCATENATED MODULE: ../types/src/shell/model/preference.ts

                // CONCATENATED MODULE: ../types/src/shell/model/plugin-instance.ts

                // CONCATENATED MODULE: ../types/src/shell/model/sensor.ts

                // CONCATENATED MODULE: ../types/src/shell/model/resource.ts

                // CONCATENATED MODULE: ../types/src/shell/model/clipboard.ts

                // CONCATENATED MODULE: ../types/src/shell/model/setting-field.ts

                // CONCATENATED MODULE: ../types/src/shell/model/editor-view.ts

                // CONCATENATED MODULE: ../types/src/shell/model/skeleton-item.ts

                // CONCATENATED MODULE: ../types/src/shell/model/simulator-render.ts

                // CONCATENATED MODULE: ../types/src/shell/model/index.ts

                // CONCATENATED MODULE: ../types/src/shell/enum/event-names.ts
                /**
                 * 所有公开可用的事件名定义
                 * All public event names
                 * names should be like 'namespace.modelName.whatHappened'
                 *
                 */
                // eslint-disable-next-line no-shadow
                var IPublicEnumEventNames;
                (function (IPublicEnumEventNames) {})(IPublicEnumEventNames || (IPublicEnumEventNames = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/transition-type.ts
                // eslint-disable-next-line no-shadow
                var IPublicEnumTransitionType;
                (function (IPublicEnumTransitionType) {
                    /** 节点更新后重绘处理 */
                    IPublicEnumTransitionType[(IPublicEnumTransitionType['REPAINT'] = 0)] = 'REPAINT';
                })(IPublicEnumTransitionType || (IPublicEnumTransitionType = {}));
                /**
                 * @deprecated use IPublicEnumTransitionType instead
                 */
                var TransitionType;
                (function (TransitionType) {
                    /** 节点更新后重绘处理 */
                    TransitionType[(TransitionType['REPAINT'] = 0)] = 'REPAINT';
                })(TransitionType || (TransitionType = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/transform-stage.ts
                var IPublicEnumTransformStage;
                (function (IPublicEnumTransformStage) {
                    IPublicEnumTransformStage['Render'] = 'render';
                    IPublicEnumTransformStage['Serilize'] = 'serilize';
                    IPublicEnumTransformStage['Save'] = 'save';
                    IPublicEnumTransformStage['Clone'] = 'clone';
                    IPublicEnumTransformStage['Init'] = 'init';
                    IPublicEnumTransformStage['Upgrade'] = 'upgrade';
                })(IPublicEnumTransformStage || (IPublicEnumTransformStage = {}));
                /**
                 * @deprecated use IPublicEnumTransformStage instead
                 */
                var TransformStage;
                (function (TransformStage) {
                    TransformStage['Render'] = 'render';
                    TransformStage['Serilize'] = 'serilize';
                    TransformStage['Save'] = 'save';
                    TransformStage['Clone'] = 'clone';
                    TransformStage['Init'] = 'init';
                    TransformStage['Upgrade'] = 'upgrade';
                })(TransformStage || (TransformStage = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/drag-object-type.ts
                // eslint-disable-next-line no-shadow
                var IPublicEnumDragObjectType;
                (function (IPublicEnumDragObjectType) {
                    // eslint-disable-next-line no-shadow
                    IPublicEnumDragObjectType['Node'] = 'node';
                    IPublicEnumDragObjectType['NodeData'] = 'nodedata';
                })(IPublicEnumDragObjectType || (IPublicEnumDragObjectType = {}));
                /**
                 * @deprecated use IPublicEnumDragObjectType instead
                 */
                var DragObjectType;
                (function (DragObjectType) {
                    DragObjectType['Node'] = 'node';
                    DragObjectType['NodeData'] = 'nodedata';
                })(DragObjectType || (DragObjectType = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/prop-value-changed-type.ts
                // eslint-disable-next-line no-shadow
                var IPublicEnumPropValueChangedType;
                (function (IPublicEnumPropValueChangedType) {
                    /**
                     * normal set value
                     */
                    IPublicEnumPropValueChangedType['SET_VALUE'] = 'SET_VALUE';
                    /**
                     * value changed caused by sub-prop value change
                     */
                    IPublicEnumPropValueChangedType['SUB_VALUE_CHANGE'] = 'SUB_VALUE_CHANGE';
                })(IPublicEnumPropValueChangedType || (IPublicEnumPropValueChangedType = {}));
                /**
                 * @deprecated please use IPublicEnumPropValueChangedType
                 */
                var PROP_VALUE_CHANGED_TYPE;
                (function (PROP_VALUE_CHANGED_TYPE) {
                    /**
                     * normal set value
                     */
                    PROP_VALUE_CHANGED_TYPE['SET_VALUE'] = 'SET_VALUE';
                    /**
                     * value changed caused by sub-prop value change
                     */
                    PROP_VALUE_CHANGED_TYPE['SUB_VALUE_CHANGE'] = 'SUB_VALUE_CHANGE';
                })(PROP_VALUE_CHANGED_TYPE || (PROP_VALUE_CHANGED_TYPE = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/plugin-register-level.ts
                var IPublicEnumPluginRegisterLevel;
                (function (IPublicEnumPluginRegisterLevel) {
                    IPublicEnumPluginRegisterLevel['Default'] = 'default';
                    IPublicEnumPluginRegisterLevel['Workspace'] = 'workspace';
                    IPublicEnumPluginRegisterLevel['Resource'] = 'resource';
                    IPublicEnumPluginRegisterLevel['EditorView'] = 'editorView';
                })(IPublicEnumPluginRegisterLevel || (IPublicEnumPluginRegisterLevel = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/context-menu.ts
                var IPublicEnumContextMenuType;
                (function (IPublicEnumContextMenuType) {
                    IPublicEnumContextMenuType['SEPARATOR'] = 'separator';
                    // 'menuItem'
                    IPublicEnumContextMenuType['MENU_ITEM'] = 'menuItem';
                    // 'nodeTree'
                    IPublicEnumContextMenuType['NODE_TREE'] = 'nodeTree';
                })(IPublicEnumContextMenuType || (IPublicEnumContextMenuType = {}));
                // CONCATENATED MODULE: ../types/src/shell/enum/index.ts

                // CONCATENATED MODULE: ../types/src/shell/index.ts

                // CONCATENATED MODULE: ../types/src/shell-model-factory.ts

                // CONCATENATED MODULE: ../types/src/deprecated/isActionContentObject.ts
                function isActionContentObject_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (isActionContentObject_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        isActionContentObject_typeof(o)
                    );
                }
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isActionContentObject(obj) {
                    return obj && isActionContentObject_typeof(obj) === 'object';
                }
                // EXTERNAL MODULE: external "window.React"
                var external_window_React_ = __webpack_require__(1);

                // CONCATENATED MODULE: ../types/src/deprecated/isReactClass.ts

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isReactClass(obj) {
                    return (
                        obj &&
                        obj.prototype &&
                        (obj.prototype.isReactComponent || obj.prototype instanceof external_window_React_['Component'])
                    );
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isReactComponent.ts

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isReactComponent(obj) {
                    return obj && (isReactClass(obj) || typeof obj === 'function');
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isCustomView.ts

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isCustomView(obj) {
                    return (
                        obj &&
                        /*#__PURE__*/ (Object(external_window_React_['isValidElement'])(obj) || isReactComponent(obj))
                    );
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isDOMText.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isDOMText(data) {
                    return typeof data === 'string';
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isDynamicSetter.ts

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isDynamicSetter(obj) {
                    return obj && typeof obj === 'function' && !isReactClass(obj);
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isI18nData.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isI18nData(obj) {
                    return obj && obj.type === 'i18n';
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isJSBlock.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isJSBlock(data) {
                    return data && data.type === 'JSBlock';
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isJSExpression.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isJSExpression(data) {
                    return data && data.type === 'JSExpression' && data.extType !== 'function';
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isJSFunction.ts
                function isJSFunction_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (isJSFunction_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        isJSFunction_typeof(o)
                    );
                }
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isJSFunction(x) {
                    return isJSFunction_typeof(x) === 'object' && x && x.type === 'JSFunction';
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isJSSlot.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isJSSlot(data) {
                    return data && data.type === 'JSSlot';
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isProCodeComponentType.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isProCodeComponentType(desc) {
                    return 'package' in desc;
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isLowCodeComponentType.ts

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isLowCodeComponentType(desc) {
                    return !isProCodeComponentType(desc);
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isNodeSchema.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isNodeSchema(data) {
                    return data && data.componentName;
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isPlainObject.ts
                function isPlainObject_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (isPlainObject_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        isPlainObject_typeof(o)
                    );
                }
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isPlainObject(value) {
                    if (isPlainObject_typeof(value) !== 'object') {
                        return false;
                    }
                    var proto = Object.getPrototypeOf(value);
                    return proto === Object.prototype || proto === null || Object.getPrototypeOf(proto) === null;
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isProjectSchema.ts
                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isProjectSchema(data) {
                    return data && data.componentsTree;
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isSetterConfig.ts
                function isSetterConfig_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (isSetterConfig_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        isSetterConfig_typeof(o)
                    );
                }

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isSetterConfig(obj) {
                    return (
                        obj && isSetterConfig_typeof(obj) === 'object' && 'componentName' in obj && !isCustomView(obj)
                    );
                }
                // CONCATENATED MODULE: ../types/src/deprecated/isTitleConfig.ts

                /**
                 * @deprecated use same function from '@alilc/lowcode-utils' instead
                 */
                function isTitleConfig(obj) {
                    return isPlainObject(obj) && !isI18nData(obj);
                }
                // CONCATENATED MODULE: ../types/src/deprecated/index.ts

                // CONCATENATED MODULE: ../types/src/index.ts

                // TODO: remove this in future versions

                /***/
            },
            /* 1 */
            /***/ function (module, exports) {
                module.exports = window.React;

                /***/
            },
            /* 2 */
            /***/ function (module, __webpack_exports__, __webpack_require__) {
                'use strict';
                __webpack_require__.r(__webpack_exports__);
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__extends', function () {
                    return __extends;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__assign', function () {
                    return __assign;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__rest', function () {
                    return __rest;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__decorate', function () {
                    return __decorate;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__param', function () {
                    return __param;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__esDecorate', function () {
                    return __esDecorate;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__runInitializers',
                    function () {
                        return __runInitializers;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__propKey', function () {
                    return __propKey;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__setFunctionName',
                    function () {
                        return __setFunctionName;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__metadata', function () {
                    return __metadata;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__awaiter', function () {
                    return __awaiter;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__generator', function () {
                    return __generator;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__createBinding',
                    function () {
                        return __createBinding;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__exportStar', function () {
                    return __exportStar;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__values', function () {
                    return __values;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__read', function () {
                    return __read;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__spread', function () {
                    return __spread;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__spreadArrays',
                    function () {
                        return __spreadArrays;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__spreadArray', function () {
                    return __spreadArray;
                });
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__await', function () {
                    return __await;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__asyncGenerator',
                    function () {
                        return __asyncGenerator;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__asyncDelegator',
                    function () {
                        return __asyncDelegator;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__asyncValues', function () {
                    return __asyncValues;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__makeTemplateObject',
                    function () {
                        return __makeTemplateObject;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__importStar', function () {
                    return __importStar;
                });
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__importDefault',
                    function () {
                        return __importDefault;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__classPrivateFieldGet',
                    function () {
                        return __classPrivateFieldGet;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__classPrivateFieldSet',
                    function () {
                        return __classPrivateFieldSet;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__classPrivateFieldIn',
                    function () {
                        return __classPrivateFieldIn;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__addDisposableResource',
                    function () {
                        return __addDisposableResource;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__disposeResources',
                    function () {
                        return __disposeResources;
                    },
                );
                /* harmony export (binding) */ __webpack_require__.d(
                    __webpack_exports__,
                    '__rewriteRelativeImportExtension',
                    function () {
                        return __rewriteRelativeImportExtension;
                    },
                );
                /******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
                /* global Reflect, Promise, SuppressedError, Symbol, Iterator */

                var extendStatics = function (d, b) {
                    extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                            function (d, b) {
                                d.__proto__ = b;
                            }) ||
                        function (d, b) {
                            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                        };
                    return extendStatics(d, b);
                };

                function __extends(d, b) {
                    if (typeof b !== 'function' && b !== null)
                        throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                    extendStatics(d, b);
                    function __() {
                        this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
                }

                var __assign = function () {
                    __assign =
                        Object.assign ||
                        function __assign(t) {
                            for (var s, i = 1, n = arguments.length; i < n; i++) {
                                s = arguments[i];
                                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                            }
                            return t;
                        };
                    return __assign.apply(this, arguments);
                };

                function __rest(s, e) {
                    var t = {};
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
                    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
                        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                                t[p[i]] = s[p[i]];
                        }
                    return t;
                }

                function __decorate(decorators, target, key, desc) {
                    var c = arguments.length,
                        r =
                            c < 3
                                ? target
                                : desc === null
                                ? (desc = Object.getOwnPropertyDescriptor(target, key))
                                : desc,
                        d;
                    if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
                        r = Reflect.decorate(decorators, target, key, desc);
                    else
                        for (var i = decorators.length - 1; i >= 0; i--)
                            if ((d = decorators[i]))
                                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                    return c > 3 && r && Object.defineProperty(target, key, r), r;
                }

                function __param(paramIndex, decorator) {
                    return function (target, key) {
                        decorator(target, key, paramIndex);
                    };
                }

                function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
                    function accept(f) {
                        if (f !== void 0 && typeof f !== 'function') throw new TypeError('Function expected');
                        return f;
                    }
                    var kind = contextIn.kind,
                        key = kind === 'getter' ? 'get' : kind === 'setter' ? 'set' : 'value';
                    var target = !descriptorIn && ctor ? (contextIn['static'] ? ctor : ctor.prototype) : null;
                    var descriptor =
                        descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
                    var _,
                        done = false;
                    for (var i = decorators.length - 1; i >= 0; i--) {
                        var context = {};
                        for (var p in contextIn) context[p] = p === 'access' ? {} : contextIn[p];
                        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
                        context.addInitializer = function (f) {
                            if (done) throw new TypeError('Cannot add initializers after decoration has completed');
                            extraInitializers.push(accept(f || null));
                        };
                        var result = (0, decorators[i])(
                            kind === 'accessor' ? { get: descriptor.get, set: descriptor.set } : descriptor[key],
                            context,
                        );
                        if (kind === 'accessor') {
                            if (result === void 0) continue;
                            if (result === null || typeof result !== 'object') throw new TypeError('Object expected');
                            if ((_ = accept(result.get))) descriptor.get = _;
                            if ((_ = accept(result.set))) descriptor.set = _;
                            if ((_ = accept(result.init))) initializers.unshift(_);
                        } else if ((_ = accept(result))) {
                            if (kind === 'field') initializers.unshift(_);
                            else descriptor[key] = _;
                        }
                    }
                    if (target) Object.defineProperty(target, contextIn.name, descriptor);
                    done = true;
                }

                function __runInitializers(thisArg, initializers, value) {
                    var useValue = arguments.length > 2;
                    for (var i = 0; i < initializers.length; i++) {
                        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
                    }
                    return useValue ? value : void 0;
                }

                function __propKey(x) {
                    return typeof x === 'symbol' ? x : ''.concat(x);
                }

                function __setFunctionName(f, name, prefix) {
                    if (typeof name === 'symbol') name = name.description ? '['.concat(name.description, ']') : '';
                    return Object.defineProperty(f, 'name', {
                        configurable: true,
                        value: prefix ? ''.concat(prefix, ' ', name) : name,
                    });
                }

                function __metadata(metadataKey, metadataValue) {
                    if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
                        return Reflect.metadata(metadataKey, metadataValue);
                }

                function __awaiter(thisArg, _arguments, P, generator) {
                    function adopt(value) {
                        return value instanceof P
                            ? value
                            : new P(function (resolve) {
                                  resolve(value);
                              });
                    }
                    return new (P || (P = Promise))(function (resolve, reject) {
                        function fulfilled(value) {
                            try {
                                step(generator.next(value));
                            } catch (e) {
                                reject(e);
                            }
                        }
                        function rejected(value) {
                            try {
                                step(generator['throw'](value));
                            } catch (e) {
                                reject(e);
                            }
                        }
                        function step(result) {
                            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                        }
                        step((generator = generator.apply(thisArg, _arguments || [])).next());
                    });
                }

                function __generator(thisArg, body) {
                    var _ = {
                            label: 0,
                            sent: function () {
                                if (t[0] & 1) throw t[1];
                                return t[1];
                            },
                            trys: [],
                            ops: [],
                        },
                        f,
                        y,
                        t,
                        g = Object.create((typeof Iterator === 'function' ? Iterator : Object).prototype);
                    return (
                        (g.next = verb(0)),
                        (g['throw'] = verb(1)),
                        (g['return'] = verb(2)),
                        typeof Symbol === 'function' &&
                            (g[Symbol.iterator] = function () {
                                return this;
                            }),
                        g
                    );
                    function verb(n) {
                        return function (v) {
                            return step([n, v]);
                        };
                    }
                    function step(op) {
                        if (f) throw new TypeError('Generator is already executing.');
                        while ((g && ((g = 0), op[0] && (_ = 0)), _))
                            try {
                                if (
                                    ((f = 1),
                                    y &&
                                        (t =
                                            op[0] & 2
                                                ? y['return']
                                                : op[0]
                                                ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                                                : y.next) &&
                                        !(t = t.call(y, op[1])).done)
                                )
                                    return t;
                                if (((y = 0), t)) op = [op[0] & 2, t.value];
                                switch (op[0]) {
                                    case 0:
                                    case 1:
                                        t = op;
                                        break;
                                    case 4:
                                        _.label++;
                                        return { value: op[1], done: false };
                                    case 5:
                                        _.label++;
                                        y = op[1];
                                        op = [0];
                                        continue;
                                    case 7:
                                        op = _.ops.pop();
                                        _.trys.pop();
                                        continue;
                                    default:
                                        if (
                                            !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                                            (op[0] === 6 || op[0] === 2)
                                        ) {
                                            _ = 0;
                                            continue;
                                        }
                                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                            _.label = op[1];
                                            break;
                                        }
                                        if (op[0] === 6 && _.label < t[1]) {
                                            _.label = t[1];
                                            t = op;
                                            break;
                                        }
                                        if (t && _.label < t[2]) {
                                            _.label = t[2];
                                            _.ops.push(op);
                                            break;
                                        }
                                        if (t[2]) _.ops.pop();
                                        _.trys.pop();
                                        continue;
                                }
                                op = body.call(thisArg, _);
                            } catch (e) {
                                op = [6, e];
                                y = 0;
                            } finally {
                                f = t = 0;
                            }
                        if (op[0] & 5) throw op[1];
                        return { value: op[0] ? op[1] : void 0, done: true };
                    }
                }

                var __createBinding = Object.create
                    ? function (o, m, k, k2) {
                          if (k2 === undefined) k2 = k;
                          var desc = Object.getOwnPropertyDescriptor(m, k);
                          if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                              desc = {
                                  enumerable: true,
                                  get: function () {
                                      return m[k];
                                  },
                              };
                          }
                          Object.defineProperty(o, k2, desc);
                      }
                    : function (o, m, k, k2) {
                          if (k2 === undefined) k2 = k;
                          o[k2] = m[k];
                      };

                function __exportStar(m, o) {
                    for (var p in m)
                        if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
                }

                function __values(o) {
                    var s = typeof Symbol === 'function' && Symbol.iterator,
                        m = s && o[s],
                        i = 0;
                    if (m) return m.call(o);
                    if (o && typeof o.length === 'number')
                        return {
                            next: function () {
                                if (o && i >= o.length) o = void 0;
                                return { value: o && o[i++], done: !o };
                            },
                        };
                    throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
                }

                function __read(o, n) {
                    var m = typeof Symbol === 'function' && o[Symbol.iterator];
                    if (!m) return o;
                    var i = m.call(o),
                        r,
                        ar = [],
                        e;
                    try {
                        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                    } catch (error) {
                        e = { error: error };
                    } finally {
                        try {
                            if (r && !r.done && (m = i['return'])) m.call(i);
                        } finally {
                            if (e) throw e.error;
                        }
                    }
                    return ar;
                }

                /** @deprecated */
                function __spread() {
                    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
                    return ar;
                }

                /** @deprecated */
                function __spreadArrays() {
                    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
                    for (var r = Array(s), k = 0, i = 0; i < il; i++)
                        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
                    return r;
                }

                function __spreadArray(to, from, pack) {
                    if (pack || arguments.length === 2)
                        for (var i = 0, l = from.length, ar; i < l; i++) {
                            if (ar || !(i in from)) {
                                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                ar[i] = from[i];
                            }
                        }
                    return to.concat(ar || Array.prototype.slice.call(from));
                }

                function __await(v) {
                    return this instanceof __await ? ((this.v = v), this) : new __await(v);
                }

                function __asyncGenerator(thisArg, _arguments, generator) {
                    if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
                    var g = generator.apply(thisArg, _arguments || []),
                        i,
                        q = [];
                    return (
                        (i = Object.create((typeof AsyncIterator === 'function' ? AsyncIterator : Object).prototype)),
                        verb('next'),
                        verb('throw'),
                        verb('return', awaitReturn),
                        (i[Symbol.asyncIterator] = function () {
                            return this;
                        }),
                        i
                    );
                    function awaitReturn(f) {
                        return function (v) {
                            return Promise.resolve(v).then(f, reject);
                        };
                    }
                    function verb(n, f) {
                        if (g[n]) {
                            i[n] = function (v) {
                                return new Promise(function (a, b) {
                                    q.push([n, v, a, b]) > 1 || resume(n, v);
                                });
                            };
                            if (f) i[n] = f(i[n]);
                        }
                    }
                    function resume(n, v) {
                        try {
                            step(g[n](v));
                        } catch (e) {
                            settle(q[0][3], e);
                        }
                    }
                    function step(r) {
                        r.value instanceof __await
                            ? Promise.resolve(r.value.v).then(fulfill, reject)
                            : settle(q[0][2], r);
                    }
                    function fulfill(value) {
                        resume('next', value);
                    }
                    function reject(value) {
                        resume('throw', value);
                    }
                    function settle(f, v) {
                        if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
                    }
                }

                function __asyncDelegator(o) {
                    var i, p;
                    return (
                        (i = {}),
                        verb('next'),
                        verb('throw', function (e) {
                            throw e;
                        }),
                        verb('return'),
                        (i[Symbol.iterator] = function () {
                            return this;
                        }),
                        i
                    );
                    function verb(n, f) {
                        i[n] = o[n]
                            ? function (v) {
                                  return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
                              }
                            : f;
                    }
                }

                function __asyncValues(o) {
                    if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
                    var m = o[Symbol.asyncIterator],
                        i;
                    return m
                        ? m.call(o)
                        : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
                          (i = {}),
                          verb('next'),
                          verb('throw'),
                          verb('return'),
                          (i[Symbol.asyncIterator] = function () {
                              return this;
                          }),
                          i);
                    function verb(n) {
                        i[n] =
                            o[n] &&
                            function (v) {
                                return new Promise(function (resolve, reject) {
                                    (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                                });
                            };
                    }
                    function settle(resolve, reject, d, v) {
                        Promise.resolve(v).then(function (v) {
                            resolve({ value: v, done: d });
                        }, reject);
                    }
                }

                function __makeTemplateObject(cooked, raw) {
                    if (Object.defineProperty) {
                        Object.defineProperty(cooked, 'raw', { value: raw });
                    } else {
                        cooked.raw = raw;
                    }
                    return cooked;
                }

                var __setModuleDefault = Object.create
                    ? function (o, v) {
                          Object.defineProperty(o, 'default', { enumerable: true, value: v });
                      }
                    : function (o, v) {
                          o['default'] = v;
                      };

                var ownKeys = function (o) {
                    ownKeys =
                        Object.getOwnPropertyNames ||
                        function (o) {
                            var ar = [];
                            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
                            return ar;
                        };
                    return ownKeys(o);
                };

                function __importStar(mod) {
                    if (mod && mod.__esModule) return mod;
                    var result = {};
                    if (mod != null)
                        for (var k = ownKeys(mod), i = 0; i < k.length; i++)
                            if (k[i] !== 'default') __createBinding(result, mod, k[i]);
                    __setModuleDefault(result, mod);
                    return result;
                }

                function __importDefault(mod) {
                    return mod && mod.__esModule ? mod : { default: mod };
                }

                function __classPrivateFieldGet(receiver, state, kind, f) {
                    if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
                    if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
                        throw new TypeError('Cannot read private member from an object whose class did not declare it');
                    return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
                }

                function __classPrivateFieldSet(receiver, state, value, kind, f) {
                    if (kind === 'm') throw new TypeError('Private method is not writable');
                    if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
                    if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
                        throw new TypeError('Cannot write private member to an object whose class did not declare it');
                    return (
                        kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value),
                        value
                    );
                }

                function __classPrivateFieldIn(state, receiver) {
                    if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
                        throw new TypeError("Cannot use 'in' operator on non-object");
                    return typeof state === 'function' ? receiver === state : state.has(receiver);
                }

                function __addDisposableResource(env, value, async) {
                    if (value !== null && value !== void 0) {
                        if (typeof value !== 'object' && typeof value !== 'function')
                            throw new TypeError('Object expected.');
                        var dispose, inner;
                        if (async) {
                            if (!Symbol.asyncDispose) throw new TypeError('Symbol.asyncDispose is not defined.');
                            dispose = value[Symbol.asyncDispose];
                        }
                        if (dispose === void 0) {
                            if (!Symbol.dispose) throw new TypeError('Symbol.dispose is not defined.');
                            dispose = value[Symbol.dispose];
                            if (async) inner = dispose;
                        }
                        if (typeof dispose !== 'function') throw new TypeError('Object not disposable.');
                        if (inner)
                            dispose = function () {
                                try {
                                    inner.call(this);
                                } catch (e) {
                                    return Promise.reject(e);
                                }
                            };
                        env.stack.push({ value: value, dispose: dispose, async: async });
                    } else if (async) {
                        env.stack.push({ async: true });
                    }
                    return value;
                }

                var _SuppressedError =
                    typeof SuppressedError === 'function'
                        ? SuppressedError
                        : function (error, suppressed, message) {
                              var e = new Error(message);
                              return (e.name = 'SuppressedError'), (e.error = error), (e.suppressed = suppressed), e;
                          };

                function __disposeResources(env) {
                    function fail(e) {
                        env.error = env.hasError
                            ? new _SuppressedError(e, env.error, 'An error was suppressed during disposal.')
                            : e;
                        env.hasError = true;
                    }
                    var r,
                        s = 0;
                    function next() {
                        while ((r = env.stack.pop())) {
                            try {
                                if (!r.async && s === 1)
                                    return (s = 0), env.stack.push(r), Promise.resolve().then(next);
                                if (r.dispose) {
                                    var result = r.dispose.call(r.value);
                                    if (r.async)
                                        return (
                                            (s |= 2),
                                            Promise.resolve(result).then(next, function (e) {
                                                fail(e);
                                                return next();
                                            })
                                        );
                                } else s |= 1;
                            } catch (e) {
                                fail(e);
                            }
                        }
                        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
                        if (env.hasError) throw env.error;
                    }
                    return next();
                }

                function __rewriteRelativeImportExtension(path, preserveJsx) {
                    if (typeof path === 'string' && /^\.\.?\//.test(path)) {
                        return path.replace(
                            /\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,
                            function (m, tsx, d, ext, cm) {
                                return tsx
                                    ? preserveJsx
                                        ? '.jsx'
                                        : '.js'
                                    : d && (!ext || !cm)
                                    ? m
                                    : d + ext + '.' + cm.toLowerCase() + 'js';
                            },
                        );
                    }
                    return path;
                }

                /* harmony default export */ __webpack_exports__['default'] = {
                    __extends: __extends,
                    __assign: __assign,
                    __rest: __rest,
                    __decorate: __decorate,
                    __param: __param,
                    __esDecorate: __esDecorate,
                    __runInitializers: __runInitializers,
                    __propKey: __propKey,
                    __setFunctionName: __setFunctionName,
                    __metadata: __metadata,
                    __awaiter: __awaiter,
                    __generator: __generator,
                    __createBinding: __createBinding,
                    __exportStar: __exportStar,
                    __values: __values,
                    __read: __read,
                    __spread: __spread,
                    __spreadArrays: __spreadArrays,
                    __spreadArray: __spreadArray,
                    __await: __await,
                    __asyncGenerator: __asyncGenerator,
                    __asyncDelegator: __asyncDelegator,
                    __asyncValues: __asyncValues,
                    __makeTemplateObject: __makeTemplateObject,
                    __importStar: __importStar,
                    __importDefault: __importDefault,
                    __classPrivateFieldGet: __classPrivateFieldGet,
                    __classPrivateFieldSet: __classPrivateFieldSet,
                    __classPrivateFieldIn: __classPrivateFieldIn,
                    __addDisposableResource: __addDisposableResource,
                    __disposeResources: __disposeResources,
                    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,
                };

                /***/
            },
            /* 3 */
            /***/ function (module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function (global, module) {
                    var __WEBPACK_AMD_DEFINE_RESULT__;
                    /**
                     * @license
                     * Lodash <https://lodash.com/>
                     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
                     * Released under MIT license <https://lodash.com/license>
                     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                     */
                    (function () {
                        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                        var undefined;

                        /** Used as the semantic version number. */
                        var VERSION = '4.17.21';

                        /** Used as the size to enable large array optimizations. */
                        var LARGE_ARRAY_SIZE = 200;

                        /** Error message constants. */
                        var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                            FUNC_ERROR_TEXT = 'Expected a function',
                            INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

                        /** Used to stand-in for `undefined` hash values. */
                        var HASH_UNDEFINED = '__lodash_hash_undefined__';

                        /** Used as the maximum memoize cache size. */
                        var MAX_MEMOIZE_SIZE = 500;

                        /** Used as the internal argument placeholder. */
                        var PLACEHOLDER = '__lodash_placeholder__';

                        /** Used to compose bitmasks for cloning. */
                        var CLONE_DEEP_FLAG = 1,
                            CLONE_FLAT_FLAG = 2,
                            CLONE_SYMBOLS_FLAG = 4;

                        /** Used to compose bitmasks for value comparisons. */
                        var COMPARE_PARTIAL_FLAG = 1,
                            COMPARE_UNORDERED_FLAG = 2;

                        /** Used to compose bitmasks for function metadata. */
                        var WRAP_BIND_FLAG = 1,
                            WRAP_BIND_KEY_FLAG = 2,
                            WRAP_CURRY_BOUND_FLAG = 4,
                            WRAP_CURRY_FLAG = 8,
                            WRAP_CURRY_RIGHT_FLAG = 16,
                            WRAP_PARTIAL_FLAG = 32,
                            WRAP_PARTIAL_RIGHT_FLAG = 64,
                            WRAP_ARY_FLAG = 128,
                            WRAP_REARG_FLAG = 256,
                            WRAP_FLIP_FLAG = 512;

                        /** Used as default options for `_.truncate`. */
                        var DEFAULT_TRUNC_LENGTH = 30,
                            DEFAULT_TRUNC_OMISSION = '...';

                        /** Used to detect hot functions by number of calls within a span of milliseconds. */
                        var HOT_COUNT = 800,
                            HOT_SPAN = 16;

                        /** Used to indicate the type of lazy iteratees. */
                        var LAZY_FILTER_FLAG = 1,
                            LAZY_MAP_FLAG = 2,
                            LAZY_WHILE_FLAG = 3;

                        /** Used as references for various `Number` constants. */
                        var INFINITY = 1 / 0,
                            MAX_SAFE_INTEGER = 9007199254740991,
                            MAX_INTEGER = 1.7976931348623157e308,
                            NAN = 0 / 0;

                        /** Used as references for the maximum length and index of an array. */
                        var MAX_ARRAY_LENGTH = 4294967295,
                            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

                        /** Used to associate wrap methods with their bit flags. */
                        var wrapFlags = [
                            ['ary', WRAP_ARY_FLAG],
                            ['bind', WRAP_BIND_FLAG],
                            ['bindKey', WRAP_BIND_KEY_FLAG],
                            ['curry', WRAP_CURRY_FLAG],
                            ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                            ['flip', WRAP_FLIP_FLAG],
                            ['partial', WRAP_PARTIAL_FLAG],
                            ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                            ['rearg', WRAP_REARG_FLAG],
                        ];

                        /** `Object#toString` result references. */
                        var argsTag = '[object Arguments]',
                            arrayTag = '[object Array]',
                            asyncTag = '[object AsyncFunction]',
                            boolTag = '[object Boolean]',
                            dateTag = '[object Date]',
                            domExcTag = '[object DOMException]',
                            errorTag = '[object Error]',
                            funcTag = '[object Function]',
                            genTag = '[object GeneratorFunction]',
                            mapTag = '[object Map]',
                            numberTag = '[object Number]',
                            nullTag = '[object Null]',
                            objectTag = '[object Object]',
                            promiseTag = '[object Promise]',
                            proxyTag = '[object Proxy]',
                            regexpTag = '[object RegExp]',
                            setTag = '[object Set]',
                            stringTag = '[object String]',
                            symbolTag = '[object Symbol]',
                            undefinedTag = '[object Undefined]',
                            weakMapTag = '[object WeakMap]',
                            weakSetTag = '[object WeakSet]';

                        var arrayBufferTag = '[object ArrayBuffer]',
                            dataViewTag = '[object DataView]',
                            float32Tag = '[object Float32Array]',
                            float64Tag = '[object Float64Array]',
                            int8Tag = '[object Int8Array]',
                            int16Tag = '[object Int16Array]',
                            int32Tag = '[object Int32Array]',
                            uint8Tag = '[object Uint8Array]',
                            uint8ClampedTag = '[object Uint8ClampedArray]',
                            uint16Tag = '[object Uint16Array]',
                            uint32Tag = '[object Uint32Array]';

                        /** Used to match empty string literals in compiled template source. */
                        var reEmptyStringLeading = /\b__p \+= '';/g,
                            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

                        /** Used to match HTML entities and HTML characters. */
                        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                            reUnescapedHtml = /[&<>"']/g,
                            reHasEscapedHtml = RegExp(reEscapedHtml.source),
                            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

                        /** Used to match template delimiters. */
                        var reEscape = /<%-([\s\S]+?)%>/g,
                            reEvaluate = /<%([\s\S]+?)%>/g,
                            reInterpolate = /<%=([\s\S]+?)%>/g;

                        /** Used to match property names within property paths. */
                        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                            reIsPlainProp = /^\w*$/,
                            rePropName =
                                /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

                        /**
                         * Used to match `RegExp`
                         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                         */
                        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                            reHasRegExpChar = RegExp(reRegExpChar.source);

                        /** Used to match leading whitespace. */
                        var reTrimStart = /^\s+/;

                        /** Used to match a single whitespace character. */
                        var reWhitespace = /\s/;

                        /** Used to match wrap detail comments. */
                        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                            reSplitDetails = /,? & /;

                        /** Used to match words composed of alphanumeric characters. */
                        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

                        /**
                         * Used to validate the `validate` option in `_.template` variable.
                         *
                         * Forbids characters which could potentially change the meaning of the function argument definition:
                         * - "()," (modification of function parameters)
                         * - "=" (default value)
                         * - "[]{}" (destructuring of function parameters)
                         * - "/" (beginning of a comment)
                         * - whitespace
                         */
                        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

                        /** Used to match backslashes in property paths. */
                        var reEscapeChar = /\\(\\)?/g;

                        /**
                         * Used to match
                         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
                         */
                        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

                        /** Used to match `RegExp` flags from their coerced string values. */
                        var reFlags = /\w*$/;

                        /** Used to detect bad signed hexadecimal string values. */
                        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

                        /** Used to detect binary string values. */
                        var reIsBinary = /^0b[01]+$/i;

                        /** Used to detect host constructors (Safari). */
                        var reIsHostCtor = /^\[object .+?Constructor\]$/;

                        /** Used to detect octal string values. */
                        var reIsOctal = /^0o[0-7]+$/i;

                        /** Used to detect unsigned integer values. */
                        var reIsUint = /^(?:0|[1-9]\d*)$/;

                        /** Used to match Latin Unicode letters (excluding mathematical operators). */
                        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

                        /** Used to ensure capturing order of template delimiters. */
                        var reNoMatch = /($^)/;

                        /** Used to match unescaped characters in compiled string literals. */
                        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

                        /** Used to compose unicode character classes. */
                        var rsAstralRange = '\\ud800-\\udfff',
                            rsComboMarksRange = '\\u0300-\\u036f',
                            reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                            rsComboSymbolsRange = '\\u20d0-\\u20ff',
                            rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                            rsDingbatRange = '\\u2700-\\u27bf',
                            rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                            rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                            rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                            rsPunctuationRange = '\\u2000-\\u206f',
                            rsSpaceRange =
                                ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                            rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                            rsVarRange = '\\ufe0e\\ufe0f',
                            rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

                        /** Used to compose unicode capture groups. */
                        var rsApos = "['\u2019]",
                            rsAstral = '[' + rsAstralRange + ']',
                            rsBreak = '[' + rsBreakRange + ']',
                            rsCombo = '[' + rsComboRange + ']',
                            rsDigits = '\\d+',
                            rsDingbat = '[' + rsDingbatRange + ']',
                            rsLower = '[' + rsLowerRange + ']',
                            rsMisc =
                                '[^' +
                                rsAstralRange +
                                rsBreakRange +
                                rsDigits +
                                rsDingbatRange +
                                rsLowerRange +
                                rsUpperRange +
                                ']',
                            rsFitz = '\\ud83c[\\udffb-\\udfff]',
                            rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                            rsNonAstral = '[^' + rsAstralRange + ']',
                            rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                            rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                            rsUpper = '[' + rsUpperRange + ']',
                            rsZWJ = '\\u200d';

                        /** Used to compose unicode regexes. */
                        var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                            rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                            rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                            rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                            reOptMod = rsModifier + '?',
                            rsOptVar = '[' + rsVarRange + ']?',
                            rsOptJoin =
                                '(?:' +
                                rsZWJ +
                                '(?:' +
                                [rsNonAstral, rsRegional, rsSurrPair].join('|') +
                                ')' +
                                rsOptVar +
                                reOptMod +
                                ')*',
                            rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
                            rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
                            rsSeq = rsOptVar + reOptMod + rsOptJoin,
                            rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                            rsSymbol =
                                '(?:' +
                                [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') +
                                ')';

                        /** Used to match apostrophes. */
                        var reApos = RegExp(rsApos, 'g');

                        /**
                         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                         */
                        var reComboMark = RegExp(rsCombo, 'g');

                        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
                        var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

                        /** Used to match complex or compound words. */
                        var reUnicodeWord = RegExp(
                            [
                                rsUpper +
                                    '?' +
                                    rsLower +
                                    '+' +
                                    rsOptContrLower +
                                    '(?=' +
                                    [rsBreak, rsUpper, '$'].join('|') +
                                    ')',
                                rsMiscUpper +
                                    '+' +
                                    rsOptContrUpper +
                                    '(?=' +
                                    [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
                                    ')',
                                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                                rsUpper + '+' + rsOptContrUpper,
                                rsOrdUpper,
                                rsOrdLower,
                                rsDigits,
                                rsEmoji,
                            ].join('|'),
                            'g',
                        );

                        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
                        var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

                        /** Used to detect strings that need a more robust regexp to match words. */
                        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

                        /** Used to assign default `context` object properties. */
                        var contextProps = [
                            'Array',
                            'Buffer',
                            'DataView',
                            'Date',
                            'Error',
                            'Float32Array',
                            'Float64Array',
                            'Function',
                            'Int8Array',
                            'Int16Array',
                            'Int32Array',
                            'Map',
                            'Math',
                            'Object',
                            'Promise',
                            'RegExp',
                            'Set',
                            'String',
                            'Symbol',
                            'TypeError',
                            'Uint8Array',
                            'Uint8ClampedArray',
                            'Uint16Array',
                            'Uint32Array',
                            'WeakMap',
                            '_',
                            'clearTimeout',
                            'isFinite',
                            'parseInt',
                            'setTimeout',
                        ];

                        /** Used to make template sourceURLs easier to identify. */
                        var templateCounter = -1;

                        /** Used to identify `toStringTag` values of typed arrays. */
                        var typedArrayTags = {};
                        typedArrayTags[float32Tag] =
                            typedArrayTags[float64Tag] =
                            typedArrayTags[int8Tag] =
                            typedArrayTags[int16Tag] =
                            typedArrayTags[int32Tag] =
                            typedArrayTags[uint8Tag] =
                            typedArrayTags[uint8ClampedTag] =
                            typedArrayTags[uint16Tag] =
                            typedArrayTags[uint32Tag] =
                                true;
                        typedArrayTags[argsTag] =
                            typedArrayTags[arrayTag] =
                            typedArrayTags[arrayBufferTag] =
                            typedArrayTags[boolTag] =
                            typedArrayTags[dataViewTag] =
                            typedArrayTags[dateTag] =
                            typedArrayTags[errorTag] =
                            typedArrayTags[funcTag] =
                            typedArrayTags[mapTag] =
                            typedArrayTags[numberTag] =
                            typedArrayTags[objectTag] =
                            typedArrayTags[regexpTag] =
                            typedArrayTags[setTag] =
                            typedArrayTags[stringTag] =
                            typedArrayTags[weakMapTag] =
                                false;

                        /** Used to identify `toStringTag` values supported by `_.clone`. */
                        var cloneableTags = {};
                        cloneableTags[argsTag] =
                            cloneableTags[arrayTag] =
                            cloneableTags[arrayBufferTag] =
                            cloneableTags[dataViewTag] =
                            cloneableTags[boolTag] =
                            cloneableTags[dateTag] =
                            cloneableTags[float32Tag] =
                            cloneableTags[float64Tag] =
                            cloneableTags[int8Tag] =
                            cloneableTags[int16Tag] =
                            cloneableTags[int32Tag] =
                            cloneableTags[mapTag] =
                            cloneableTags[numberTag] =
                            cloneableTags[objectTag] =
                            cloneableTags[regexpTag] =
                            cloneableTags[setTag] =
                            cloneableTags[stringTag] =
                            cloneableTags[symbolTag] =
                            cloneableTags[uint8Tag] =
                            cloneableTags[uint8ClampedTag] =
                            cloneableTags[uint16Tag] =
                            cloneableTags[uint32Tag] =
                                true;
                        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

                        /** Used to map Latin Unicode letters to basic Latin letters. */
                        var deburredLetters = {
                            // Latin-1 Supplement block.
                            '\xc0': 'A',
                            '\xc1': 'A',
                            '\xc2': 'A',
                            '\xc3': 'A',
                            '\xc4': 'A',
                            '\xc5': 'A',
                            '\xe0': 'a',
                            '\xe1': 'a',
                            '\xe2': 'a',
                            '\xe3': 'a',
                            '\xe4': 'a',
                            '\xe5': 'a',
                            '\xc7': 'C',
                            '\xe7': 'c',
                            '\xd0': 'D',
                            '\xf0': 'd',
                            '\xc8': 'E',
                            '\xc9': 'E',
                            '\xca': 'E',
                            '\xcb': 'E',
                            '\xe8': 'e',
                            '\xe9': 'e',
                            '\xea': 'e',
                            '\xeb': 'e',
                            '\xcc': 'I',
                            '\xcd': 'I',
                            '\xce': 'I',
                            '\xcf': 'I',
                            '\xec': 'i',
                            '\xed': 'i',
                            '\xee': 'i',
                            '\xef': 'i',
                            '\xd1': 'N',
                            '\xf1': 'n',
                            '\xd2': 'O',
                            '\xd3': 'O',
                            '\xd4': 'O',
                            '\xd5': 'O',
                            '\xd6': 'O',
                            '\xd8': 'O',
                            '\xf2': 'o',
                            '\xf3': 'o',
                            '\xf4': 'o',
                            '\xf5': 'o',
                            '\xf6': 'o',
                            '\xf8': 'o',
                            '\xd9': 'U',
                            '\xda': 'U',
                            '\xdb': 'U',
                            '\xdc': 'U',
                            '\xf9': 'u',
                            '\xfa': 'u',
                            '\xfb': 'u',
                            '\xfc': 'u',
                            '\xdd': 'Y',
                            '\xfd': 'y',
                            '\xff': 'y',
                            '\xc6': 'Ae',
                            '\xe6': 'ae',
                            '\xde': 'Th',
                            '\xfe': 'th',
                            '\xdf': 'ss',
                            // Latin Extended-A block.
                            '\u0100': 'A',
                            '\u0102': 'A',
                            '\u0104': 'A',
                            '\u0101': 'a',
                            '\u0103': 'a',
                            '\u0105': 'a',
                            '\u0106': 'C',
                            '\u0108': 'C',
                            '\u010a': 'C',
                            '\u010c': 'C',
                            '\u0107': 'c',
                            '\u0109': 'c',
                            '\u010b': 'c',
                            '\u010d': 'c',
                            '\u010e': 'D',
                            '\u0110': 'D',
                            '\u010f': 'd',
                            '\u0111': 'd',
                            '\u0112': 'E',
                            '\u0114': 'E',
                            '\u0116': 'E',
                            '\u0118': 'E',
                            '\u011a': 'E',
                            '\u0113': 'e',
                            '\u0115': 'e',
                            '\u0117': 'e',
                            '\u0119': 'e',
                            '\u011b': 'e',
                            '\u011c': 'G',
                            '\u011e': 'G',
                            '\u0120': 'G',
                            '\u0122': 'G',
                            '\u011d': 'g',
                            '\u011f': 'g',
                            '\u0121': 'g',
                            '\u0123': 'g',
                            '\u0124': 'H',
                            '\u0126': 'H',
                            '\u0125': 'h',
                            '\u0127': 'h',
                            '\u0128': 'I',
                            '\u012a': 'I',
                            '\u012c': 'I',
                            '\u012e': 'I',
                            '\u0130': 'I',
                            '\u0129': 'i',
                            '\u012b': 'i',
                            '\u012d': 'i',
                            '\u012f': 'i',
                            '\u0131': 'i',
                            '\u0134': 'J',
                            '\u0135': 'j',
                            '\u0136': 'K',
                            '\u0137': 'k',
                            '\u0138': 'k',
                            '\u0139': 'L',
                            '\u013b': 'L',
                            '\u013d': 'L',
                            '\u013f': 'L',
                            '\u0141': 'L',
                            '\u013a': 'l',
                            '\u013c': 'l',
                            '\u013e': 'l',
                            '\u0140': 'l',
                            '\u0142': 'l',
                            '\u0143': 'N',
                            '\u0145': 'N',
                            '\u0147': 'N',
                            '\u014a': 'N',
                            '\u0144': 'n',
                            '\u0146': 'n',
                            '\u0148': 'n',
                            '\u014b': 'n',
                            '\u014c': 'O',
                            '\u014e': 'O',
                            '\u0150': 'O',
                            '\u014d': 'o',
                            '\u014f': 'o',
                            '\u0151': 'o',
                            '\u0154': 'R',
                            '\u0156': 'R',
                            '\u0158': 'R',
                            '\u0155': 'r',
                            '\u0157': 'r',
                            '\u0159': 'r',
                            '\u015a': 'S',
                            '\u015c': 'S',
                            '\u015e': 'S',
                            '\u0160': 'S',
                            '\u015b': 's',
                            '\u015d': 's',
                            '\u015f': 's',
                            '\u0161': 's',
                            '\u0162': 'T',
                            '\u0164': 'T',
                            '\u0166': 'T',
                            '\u0163': 't',
                            '\u0165': 't',
                            '\u0167': 't',
                            '\u0168': 'U',
                            '\u016a': 'U',
                            '\u016c': 'U',
                            '\u016e': 'U',
                            '\u0170': 'U',
                            '\u0172': 'U',
                            '\u0169': 'u',
                            '\u016b': 'u',
                            '\u016d': 'u',
                            '\u016f': 'u',
                            '\u0171': 'u',
                            '\u0173': 'u',
                            '\u0174': 'W',
                            '\u0175': 'w',
                            '\u0176': 'Y',
                            '\u0177': 'y',
                            '\u0178': 'Y',
                            '\u0179': 'Z',
                            '\u017b': 'Z',
                            '\u017d': 'Z',
                            '\u017a': 'z',
                            '\u017c': 'z',
                            '\u017e': 'z',
                            '\u0132': 'IJ',
                            '\u0133': 'ij',
                            '\u0152': 'Oe',
                            '\u0153': 'oe',
                            '\u0149': "'n",
                            '\u017f': 's',
                        };

                        /** Used to map characters to HTML entities. */
                        var htmlEscapes = {
                            '&': '&amp;',
                            '<': '&lt;',
                            '>': '&gt;',
                            '"': '&quot;',
                            "'": '&#39;',
                        };

                        /** Used to map HTML entities to characters. */
                        var htmlUnescapes = {
                            '&amp;': '&',
                            '&lt;': '<',
                            '&gt;': '>',
                            '&quot;': '"',
                            '&#39;': "'",
                        };

                        /** Used to escape characters for inclusion in compiled string literals. */
                        var stringEscapes = {
                            '\\': '\\',
                            "'": "'",
                            '\n': 'n',
                            '\r': 'r',
                            '\u2028': 'u2028',
                            '\u2029': 'u2029',
                        };

                        /** Built-in method references without a dependency on `root`. */
                        var freeParseFloat = parseFloat,
                            freeParseInt = parseInt;

                        /** Detect free variable `global` from Node.js. */
                        var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                        /** Detect free variable `self`. */
                        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

                        /** Used as a reference to the global object. */
                        var root = freeGlobal || freeSelf || Function('return this')();

                        /** Detect free variable `exports`. */
                        var freeExports = true && exports && !exports.nodeType && exports;

                        /** Detect free variable `module`. */
                        var freeModule =
                            freeExports && typeof module == 'object' && module && !module.nodeType && module;

                        /** Detect the popular CommonJS extension `module.exports`. */
                        var moduleExports = freeModule && freeModule.exports === freeExports;

                        /** Detect free variable `process` from Node.js. */
                        var freeProcess = moduleExports && freeGlobal.process;

                        /** Used to access faster Node.js helpers. */
                        var nodeUtil = (function () {
                            try {
                                // Use `util.types` for Node.js 10+.
                                var types = freeModule && freeModule.require && freeModule.require('util').types;

                                if (types) {
                                    return types;
                                }

                                // Legacy `process.binding('util')` for Node.js < 10.
                                return freeProcess && freeProcess.binding && freeProcess.binding('util');
                            } catch (e) {}
                        })();

                        /* Node.js helper references. */
                        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                            nodeIsDate = nodeUtil && nodeUtil.isDate,
                            nodeIsMap = nodeUtil && nodeUtil.isMap,
                            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                            nodeIsSet = nodeUtil && nodeUtil.isSet,
                            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                        /*--------------------------------------------------------------------------*/

                        /**
                         * A faster alternative to `Function#apply`, this function invokes `func`
                         * with the `this` binding of `thisArg` and the arguments of `args`.
                         *
                         * @private
                         * @param {Function} func The function to invoke.
                         * @param {*} thisArg The `this` binding of `func`.
                         * @param {Array} args The arguments to invoke `func` with.
                         * @returns {*} Returns the result of `func`.
                         */
                        function apply(func, thisArg, args) {
                            switch (args.length) {
                                case 0:
                                    return func.call(thisArg);
                                case 1:
                                    return func.call(thisArg, args[0]);
                                case 2:
                                    return func.call(thisArg, args[0], args[1]);
                                case 3:
                                    return func.call(thisArg, args[0], args[1], args[2]);
                            }
                            return func.apply(thisArg, args);
                        }

                        /**
                         * A specialized version of `baseAggregator` for arrays.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} setter The function to set `accumulator` values.
                         * @param {Function} iteratee The iteratee to transform keys.
                         * @param {Object} accumulator The initial aggregated object.
                         * @returns {Function} Returns `accumulator`.
                         */
                        function arrayAggregator(array, setter, iteratee, accumulator) {
                            var index = -1,
                                length = array == null ? 0 : array.length;

                            while (++index < length) {
                                var value = array[index];
                                setter(accumulator, value, iteratee(value), array);
                            }
                            return accumulator;
                        }

                        /**
                         * A specialized version of `_.forEach` for arrays without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array} Returns `array`.
                         */
                        function arrayEach(array, iteratee) {
                            var index = -1,
                                length = array == null ? 0 : array.length;

                            while (++index < length) {
                                if (iteratee(array[index], index, array) === false) {
                                    break;
                                }
                            }
                            return array;
                        }

                        /**
                         * A specialized version of `_.forEachRight` for arrays without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array} Returns `array`.
                         */
                        function arrayEachRight(array, iteratee) {
                            var length = array == null ? 0 : array.length;

                            while (length--) {
                                if (iteratee(array[length], length, array) === false) {
                                    break;
                                }
                            }
                            return array;
                        }

                        /**
                         * A specialized version of `_.every` for arrays without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {boolean} Returns `true` if all elements pass the predicate check,
                         *  else `false`.
                         */
                        function arrayEvery(array, predicate) {
                            var index = -1,
                                length = array == null ? 0 : array.length;

                            while (++index < length) {
                                if (!predicate(array[index], index, array)) {
                                    return false;
                                }
                            }
                            return true;
                        }

                        /**
                         * A specialized version of `_.filter` for arrays without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         */
                        function arrayFilter(array, predicate) {
                            var index = -1,
                                length = array == null ? 0 : array.length,
                                resIndex = 0,
                                result = [];

                            while (++index < length) {
                                var value = array[index];
                                if (predicate(value, index, array)) {
                                    result[resIndex++] = value;
                                }
                            }
                            return result;
                        }

                        /**
                         * A specialized version of `_.includes` for arrays without support for
                         * specifying an index to search from.
                         *
                         * @private
                         * @param {Array} [array] The array to inspect.
                         * @param {*} target The value to search for.
                         * @returns {boolean} Returns `true` if `target` is found, else `false`.
                         */
                        function arrayIncludes(array, value) {
                            var length = array == null ? 0 : array.length;
                            return !!length && baseIndexOf(array, value, 0) > -1;
                        }

                        /**
                         * This function is like `arrayIncludes` except that it accepts a comparator.
                         *
                         * @private
                         * @param {Array} [array] The array to inspect.
                         * @param {*} target The value to search for.
                         * @param {Function} comparator The comparator invoked per element.
                         * @returns {boolean} Returns `true` if `target` is found, else `false`.
                         */
                        function arrayIncludesWith(array, value, comparator) {
                            var index = -1,
                                length = array == null ? 0 : array.length;

                            while (++index < length) {
                                if (comparator(value, array[index])) {
                                    return true;
                                }
                            }
                            return false;
                        }

                        /**
                         * A specialized version of `_.map` for arrays without support for iteratee
                         * shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array} Returns the new mapped array.
                         */
                        function arrayMap(array, iteratee) {
                            var index = -1,
                                length = array == null ? 0 : array.length,
                                result = Array(length);

                            while (++index < length) {
                                result[index] = iteratee(array[index], index, array);
                            }
                            return result;
                        }

                        /**
                         * Appends the elements of `values` to `array`.
                         *
                         * @private
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to append.
                         * @returns {Array} Returns `array`.
                         */
                        function arrayPush(array, values) {
                            var index = -1,
                                length = values.length,
                                offset = array.length;

                            while (++index < length) {
                                array[offset + index] = values[index];
                            }
                            return array;
                        }

                        /**
                         * A specialized version of `_.reduce` for arrays without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {*} [accumulator] The initial value.
                         * @param {boolean} [initAccum] Specify using the first element of `array` as
                         *  the initial value.
                         * @returns {*} Returns the accumulated value.
                         */
                        function arrayReduce(array, iteratee, accumulator, initAccum) {
                            var index = -1,
                                length = array == null ? 0 : array.length;

                            if (initAccum && length) {
                                accumulator = array[++index];
                            }
                            while (++index < length) {
                                accumulator = iteratee(accumulator, array[index], index, array);
                            }
                            return accumulator;
                        }

                        /**
                         * A specialized version of `_.reduceRight` for arrays without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {*} [accumulator] The initial value.
                         * @param {boolean} [initAccum] Specify using the last element of `array` as
                         *  the initial value.
                         * @returns {*} Returns the accumulated value.
                         */
                        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                            var length = array == null ? 0 : array.length;
                            if (initAccum && length) {
                                accumulator = array[--length];
                            }
                            while (length--) {
                                accumulator = iteratee(accumulator, array[length], length, array);
                            }
                            return accumulator;
                        }

                        /**
                         * A specialized version of `_.some` for arrays without support for iteratee
                         * shorthands.
                         *
                         * @private
                         * @param {Array} [array] The array to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {boolean} Returns `true` if any element passes the predicate check,
                         *  else `false`.
                         */
                        function arraySome(array, predicate) {
                            var index = -1,
                                length = array == null ? 0 : array.length;

                            while (++index < length) {
                                if (predicate(array[index], index, array)) {
                                    return true;
                                }
                            }
                            return false;
                        }

                        /**
                         * Gets the size of an ASCII `string`.
                         *
                         * @private
                         * @param {string} string The string inspect.
                         * @returns {number} Returns the string size.
                         */
                        var asciiSize = baseProperty('length');

                        /**
                         * Converts an ASCII `string` to an array.
                         *
                         * @private
                         * @param {string} string The string to convert.
                         * @returns {Array} Returns the converted array.
                         */
                        function asciiToArray(string) {
                            return string.split('');
                        }

                        /**
                         * Splits an ASCII `string` into an array of its words.
                         *
                         * @private
                         * @param {string} The string to inspect.
                         * @returns {Array} Returns the words of `string`.
                         */
                        function asciiWords(string) {
                            return string.match(reAsciiWord) || [];
                        }

                        /**
                         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
                         * without support for iteratee shorthands, which iterates over `collection`
                         * using `eachFunc`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to inspect.
                         * @param {Function} predicate The function invoked per iteration.
                         * @param {Function} eachFunc The function to iterate over `collection`.
                         * @returns {*} Returns the found element or its key, else `undefined`.
                         */
                        function baseFindKey(collection, predicate, eachFunc) {
                            var result;
                            eachFunc(collection, function (value, key, collection) {
                                if (predicate(value, key, collection)) {
                                    result = key;
                                    return false;
                                }
                            });
                            return result;
                        }

                        /**
                         * The base implementation of `_.findIndex` and `_.findLastIndex` without
                         * support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Function} predicate The function invoked per iteration.
                         * @param {number} fromIndex The index to search from.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function baseFindIndex(array, predicate, fromIndex, fromRight) {
                            var length = array.length,
                                index = fromIndex + (fromRight ? 1 : -1);

                            while (fromRight ? index-- : ++index < length) {
                                if (predicate(array[index], index, array)) {
                                    return index;
                                }
                            }
                            return -1;
                        }

                        /**
                         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} fromIndex The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function baseIndexOf(array, value, fromIndex) {
                            return value === value
                                ? strictIndexOf(array, value, fromIndex)
                                : baseFindIndex(array, baseIsNaN, fromIndex);
                        }

                        /**
                         * This function is like `baseIndexOf` except that it accepts a comparator.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} fromIndex The index to search from.
                         * @param {Function} comparator The comparator invoked per element.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function baseIndexOfWith(array, value, fromIndex, comparator) {
                            var index = fromIndex - 1,
                                length = array.length;

                            while (++index < length) {
                                if (comparator(array[index], value)) {
                                    return index;
                                }
                            }
                            return -1;
                        }

                        /**
                         * The base implementation of `_.isNaN` without support for number objects.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                         */
                        function baseIsNaN(value) {
                            return value !== value;
                        }

                        /**
                         * The base implementation of `_.mean` and `_.meanBy` without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {number} Returns the mean.
                         */
                        function baseMean(array, iteratee) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseSum(array, iteratee) / length : NAN;
                        }

                        /**
                         * The base implementation of `_.property` without support for deep paths.
                         *
                         * @private
                         * @param {string} key The key of the property to get.
                         * @returns {Function} Returns the new accessor function.
                         */
                        function baseProperty(key) {
                            return function (object) {
                                return object == null ? undefined : object[key];
                            };
                        }

                        /**
                         * The base implementation of `_.propertyOf` without support for deep paths.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Function} Returns the new accessor function.
                         */
                        function basePropertyOf(object) {
                            return function (key) {
                                return object == null ? undefined : object[key];
                            };
                        }

                        /**
                         * The base implementation of `_.reduce` and `_.reduceRight`, without support
                         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {*} accumulator The initial value.
                         * @param {boolean} initAccum Specify using the first or last element of
                         *  `collection` as the initial value.
                         * @param {Function} eachFunc The function to iterate over `collection`.
                         * @returns {*} Returns the accumulated value.
                         */
                        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                            eachFunc(collection, function (value, index, collection) {
                                accumulator = initAccum
                                    ? ((initAccum = false), value)
                                    : iteratee(accumulator, value, index, collection);
                            });
                            return accumulator;
                        }

                        /**
                         * The base implementation of `_.sortBy` which uses `comparer` to define the
                         * sort order of `array` and replaces criteria objects with their corresponding
                         * values.
                         *
                         * @private
                         * @param {Array} array The array to sort.
                         * @param {Function} comparer The function to define sort order.
                         * @returns {Array} Returns `array`.
                         */
                        function baseSortBy(array, comparer) {
                            var length = array.length;

                            array.sort(comparer);
                            while (length--) {
                                array[length] = array[length].value;
                            }
                            return array;
                        }

                        /**
                         * The base implementation of `_.sum` and `_.sumBy` without support for
                         * iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {number} Returns the sum.
                         */
                        function baseSum(array, iteratee) {
                            var result,
                                index = -1,
                                length = array.length;

                            while (++index < length) {
                                var current = iteratee(array[index]);
                                if (current !== undefined) {
                                    result = result === undefined ? current : result + current;
                                }
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.times` without support for iteratee shorthands
                         * or max array length checks.
                         *
                         * @private
                         * @param {number} n The number of times to invoke `iteratee`.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array} Returns the array of results.
                         */
                        function baseTimes(n, iteratee) {
                            var index = -1,
                                result = Array(n);

                            while (++index < n) {
                                result[index] = iteratee(index);
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
                         * of key-value pairs for `object` corresponding to the property names of `props`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array} props The property names to get values for.
                         * @returns {Object} Returns the key-value pairs.
                         */
                        function baseToPairs(object, props) {
                            return arrayMap(props, function (key) {
                                return [key, object[key]];
                            });
                        }

                        /**
                         * The base implementation of `_.trim`.
                         *
                         * @private
                         * @param {string} string The string to trim.
                         * @returns {string} Returns the trimmed string.
                         */
                        function baseTrim(string) {
                            return string
                                ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
                                : string;
                        }

                        /**
                         * The base implementation of `_.unary` without support for storing metadata.
                         *
                         * @private
                         * @param {Function} func The function to cap arguments for.
                         * @returns {Function} Returns the new capped function.
                         */
                        function baseUnary(func) {
                            return function (value) {
                                return func(value);
                            };
                        }

                        /**
                         * The base implementation of `_.values` and `_.valuesIn` which creates an
                         * array of `object` property values corresponding to the property names
                         * of `props`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array} props The property names to get values for.
                         * @returns {Object} Returns the array of property values.
                         */
                        function baseValues(object, props) {
                            return arrayMap(props, function (key) {
                                return object[key];
                            });
                        }

                        /**
                         * Checks if a `cache` value for `key` exists.
                         *
                         * @private
                         * @param {Object} cache The cache to query.
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function cacheHas(cache, key) {
                            return cache.has(key);
                        }

                        /**
                         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
                         * that is not found in the character symbols.
                         *
                         * @private
                         * @param {Array} strSymbols The string symbols to inspect.
                         * @param {Array} chrSymbols The character symbols to find.
                         * @returns {number} Returns the index of the first unmatched string symbol.
                         */
                        function charsStartIndex(strSymbols, chrSymbols) {
                            var index = -1,
                                length = strSymbols.length;

                            while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                            return index;
                        }

                        /**
                         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
                         * that is not found in the character symbols.
                         *
                         * @private
                         * @param {Array} strSymbols The string symbols to inspect.
                         * @param {Array} chrSymbols The character symbols to find.
                         * @returns {number} Returns the index of the last unmatched string symbol.
                         */
                        function charsEndIndex(strSymbols, chrSymbols) {
                            var index = strSymbols.length;

                            while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                            return index;
                        }

                        /**
                         * Gets the number of `placeholder` occurrences in `array`.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} placeholder The placeholder to search for.
                         * @returns {number} Returns the placeholder count.
                         */
                        function countHolders(array, placeholder) {
                            var length = array.length,
                                result = 0;

                            while (length--) {
                                if (array[length] === placeholder) {
                                    ++result;
                                }
                            }
                            return result;
                        }

                        /**
                         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
                         * letters to basic Latin letters.
                         *
                         * @private
                         * @param {string} letter The matched letter to deburr.
                         * @returns {string} Returns the deburred letter.
                         */
                        var deburrLetter = basePropertyOf(deburredLetters);

                        /**
                         * Used by `_.escape` to convert characters to HTML entities.
                         *
                         * @private
                         * @param {string} chr The matched character to escape.
                         * @returns {string} Returns the escaped character.
                         */
                        var escapeHtmlChar = basePropertyOf(htmlEscapes);

                        /**
                         * Used by `_.template` to escape characters for inclusion in compiled string literals.
                         *
                         * @private
                         * @param {string} chr The matched character to escape.
                         * @returns {string} Returns the escaped character.
                         */
                        function escapeStringChar(chr) {
                            return '\\' + stringEscapes[chr];
                        }

                        /**
                         * Gets the value at `key` of `object`.
                         *
                         * @private
                         * @param {Object} [object] The object to query.
                         * @param {string} key The key of the property to get.
                         * @returns {*} Returns the property value.
                         */
                        function getValue(object, key) {
                            return object == null ? undefined : object[key];
                        }

                        /**
                         * Checks if `string` contains Unicode symbols.
                         *
                         * @private
                         * @param {string} string The string to inspect.
                         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
                         */
                        function hasUnicode(string) {
                            return reHasUnicode.test(string);
                        }

                        /**
                         * Checks if `string` contains a word composed of Unicode symbols.
                         *
                         * @private
                         * @param {string} string The string to inspect.
                         * @returns {boolean} Returns `true` if a word is found, else `false`.
                         */
                        function hasUnicodeWord(string) {
                            return reHasUnicodeWord.test(string);
                        }

                        /**
                         * Converts `iterator` to an array.
                         *
                         * @private
                         * @param {Object} iterator The iterator to convert.
                         * @returns {Array} Returns the converted array.
                         */
                        function iteratorToArray(iterator) {
                            var data,
                                result = [];

                            while (!(data = iterator.next()).done) {
                                result.push(data.value);
                            }
                            return result;
                        }

                        /**
                         * Converts `map` to its key-value pairs.
                         *
                         * @private
                         * @param {Object} map The map to convert.
                         * @returns {Array} Returns the key-value pairs.
                         */
                        function mapToArray(map) {
                            var index = -1,
                                result = Array(map.size);

                            map.forEach(function (value, key) {
                                result[++index] = [key, value];
                            });
                            return result;
                        }

                        /**
                         * Creates a unary function that invokes `func` with its argument transformed.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {Function} transform The argument transform.
                         * @returns {Function} Returns the new function.
                         */
                        function overArg(func, transform) {
                            return function (arg) {
                                return func(transform(arg));
                            };
                        }

                        /**
                         * Replaces all `placeholder` elements in `array` with an internal placeholder
                         * and returns an array of their indexes.
                         *
                         * @private
                         * @param {Array} array The array to modify.
                         * @param {*} placeholder The placeholder to replace.
                         * @returns {Array} Returns the new array of placeholder indexes.
                         */
                        function replaceHolders(array, placeholder) {
                            var index = -1,
                                length = array.length,
                                resIndex = 0,
                                result = [];

                            while (++index < length) {
                                var value = array[index];
                                if (value === placeholder || value === PLACEHOLDER) {
                                    array[index] = PLACEHOLDER;
                                    result[resIndex++] = index;
                                }
                            }
                            return result;
                        }

                        /**
                         * Converts `set` to an array of its values.
                         *
                         * @private
                         * @param {Object} set The set to convert.
                         * @returns {Array} Returns the values.
                         */
                        function setToArray(set) {
                            var index = -1,
                                result = Array(set.size);

                            set.forEach(function (value) {
                                result[++index] = value;
                            });
                            return result;
                        }

                        /**
                         * Converts `set` to its value-value pairs.
                         *
                         * @private
                         * @param {Object} set The set to convert.
                         * @returns {Array} Returns the value-value pairs.
                         */
                        function setToPairs(set) {
                            var index = -1,
                                result = Array(set.size);

                            set.forEach(function (value) {
                                result[++index] = [value, value];
                            });
                            return result;
                        }

                        /**
                         * A specialized version of `_.indexOf` which performs strict equality
                         * comparisons of values, i.e. `===`.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} fromIndex The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function strictIndexOf(array, value, fromIndex) {
                            var index = fromIndex - 1,
                                length = array.length;

                            while (++index < length) {
                                if (array[index] === value) {
                                    return index;
                                }
                            }
                            return -1;
                        }

                        /**
                         * A specialized version of `_.lastIndexOf` which performs strict equality
                         * comparisons of values, i.e. `===`.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} fromIndex The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function strictLastIndexOf(array, value, fromIndex) {
                            var index = fromIndex + 1;
                            while (index--) {
                                if (array[index] === value) {
                                    return index;
                                }
                            }
                            return index;
                        }

                        /**
                         * Gets the number of symbols in `string`.
                         *
                         * @private
                         * @param {string} string The string to inspect.
                         * @returns {number} Returns the string size.
                         */
                        function stringSize(string) {
                            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
                        }

                        /**
                         * Converts `string` to an array.
                         *
                         * @private
                         * @param {string} string The string to convert.
                         * @returns {Array} Returns the converted array.
                         */
                        function stringToArray(string) {
                            return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
                        }

                        /**
                         * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
                         * character of `string`.
                         *
                         * @private
                         * @param {string} string The string to inspect.
                         * @returns {number} Returns the index of the last non-whitespace character.
                         */
                        function trimmedEndIndex(string) {
                            var index = string.length;

                            while (index-- && reWhitespace.test(string.charAt(index))) {}
                            return index;
                        }

                        /**
                         * Used by `_.unescape` to convert HTML entities to characters.
                         *
                         * @private
                         * @param {string} chr The matched character to unescape.
                         * @returns {string} Returns the unescaped character.
                         */
                        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

                        /**
                         * Gets the size of a Unicode `string`.
                         *
                         * @private
                         * @param {string} string The string inspect.
                         * @returns {number} Returns the string size.
                         */
                        function unicodeSize(string) {
                            var result = (reUnicode.lastIndex = 0);
                            while (reUnicode.test(string)) {
                                ++result;
                            }
                            return result;
                        }

                        /**
                         * Converts a Unicode `string` to an array.
                         *
                         * @private
                         * @param {string} string The string to convert.
                         * @returns {Array} Returns the converted array.
                         */
                        function unicodeToArray(string) {
                            return string.match(reUnicode) || [];
                        }

                        /**
                         * Splits a Unicode `string` into an array of its words.
                         *
                         * @private
                         * @param {string} The string to inspect.
                         * @returns {Array} Returns the words of `string`.
                         */
                        function unicodeWords(string) {
                            return string.match(reUnicodeWord) || [];
                        }

                        /*--------------------------------------------------------------------------*/

                        /**
                         * Create a new pristine `lodash` function using the `context` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category Util
                         * @param {Object} [context=root] The context object.
                         * @returns {Function} Returns a new `lodash` function.
                         * @example
                         *
                         * _.mixin({ 'foo': _.constant('foo') });
                         *
                         * var lodash = _.runInContext();
                         * lodash.mixin({ 'bar': lodash.constant('bar') });
                         *
                         * _.isFunction(_.foo);
                         * // => true
                         * _.isFunction(_.bar);
                         * // => false
                         *
                         * lodash.isFunction(lodash.foo);
                         * // => false
                         * lodash.isFunction(lodash.bar);
                         * // => true
                         *
                         * // Create a suped-up `defer` in Node.js.
                         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
                         */
                        var runInContext = function runInContext(context) {
                            context =
                                context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                            /** Built-in constructor references. */
                            var Array = context.Array,
                                Date = context.Date,
                                Error = context.Error,
                                Function = context.Function,
                                Math = context.Math,
                                Object = context.Object,
                                RegExp = context.RegExp,
                                String = context.String,
                                TypeError = context.TypeError;

                            /** Used for built-in method references. */
                            var arrayProto = Array.prototype,
                                funcProto = Function.prototype,
                                objectProto = Object.prototype;

                            /** Used to detect overreaching core-js shims. */
                            var coreJsData = context['__core-js_shared__'];

                            /** Used to resolve the decompiled source of functions. */
                            var funcToString = funcProto.toString;

                            /** Used to check objects for own properties. */
                            var hasOwnProperty = objectProto.hasOwnProperty;

                            /** Used to generate unique IDs. */
                            var idCounter = 0;

                            /** Used to detect methods masquerading as native. */
                            var maskSrcKey = (function () {
                                var uid = /[^.]+$/.exec(
                                    (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '',
                                );
                                return uid ? 'Symbol(src)_1.' + uid : '';
                            })();

                            /**
                             * Used to resolve the
                             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                             * of values.
                             */
                            var nativeObjectToString = objectProto.toString;

                            /** Used to infer the `Object` constructor. */
                            var objectCtorString = funcToString.call(Object);

                            /** Used to restore the original `_` reference in `_.noConflict`. */
                            var oldDash = root._;

                            /** Used to detect if a method is native. */
                            var reIsNative = RegExp(
                                '^' +
                                    funcToString
                                        .call(hasOwnProperty)
                                        .replace(reRegExpChar, '\\$&')
                                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                                    '$',
                            );

                            /** Built-in value references. */
                            var Buffer = moduleExports ? context.Buffer : undefined,
                                Symbol = context.Symbol,
                                Uint8Array = context.Uint8Array,
                                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                                getPrototype = overArg(Object.getPrototypeOf, Object),
                                objectCreate = Object.create,
                                propertyIsEnumerable = objectProto.propertyIsEnumerable,
                                splice = arrayProto.splice,
                                spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                                symIterator = Symbol ? Symbol.iterator : undefined,
                                symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                            var defineProperty = (function () {
                                try {
                                    var func = getNative(Object, 'defineProperty');
                                    func({}, '', {});
                                    return func;
                                } catch (e) {}
                            })();

                            /** Mocked built-ins. */
                            var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                                ctxNow = Date && Date.now !== root.Date.now && Date.now,
                                ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                            /* Built-in method references for those with the same name as other `lodash` methods. */
                            var nativeCeil = Math.ceil,
                                nativeFloor = Math.floor,
                                nativeGetSymbols = Object.getOwnPropertySymbols,
                                nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                                nativeIsFinite = context.isFinite,
                                nativeJoin = arrayProto.join,
                                nativeKeys = overArg(Object.keys, Object),
                                nativeMax = Math.max,
                                nativeMin = Math.min,
                                nativeNow = Date.now,
                                nativeParseInt = context.parseInt,
                                nativeRandom = Math.random,
                                nativeReverse = arrayProto.reverse;

                            /* Built-in method references that are verified to be native. */
                            var DataView = getNative(context, 'DataView'),
                                Map = getNative(context, 'Map'),
                                Promise = getNative(context, 'Promise'),
                                Set = getNative(context, 'Set'),
                                WeakMap = getNative(context, 'WeakMap'),
                                nativeCreate = getNative(Object, 'create');

                            /** Used to store function metadata. */
                            var metaMap = WeakMap && new WeakMap();

                            /** Used to lookup unminified function names. */
                            var realNames = {};

                            /** Used to detect maps, sets, and weakmaps. */
                            var dataViewCtorString = toSource(DataView),
                                mapCtorString = toSource(Map),
                                promiseCtorString = toSource(Promise),
                                setCtorString = toSource(Set),
                                weakMapCtorString = toSource(WeakMap);

                            /** Used to convert symbols to primitives and strings. */
                            var symbolProto = Symbol ? Symbol.prototype : undefined,
                                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                                symbolToString = symbolProto ? symbolProto.toString : undefined;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates a `lodash` object which wraps `value` to enable implicit method
                             * chain sequences. Methods that operate on and return arrays, collections,
                             * and functions can be chained together. Methods that retrieve a single value
                             * or may return a primitive value will automatically end the chain sequence
                             * and return the unwrapped value. Otherwise, the value must be unwrapped
                             * with `_#value`.
                             *
                             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                             * enabled using `_.chain`.
                             *
                             * The execution of chained methods is lazy, that is, it's deferred until
                             * `_#value` is implicitly or explicitly called.
                             *
                             * Lazy evaluation allows several methods to support shortcut fusion.
                             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                             * the creation of intermediate arrays and can greatly reduce the number of
                             * iteratee executions. Sections of a chain sequence qualify for shortcut
                             * fusion if the section is applied to an array and iteratees accept only
                             * one argument. The heuristic for whether a section qualifies for shortcut
                             * fusion is subject to change.
                             *
                             * Chaining is supported in custom builds as long as the `_#value` method is
                             * directly or indirectly included in the build.
                             *
                             * In addition to lodash methods, wrappers have `Array` and `String` methods.
                             *
                             * The wrapper `Array` methods are:
                             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                             *
                             * The wrapper `String` methods are:
                             * `replace` and `split`
                             *
                             * The wrapper methods that support shortcut fusion are:
                             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                             *
                             * The chainable wrapper methods are:
                             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                             * `zipObject`, `zipObjectDeep`, and `zipWith`
                             *
                             * The wrapper methods that are **not** chainable by default are:
                             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                             * `upperFirst`, `value`, and `words`
                             *
                             * @name _
                             * @constructor
                             * @category Seq
                             * @param {*} value The value to wrap in a `lodash` instance.
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * function square(n) {
                             *   return n * n;
                             * }
                             *
                             * var wrapped = _([1, 2, 3]);
                             *
                             * // Returns an unwrapped value.
                             * wrapped.reduce(_.add);
                             * // => 6
                             *
                             * // Returns a wrapped value.
                             * var squares = wrapped.map(square);
                             *
                             * _.isArray(squares);
                             * // => false
                             *
                             * _.isArray(squares.value());
                             * // => true
                             */
                            function lodash(value) {
                                if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                                    if (value instanceof LodashWrapper) {
                                        return value;
                                    }
                                    if (hasOwnProperty.call(value, '__wrapped__')) {
                                        return wrapperClone(value);
                                    }
                                }
                                return new LodashWrapper(value);
                            }

                            /**
                             * The base implementation of `_.create` without support for assigning
                             * properties to the created object.
                             *
                             * @private
                             * @param {Object} proto The object to inherit from.
                             * @returns {Object} Returns the new object.
                             */
                            var baseCreate = (function () {
                                function object() {}
                                return function (proto) {
                                    if (!isObject(proto)) {
                                        return {};
                                    }
                                    if (objectCreate) {
                                        return objectCreate(proto);
                                    }
                                    object.prototype = proto;
                                    var result = new object();
                                    object.prototype = undefined;
                                    return result;
                                };
                            })();

                            /**
                             * The function whose prototype chain sequence wrappers inherit from.
                             *
                             * @private
                             */
                            function baseLodash() {
                                // No operation performed.
                            }

                            /**
                             * The base constructor for creating `lodash` wrapper objects.
                             *
                             * @private
                             * @param {*} value The value to wrap.
                             * @param {boolean} [chainAll] Enable explicit method chain sequences.
                             */
                            function LodashWrapper(value, chainAll) {
                                this.__wrapped__ = value;
                                this.__actions__ = [];
                                this.__chain__ = !!chainAll;
                                this.__index__ = 0;
                                this.__values__ = undefined;
                            }

                            /**
                             * By default, the template delimiters used by lodash are like those in
                             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                             * following template settings to use alternative delimiters.
                             *
                             * @static
                             * @memberOf _
                             * @type {Object}
                             */
                            lodash.templateSettings = {
                                /**
                                 * Used to detect `data` property values to be HTML-escaped.
                                 *
                                 * @memberOf _.templateSettings
                                 * @type {RegExp}
                                 */
                                escape: reEscape,

                                /**
                                 * Used to detect code to be evaluated.
                                 *
                                 * @memberOf _.templateSettings
                                 * @type {RegExp}
                                 */
                                evaluate: reEvaluate,

                                /**
                                 * Used to detect `data` property values to inject.
                                 *
                                 * @memberOf _.templateSettings
                                 * @type {RegExp}
                                 */
                                interpolate: reInterpolate,

                                /**
                                 * Used to reference the data object in the template text.
                                 *
                                 * @memberOf _.templateSettings
                                 * @type {string}
                                 */
                                variable: '',

                                /**
                                 * Used to import variables into the compiled template.
                                 *
                                 * @memberOf _.templateSettings
                                 * @type {Object}
                                 */
                                imports: {
                                    /**
                                     * A reference to the `lodash` function.
                                     *
                                     * @memberOf _.templateSettings.imports
                                     * @type {Function}
                                     */
                                    _: lodash,
                                },
                            };

                            // Ensure wrappers are instances of `baseLodash`.
                            lodash.prototype = baseLodash.prototype;
                            lodash.prototype.constructor = lodash;

                            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                            LodashWrapper.prototype.constructor = LodashWrapper;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                             *
                             * @private
                             * @constructor
                             * @param {*} value The value to wrap.
                             */
                            function LazyWrapper(value) {
                                this.__wrapped__ = value;
                                this.__actions__ = [];
                                this.__dir__ = 1;
                                this.__filtered__ = false;
                                this.__iteratees__ = [];
                                this.__takeCount__ = MAX_ARRAY_LENGTH;
                                this.__views__ = [];
                            }

                            /**
                             * Creates a clone of the lazy wrapper object.
                             *
                             * @private
                             * @name clone
                             * @memberOf LazyWrapper
                             * @returns {Object} Returns the cloned `LazyWrapper` object.
                             */
                            function lazyClone() {
                                var result = new LazyWrapper(this.__wrapped__);
                                result.__actions__ = copyArray(this.__actions__);
                                result.__dir__ = this.__dir__;
                                result.__filtered__ = this.__filtered__;
                                result.__iteratees__ = copyArray(this.__iteratees__);
                                result.__takeCount__ = this.__takeCount__;
                                result.__views__ = copyArray(this.__views__);
                                return result;
                            }

                            /**
                             * Reverses the direction of lazy iteration.
                             *
                             * @private
                             * @name reverse
                             * @memberOf LazyWrapper
                             * @returns {Object} Returns the new reversed `LazyWrapper` object.
                             */
                            function lazyReverse() {
                                if (this.__filtered__) {
                                    var result = new LazyWrapper(this);
                                    result.__dir__ = -1;
                                    result.__filtered__ = true;
                                } else {
                                    result = this.clone();
                                    result.__dir__ *= -1;
                                }
                                return result;
                            }

                            /**
                             * Extracts the unwrapped value from its lazy wrapper.
                             *
                             * @private
                             * @name value
                             * @memberOf LazyWrapper
                             * @returns {*} Returns the unwrapped value.
                             */
                            function lazyValue() {
                                var array = this.__wrapped__.value(),
                                    dir = this.__dir__,
                                    isArr = isArray(array),
                                    isRight = dir < 0,
                                    arrLength = isArr ? array.length : 0,
                                    view = getView(0, arrLength, this.__views__),
                                    start = view.start,
                                    end = view.end,
                                    length = end - start,
                                    index = isRight ? end : start - 1,
                                    iteratees = this.__iteratees__,
                                    iterLength = iteratees.length,
                                    resIndex = 0,
                                    takeCount = nativeMin(length, this.__takeCount__);

                                if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                                    return baseWrapperValue(array, this.__actions__);
                                }
                                var result = [];

                                outer: while (length-- && resIndex < takeCount) {
                                    index += dir;

                                    var iterIndex = -1,
                                        value = array[index];

                                    while (++iterIndex < iterLength) {
                                        var data = iteratees[iterIndex],
                                            iteratee = data.iteratee,
                                            type = data.type,
                                            computed = iteratee(value);

                                        if (type == LAZY_MAP_FLAG) {
                                            value = computed;
                                        } else if (!computed) {
                                            if (type == LAZY_FILTER_FLAG) {
                                                continue outer;
                                            } else {
                                                break outer;
                                            }
                                        }
                                    }
                                    result[resIndex++] = value;
                                }
                                return result;
                            }

                            // Ensure `LazyWrapper` is an instance of `baseLodash`.
                            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                            LazyWrapper.prototype.constructor = LazyWrapper;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates a hash object.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */
                            function Hash(entries) {
                                var index = -1,
                                    length = entries == null ? 0 : entries.length;

                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the hash.
                             *
                             * @private
                             * @name clear
                             * @memberOf Hash
                             */
                            function hashClear() {
                                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                                this.size = 0;
                            }

                            /**
                             * Removes `key` and its value from the hash.
                             *
                             * @private
                             * @name delete
                             * @memberOf Hash
                             * @param {Object} hash The hash to modify.
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */
                            function hashDelete(key) {
                                var result = this.has(key) && delete this.__data__[key];
                                this.size -= result ? 1 : 0;
                                return result;
                            }

                            /**
                             * Gets the hash value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf Hash
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */
                            function hashGet(key) {
                                var data = this.__data__;
                                if (nativeCreate) {
                                    var result = data[key];
                                    return result === HASH_UNDEFINED ? undefined : result;
                                }
                                return hasOwnProperty.call(data, key) ? data[key] : undefined;
                            }

                            /**
                             * Checks if a hash value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf Hash
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */
                            function hashHas(key) {
                                var data = this.__data__;
                                return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
                            }

                            /**
                             * Sets the hash `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf Hash
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the hash instance.
                             */
                            function hashSet(key, value) {
                                var data = this.__data__;
                                this.size += this.has(key) ? 0 : 1;
                                data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
                                return this;
                            }

                            // Add methods to `Hash`.
                            Hash.prototype.clear = hashClear;
                            Hash.prototype['delete'] = hashDelete;
                            Hash.prototype.get = hashGet;
                            Hash.prototype.has = hashHas;
                            Hash.prototype.set = hashSet;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates an list cache object.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */
                            function ListCache(entries) {
                                var index = -1,
                                    length = entries == null ? 0 : entries.length;

                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the list cache.
                             *
                             * @private
                             * @name clear
                             * @memberOf ListCache
                             */
                            function listCacheClear() {
                                this.__data__ = [];
                                this.size = 0;
                            }

                            /**
                             * Removes `key` and its value from the list cache.
                             *
                             * @private
                             * @name delete
                             * @memberOf ListCache
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */
                            function listCacheDelete(key) {
                                var data = this.__data__,
                                    index = assocIndexOf(data, key);

                                if (index < 0) {
                                    return false;
                                }
                                var lastIndex = data.length - 1;
                                if (index == lastIndex) {
                                    data.pop();
                                } else {
                                    splice.call(data, index, 1);
                                }
                                --this.size;
                                return true;
                            }

                            /**
                             * Gets the list cache value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf ListCache
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */
                            function listCacheGet(key) {
                                var data = this.__data__,
                                    index = assocIndexOf(data, key);

                                return index < 0 ? undefined : data[index][1];
                            }

                            /**
                             * Checks if a list cache value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf ListCache
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */
                            function listCacheHas(key) {
                                return assocIndexOf(this.__data__, key) > -1;
                            }

                            /**
                             * Sets the list cache `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf ListCache
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the list cache instance.
                             */
                            function listCacheSet(key, value) {
                                var data = this.__data__,
                                    index = assocIndexOf(data, key);

                                if (index < 0) {
                                    ++this.size;
                                    data.push([key, value]);
                                } else {
                                    data[index][1] = value;
                                }
                                return this;
                            }

                            // Add methods to `ListCache`.
                            ListCache.prototype.clear = listCacheClear;
                            ListCache.prototype['delete'] = listCacheDelete;
                            ListCache.prototype.get = listCacheGet;
                            ListCache.prototype.has = listCacheHas;
                            ListCache.prototype.set = listCacheSet;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates a map cache object to store key-value pairs.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */
                            function MapCache(entries) {
                                var index = -1,
                                    length = entries == null ? 0 : entries.length;

                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the map.
                             *
                             * @private
                             * @name clear
                             * @memberOf MapCache
                             */
                            function mapCacheClear() {
                                this.size = 0;
                                this.__data__ = {
                                    hash: new Hash(),
                                    map: new (Map || ListCache)(),
                                    string: new Hash(),
                                };
                            }

                            /**
                             * Removes `key` and its value from the map.
                             *
                             * @private
                             * @name delete
                             * @memberOf MapCache
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */
                            function mapCacheDelete(key) {
                                var result = getMapData(this, key)['delete'](key);
                                this.size -= result ? 1 : 0;
                                return result;
                            }

                            /**
                             * Gets the map value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf MapCache
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */
                            function mapCacheGet(key) {
                                return getMapData(this, key).get(key);
                            }

                            /**
                             * Checks if a map value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf MapCache
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */
                            function mapCacheHas(key) {
                                return getMapData(this, key).has(key);
                            }

                            /**
                             * Sets the map `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf MapCache
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the map cache instance.
                             */
                            function mapCacheSet(key, value) {
                                var data = getMapData(this, key),
                                    size = data.size;

                                data.set(key, value);
                                this.size += data.size == size ? 0 : 1;
                                return this;
                            }

                            // Add methods to `MapCache`.
                            MapCache.prototype.clear = mapCacheClear;
                            MapCache.prototype['delete'] = mapCacheDelete;
                            MapCache.prototype.get = mapCacheGet;
                            MapCache.prototype.has = mapCacheHas;
                            MapCache.prototype.set = mapCacheSet;

                            /*------------------------------------------------------------------------*/

                            /**
                             *
                             * Creates an array cache object to store unique values.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [values] The values to cache.
                             */
                            function SetCache(values) {
                                var index = -1,
                                    length = values == null ? 0 : values.length;

                                this.__data__ = new MapCache();
                                while (++index < length) {
                                    this.add(values[index]);
                                }
                            }

                            /**
                             * Adds `value` to the array cache.
                             *
                             * @private
                             * @name add
                             * @memberOf SetCache
                             * @alias push
                             * @param {*} value The value to cache.
                             * @returns {Object} Returns the cache instance.
                             */
                            function setCacheAdd(value) {
                                this.__data__.set(value, HASH_UNDEFINED);
                                return this;
                            }

                            /**
                             * Checks if `value` is in the array cache.
                             *
                             * @private
                             * @name has
                             * @memberOf SetCache
                             * @param {*} value The value to search for.
                             * @returns {number} Returns `true` if `value` is found, else `false`.
                             */
                            function setCacheHas(value) {
                                return this.__data__.has(value);
                            }

                            // Add methods to `SetCache`.
                            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                            SetCache.prototype.has = setCacheHas;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates a stack cache object to store key-value pairs.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */
                            function Stack(entries) {
                                var data = (this.__data__ = new ListCache(entries));
                                this.size = data.size;
                            }

                            /**
                             * Removes all key-value entries from the stack.
                             *
                             * @private
                             * @name clear
                             * @memberOf Stack
                             */
                            function stackClear() {
                                this.__data__ = new ListCache();
                                this.size = 0;
                            }

                            /**
                             * Removes `key` and its value from the stack.
                             *
                             * @private
                             * @name delete
                             * @memberOf Stack
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */
                            function stackDelete(key) {
                                var data = this.__data__,
                                    result = data['delete'](key);

                                this.size = data.size;
                                return result;
                            }

                            /**
                             * Gets the stack value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf Stack
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */
                            function stackGet(key) {
                                return this.__data__.get(key);
                            }

                            /**
                             * Checks if a stack value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf Stack
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */
                            function stackHas(key) {
                                return this.__data__.has(key);
                            }

                            /**
                             * Sets the stack `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf Stack
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the stack cache instance.
                             */
                            function stackSet(key, value) {
                                var data = this.__data__;
                                if (data instanceof ListCache) {
                                    var pairs = data.__data__;
                                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                                        pairs.push([key, value]);
                                        this.size = ++data.size;
                                        return this;
                                    }
                                    data = this.__data__ = new MapCache(pairs);
                                }
                                data.set(key, value);
                                this.size = data.size;
                                return this;
                            }

                            // Add methods to `Stack`.
                            Stack.prototype.clear = stackClear;
                            Stack.prototype['delete'] = stackDelete;
                            Stack.prototype.get = stackGet;
                            Stack.prototype.has = stackHas;
                            Stack.prototype.set = stackSet;

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates an array of the enumerable property names of the array-like `value`.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @param {boolean} inherited Specify returning inherited property names.
                             * @returns {Array} Returns the array of property names.
                             */
                            function arrayLikeKeys(value, inherited) {
                                var isArr = isArray(value),
                                    isArg = !isArr && isArguments(value),
                                    isBuff = !isArr && !isArg && isBuffer(value),
                                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                                    skipIndexes = isArr || isArg || isBuff || isType,
                                    result = skipIndexes ? baseTimes(value.length, String) : [],
                                    length = result.length;

                                for (var key in value) {
                                    if (
                                        (inherited || hasOwnProperty.call(value, key)) &&
                                        !(
                                            skipIndexes &&
                                            // Safari 9 has enumerable `arguments.length` in strict mode.
                                            (key == 'length' ||
                                                // Node.js 0.10 has enumerable non-index properties on buffers.
                                                (isBuff && (key == 'offset' || key == 'parent')) ||
                                                // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                                (isType &&
                                                    (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                                // Skip index properties.
                                                isIndex(key, length))
                                        )
                                    ) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * A specialized version of `_.sample` for arrays.
                             *
                             * @private
                             * @param {Array} array The array to sample.
                             * @returns {*} Returns the random element.
                             */
                            function arraySample(array) {
                                var length = array.length;
                                return length ? array[baseRandom(0, length - 1)] : undefined;
                            }

                            /**
                             * A specialized version of `_.sampleSize` for arrays.
                             *
                             * @private
                             * @param {Array} array The array to sample.
                             * @param {number} n The number of elements to sample.
                             * @returns {Array} Returns the random elements.
                             */
                            function arraySampleSize(array, n) {
                                return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                            }

                            /**
                             * A specialized version of `_.shuffle` for arrays.
                             *
                             * @private
                             * @param {Array} array The array to shuffle.
                             * @returns {Array} Returns the new shuffled array.
                             */
                            function arrayShuffle(array) {
                                return shuffleSelf(copyArray(array));
                            }

                            /**
                             * This function is like `assignValue` except that it doesn't assign
                             * `undefined` values.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */
                            function assignMergeValue(object, key, value) {
                                if (
                                    (value !== undefined && !eq(object[key], value)) ||
                                    (value === undefined && !(key in object))
                                ) {
                                    baseAssignValue(object, key, value);
                                }
                            }

                            /**
                             * Assigns `value` to `key` of `object` if the existing value is not equivalent
                             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */
                            function assignValue(object, key, value) {
                                var objValue = object[key];
                                if (
                                    !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                                    (value === undefined && !(key in object))
                                ) {
                                    baseAssignValue(object, key, value);
                                }
                            }

                            /**
                             * Gets the index at which the `key` is found in `array` of key-value pairs.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {*} key The key to search for.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             */
                            function assocIndexOf(array, key) {
                                var length = array.length;
                                while (length--) {
                                    if (eq(array[length][0], key)) {
                                        return length;
                                    }
                                }
                                return -1;
                            }

                            /**
                             * Aggregates elements of `collection` on `accumulator` with keys transformed
                             * by `iteratee` and values set by `setter`.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} setter The function to set `accumulator` values.
                             * @param {Function} iteratee The iteratee to transform keys.
                             * @param {Object} accumulator The initial aggregated object.
                             * @returns {Function} Returns `accumulator`.
                             */
                            function baseAggregator(collection, setter, iteratee, accumulator) {
                                baseEach(collection, function (value, key, collection) {
                                    setter(accumulator, value, iteratee(value), collection);
                                });
                                return accumulator;
                            }

                            /**
                             * The base implementation of `_.assign` without support for multiple sources
                             * or `customizer` functions.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @returns {Object} Returns `object`.
                             */
                            function baseAssign(object, source) {
                                return object && copyObject(source, keys(source), object);
                            }

                            /**
                             * The base implementation of `_.assignIn` without support for multiple sources
                             * or `customizer` functions.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @returns {Object} Returns `object`.
                             */
                            function baseAssignIn(object, source) {
                                return object && copyObject(source, keysIn(source), object);
                            }

                            /**
                             * The base implementation of `assignValue` and `assignMergeValue` without
                             * value checks.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */
                            function baseAssignValue(object, key, value) {
                                if (key == '__proto__' && defineProperty) {
                                    defineProperty(object, key, {
                                        configurable: true,
                                        enumerable: true,
                                        value: value,
                                        writable: true,
                                    });
                                } else {
                                    object[key] = value;
                                }
                            }

                            /**
                             * The base implementation of `_.at` without support for individual paths.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {string[]} paths The property paths to pick.
                             * @returns {Array} Returns the picked elements.
                             */
                            function baseAt(object, paths) {
                                var index = -1,
                                    length = paths.length,
                                    result = Array(length),
                                    skip = object == null;

                                while (++index < length) {
                                    result[index] = skip ? undefined : get(object, paths[index]);
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.clamp` which doesn't coerce arguments.
                             *
                             * @private
                             * @param {number} number The number to clamp.
                             * @param {number} [lower] The lower bound.
                             * @param {number} upper The upper bound.
                             * @returns {number} Returns the clamped number.
                             */
                            function baseClamp(number, lower, upper) {
                                if (number === number) {
                                    if (upper !== undefined) {
                                        number = number <= upper ? number : upper;
                                    }
                                    if (lower !== undefined) {
                                        number = number >= lower ? number : lower;
                                    }
                                }
                                return number;
                            }

                            /**
                             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                             * traversed objects.
                             *
                             * @private
                             * @param {*} value The value to clone.
                             * @param {boolean} bitmask The bitmask flags.
                             *  1 - Deep clone
                             *  2 - Flatten inherited properties
                             *  4 - Clone symbols
                             * @param {Function} [customizer] The function to customize cloning.
                             * @param {string} [key] The key of `value`.
                             * @param {Object} [object] The parent object of `value`.
                             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                             * @returns {*} Returns the cloned value.
                             */
                            function baseClone(value, bitmask, customizer, key, object, stack) {
                                var result,
                                    isDeep = bitmask & CLONE_DEEP_FLAG,
                                    isFlat = bitmask & CLONE_FLAT_FLAG,
                                    isFull = bitmask & CLONE_SYMBOLS_FLAG;

                                if (customizer) {
                                    result = object ? customizer(value, key, object, stack) : customizer(value);
                                }
                                if (result !== undefined) {
                                    return result;
                                }
                                if (!isObject(value)) {
                                    return value;
                                }
                                var isArr = isArray(value);
                                if (isArr) {
                                    result = initCloneArray(value);
                                    if (!isDeep) {
                                        return copyArray(value, result);
                                    }
                                } else {
                                    var tag = getTag(value),
                                        isFunc = tag == funcTag || tag == genTag;

                                    if (isBuffer(value)) {
                                        return cloneBuffer(value, isDeep);
                                    }
                                    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                                        result = isFlat || isFunc ? {} : initCloneObject(value);
                                        if (!isDeep) {
                                            return isFlat
                                                ? copySymbolsIn(value, baseAssignIn(result, value))
                                                : copySymbols(value, baseAssign(result, value));
                                        }
                                    } else {
                                        if (!cloneableTags[tag]) {
                                            return object ? value : {};
                                        }
                                        result = initCloneByTag(value, tag, isDeep);
                                    }
                                }
                                // Check for circular references and return its corresponding clone.
                                stack || (stack = new Stack());
                                var stacked = stack.get(value);
                                if (stacked) {
                                    return stacked;
                                }
                                stack.set(value, result);

                                if (isSet(value)) {
                                    value.forEach(function (subValue) {
                                        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                                    });
                                } else if (isMap(value)) {
                                    value.forEach(function (subValue, key) {
                                        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                                    });
                                }

                                var keysFunc = isFull ? (isFlat ? getAllKeysIn : getAllKeys) : isFlat ? keysIn : keys;

                                var props = isArr ? undefined : keysFunc(value);
                                arrayEach(props || value, function (subValue, key) {
                                    if (props) {
                                        key = subValue;
                                        subValue = value[key];
                                    }
                                    // Recursively populate clone (susceptible to call stack limits).
                                    assignValue(
                                        result,
                                        key,
                                        baseClone(subValue, bitmask, customizer, key, value, stack),
                                    );
                                });
                                return result;
                            }

                            /**
                             * The base implementation of `_.conforms` which doesn't clone `source`.
                             *
                             * @private
                             * @param {Object} source The object of property predicates to conform to.
                             * @returns {Function} Returns the new spec function.
                             */
                            function baseConforms(source) {
                                var props = keys(source);
                                return function (object) {
                                    return baseConformsTo(object, source, props);
                                };
                            }

                            /**
                             * The base implementation of `_.conformsTo` which accepts `props` to check.
                             *
                             * @private
                             * @param {Object} object The object to inspect.
                             * @param {Object} source The object of property predicates to conform to.
                             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                             */
                            function baseConformsTo(object, source, props) {
                                var length = props.length;
                                if (object == null) {
                                    return !length;
                                }
                                object = Object(object);
                                while (length--) {
                                    var key = props[length],
                                        predicate = source[key],
                                        value = object[key];

                                    if ((value === undefined && !(key in object)) || !predicate(value)) {
                                        return false;
                                    }
                                }
                                return true;
                            }

                            /**
                             * The base implementation of `_.delay` and `_.defer` which accepts `args`
                             * to provide to `func`.
                             *
                             * @private
                             * @param {Function} func The function to delay.
                             * @param {number} wait The number of milliseconds to delay invocation.
                             * @param {Array} args The arguments to provide to `func`.
                             * @returns {number|Object} Returns the timer id or timeout object.
                             */
                            function baseDelay(func, wait, args) {
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                return setTimeout(function () {
                                    func.apply(undefined, args);
                                }, wait);
                            }

                            /**
                             * The base implementation of methods like `_.difference` without support
                             * for excluding multiple arrays or iteratee shorthands.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {Array} values The values to exclude.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of filtered values.
                             */
                            function baseDifference(array, values, iteratee, comparator) {
                                var index = -1,
                                    includes = arrayIncludes,
                                    isCommon = true,
                                    length = array.length,
                                    result = [],
                                    valuesLength = values.length;

                                if (!length) {
                                    return result;
                                }
                                if (iteratee) {
                                    values = arrayMap(values, baseUnary(iteratee));
                                }
                                if (comparator) {
                                    includes = arrayIncludesWith;
                                    isCommon = false;
                                } else if (values.length >= LARGE_ARRAY_SIZE) {
                                    includes = cacheHas;
                                    isCommon = false;
                                    values = new SetCache(values);
                                }
                                outer: while (++index < length) {
                                    var value = array[index],
                                        computed = iteratee == null ? value : iteratee(value);

                                    value = comparator || value !== 0 ? value : 0;
                                    if (isCommon && computed === computed) {
                                        var valuesIndex = valuesLength;
                                        while (valuesIndex--) {
                                            if (values[valuesIndex] === computed) {
                                                continue outer;
                                            }
                                        }
                                        result.push(value);
                                    } else if (!includes(values, computed, comparator)) {
                                        result.push(value);
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.forEach` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Array|Object} Returns `collection`.
                             */
                            var baseEach = createBaseEach(baseForOwn);

                            /**
                             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Array|Object} Returns `collection`.
                             */
                            var baseEachRight = createBaseEach(baseForOwnRight, true);

                            /**
                             * The base implementation of `_.every` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} predicate The function invoked per iteration.
                             * @returns {boolean} Returns `true` if all elements pass the predicate check,
                             *  else `false`
                             */
                            function baseEvery(collection, predicate) {
                                var result = true;
                                baseEach(collection, function (value, index, collection) {
                                    result = !!predicate(value, index, collection);
                                    return result;
                                });
                                return result;
                            }

                            /**
                             * The base implementation of methods like `_.max` and `_.min` which accepts a
                             * `comparator` to determine the extremum value.
                             *
                             * @private
                             * @param {Array} array The array to iterate over.
                             * @param {Function} iteratee The iteratee invoked per iteration.
                             * @param {Function} comparator The comparator used to compare values.
                             * @returns {*} Returns the extremum value.
                             */
                            function baseExtremum(array, iteratee, comparator) {
                                var index = -1,
                                    length = array.length;

                                while (++index < length) {
                                    var value = array[index],
                                        current = iteratee(value);

                                    if (
                                        current != null &&
                                        (computed === undefined
                                            ? current === current && !isSymbol(current)
                                            : comparator(current, computed))
                                    ) {
                                        var computed = current,
                                            result = value;
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.fill` without an iteratee call guard.
                             *
                             * @private
                             * @param {Array} array The array to fill.
                             * @param {*} value The value to fill `array` with.
                             * @param {number} [start=0] The start position.
                             * @param {number} [end=array.length] The end position.
                             * @returns {Array} Returns `array`.
                             */
                            function baseFill(array, value, start, end) {
                                var length = array.length;

                                start = toInteger(start);
                                if (start < 0) {
                                    start = -start > length ? 0 : length + start;
                                }
                                end = end === undefined || end > length ? length : toInteger(end);
                                if (end < 0) {
                                    end += length;
                                }
                                end = start > end ? 0 : toLength(end);
                                while (start < end) {
                                    array[start++] = value;
                                }
                                return array;
                            }

                            /**
                             * The base implementation of `_.filter` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} predicate The function invoked per iteration.
                             * @returns {Array} Returns the new filtered array.
                             */
                            function baseFilter(collection, predicate) {
                                var result = [];
                                baseEach(collection, function (value, index, collection) {
                                    if (predicate(value, index, collection)) {
                                        result.push(value);
                                    }
                                });
                                return result;
                            }

                            /**
                             * The base implementation of `_.flatten` with support for restricting flattening.
                             *
                             * @private
                             * @param {Array} array The array to flatten.
                             * @param {number} depth The maximum recursion depth.
                             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                             * @param {Array} [result=[]] The initial result value.
                             * @returns {Array} Returns the new flattened array.
                             */
                            function baseFlatten(array, depth, predicate, isStrict, result) {
                                var index = -1,
                                    length = array.length;

                                predicate || (predicate = isFlattenable);
                                result || (result = []);

                                while (++index < length) {
                                    var value = array[index];
                                    if (depth > 0 && predicate(value)) {
                                        if (depth > 1) {
                                            // Recursively flatten arrays (susceptible to call stack limits).
                                            baseFlatten(value, depth - 1, predicate, isStrict, result);
                                        } else {
                                            arrayPush(result, value);
                                        }
                                    } else if (!isStrict) {
                                        result[result.length] = value;
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `baseForOwn` which iterates over `object`
                             * properties returned by `keysFunc` and invokes `iteratee` for each property.
                             * Iteratee functions may exit iteration early by explicitly returning `false`.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @param {Function} keysFunc The function to get the keys of `object`.
                             * @returns {Object} Returns `object`.
                             */
                            var baseFor = createBaseFor();

                            /**
                             * This function is like `baseFor` except that it iterates over properties
                             * in the opposite order.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @param {Function} keysFunc The function to get the keys of `object`.
                             * @returns {Object} Returns `object`.
                             */
                            var baseForRight = createBaseFor(true);

                            /**
                             * The base implementation of `_.forOwn` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Object} Returns `object`.
                             */
                            function baseForOwn(object, iteratee) {
                                return object && baseFor(object, iteratee, keys);
                            }

                            /**
                             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Object} Returns `object`.
                             */
                            function baseForOwnRight(object, iteratee) {
                                return object && baseForRight(object, iteratee, keys);
                            }

                            /**
                             * The base implementation of `_.functions` which creates an array of
                             * `object` function property names filtered from `props`.
                             *
                             * @private
                             * @param {Object} object The object to inspect.
                             * @param {Array} props The property names to filter.
                             * @returns {Array} Returns the function names.
                             */
                            function baseFunctions(object, props) {
                                return arrayFilter(props, function (key) {
                                    return isFunction(object[key]);
                                });
                            }

                            /**
                             * The base implementation of `_.get` without support for default values.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path of the property to get.
                             * @returns {*} Returns the resolved value.
                             */
                            function baseGet(object, path) {
                                path = castPath(path, object);

                                var index = 0,
                                    length = path.length;

                                while (object != null && index < length) {
                                    object = object[toKey(path[index++])];
                                }
                                return index && index == length ? object : undefined;
                            }

                            /**
                             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                             * symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {Function} keysFunc The function to get the keys of `object`.
                             * @param {Function} symbolsFunc The function to get the symbols of `object`.
                             * @returns {Array} Returns the array of property names and symbols.
                             */
                            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                                var result = keysFunc(object);
                                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                            }

                            /**
                             * The base implementation of `getTag` without fallbacks for buggy environments.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the `toStringTag`.
                             */
                            function baseGetTag(value) {
                                if (value == null) {
                                    return value === undefined ? undefinedTag : nullTag;
                                }
                                return symToStringTag && symToStringTag in Object(value)
                                    ? getRawTag(value)
                                    : objectToString(value);
                            }

                            /**
                             * The base implementation of `_.gt` which doesn't coerce arguments.
                             *
                             * @private
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if `value` is greater than `other`,
                             *  else `false`.
                             */
                            function baseGt(value, other) {
                                return value > other;
                            }

                            /**
                             * The base implementation of `_.has` without support for deep paths.
                             *
                             * @private
                             * @param {Object} [object] The object to query.
                             * @param {Array|string} key The key to check.
                             * @returns {boolean} Returns `true` if `key` exists, else `false`.
                             */
                            function baseHas(object, key) {
                                return object != null && hasOwnProperty.call(object, key);
                            }

                            /**
                             * The base implementation of `_.hasIn` without support for deep paths.
                             *
                             * @private
                             * @param {Object} [object] The object to query.
                             * @param {Array|string} key The key to check.
                             * @returns {boolean} Returns `true` if `key` exists, else `false`.
                             */
                            function baseHasIn(object, key) {
                                return object != null && key in Object(object);
                            }

                            /**
                             * The base implementation of `_.inRange` which doesn't coerce arguments.
                             *
                             * @private
                             * @param {number} number The number to check.
                             * @param {number} start The start of the range.
                             * @param {number} end The end of the range.
                             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                             */
                            function baseInRange(number, start, end) {
                                return number >= nativeMin(start, end) && number < nativeMax(start, end);
                            }

                            /**
                             * The base implementation of methods like `_.intersection`, without support
                             * for iteratee shorthands, that accepts an array of arrays to inspect.
                             *
                             * @private
                             * @param {Array} arrays The arrays to inspect.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of shared values.
                             */
                            function baseIntersection(arrays, iteratee, comparator) {
                                var includes = comparator ? arrayIncludesWith : arrayIncludes,
                                    length = arrays[0].length,
                                    othLength = arrays.length,
                                    othIndex = othLength,
                                    caches = Array(othLength),
                                    maxLength = Infinity,
                                    result = [];

                                while (othIndex--) {
                                    var array = arrays[othIndex];
                                    if (othIndex && iteratee) {
                                        array = arrayMap(array, baseUnary(iteratee));
                                    }
                                    maxLength = nativeMin(array.length, maxLength);
                                    caches[othIndex] =
                                        !comparator && (iteratee || (length >= 120 && array.length >= 120))
                                            ? new SetCache(othIndex && array)
                                            : undefined;
                                }
                                array = arrays[0];

                                var index = -1,
                                    seen = caches[0];

                                outer: while (++index < length && result.length < maxLength) {
                                    var value = array[index],
                                        computed = iteratee ? iteratee(value) : value;

                                    value = comparator || value !== 0 ? value : 0;
                                    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                                        othIndex = othLength;
                                        while (--othIndex) {
                                            var cache = caches[othIndex];
                                            if (
                                                !(cache
                                                    ? cacheHas(cache, computed)
                                                    : includes(arrays[othIndex], computed, comparator))
                                            ) {
                                                continue outer;
                                            }
                                        }
                                        if (seen) {
                                            seen.push(computed);
                                        }
                                        result.push(value);
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.invert` and `_.invertBy` which inverts
                             * `object` with values transformed by `iteratee` and set by `setter`.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {Function} setter The function to set `accumulator` values.
                             * @param {Function} iteratee The iteratee to transform values.
                             * @param {Object} accumulator The initial inverted object.
                             * @returns {Function} Returns `accumulator`.
                             */
                            function baseInverter(object, setter, iteratee, accumulator) {
                                baseForOwn(object, function (value, key, object) {
                                    setter(accumulator, iteratee(value), key, object);
                                });
                                return accumulator;
                            }

                            /**
                             * The base implementation of `_.invoke` without support for individual
                             * method arguments.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path of the method to invoke.
                             * @param {Array} args The arguments to invoke the method with.
                             * @returns {*} Returns the result of the invoked method.
                             */
                            function baseInvoke(object, path, args) {
                                path = castPath(path, object);
                                object = parent(object, path);
                                var func = object == null ? object : object[toKey(last(path))];
                                return func == null ? undefined : apply(func, object, args);
                            }

                            /**
                             * The base implementation of `_.isArguments`.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                             */
                            function baseIsArguments(value) {
                                return isObjectLike(value) && baseGetTag(value) == argsTag;
                            }

                            /**
                             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                             */
                            function baseIsArrayBuffer(value) {
                                return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                            }

                            /**
                             * The base implementation of `_.isDate` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                             */
                            function baseIsDate(value) {
                                return isObjectLike(value) && baseGetTag(value) == dateTag;
                            }

                            /**
                             * The base implementation of `_.isEqual` which supports partial comparisons
                             * and tracks traversed objects.
                             *
                             * @private
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @param {boolean} bitmask The bitmask flags.
                             *  1 - Unordered comparison
                             *  2 - Partial comparison
                             * @param {Function} [customizer] The function to customize comparisons.
                             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                             */
                            function baseIsEqual(value, other, bitmask, customizer, stack) {
                                if (value === other) {
                                    return true;
                                }
                                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                                    return value !== value && other !== other;
                                }
                                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                            }

                            /**
                             * A specialized version of `baseIsEqual` for arrays and objects which performs
                             * deep comparisons and tracks traversed objects enabling objects with circular
                             * references to be compared.
                             *
                             * @private
                             * @param {Object} object The object to compare.
                             * @param {Object} other The other object to compare.
                             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                             * @param {Function} customizer The function to customize comparisons.
                             * @param {Function} equalFunc The function to determine equivalents of values.
                             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                             */
                            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                                var objIsArr = isArray(object),
                                    othIsArr = isArray(other),
                                    objTag = objIsArr ? arrayTag : getTag(object),
                                    othTag = othIsArr ? arrayTag : getTag(other);

                                objTag = objTag == argsTag ? objectTag : objTag;
                                othTag = othTag == argsTag ? objectTag : othTag;

                                var objIsObj = objTag == objectTag,
                                    othIsObj = othTag == objectTag,
                                    isSameTag = objTag == othTag;

                                if (isSameTag && isBuffer(object)) {
                                    if (!isBuffer(other)) {
                                        return false;
                                    }
                                    objIsArr = true;
                                    objIsObj = false;
                                }
                                if (isSameTag && !objIsObj) {
                                    stack || (stack = new Stack());
                                    return objIsArr || isTypedArray(object)
                                        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                                        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                                }
                                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                                    if (objIsWrapped || othIsWrapped) {
                                        var objUnwrapped = objIsWrapped ? object.value() : object,
                                            othUnwrapped = othIsWrapped ? other.value() : other;

                                        stack || (stack = new Stack());
                                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                                    }
                                }
                                if (!isSameTag) {
                                    return false;
                                }
                                stack || (stack = new Stack());
                                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                            }

                            /**
                             * The base implementation of `_.isMap` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                             */
                            function baseIsMap(value) {
                                return isObjectLike(value) && getTag(value) == mapTag;
                            }

                            /**
                             * The base implementation of `_.isMatch` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Object} object The object to inspect.
                             * @param {Object} source The object of property values to match.
                             * @param {Array} matchData The property names, values, and compare flags to match.
                             * @param {Function} [customizer] The function to customize comparisons.
                             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                             */
                            function baseIsMatch(object, source, matchData, customizer) {
                                var index = matchData.length,
                                    length = index,
                                    noCustomizer = !customizer;

                                if (object == null) {
                                    return !length;
                                }
                                object = Object(object);
                                while (index--) {
                                    var data = matchData[index];
                                    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                                        return false;
                                    }
                                }
                                while (++index < length) {
                                    data = matchData[index];
                                    var key = data[0],
                                        objValue = object[key],
                                        srcValue = data[1];

                                    if (noCustomizer && data[2]) {
                                        if (objValue === undefined && !(key in object)) {
                                            return false;
                                        }
                                    } else {
                                        var stack = new Stack();
                                        if (customizer) {
                                            var result = customizer(objValue, srcValue, key, object, source, stack);
                                        }
                                        if (
                                            !(result === undefined
                                                ? baseIsEqual(
                                                      srcValue,
                                                      objValue,
                                                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                                                      customizer,
                                                      stack,
                                                  )
                                                : result)
                                        ) {
                                            return false;
                                        }
                                    }
                                }
                                return true;
                            }

                            /**
                             * The base implementation of `_.isNative` without bad shim checks.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a native function,
                             *  else `false`.
                             */
                            function baseIsNative(value) {
                                if (!isObject(value) || isMasked(value)) {
                                    return false;
                                }
                                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                                return pattern.test(toSource(value));
                            }

                            /**
                             * The base implementation of `_.isRegExp` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                             */
                            function baseIsRegExp(value) {
                                return isObjectLike(value) && baseGetTag(value) == regexpTag;
                            }

                            /**
                             * The base implementation of `_.isSet` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                             */
                            function baseIsSet(value) {
                                return isObjectLike(value) && getTag(value) == setTag;
                            }

                            /**
                             * The base implementation of `_.isTypedArray` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                             */
                            function baseIsTypedArray(value) {
                                return (
                                    isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)]
                                );
                            }

                            /**
                             * The base implementation of `_.iteratee`.
                             *
                             * @private
                             * @param {*} [value=_.identity] The value to convert to an iteratee.
                             * @returns {Function} Returns the iteratee.
                             */
                            function baseIteratee(value) {
                                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                                if (typeof value == 'function') {
                                    return value;
                                }
                                if (value == null) {
                                    return identity;
                                }
                                if (typeof value == 'object') {
                                    return isArray(value)
                                        ? baseMatchesProperty(value[0], value[1])
                                        : baseMatches(value);
                                }
                                return property(value);
                            }

                            /**
                             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             */
                            function baseKeys(object) {
                                if (!isPrototype(object)) {
                                    return nativeKeys(object);
                                }
                                var result = [];
                                for (var key in Object(object)) {
                                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             */
                            function baseKeysIn(object) {
                                if (!isObject(object)) {
                                    return nativeKeysIn(object);
                                }
                                var isProto = isPrototype(object),
                                    result = [];

                                for (var key in object) {
                                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.lt` which doesn't coerce arguments.
                             *
                             * @private
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if `value` is less than `other`,
                             *  else `false`.
                             */
                            function baseLt(value, other) {
                                return value < other;
                            }

                            /**
                             * The base implementation of `_.map` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Array} Returns the new mapped array.
                             */
                            function baseMap(collection, iteratee) {
                                var index = -1,
                                    result = isArrayLike(collection) ? Array(collection.length) : [];

                                baseEach(collection, function (value, key, collection) {
                                    result[++index] = iteratee(value, key, collection);
                                });
                                return result;
                            }

                            /**
                             * The base implementation of `_.matches` which doesn't clone `source`.
                             *
                             * @private
                             * @param {Object} source The object of property values to match.
                             * @returns {Function} Returns the new spec function.
                             */
                            function baseMatches(source) {
                                var matchData = getMatchData(source);
                                if (matchData.length == 1 && matchData[0][2]) {
                                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                                }
                                return function (object) {
                                    return object === source || baseIsMatch(object, source, matchData);
                                };
                            }

                            /**
                             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                             *
                             * @private
                             * @param {string} path The path of the property to get.
                             * @param {*} srcValue The value to match.
                             * @returns {Function} Returns the new spec function.
                             */
                            function baseMatchesProperty(path, srcValue) {
                                if (isKey(path) && isStrictComparable(srcValue)) {
                                    return matchesStrictComparable(toKey(path), srcValue);
                                }
                                return function (object) {
                                    var objValue = get(object, path);
                                    return objValue === undefined && objValue === srcValue
                                        ? hasIn(object, path)
                                        : baseIsEqual(
                                              srcValue,
                                              objValue,
                                              COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                                          );
                                };
                            }

                            /**
                             * The base implementation of `_.merge` without support for multiple sources.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @param {number} srcIndex The index of `source`.
                             * @param {Function} [customizer] The function to customize merged values.
                             * @param {Object} [stack] Tracks traversed source values and their merged
                             *  counterparts.
                             */
                            function baseMerge(object, source, srcIndex, customizer, stack) {
                                if (object === source) {
                                    return;
                                }
                                baseFor(
                                    source,
                                    function (srcValue, key) {
                                        stack || (stack = new Stack());
                                        if (isObject(srcValue)) {
                                            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                                        } else {
                                            var newValue = customizer
                                                ? customizer(
                                                      safeGet(object, key),
                                                      srcValue,
                                                      key + '',
                                                      object,
                                                      source,
                                                      stack,
                                                  )
                                                : undefined;

                                            if (newValue === undefined) {
                                                newValue = srcValue;
                                            }
                                            assignMergeValue(object, key, newValue);
                                        }
                                    },
                                    keysIn,
                                );
                            }

                            /**
                             * A specialized version of `baseMerge` for arrays and objects which performs
                             * deep merges and tracks traversed objects enabling objects with circular
                             * references to be merged.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @param {string} key The key of the value to merge.
                             * @param {number} srcIndex The index of `source`.
                             * @param {Function} mergeFunc The function to merge values.
                             * @param {Function} [customizer] The function to customize assigned values.
                             * @param {Object} [stack] Tracks traversed source values and their merged
                             *  counterparts.
                             */
                            function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                                var objValue = safeGet(object, key),
                                    srcValue = safeGet(source, key),
                                    stacked = stack.get(srcValue);

                                if (stacked) {
                                    assignMergeValue(object, key, stacked);
                                    return;
                                }
                                var newValue = customizer
                                    ? customizer(objValue, srcValue, key + '', object, source, stack)
                                    : undefined;

                                var isCommon = newValue === undefined;

                                if (isCommon) {
                                    var isArr = isArray(srcValue),
                                        isBuff = !isArr && isBuffer(srcValue),
                                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                                    newValue = srcValue;
                                    if (isArr || isBuff || isTyped) {
                                        if (isArray(objValue)) {
                                            newValue = objValue;
                                        } else if (isArrayLikeObject(objValue)) {
                                            newValue = copyArray(objValue);
                                        } else if (isBuff) {
                                            isCommon = false;
                                            newValue = cloneBuffer(srcValue, true);
                                        } else if (isTyped) {
                                            isCommon = false;
                                            newValue = cloneTypedArray(srcValue, true);
                                        } else {
                                            newValue = [];
                                        }
                                    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                        newValue = objValue;
                                        if (isArguments(objValue)) {
                                            newValue = toPlainObject(objValue);
                                        } else if (!isObject(objValue) || isFunction(objValue)) {
                                            newValue = initCloneObject(srcValue);
                                        }
                                    } else {
                                        isCommon = false;
                                    }
                                }
                                if (isCommon) {
                                    // Recursively merge objects and arrays (susceptible to call stack limits).
                                    stack.set(srcValue, newValue);
                                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                                    stack['delete'](srcValue);
                                }
                                assignMergeValue(object, key, newValue);
                            }

                            /**
                             * The base implementation of `_.nth` which doesn't coerce arguments.
                             *
                             * @private
                             * @param {Array} array The array to query.
                             * @param {number} n The index of the element to return.
                             * @returns {*} Returns the nth element of `array`.
                             */
                            function baseNth(array, n) {
                                var length = array.length;
                                if (!length) {
                                    return;
                                }
                                n += n < 0 ? length : 0;
                                return isIndex(n, length) ? array[n] : undefined;
                            }

                            /**
                             * The base implementation of `_.orderBy` without param guards.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                             * @param {string[]} orders The sort orders of `iteratees`.
                             * @returns {Array} Returns the new sorted array.
                             */
                            function baseOrderBy(collection, iteratees, orders) {
                                if (iteratees.length) {
                                    iteratees = arrayMap(iteratees, function (iteratee) {
                                        if (isArray(iteratee)) {
                                            return function (value) {
                                                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                                            };
                                        }
                                        return iteratee;
                                    });
                                } else {
                                    iteratees = [identity];
                                }

                                var index = -1;
                                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

                                var result = baseMap(collection, function (value, key, collection) {
                                    var criteria = arrayMap(iteratees, function (iteratee) {
                                        return iteratee(value);
                                    });
                                    return { criteria: criteria, index: ++index, value: value };
                                });

                                return baseSortBy(result, function (object, other) {
                                    return compareMultiple(object, other, orders);
                                });
                            }

                            /**
                             * The base implementation of `_.pick` without support for individual
                             * property identifiers.
                             *
                             * @private
                             * @param {Object} object The source object.
                             * @param {string[]} paths The property paths to pick.
                             * @returns {Object} Returns the new object.
                             */
                            function basePick(object, paths) {
                                return basePickBy(object, paths, function (value, path) {
                                    return hasIn(object, path);
                                });
                            }

                            /**
                             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Object} object The source object.
                             * @param {string[]} paths The property paths to pick.
                             * @param {Function} predicate The function invoked per property.
                             * @returns {Object} Returns the new object.
                             */
                            function basePickBy(object, paths, predicate) {
                                var index = -1,
                                    length = paths.length,
                                    result = {};

                                while (++index < length) {
                                    var path = paths[index],
                                        value = baseGet(object, path);

                                    if (predicate(value, path)) {
                                        baseSet(result, castPath(path, object), value);
                                    }
                                }
                                return result;
                            }

                            /**
                             * A specialized version of `baseProperty` which supports deep paths.
                             *
                             * @private
                             * @param {Array|string} path The path of the property to get.
                             * @returns {Function} Returns the new accessor function.
                             */
                            function basePropertyDeep(path) {
                                return function (object) {
                                    return baseGet(object, path);
                                };
                            }

                            /**
                             * The base implementation of `_.pullAllBy` without support for iteratee
                             * shorthands.
                             *
                             * @private
                             * @param {Array} array The array to modify.
                             * @param {Array} values The values to remove.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns `array`.
                             */
                            function basePullAll(array, values, iteratee, comparator) {
                                var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                                    index = -1,
                                    length = values.length,
                                    seen = array;

                                if (array === values) {
                                    values = copyArray(values);
                                }
                                if (iteratee) {
                                    seen = arrayMap(array, baseUnary(iteratee));
                                }
                                while (++index < length) {
                                    var fromIndex = 0,
                                        value = values[index],
                                        computed = iteratee ? iteratee(value) : value;

                                    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                                        if (seen !== array) {
                                            splice.call(seen, fromIndex, 1);
                                        }
                                        splice.call(array, fromIndex, 1);
                                    }
                                }
                                return array;
                            }

                            /**
                             * The base implementation of `_.pullAt` without support for individual
                             * indexes or capturing the removed elements.
                             *
                             * @private
                             * @param {Array} array The array to modify.
                             * @param {number[]} indexes The indexes of elements to remove.
                             * @returns {Array} Returns `array`.
                             */
                            function basePullAt(array, indexes) {
                                var length = array ? indexes.length : 0,
                                    lastIndex = length - 1;

                                while (length--) {
                                    var index = indexes[length];
                                    if (length == lastIndex || index !== previous) {
                                        var previous = index;
                                        if (isIndex(index)) {
                                            splice.call(array, index, 1);
                                        } else {
                                            baseUnset(array, index);
                                        }
                                    }
                                }
                                return array;
                            }

                            /**
                             * The base implementation of `_.random` without support for returning
                             * floating-point numbers.
                             *
                             * @private
                             * @param {number} lower The lower bound.
                             * @param {number} upper The upper bound.
                             * @returns {number} Returns the random number.
                             */
                            function baseRandom(lower, upper) {
                                return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                            }

                            /**
                             * The base implementation of `_.range` and `_.rangeRight` which doesn't
                             * coerce arguments.
                             *
                             * @private
                             * @param {number} start The start of the range.
                             * @param {number} end The end of the range.
                             * @param {number} step The value to increment or decrement by.
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Array} Returns the range of numbers.
                             */
                            function baseRange(start, end, step, fromRight) {
                                var index = -1,
                                    length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                                    result = Array(length);

                                while (length--) {
                                    result[fromRight ? length : ++index] = start;
                                    start += step;
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.repeat` which doesn't coerce arguments.
                             *
                             * @private
                             * @param {string} string The string to repeat.
                             * @param {number} n The number of times to repeat the string.
                             * @returns {string} Returns the repeated string.
                             */
                            function baseRepeat(string, n) {
                                var result = '';
                                if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                                    return result;
                                }
                                // Leverage the exponentiation by squaring algorithm for a faster repeat.
                                // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                                do {
                                    if (n % 2) {
                                        result += string;
                                    }
                                    n = nativeFloor(n / 2);
                                    if (n) {
                                        string += string;
                                    }
                                } while (n);

                                return result;
                            }

                            /**
                             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                             *
                             * @private
                             * @param {Function} func The function to apply a rest parameter to.
                             * @param {number} [start=func.length-1] The start position of the rest parameter.
                             * @returns {Function} Returns the new function.
                             */
                            function baseRest(func, start) {
                                return setToString(overRest(func, start, identity), func + '');
                            }

                            /**
                             * The base implementation of `_.sample`.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to sample.
                             * @returns {*} Returns the random element.
                             */
                            function baseSample(collection) {
                                return arraySample(values(collection));
                            }

                            /**
                             * The base implementation of `_.sampleSize` without param guards.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to sample.
                             * @param {number} n The number of elements to sample.
                             * @returns {Array} Returns the random elements.
                             */
                            function baseSampleSize(collection, n) {
                                var array = values(collection);
                                return shuffleSelf(array, baseClamp(n, 0, array.length));
                            }

                            /**
                             * The base implementation of `_.set`.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to set.
                             * @param {*} value The value to set.
                             * @param {Function} [customizer] The function to customize path creation.
                             * @returns {Object} Returns `object`.
                             */
                            function baseSet(object, path, value, customizer) {
                                if (!isObject(object)) {
                                    return object;
                                }
                                path = castPath(path, object);

                                var index = -1,
                                    length = path.length,
                                    lastIndex = length - 1,
                                    nested = object;

                                while (nested != null && ++index < length) {
                                    var key = toKey(path[index]),
                                        newValue = value;

                                    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                                        return object;
                                    }

                                    if (index != lastIndex) {
                                        var objValue = nested[key];
                                        newValue = customizer ? customizer(objValue, key, nested) : undefined;
                                        if (newValue === undefined) {
                                            newValue = isObject(objValue)
                                                ? objValue
                                                : isIndex(path[index + 1])
                                                ? []
                                                : {};
                                        }
                                    }
                                    assignValue(nested, key, newValue);
                                    nested = nested[key];
                                }
                                return object;
                            }

                            /**
                             * The base implementation of `setData` without support for hot loop shorting.
                             *
                             * @private
                             * @param {Function} func The function to associate metadata with.
                             * @param {*} data The metadata.
                             * @returns {Function} Returns `func`.
                             */
                            var baseSetData = !metaMap
                                ? identity
                                : function (func, data) {
                                      metaMap.set(func, data);
                                      return func;
                                  };

                            /**
                             * The base implementation of `setToString` without support for hot loop shorting.
                             *
                             * @private
                             * @param {Function} func The function to modify.
                             * @param {Function} string The `toString` result.
                             * @returns {Function} Returns `func`.
                             */
                            var baseSetToString = !defineProperty
                                ? identity
                                : function (func, string) {
                                      return defineProperty(func, 'toString', {
                                          configurable: true,
                                          enumerable: false,
                                          value: constant(string),
                                          writable: true,
                                      });
                                  };

                            /**
                             * The base implementation of `_.shuffle`.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to shuffle.
                             * @returns {Array} Returns the new shuffled array.
                             */
                            function baseShuffle(collection) {
                                return shuffleSelf(values(collection));
                            }

                            /**
                             * The base implementation of `_.slice` without an iteratee call guard.
                             *
                             * @private
                             * @param {Array} array The array to slice.
                             * @param {number} [start=0] The start position.
                             * @param {number} [end=array.length] The end position.
                             * @returns {Array} Returns the slice of `array`.
                             */
                            function baseSlice(array, start, end) {
                                var index = -1,
                                    length = array.length;

                                if (start < 0) {
                                    start = -start > length ? 0 : length + start;
                                }
                                end = end > length ? length : end;
                                if (end < 0) {
                                    end += length;
                                }
                                length = start > end ? 0 : (end - start) >>> 0;
                                start >>>= 0;

                                var result = Array(length);
                                while (++index < length) {
                                    result[index] = array[index + start];
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.some` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} predicate The function invoked per iteration.
                             * @returns {boolean} Returns `true` if any element passes the predicate check,
                             *  else `false`.
                             */
                            function baseSome(collection, predicate) {
                                var result;

                                baseEach(collection, function (value, index, collection) {
                                    result = predicate(value, index, collection);
                                    return !result;
                                });
                                return !!result;
                            }

                            /**
                             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                             * performs a binary search of `array` to determine the index at which `value`
                             * should be inserted into `array` in order to maintain its sort order.
                             *
                             * @private
                             * @param {Array} array The sorted array to inspect.
                             * @param {*} value The value to evaluate.
                             * @param {boolean} [retHighest] Specify returning the highest qualified index.
                             * @returns {number} Returns the index at which `value` should be inserted
                             *  into `array`.
                             */
                            function baseSortedIndex(array, value, retHighest) {
                                var low = 0,
                                    high = array == null ? low : array.length;

                                if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                                    while (low < high) {
                                        var mid = (low + high) >>> 1,
                                            computed = array[mid];

                                        if (
                                            computed !== null &&
                                            !isSymbol(computed) &&
                                            (retHighest ? computed <= value : computed < value)
                                        ) {
                                            low = mid + 1;
                                        } else {
                                            high = mid;
                                        }
                                    }
                                    return high;
                                }
                                return baseSortedIndexBy(array, value, identity, retHighest);
                            }

                            /**
                             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                             * which invokes `iteratee` for `value` and each element of `array` to compute
                             * their sort ranking. The iteratee is invoked with one argument; (value).
                             *
                             * @private
                             * @param {Array} array The sorted array to inspect.
                             * @param {*} value The value to evaluate.
                             * @param {Function} iteratee The iteratee invoked per element.
                             * @param {boolean} [retHighest] Specify returning the highest qualified index.
                             * @returns {number} Returns the index at which `value` should be inserted
                             *  into `array`.
                             */
                            function baseSortedIndexBy(array, value, iteratee, retHighest) {
                                var low = 0,
                                    high = array == null ? 0 : array.length;
                                if (high === 0) {
                                    return 0;
                                }

                                value = iteratee(value);
                                var valIsNaN = value !== value,
                                    valIsNull = value === null,
                                    valIsSymbol = isSymbol(value),
                                    valIsUndefined = value === undefined;

                                while (low < high) {
                                    var mid = nativeFloor((low + high) / 2),
                                        computed = iteratee(array[mid]),
                                        othIsDefined = computed !== undefined,
                                        othIsNull = computed === null,
                                        othIsReflexive = computed === computed,
                                        othIsSymbol = isSymbol(computed);

                                    if (valIsNaN) {
                                        var setLow = retHighest || othIsReflexive;
                                    } else if (valIsUndefined) {
                                        setLow = othIsReflexive && (retHighest || othIsDefined);
                                    } else if (valIsNull) {
                                        setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                                    } else if (valIsSymbol) {
                                        setLow =
                                            othIsReflexive &&
                                            othIsDefined &&
                                            !othIsNull &&
                                            (retHighest || !othIsSymbol);
                                    } else if (othIsNull || othIsSymbol) {
                                        setLow = false;
                                    } else {
                                        setLow = retHighest ? computed <= value : computed < value;
                                    }
                                    if (setLow) {
                                        low = mid + 1;
                                    } else {
                                        high = mid;
                                    }
                                }
                                return nativeMin(high, MAX_ARRAY_INDEX);
                            }

                            /**
                             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                             * support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @returns {Array} Returns the new duplicate free array.
                             */
                            function baseSortedUniq(array, iteratee) {
                                var index = -1,
                                    length = array.length,
                                    resIndex = 0,
                                    result = [];

                                while (++index < length) {
                                    var value = array[index],
                                        computed = iteratee ? iteratee(value) : value;

                                    if (!index || !eq(computed, seen)) {
                                        var seen = computed;
                                        result[resIndex++] = value === 0 ? 0 : value;
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.toNumber` which doesn't ensure correct
                             * conversions of binary, hexadecimal, or octal string values.
                             *
                             * @private
                             * @param {*} value The value to process.
                             * @returns {number} Returns the number.
                             */
                            function baseToNumber(value) {
                                if (typeof value == 'number') {
                                    return value;
                                }
                                if (isSymbol(value)) {
                                    return NAN;
                                }
                                return +value;
                            }

                            /**
                             * The base implementation of `_.toString` which doesn't convert nullish
                             * values to empty strings.
                             *
                             * @private
                             * @param {*} value The value to process.
                             * @returns {string} Returns the string.
                             */
                            function baseToString(value) {
                                // Exit early for strings to avoid a performance hit in some environments.
                                if (typeof value == 'string') {
                                    return value;
                                }
                                if (isArray(value)) {
                                    // Recursively convert values (susceptible to call stack limits).
                                    return arrayMap(value, baseToString) + '';
                                }
                                if (isSymbol(value)) {
                                    return symbolToString ? symbolToString.call(value) : '';
                                }
                                var result = value + '';
                                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
                            }

                            /**
                             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new duplicate free array.
                             */
                            function baseUniq(array, iteratee, comparator) {
                                var index = -1,
                                    includes = arrayIncludes,
                                    length = array.length,
                                    isCommon = true,
                                    result = [],
                                    seen = result;

                                if (comparator) {
                                    isCommon = false;
                                    includes = arrayIncludesWith;
                                } else if (length >= LARGE_ARRAY_SIZE) {
                                    var set = iteratee ? null : createSet(array);
                                    if (set) {
                                        return setToArray(set);
                                    }
                                    isCommon = false;
                                    includes = cacheHas;
                                    seen = new SetCache();
                                } else {
                                    seen = iteratee ? [] : result;
                                }
                                outer: while (++index < length) {
                                    var value = array[index],
                                        computed = iteratee ? iteratee(value) : value;

                                    value = comparator || value !== 0 ? value : 0;
                                    if (isCommon && computed === computed) {
                                        var seenIndex = seen.length;
                                        while (seenIndex--) {
                                            if (seen[seenIndex] === computed) {
                                                continue outer;
                                            }
                                        }
                                        if (iteratee) {
                                            seen.push(computed);
                                        }
                                        result.push(value);
                                    } else if (!includes(seen, computed, comparator)) {
                                        if (seen !== result) {
                                            seen.push(computed);
                                        }
                                        result.push(value);
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.unset`.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The property path to unset.
                             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                             */
                            function baseUnset(object, path) {
                                path = castPath(path, object);
                                object = parent(object, path);
                                return object == null || delete object[toKey(last(path))];
                            }

                            /**
                             * The base implementation of `_.update`.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to update.
                             * @param {Function} updater The function to produce the updated value.
                             * @param {Function} [customizer] The function to customize path creation.
                             * @returns {Object} Returns `object`.
                             */
                            function baseUpdate(object, path, updater, customizer) {
                                return baseSet(object, path, updater(baseGet(object, path)), customizer);
                            }

                            /**
                             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                             * without support for iteratee shorthands.
                             *
                             * @private
                             * @param {Array} array The array to query.
                             * @param {Function} predicate The function invoked per iteration.
                             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Array} Returns the slice of `array`.
                             */
                            function baseWhile(array, predicate, isDrop, fromRight) {
                                var length = array.length,
                                    index = fromRight ? length : -1;

                                while (
                                    (fromRight ? index-- : ++index < length) &&
                                    predicate(array[index], index, array)
                                ) {}

                                return isDrop
                                    ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length)
                                    : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
                            }

                            /**
                             * The base implementation of `wrapperValue` which returns the result of
                             * performing a sequence of actions on the unwrapped `value`, where each
                             * successive action is supplied the return value of the previous.
                             *
                             * @private
                             * @param {*} value The unwrapped value.
                             * @param {Array} actions Actions to perform to resolve the unwrapped value.
                             * @returns {*} Returns the resolved value.
                             */
                            function baseWrapperValue(value, actions) {
                                var result = value;
                                if (result instanceof LazyWrapper) {
                                    result = result.value();
                                }
                                return arrayReduce(
                                    actions,
                                    function (result, action) {
                                        return action.func.apply(action.thisArg, arrayPush([result], action.args));
                                    },
                                    result,
                                );
                            }

                            /**
                             * The base implementation of methods like `_.xor`, without support for
                             * iteratee shorthands, that accepts an array of arrays to inspect.
                             *
                             * @private
                             * @param {Array} arrays The arrays to inspect.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of values.
                             */
                            function baseXor(arrays, iteratee, comparator) {
                                var length = arrays.length;
                                if (length < 2) {
                                    return length ? baseUniq(arrays[0]) : [];
                                }
                                var index = -1,
                                    result = Array(length);

                                while (++index < length) {
                                    var array = arrays[index],
                                        othIndex = -1;

                                    while (++othIndex < length) {
                                        if (othIndex != index) {
                                            result[index] = baseDifference(
                                                result[index] || array,
                                                arrays[othIndex],
                                                iteratee,
                                                comparator,
                                            );
                                        }
                                    }
                                }
                                return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                            }

                            /**
                             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                             *
                             * @private
                             * @param {Array} props The property identifiers.
                             * @param {Array} values The property values.
                             * @param {Function} assignFunc The function to assign values.
                             * @returns {Object} Returns the new object.
                             */
                            function baseZipObject(props, values, assignFunc) {
                                var index = -1,
                                    length = props.length,
                                    valsLength = values.length,
                                    result = {};

                                while (++index < length) {
                                    var value = index < valsLength ? values[index] : undefined;
                                    assignFunc(result, props[index], value);
                                }
                                return result;
                            }

                            /**
                             * Casts `value` to an empty array if it's not an array like object.
                             *
                             * @private
                             * @param {*} value The value to inspect.
                             * @returns {Array|Object} Returns the cast array-like object.
                             */
                            function castArrayLikeObject(value) {
                                return isArrayLikeObject(value) ? value : [];
                            }

                            /**
                             * Casts `value` to `identity` if it's not a function.
                             *
                             * @private
                             * @param {*} value The value to inspect.
                             * @returns {Function} Returns cast function.
                             */
                            function castFunction(value) {
                                return typeof value == 'function' ? value : identity;
                            }

                            /**
                             * Casts `value` to a path array if it's not one.
                             *
                             * @private
                             * @param {*} value The value to inspect.
                             * @param {Object} [object] The object to query keys on.
                             * @returns {Array} Returns the cast property path array.
                             */
                            function castPath(value, object) {
                                if (isArray(value)) {
                                    return value;
                                }
                                return isKey(value, object) ? [value] : stringToPath(toString(value));
                            }

                            /**
                             * A `baseRest` alias which can be replaced with `identity` by module
                             * replacement plugins.
                             *
                             * @private
                             * @type {Function}
                             * @param {Function} func The function to apply a rest parameter to.
                             * @returns {Function} Returns the new function.
                             */
                            var castRest = baseRest;

                            /**
                             * Casts `array` to a slice if it's needed.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {number} start The start position.
                             * @param {number} [end=array.length] The end position.
                             * @returns {Array} Returns the cast slice.
                             */
                            function castSlice(array, start, end) {
                                var length = array.length;
                                end = end === undefined ? length : end;
                                return !start && end >= length ? array : baseSlice(array, start, end);
                            }

                            /**
                             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                             *
                             * @private
                             * @param {number|Object} id The timer id or timeout object of the timer to clear.
                             */
                            var clearTimeout =
                                ctxClearTimeout ||
                                function (id) {
                                    return root.clearTimeout(id);
                                };

                            /**
                             * Creates a clone of  `buffer`.
                             *
                             * @private
                             * @param {Buffer} buffer The buffer to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Buffer} Returns the cloned buffer.
                             */
                            function cloneBuffer(buffer, isDeep) {
                                if (isDeep) {
                                    return buffer.slice();
                                }
                                var length = buffer.length,
                                    result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                                buffer.copy(result);
                                return result;
                            }

                            /**
                             * Creates a clone of `arrayBuffer`.
                             *
                             * @private
                             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                             * @returns {ArrayBuffer} Returns the cloned array buffer.
                             */
                            function cloneArrayBuffer(arrayBuffer) {
                                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                                return result;
                            }

                            /**
                             * Creates a clone of `dataView`.
                             *
                             * @private
                             * @param {Object} dataView The data view to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned data view.
                             */
                            function cloneDataView(dataView, isDeep) {
                                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                            }

                            /**
                             * Creates a clone of `regexp`.
                             *
                             * @private
                             * @param {Object} regexp The regexp to clone.
                             * @returns {Object} Returns the cloned regexp.
                             */
                            function cloneRegExp(regexp) {
                                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                                result.lastIndex = regexp.lastIndex;
                                return result;
                            }

                            /**
                             * Creates a clone of the `symbol` object.
                             *
                             * @private
                             * @param {Object} symbol The symbol object to clone.
                             * @returns {Object} Returns the cloned symbol object.
                             */
                            function cloneSymbol(symbol) {
                                return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                            }

                            /**
                             * Creates a clone of `typedArray`.
                             *
                             * @private
                             * @param {Object} typedArray The typed array to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned typed array.
                             */
                            function cloneTypedArray(typedArray, isDeep) {
                                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                            }

                            /**
                             * Compares values to sort them in ascending order.
                             *
                             * @private
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {number} Returns the sort order indicator for `value`.
                             */
                            function compareAscending(value, other) {
                                if (value !== other) {
                                    var valIsDefined = value !== undefined,
                                        valIsNull = value === null,
                                        valIsReflexive = value === value,
                                        valIsSymbol = isSymbol(value);

                                    var othIsDefined = other !== undefined,
                                        othIsNull = other === null,
                                        othIsReflexive = other === other,
                                        othIsSymbol = isSymbol(other);

                                    if (
                                        (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                                        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                                        (valIsNull && othIsDefined && othIsReflexive) ||
                                        (!valIsDefined && othIsReflexive) ||
                                        !valIsReflexive
                                    ) {
                                        return 1;
                                    }
                                    if (
                                        (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                                        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                                        (othIsNull && valIsDefined && valIsReflexive) ||
                                        (!othIsDefined && valIsReflexive) ||
                                        !othIsReflexive
                                    ) {
                                        return -1;
                                    }
                                }
                                return 0;
                            }

                            /**
                             * Used by `_.orderBy` to compare multiple properties of a value to another
                             * and stable sort them.
                             *
                             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                             * specify an order of "desc" for descending or "asc" for ascending sort order
                             * of corresponding values.
                             *
                             * @private
                             * @param {Object} object The object to compare.
                             * @param {Object} other The other object to compare.
                             * @param {boolean[]|string[]} orders The order to sort by for each property.
                             * @returns {number} Returns the sort order indicator for `object`.
                             */
                            function compareMultiple(object, other, orders) {
                                var index = -1,
                                    objCriteria = object.criteria,
                                    othCriteria = other.criteria,
                                    length = objCriteria.length,
                                    ordersLength = orders.length;

                                while (++index < length) {
                                    var result = compareAscending(objCriteria[index], othCriteria[index]);
                                    if (result) {
                                        if (index >= ordersLength) {
                                            return result;
                                        }
                                        var order = orders[index];
                                        return result * (order == 'desc' ? -1 : 1);
                                    }
                                }
                                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                                // that causes it, under certain circumstances, to provide the same value for
                                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                                // for more details.
                                //
                                // This also ensures a stable sort in V8 and other engines.
                                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                                return object.index - other.index;
                            }

                            /**
                             * Creates an array that is the composition of partially applied arguments,
                             * placeholders, and provided arguments into a single array of arguments.
                             *
                             * @private
                             * @param {Array} args The provided arguments.
                             * @param {Array} partials The arguments to prepend to those provided.
                             * @param {Array} holders The `partials` placeholder indexes.
                             * @params {boolean} [isCurried] Specify composing for a curried function.
                             * @returns {Array} Returns the new array of composed arguments.
                             */
                            function composeArgs(args, partials, holders, isCurried) {
                                var argsIndex = -1,
                                    argsLength = args.length,
                                    holdersLength = holders.length,
                                    leftIndex = -1,
                                    leftLength = partials.length,
                                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                                    result = Array(leftLength + rangeLength),
                                    isUncurried = !isCurried;

                                while (++leftIndex < leftLength) {
                                    result[leftIndex] = partials[leftIndex];
                                }
                                while (++argsIndex < holdersLength) {
                                    if (isUncurried || argsIndex < argsLength) {
                                        result[holders[argsIndex]] = args[argsIndex];
                                    }
                                }
                                while (rangeLength--) {
                                    result[leftIndex++] = args[argsIndex++];
                                }
                                return result;
                            }

                            /**
                             * This function is like `composeArgs` except that the arguments composition
                             * is tailored for `_.partialRight`.
                             *
                             * @private
                             * @param {Array} args The provided arguments.
                             * @param {Array} partials The arguments to append to those provided.
                             * @param {Array} holders The `partials` placeholder indexes.
                             * @params {boolean} [isCurried] Specify composing for a curried function.
                             * @returns {Array} Returns the new array of composed arguments.
                             */
                            function composeArgsRight(args, partials, holders, isCurried) {
                                var argsIndex = -1,
                                    argsLength = args.length,
                                    holdersIndex = -1,
                                    holdersLength = holders.length,
                                    rightIndex = -1,
                                    rightLength = partials.length,
                                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                                    result = Array(rangeLength + rightLength),
                                    isUncurried = !isCurried;

                                while (++argsIndex < rangeLength) {
                                    result[argsIndex] = args[argsIndex];
                                }
                                var offset = argsIndex;
                                while (++rightIndex < rightLength) {
                                    result[offset + rightIndex] = partials[rightIndex];
                                }
                                while (++holdersIndex < holdersLength) {
                                    if (isUncurried || argsIndex < argsLength) {
                                        result[offset + holders[holdersIndex]] = args[argsIndex++];
                                    }
                                }
                                return result;
                            }

                            /**
                             * Copies the values of `source` to `array`.
                             *
                             * @private
                             * @param {Array} source The array to copy values from.
                             * @param {Array} [array=[]] The array to copy values to.
                             * @returns {Array} Returns `array`.
                             */
                            function copyArray(source, array) {
                                var index = -1,
                                    length = source.length;

                                array || (array = Array(length));
                                while (++index < length) {
                                    array[index] = source[index];
                                }
                                return array;
                            }

                            /**
                             * Copies properties of `source` to `object`.
                             *
                             * @private
                             * @param {Object} source The object to copy properties from.
                             * @param {Array} props The property identifiers to copy.
                             * @param {Object} [object={}] The object to copy properties to.
                             * @param {Function} [customizer] The function to customize copied values.
                             * @returns {Object} Returns `object`.
                             */
                            function copyObject(source, props, object, customizer) {
                                var isNew = !object;
                                object || (object = {});

                                var index = -1,
                                    length = props.length;

                                while (++index < length) {
                                    var key = props[index];

                                    var newValue = customizer
                                        ? customizer(object[key], source[key], key, object, source)
                                        : undefined;

                                    if (newValue === undefined) {
                                        newValue = source[key];
                                    }
                                    if (isNew) {
                                        baseAssignValue(object, key, newValue);
                                    } else {
                                        assignValue(object, key, newValue);
                                    }
                                }
                                return object;
                            }

                            /**
                             * Copies own symbols of `source` to `object`.
                             *
                             * @private
                             * @param {Object} source The object to copy symbols from.
                             * @param {Object} [object={}] The object to copy symbols to.
                             * @returns {Object} Returns `object`.
                             */
                            function copySymbols(source, object) {
                                return copyObject(source, getSymbols(source), object);
                            }

                            /**
                             * Copies own and inherited symbols of `source` to `object`.
                             *
                             * @private
                             * @param {Object} source The object to copy symbols from.
                             * @param {Object} [object={}] The object to copy symbols to.
                             * @returns {Object} Returns `object`.
                             */
                            function copySymbolsIn(source, object) {
                                return copyObject(source, getSymbolsIn(source), object);
                            }

                            /**
                             * Creates a function like `_.groupBy`.
                             *
                             * @private
                             * @param {Function} setter The function to set accumulator values.
                             * @param {Function} [initializer] The accumulator object initializer.
                             * @returns {Function} Returns the new aggregator function.
                             */
                            function createAggregator(setter, initializer) {
                                return function (collection, iteratee) {
                                    var func = isArray(collection) ? arrayAggregator : baseAggregator,
                                        accumulator = initializer ? initializer() : {};

                                    return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                                };
                            }

                            /**
                             * Creates a function like `_.assign`.
                             *
                             * @private
                             * @param {Function} assigner The function to assign values.
                             * @returns {Function} Returns the new assigner function.
                             */
                            function createAssigner(assigner) {
                                return baseRest(function (object, sources) {
                                    var index = -1,
                                        length = sources.length,
                                        customizer = length > 1 ? sources[length - 1] : undefined,
                                        guard = length > 2 ? sources[2] : undefined;

                                    customizer =
                                        assigner.length > 3 && typeof customizer == 'function'
                                            ? (length--, customizer)
                                            : undefined;

                                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                        customizer = length < 3 ? undefined : customizer;
                                        length = 1;
                                    }
                                    object = Object(object);
                                    while (++index < length) {
                                        var source = sources[index];
                                        if (source) {
                                            assigner(object, source, index, customizer);
                                        }
                                    }
                                    return object;
                                });
                            }

                            /**
                             * Creates a `baseEach` or `baseEachRight` function.
                             *
                             * @private
                             * @param {Function} eachFunc The function to iterate over a collection.
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Function} Returns the new base function.
                             */
                            function createBaseEach(eachFunc, fromRight) {
                                return function (collection, iteratee) {
                                    if (collection == null) {
                                        return collection;
                                    }
                                    if (!isArrayLike(collection)) {
                                        return eachFunc(collection, iteratee);
                                    }
                                    var length = collection.length,
                                        index = fromRight ? length : -1,
                                        iterable = Object(collection);

                                    while (fromRight ? index-- : ++index < length) {
                                        if (iteratee(iterable[index], index, iterable) === false) {
                                            break;
                                        }
                                    }
                                    return collection;
                                };
                            }

                            /**
                             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                             *
                             * @private
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Function} Returns the new base function.
                             */
                            function createBaseFor(fromRight) {
                                return function (object, iteratee, keysFunc) {
                                    var index = -1,
                                        iterable = Object(object),
                                        props = keysFunc(object),
                                        length = props.length;

                                    while (length--) {
                                        var key = props[fromRight ? length : ++index];
                                        if (iteratee(iterable[key], key, iterable) === false) {
                                            break;
                                        }
                                    }
                                    return object;
                                };
                            }

                            /**
                             * Creates a function that wraps `func` to invoke it with the optional `this`
                             * binding of `thisArg`.
                             *
                             * @private
                             * @param {Function} func The function to wrap.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @param {*} [thisArg] The `this` binding of `func`.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createBind(func, bitmask, thisArg) {
                                var isBind = bitmask & WRAP_BIND_FLAG,
                                    Ctor = createCtor(func);

                                function wrapper() {
                                    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                                    return fn.apply(isBind ? thisArg : this, arguments);
                                }
                                return wrapper;
                            }

                            /**
                             * Creates a function like `_.lowerFirst`.
                             *
                             * @private
                             * @param {string} methodName The name of the `String` case method to use.
                             * @returns {Function} Returns the new case function.
                             */
                            function createCaseFirst(methodName) {
                                return function (string) {
                                    string = toString(string);

                                    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

                                    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                                    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

                                    return chr[methodName]() + trailing;
                                };
                            }

                            /**
                             * Creates a function like `_.camelCase`.
                             *
                             * @private
                             * @param {Function} callback The function to combine each word.
                             * @returns {Function} Returns the new compounder function.
                             */
                            function createCompounder(callback) {
                                return function (string) {
                                    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                                };
                            }

                            /**
                             * Creates a function that produces an instance of `Ctor` regardless of
                             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                             *
                             * @private
                             * @param {Function} Ctor The constructor to wrap.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createCtor(Ctor) {
                                return function () {
                                    // Use a `switch` statement to work with class constructors. See
                                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                                    // for more details.
                                    var args = arguments;
                                    switch (args.length) {
                                        case 0:
                                            return new Ctor();
                                        case 1:
                                            return new Ctor(args[0]);
                                        case 2:
                                            return new Ctor(args[0], args[1]);
                                        case 3:
                                            return new Ctor(args[0], args[1], args[2]);
                                        case 4:
                                            return new Ctor(args[0], args[1], args[2], args[3]);
                                        case 5:
                                            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                        case 6:
                                            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                        case 7:
                                            return new Ctor(
                                                args[0],
                                                args[1],
                                                args[2],
                                                args[3],
                                                args[4],
                                                args[5],
                                                args[6],
                                            );
                                    }
                                    var thisBinding = baseCreate(Ctor.prototype),
                                        result = Ctor.apply(thisBinding, args);

                                    // Mimic the constructor's `return` behavior.
                                    // See https://es5.github.io/#x13.2.2 for more details.
                                    return isObject(result) ? result : thisBinding;
                                };
                            }

                            /**
                             * Creates a function that wraps `func` to enable currying.
                             *
                             * @private
                             * @param {Function} func The function to wrap.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @param {number} arity The arity of `func`.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createCurry(func, bitmask, arity) {
                                var Ctor = createCtor(func);

                                function wrapper() {
                                    var length = arguments.length,
                                        args = Array(length),
                                        index = length,
                                        placeholder = getHolder(wrapper);

                                    while (index--) {
                                        args[index] = arguments[index];
                                    }
                                    var holders =
                                        length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder
                                            ? []
                                            : replaceHolders(args, placeholder);

                                    length -= holders.length;
                                    if (length < arity) {
                                        return createRecurry(
                                            func,
                                            bitmask,
                                            createHybrid,
                                            wrapper.placeholder,
                                            undefined,
                                            args,
                                            holders,
                                            undefined,
                                            undefined,
                                            arity - length,
                                        );
                                    }
                                    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                                    return apply(fn, this, args);
                                }
                                return wrapper;
                            }

                            /**
                             * Creates a `_.find` or `_.findLast` function.
                             *
                             * @private
                             * @param {Function} findIndexFunc The function to find the collection index.
                             * @returns {Function} Returns the new find function.
                             */
                            function createFind(findIndexFunc) {
                                return function (collection, predicate, fromIndex) {
                                    var iterable = Object(collection);
                                    if (!isArrayLike(collection)) {
                                        var iteratee = getIteratee(predicate, 3);
                                        collection = keys(collection);
                                        predicate = function (key) {
                                            return iteratee(iterable[key], key, iterable);
                                        };
                                    }
                                    var index = findIndexFunc(collection, predicate, fromIndex);
                                    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                                };
                            }

                            /**
                             * Creates a `_.flow` or `_.flowRight` function.
                             *
                             * @private
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Function} Returns the new flow function.
                             */
                            function createFlow(fromRight) {
                                return flatRest(function (funcs) {
                                    var length = funcs.length,
                                        index = length,
                                        prereq = LodashWrapper.prototype.thru;

                                    if (fromRight) {
                                        funcs.reverse();
                                    }
                                    while (index--) {
                                        var func = funcs[index];
                                        if (typeof func != 'function') {
                                            throw new TypeError(FUNC_ERROR_TEXT);
                                        }
                                        if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                            var wrapper = new LodashWrapper([], true);
                                        }
                                    }
                                    index = wrapper ? index : length;
                                    while (++index < length) {
                                        func = funcs[index];

                                        var funcName = getFuncName(func),
                                            data = funcName == 'wrapper' ? getData(func) : undefined;

                                        if (
                                            data &&
                                            isLaziable(data[0]) &&
                                            data[1] ==
                                                (WRAP_ARY_FLAG |
                                                    WRAP_CURRY_FLAG |
                                                    WRAP_PARTIAL_FLAG |
                                                    WRAP_REARG_FLAG) &&
                                            !data[4].length &&
                                            data[9] == 1
                                        ) {
                                            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                                        } else {
                                            wrapper =
                                                func.length == 1 && isLaziable(func)
                                                    ? wrapper[funcName]()
                                                    : wrapper.thru(func);
                                        }
                                    }
                                    return function () {
                                        var args = arguments,
                                            value = args[0];

                                        if (wrapper && args.length == 1 && isArray(value)) {
                                            return wrapper.plant(value).value();
                                        }
                                        var index = 0,
                                            result = length ? funcs[index].apply(this, args) : value;

                                        while (++index < length) {
                                            result = funcs[index].call(this, result);
                                        }
                                        return result;
                                    };
                                });
                            }

                            /**
                             * Creates a function that wraps `func` to invoke it with optional `this`
                             * binding of `thisArg`, partial application, and currying.
                             *
                             * @private
                             * @param {Function|string} func The function or method name to wrap.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @param {*} [thisArg] The `this` binding of `func`.
                             * @param {Array} [partials] The arguments to prepend to those provided to
                             *  the new function.
                             * @param {Array} [holders] The `partials` placeholder indexes.
                             * @param {Array} [partialsRight] The arguments to append to those provided
                             *  to the new function.
                             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                             * @param {Array} [argPos] The argument positions of the new function.
                             * @param {number} [ary] The arity cap of `func`.
                             * @param {number} [arity] The arity of `func`.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createHybrid(
                                func,
                                bitmask,
                                thisArg,
                                partials,
                                holders,
                                partialsRight,
                                holdersRight,
                                argPos,
                                ary,
                                arity,
                            ) {
                                var isAry = bitmask & WRAP_ARY_FLAG,
                                    isBind = bitmask & WRAP_BIND_FLAG,
                                    isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                                    isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                                    isFlip = bitmask & WRAP_FLIP_FLAG,
                                    Ctor = isBindKey ? undefined : createCtor(func);

                                function wrapper() {
                                    var length = arguments.length,
                                        args = Array(length),
                                        index = length;

                                    while (index--) {
                                        args[index] = arguments[index];
                                    }
                                    if (isCurried) {
                                        var placeholder = getHolder(wrapper),
                                            holdersCount = countHolders(args, placeholder);
                                    }
                                    if (partials) {
                                        args = composeArgs(args, partials, holders, isCurried);
                                    }
                                    if (partialsRight) {
                                        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                                    }
                                    length -= holdersCount;
                                    if (isCurried && length < arity) {
                                        var newHolders = replaceHolders(args, placeholder);
                                        return createRecurry(
                                            func,
                                            bitmask,
                                            createHybrid,
                                            wrapper.placeholder,
                                            thisArg,
                                            args,
                                            newHolders,
                                            argPos,
                                            ary,
                                            arity - length,
                                        );
                                    }
                                    var thisBinding = isBind ? thisArg : this,
                                        fn = isBindKey ? thisBinding[func] : func;

                                    length = args.length;
                                    if (argPos) {
                                        args = reorder(args, argPos);
                                    } else if (isFlip && length > 1) {
                                        args.reverse();
                                    }
                                    if (isAry && ary < length) {
                                        args.length = ary;
                                    }
                                    if (this && this !== root && this instanceof wrapper) {
                                        fn = Ctor || createCtor(fn);
                                    }
                                    return fn.apply(thisBinding, args);
                                }
                                return wrapper;
                            }

                            /**
                             * Creates a function like `_.invertBy`.
                             *
                             * @private
                             * @param {Function} setter The function to set accumulator values.
                             * @param {Function} toIteratee The function to resolve iteratees.
                             * @returns {Function} Returns the new inverter function.
                             */
                            function createInverter(setter, toIteratee) {
                                return function (object, iteratee) {
                                    return baseInverter(object, setter, toIteratee(iteratee), {});
                                };
                            }

                            /**
                             * Creates a function that performs a mathematical operation on two values.
                             *
                             * @private
                             * @param {Function} operator The function to perform the operation.
                             * @param {number} [defaultValue] The value used for `undefined` arguments.
                             * @returns {Function} Returns the new mathematical operation function.
                             */
                            function createMathOperation(operator, defaultValue) {
                                return function (value, other) {
                                    var result;
                                    if (value === undefined && other === undefined) {
                                        return defaultValue;
                                    }
                                    if (value !== undefined) {
                                        result = value;
                                    }
                                    if (other !== undefined) {
                                        if (result === undefined) {
                                            return other;
                                        }
                                        if (typeof value == 'string' || typeof other == 'string') {
                                            value = baseToString(value);
                                            other = baseToString(other);
                                        } else {
                                            value = baseToNumber(value);
                                            other = baseToNumber(other);
                                        }
                                        result = operator(value, other);
                                    }
                                    return result;
                                };
                            }

                            /**
                             * Creates a function like `_.over`.
                             *
                             * @private
                             * @param {Function} arrayFunc The function to iterate over iteratees.
                             * @returns {Function} Returns the new over function.
                             */
                            function createOver(arrayFunc) {
                                return flatRest(function (iteratees) {
                                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                                    return baseRest(function (args) {
                                        var thisArg = this;
                                        return arrayFunc(iteratees, function (iteratee) {
                                            return apply(iteratee, thisArg, args);
                                        });
                                    });
                                });
                            }

                            /**
                             * Creates the padding for `string` based on `length`. The `chars` string
                             * is truncated if the number of characters exceeds `length`.
                             *
                             * @private
                             * @param {number} length The padding length.
                             * @param {string} [chars=' '] The string used as padding.
                             * @returns {string} Returns the padding for `string`.
                             */
                            function createPadding(length, chars) {
                                chars = chars === undefined ? ' ' : baseToString(chars);

                                var charsLength = chars.length;
                                if (charsLength < 2) {
                                    return charsLength ? baseRepeat(chars, length) : chars;
                                }
                                var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                                return hasUnicode(chars)
                                    ? castSlice(stringToArray(result), 0, length).join('')
                                    : result.slice(0, length);
                            }

                            /**
                             * Creates a function that wraps `func` to invoke it with the `this` binding
                             * of `thisArg` and `partials` prepended to the arguments it receives.
                             *
                             * @private
                             * @param {Function} func The function to wrap.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @param {*} thisArg The `this` binding of `func`.
                             * @param {Array} partials The arguments to prepend to those provided to
                             *  the new function.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createPartial(func, bitmask, thisArg, partials) {
                                var isBind = bitmask & WRAP_BIND_FLAG,
                                    Ctor = createCtor(func);

                                function wrapper() {
                                    var argsIndex = -1,
                                        argsLength = arguments.length,
                                        leftIndex = -1,
                                        leftLength = partials.length,
                                        args = Array(leftLength + argsLength),
                                        fn = this && this !== root && this instanceof wrapper ? Ctor : func;

                                    while (++leftIndex < leftLength) {
                                        args[leftIndex] = partials[leftIndex];
                                    }
                                    while (argsLength--) {
                                        args[leftIndex++] = arguments[++argsIndex];
                                    }
                                    return apply(fn, isBind ? thisArg : this, args);
                                }
                                return wrapper;
                            }

                            /**
                             * Creates a `_.range` or `_.rangeRight` function.
                             *
                             * @private
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Function} Returns the new range function.
                             */
                            function createRange(fromRight) {
                                return function (start, end, step) {
                                    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                                        end = step = undefined;
                                    }
                                    // Ensure the sign of `-0` is preserved.
                                    start = toFinite(start);
                                    if (end === undefined) {
                                        end = start;
                                        start = 0;
                                    } else {
                                        end = toFinite(end);
                                    }
                                    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                                    return baseRange(start, end, step, fromRight);
                                };
                            }

                            /**
                             * Creates a function that performs a relational operation on two values.
                             *
                             * @private
                             * @param {Function} operator The function to perform the operation.
                             * @returns {Function} Returns the new relational operation function.
                             */
                            function createRelationalOperation(operator) {
                                return function (value, other) {
                                    if (!(typeof value == 'string' && typeof other == 'string')) {
                                        value = toNumber(value);
                                        other = toNumber(other);
                                    }
                                    return operator(value, other);
                                };
                            }

                            /**
                             * Creates a function that wraps `func` to continue currying.
                             *
                             * @private
                             * @param {Function} func The function to wrap.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @param {Function} wrapFunc The function to create the `func` wrapper.
                             * @param {*} placeholder The placeholder value.
                             * @param {*} [thisArg] The `this` binding of `func`.
                             * @param {Array} [partials] The arguments to prepend to those provided to
                             *  the new function.
                             * @param {Array} [holders] The `partials` placeholder indexes.
                             * @param {Array} [argPos] The argument positions of the new function.
                             * @param {number} [ary] The arity cap of `func`.
                             * @param {number} [arity] The arity of `func`.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createRecurry(
                                func,
                                bitmask,
                                wrapFunc,
                                placeholder,
                                thisArg,
                                partials,
                                holders,
                                argPos,
                                ary,
                                arity,
                            ) {
                                var isCurry = bitmask & WRAP_CURRY_FLAG,
                                    newHolders = isCurry ? holders : undefined,
                                    newHoldersRight = isCurry ? undefined : holders,
                                    newPartials = isCurry ? partials : undefined,
                                    newPartialsRight = isCurry ? undefined : partials;

                                bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
                                bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                                if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                                }
                                var newData = [
                                    func,
                                    bitmask,
                                    thisArg,
                                    newPartials,
                                    newHolders,
                                    newPartialsRight,
                                    newHoldersRight,
                                    argPos,
                                    ary,
                                    arity,
                                ];

                                var result = wrapFunc.apply(undefined, newData);
                                if (isLaziable(func)) {
                                    setData(result, newData);
                                }
                                result.placeholder = placeholder;
                                return setWrapToString(result, func, bitmask);
                            }

                            /**
                             * Creates a function like `_.round`.
                             *
                             * @private
                             * @param {string} methodName The name of the `Math` method to use when rounding.
                             * @returns {Function} Returns the new round function.
                             */
                            function createRound(methodName) {
                                var func = Math[methodName];
                                return function (number, precision) {
                                    number = toNumber(number);
                                    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                                    if (precision && nativeIsFinite(number)) {
                                        // Shift with exponential notation to avoid floating-point issues.
                                        // See [MDN](https://mdn.io/round#Examples) for more details.
                                        var pair = (toString(number) + 'e').split('e'),
                                            value = func(pair[0] + 'e' + (+pair[1] + precision));

                                        pair = (toString(value) + 'e').split('e');
                                        return +(pair[0] + 'e' + (+pair[1] - precision));
                                    }
                                    return func(number);
                                };
                            }

                            /**
                             * Creates a set object of `values`.
                             *
                             * @private
                             * @param {Array} values The values to add to the set.
                             * @returns {Object} Returns the new set.
                             */
                            var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY)
                                ? noop
                                : function (values) {
                                      return new Set(values);
                                  };

                            /**
                             * Creates a `_.toPairs` or `_.toPairsIn` function.
                             *
                             * @private
                             * @param {Function} keysFunc The function to get the keys of a given object.
                             * @returns {Function} Returns the new pairs function.
                             */
                            function createToPairs(keysFunc) {
                                return function (object) {
                                    var tag = getTag(object);
                                    if (tag == mapTag) {
                                        return mapToArray(object);
                                    }
                                    if (tag == setTag) {
                                        return setToPairs(object);
                                    }
                                    return baseToPairs(object, keysFunc(object));
                                };
                            }

                            /**
                             * Creates a function that either curries or invokes `func` with optional
                             * `this` binding and partially applied arguments.
                             *
                             * @private
                             * @param {Function|string} func The function or method name to wrap.
                             * @param {number} bitmask The bitmask flags.
                             *    1 - `_.bind`
                             *    2 - `_.bindKey`
                             *    4 - `_.curry` or `_.curryRight` of a bound function
                             *    8 - `_.curry`
                             *   16 - `_.curryRight`
                             *   32 - `_.partial`
                             *   64 - `_.partialRight`
                             *  128 - `_.rearg`
                             *  256 - `_.ary`
                             *  512 - `_.flip`
                             * @param {*} [thisArg] The `this` binding of `func`.
                             * @param {Array} [partials] The arguments to be partially applied.
                             * @param {Array} [holders] The `partials` placeholder indexes.
                             * @param {Array} [argPos] The argument positions of the new function.
                             * @param {number} [ary] The arity cap of `func`.
                             * @param {number} [arity] The arity of `func`.
                             * @returns {Function} Returns the new wrapped function.
                             */
                            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                                var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                                if (!isBindKey && typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                var length = partials ? partials.length : 0;
                                if (!length) {
                                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                                    partials = holders = undefined;
                                }
                                ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                                arity = arity === undefined ? arity : toInteger(arity);
                                length -= holders ? holders.length : 0;

                                if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                                    var partialsRight = partials,
                                        holdersRight = holders;

                                    partials = holders = undefined;
                                }
                                var data = isBindKey ? undefined : getData(func);

                                var newData = [
                                    func,
                                    bitmask,
                                    thisArg,
                                    partials,
                                    holders,
                                    partialsRight,
                                    holdersRight,
                                    argPos,
                                    ary,
                                    arity,
                                ];

                                if (data) {
                                    mergeData(newData, data);
                                }
                                func = newData[0];
                                bitmask = newData[1];
                                thisArg = newData[2];
                                partials = newData[3];
                                holders = newData[4];
                                arity = newData[9] =
                                    newData[9] === undefined
                                        ? isBindKey
                                            ? 0
                                            : func.length
                                        : nativeMax(newData[9] - length, 0);

                                if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                                }
                                if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                                    var result = createBind(func, bitmask, thisArg);
                                } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                                    result = createCurry(func, bitmask, arity);
                                } else if (
                                    (bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                                    !holders.length
                                ) {
                                    result = createPartial(func, bitmask, thisArg, partials);
                                } else {
                                    result = createHybrid.apply(undefined, newData);
                                }
                                var setter = data ? baseSetData : setData;
                                return setWrapToString(setter(result, newData), func, bitmask);
                            }

                            /**
                             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                             * of source objects to the destination object for all destination properties
                             * that resolve to `undefined`.
                             *
                             * @private
                             * @param {*} objValue The destination value.
                             * @param {*} srcValue The source value.
                             * @param {string} key The key of the property to assign.
                             * @param {Object} object The parent object of `objValue`.
                             * @returns {*} Returns the value to assign.
                             */
                            function customDefaultsAssignIn(objValue, srcValue, key, object) {
                                if (
                                    objValue === undefined ||
                                    (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))
                                ) {
                                    return srcValue;
                                }
                                return objValue;
                            }

                            /**
                             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                             * objects into destination objects that are passed thru.
                             *
                             * @private
                             * @param {*} objValue The destination value.
                             * @param {*} srcValue The source value.
                             * @param {string} key The key of the property to merge.
                             * @param {Object} object The parent object of `objValue`.
                             * @param {Object} source The parent object of `srcValue`.
                             * @param {Object} [stack] Tracks traversed source values and their merged
                             *  counterparts.
                             * @returns {*} Returns the value to assign.
                             */
                            function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                                if (isObject(objValue) && isObject(srcValue)) {
                                    // Recursively merge objects and arrays (susceptible to call stack limits).
                                    stack.set(srcValue, objValue);
                                    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                                    stack['delete'](srcValue);
                                }
                                return objValue;
                            }

                            /**
                             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                             * objects.
                             *
                             * @private
                             * @param {*} value The value to inspect.
                             * @param {string} key The key of the property to inspect.
                             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                             */
                            function customOmitClone(value) {
                                return isPlainObject(value) ? undefined : value;
                            }

                            /**
                             * A specialized version of `baseIsEqualDeep` for arrays with support for
                             * partial deep comparisons.
                             *
                             * @private
                             * @param {Array} array The array to compare.
                             * @param {Array} other The other array to compare.
                             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                             * @param {Function} customizer The function to customize comparisons.
                             * @param {Function} equalFunc The function to determine equivalents of values.
                             * @param {Object} stack Tracks traversed `array` and `other` objects.
                             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                             */
                            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                                    arrLength = array.length,
                                    othLength = other.length;

                                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                                    return false;
                                }
                                // Check that cyclic values are equal.
                                var arrStacked = stack.get(array);
                                var othStacked = stack.get(other);
                                if (arrStacked && othStacked) {
                                    return arrStacked == other && othStacked == array;
                                }
                                var index = -1,
                                    result = true,
                                    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

                                stack.set(array, other);
                                stack.set(other, array);

                                // Ignore non-index properties.
                                while (++index < arrLength) {
                                    var arrValue = array[index],
                                        othValue = other[index];

                                    if (customizer) {
                                        var compared = isPartial
                                            ? customizer(othValue, arrValue, index, other, array, stack)
                                            : customizer(arrValue, othValue, index, array, other, stack);
                                    }
                                    if (compared !== undefined) {
                                        if (compared) {
                                            continue;
                                        }
                                        result = false;
                                        break;
                                    }
                                    // Recursively compare arrays (susceptible to call stack limits).
                                    if (seen) {
                                        if (
                                            !arraySome(other, function (othValue, othIndex) {
                                                if (
                                                    !cacheHas(seen, othIndex) &&
                                                    (arrValue === othValue ||
                                                        equalFunc(arrValue, othValue, bitmask, customizer, stack))
                                                ) {
                                                    return seen.push(othIndex);
                                                }
                                            })
                                        ) {
                                            result = false;
                                            break;
                                        }
                                    } else if (
                                        !(
                                            arrValue === othValue ||
                                            equalFunc(arrValue, othValue, bitmask, customizer, stack)
                                        )
                                    ) {
                                        result = false;
                                        break;
                                    }
                                }
                                stack['delete'](array);
                                stack['delete'](other);
                                return result;
                            }

                            /**
                             * A specialized version of `baseIsEqualDeep` for comparing objects of
                             * the same `toStringTag`.
                             *
                             * **Note:** This function only supports comparing values with tags of
                             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                             *
                             * @private
                             * @param {Object} object The object to compare.
                             * @param {Object} other The other object to compare.
                             * @param {string} tag The `toStringTag` of the objects to compare.
                             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                             * @param {Function} customizer The function to customize comparisons.
                             * @param {Function} equalFunc The function to determine equivalents of values.
                             * @param {Object} stack Tracks traversed `object` and `other` objects.
                             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                             */
                            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                                switch (tag) {
                                    case dataViewTag:
                                        if (
                                            object.byteLength != other.byteLength ||
                                            object.byteOffset != other.byteOffset
                                        ) {
                                            return false;
                                        }
                                        object = object.buffer;
                                        other = other.buffer;

                                    case arrayBufferTag:
                                        if (
                                            object.byteLength != other.byteLength ||
                                            !equalFunc(new Uint8Array(object), new Uint8Array(other))
                                        ) {
                                            return false;
                                        }
                                        return true;

                                    case boolTag:
                                    case dateTag:
                                    case numberTag:
                                        // Coerce booleans to `1` or `0` and dates to milliseconds.
                                        // Invalid dates are coerced to `NaN`.
                                        return eq(+object, +other);

                                    case errorTag:
                                        return object.name == other.name && object.message == other.message;

                                    case regexpTag:
                                    case stringTag:
                                        // Coerce regexes to strings and treat strings, primitives and objects,
                                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                                        // for more details.
                                        return object == other + '';

                                    case mapTag:
                                        var convert = mapToArray;

                                    case setTag:
                                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                                        convert || (convert = setToArray);

                                        if (object.size != other.size && !isPartial) {
                                            return false;
                                        }
                                        // Assume cyclic values are equal.
                                        var stacked = stack.get(object);
                                        if (stacked) {
                                            return stacked == other;
                                        }
                                        bitmask |= COMPARE_UNORDERED_FLAG;

                                        // Recursively compare objects (susceptible to call stack limits).
                                        stack.set(object, other);
                                        var result = equalArrays(
                                            convert(object),
                                            convert(other),
                                            bitmask,
                                            customizer,
                                            equalFunc,
                                            stack,
                                        );
                                        stack['delete'](object);
                                        return result;

                                    case symbolTag:
                                        if (symbolValueOf) {
                                            return symbolValueOf.call(object) == symbolValueOf.call(other);
                                        }
                                }
                                return false;
                            }

                            /**
                             * A specialized version of `baseIsEqualDeep` for objects with support for
                             * partial deep comparisons.
                             *
                             * @private
                             * @param {Object} object The object to compare.
                             * @param {Object} other The other object to compare.
                             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                             * @param {Function} customizer The function to customize comparisons.
                             * @param {Function} equalFunc The function to determine equivalents of values.
                             * @param {Object} stack Tracks traversed `object` and `other` objects.
                             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                             */
                            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                                    objProps = getAllKeys(object),
                                    objLength = objProps.length,
                                    othProps = getAllKeys(other),
                                    othLength = othProps.length;

                                if (objLength != othLength && !isPartial) {
                                    return false;
                                }
                                var index = objLength;
                                while (index--) {
                                    var key = objProps[index];
                                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                                        return false;
                                    }
                                }
                                // Check that cyclic values are equal.
                                var objStacked = stack.get(object);
                                var othStacked = stack.get(other);
                                if (objStacked && othStacked) {
                                    return objStacked == other && othStacked == object;
                                }
                                var result = true;
                                stack.set(object, other);
                                stack.set(other, object);

                                var skipCtor = isPartial;
                                while (++index < objLength) {
                                    key = objProps[index];
                                    var objValue = object[key],
                                        othValue = other[key];

                                    if (customizer) {
                                        var compared = isPartial
                                            ? customizer(othValue, objValue, key, other, object, stack)
                                            : customizer(objValue, othValue, key, object, other, stack);
                                    }
                                    // Recursively compare objects (susceptible to call stack limits).
                                    if (
                                        !(compared === undefined
                                            ? objValue === othValue ||
                                              equalFunc(objValue, othValue, bitmask, customizer, stack)
                                            : compared)
                                    ) {
                                        result = false;
                                        break;
                                    }
                                    skipCtor || (skipCtor = key == 'constructor');
                                }
                                if (result && !skipCtor) {
                                    var objCtor = object.constructor,
                                        othCtor = other.constructor;

                                    // Non `Object` object instances with different constructors are not equal.
                                    if (
                                        objCtor != othCtor &&
                                        'constructor' in object &&
                                        'constructor' in other &&
                                        !(
                                            typeof objCtor == 'function' &&
                                            objCtor instanceof objCtor &&
                                            typeof othCtor == 'function' &&
                                            othCtor instanceof othCtor
                                        )
                                    ) {
                                        result = false;
                                    }
                                }
                                stack['delete'](object);
                                stack['delete'](other);
                                return result;
                            }

                            /**
                             * A specialized version of `baseRest` which flattens the rest array.
                             *
                             * @private
                             * @param {Function} func The function to apply a rest parameter to.
                             * @returns {Function} Returns the new function.
                             */
                            function flatRest(func) {
                                return setToString(overRest(func, undefined, flatten), func + '');
                            }

                            /**
                             * Creates an array of own enumerable property names and symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names and symbols.
                             */
                            function getAllKeys(object) {
                                return baseGetAllKeys(object, keys, getSymbols);
                            }

                            /**
                             * Creates an array of own and inherited enumerable property names and
                             * symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names and symbols.
                             */
                            function getAllKeysIn(object) {
                                return baseGetAllKeys(object, keysIn, getSymbolsIn);
                            }

                            /**
                             * Gets metadata for `func`.
                             *
                             * @private
                             * @param {Function} func The function to query.
                             * @returns {*} Returns the metadata for `func`.
                             */
                            var getData = !metaMap
                                ? noop
                                : function (func) {
                                      return metaMap.get(func);
                                  };

                            /**
                             * Gets the name of `func`.
                             *
                             * @private
                             * @param {Function} func The function to query.
                             * @returns {string} Returns the function name.
                             */
                            function getFuncName(func) {
                                var result = func.name + '',
                                    array = realNames[result],
                                    length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                                while (length--) {
                                    var data = array[length],
                                        otherFunc = data.func;
                                    if (otherFunc == null || otherFunc == func) {
                                        return data.name;
                                    }
                                }
                                return result;
                            }

                            /**
                             * Gets the argument placeholder value for `func`.
                             *
                             * @private
                             * @param {Function} func The function to inspect.
                             * @returns {*} Returns the placeholder value.
                             */
                            function getHolder(func) {
                                var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                                return object.placeholder;
                            }

                            /**
                             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                             * this function returns the custom method, otherwise it returns `baseIteratee`.
                             * If arguments are provided, the chosen function is invoked with them and
                             * its result is returned.
                             *
                             * @private
                             * @param {*} [value] The value to convert to an iteratee.
                             * @param {number} [arity] The arity of the created iteratee.
                             * @returns {Function} Returns the chosen function or its result.
                             */
                            function getIteratee() {
                                var result = lodash.iteratee || iteratee;
                                result = result === iteratee ? baseIteratee : result;
                                return arguments.length ? result(arguments[0], arguments[1]) : result;
                            }

                            /**
                             * Gets the data for `map`.
                             *
                             * @private
                             * @param {Object} map The map to query.
                             * @param {string} key The reference key.
                             * @returns {*} Returns the map data.
                             */
                            function getMapData(map, key) {
                                var data = map.__data__;
                                return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
                            }

                            /**
                             * Gets the property names, values, and compare flags of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the match data of `object`.
                             */
                            function getMatchData(object) {
                                var result = keys(object),
                                    length = result.length;

                                while (length--) {
                                    var key = result[length],
                                        value = object[key];

                                    result[length] = [key, value, isStrictComparable(value)];
                                }
                                return result;
                            }

                            /**
                             * Gets the native function at `key` of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {string} key The key of the method to get.
                             * @returns {*} Returns the function if it's native, else `undefined`.
                             */
                            function getNative(object, key) {
                                var value = getValue(object, key);
                                return baseIsNative(value) ? value : undefined;
                            }

                            /**
                             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the raw `toStringTag`.
                             */
                            function getRawTag(value) {
                                var isOwn = hasOwnProperty.call(value, symToStringTag),
                                    tag = value[symToStringTag];

                                try {
                                    value[symToStringTag] = undefined;
                                    var unmasked = true;
                                } catch (e) {}

                                var result = nativeObjectToString.call(value);
                                if (unmasked) {
                                    if (isOwn) {
                                        value[symToStringTag] = tag;
                                    } else {
                                        delete value[symToStringTag];
                                    }
                                }
                                return result;
                            }

                            /**
                             * Creates an array of the own enumerable symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of symbols.
                             */
                            var getSymbols = !nativeGetSymbols
                                ? stubArray
                                : function (object) {
                                      if (object == null) {
                                          return [];
                                      }
                                      object = Object(object);
                                      return arrayFilter(nativeGetSymbols(object), function (symbol) {
                                          return propertyIsEnumerable.call(object, symbol);
                                      });
                                  };

                            /**
                             * Creates an array of the own and inherited enumerable symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of symbols.
                             */
                            var getSymbolsIn = !nativeGetSymbols
                                ? stubArray
                                : function (object) {
                                      var result = [];
                                      while (object) {
                                          arrayPush(result, getSymbols(object));
                                          object = getPrototype(object);
                                      }
                                      return result;
                                  };

                            /**
                             * Gets the `toStringTag` of `value`.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the `toStringTag`.
                             */
                            var getTag = baseGetTag;

                            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                            if (
                                (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                                (Map && getTag(new Map()) != mapTag) ||
                                (Promise && getTag(Promise.resolve()) != promiseTag) ||
                                (Set && getTag(new Set()) != setTag) ||
                                (WeakMap && getTag(new WeakMap()) != weakMapTag)
                            ) {
                                getTag = function (value) {
                                    var result = baseGetTag(value),
                                        Ctor = result == objectTag ? value.constructor : undefined,
                                        ctorString = Ctor ? toSource(Ctor) : '';

                                    if (ctorString) {
                                        switch (ctorString) {
                                            case dataViewCtorString:
                                                return dataViewTag;
                                            case mapCtorString:
                                                return mapTag;
                                            case promiseCtorString:
                                                return promiseTag;
                                            case setCtorString:
                                                return setTag;
                                            case weakMapCtorString:
                                                return weakMapTag;
                                        }
                                    }
                                    return result;
                                };
                            }

                            /**
                             * Gets the view, applying any `transforms` to the `start` and `end` positions.
                             *
                             * @private
                             * @param {number} start The start of the view.
                             * @param {number} end The end of the view.
                             * @param {Array} transforms The transformations to apply to the view.
                             * @returns {Object} Returns an object containing the `start` and `end`
                             *  positions of the view.
                             */
                            function getView(start, end, transforms) {
                                var index = -1,
                                    length = transforms.length;

                                while (++index < length) {
                                    var data = transforms[index],
                                        size = data.size;

                                    switch (data.type) {
                                        case 'drop':
                                            start += size;
                                            break;
                                        case 'dropRight':
                                            end -= size;
                                            break;
                                        case 'take':
                                            end = nativeMin(end, start + size);
                                            break;
                                        case 'takeRight':
                                            start = nativeMax(start, end - size);
                                            break;
                                    }
                                }
                                return { start: start, end: end };
                            }

                            /**
                             * Extracts wrapper details from the `source` body comment.
                             *
                             * @private
                             * @param {string} source The source to inspect.
                             * @returns {Array} Returns the wrapper details.
                             */
                            function getWrapDetails(source) {
                                var match = source.match(reWrapDetails);
                                return match ? match[1].split(reSplitDetails) : [];
                            }

                            /**
                             * Checks if `path` exists on `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path to check.
                             * @param {Function} hasFunc The function to check properties.
                             * @returns {boolean} Returns `true` if `path` exists, else `false`.
                             */
                            function hasPath(object, path, hasFunc) {
                                path = castPath(path, object);

                                var index = -1,
                                    length = path.length,
                                    result = false;

                                while (++index < length) {
                                    var key = toKey(path[index]);
                                    if (!(result = object != null && hasFunc(object, key))) {
                                        break;
                                    }
                                    object = object[key];
                                }
                                if (result || ++index != length) {
                                    return result;
                                }
                                length = object == null ? 0 : object.length;
                                return (
                                    !!length &&
                                    isLength(length) &&
                                    isIndex(key, length) &&
                                    (isArray(object) || isArguments(object))
                                );
                            }

                            /**
                             * Initializes an array clone.
                             *
                             * @private
                             * @param {Array} array The array to clone.
                             * @returns {Array} Returns the initialized clone.
                             */
                            function initCloneArray(array) {
                                var length = array.length,
                                    result = new array.constructor(length);

                                // Add properties assigned by `RegExp#exec`.
                                if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                                    result.index = array.index;
                                    result.input = array.input;
                                }
                                return result;
                            }

                            /**
                             * Initializes an object clone.
                             *
                             * @private
                             * @param {Object} object The object to clone.
                             * @returns {Object} Returns the initialized clone.
                             */
                            function initCloneObject(object) {
                                return typeof object.constructor == 'function' && !isPrototype(object)
                                    ? baseCreate(getPrototype(object))
                                    : {};
                            }

                            /**
                             * Initializes an object clone based on its `toStringTag`.
                             *
                             * **Note:** This function only supports cloning values with tags of
                             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                             *
                             * @private
                             * @param {Object} object The object to clone.
                             * @param {string} tag The `toStringTag` of the object to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the initialized clone.
                             */
                            function initCloneByTag(object, tag, isDeep) {
                                var Ctor = object.constructor;
                                switch (tag) {
                                    case arrayBufferTag:
                                        return cloneArrayBuffer(object);

                                    case boolTag:
                                    case dateTag:
                                        return new Ctor(+object);

                                    case dataViewTag:
                                        return cloneDataView(object, isDeep);

                                    case float32Tag:
                                    case float64Tag:
                                    case int8Tag:
                                    case int16Tag:
                                    case int32Tag:
                                    case uint8Tag:
                                    case uint8ClampedTag:
                                    case uint16Tag:
                                    case uint32Tag:
                                        return cloneTypedArray(object, isDeep);

                                    case mapTag:
                                        return new Ctor();

                                    case numberTag:
                                    case stringTag:
                                        return new Ctor(object);

                                    case regexpTag:
                                        return cloneRegExp(object);

                                    case setTag:
                                        return new Ctor();

                                    case symbolTag:
                                        return cloneSymbol(object);
                                }
                            }

                            /**
                             * Inserts wrapper `details` in a comment at the top of the `source` body.
                             *
                             * @private
                             * @param {string} source The source to modify.
                             * @returns {Array} details The details to insert.
                             * @returns {string} Returns the modified source.
                             */
                            function insertWrapDetails(source, details) {
                                var length = details.length;
                                if (!length) {
                                    return source;
                                }
                                var lastIndex = length - 1;
                                details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                                details = details.join(length > 2 ? ', ' : ' ');
                                return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                            }

                            /**
                             * Checks if `value` is a flattenable `arguments` object or array.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                             */
                            function isFlattenable(value) {
                                return (
                                    isArray(value) ||
                                    isArguments(value) ||
                                    !!(spreadableSymbol && value && value[spreadableSymbol])
                                );
                            }

                            /**
                             * Checks if `value` is a valid array-like index.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                             */
                            function isIndex(value, length) {
                                var type = typeof value;
                                length = length == null ? MAX_SAFE_INTEGER : length;

                                return (
                                    !!length &&
                                    (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
                                    value > -1 &&
                                    value % 1 == 0 &&
                                    value < length
                                );
                            }

                            /**
                             * Checks if the given arguments are from an iteratee call.
                             *
                             * @private
                             * @param {*} value The potential iteratee value argument.
                             * @param {*} index The potential iteratee index or key argument.
                             * @param {*} object The potential iteratee object argument.
                             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                             *  else `false`.
                             */
                            function isIterateeCall(value, index, object) {
                                if (!isObject(object)) {
                                    return false;
                                }
                                var type = typeof index;
                                if (
                                    type == 'number'
                                        ? isArrayLike(object) && isIndex(index, object.length)
                                        : type == 'string' && index in object
                                ) {
                                    return eq(object[index], value);
                                }
                                return false;
                            }

                            /**
                             * Checks if `value` is a property name and not a property path.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @param {Object} [object] The object to query keys on.
                             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                             */
                            function isKey(value, object) {
                                if (isArray(value)) {
                                    return false;
                                }
                                var type = typeof value;
                                if (
                                    type == 'number' ||
                                    type == 'symbol' ||
                                    type == 'boolean' ||
                                    value == null ||
                                    isSymbol(value)
                                ) {
                                    return true;
                                }
                                return (
                                    reIsPlainProp.test(value) ||
                                    !reIsDeepProp.test(value) ||
                                    (object != null && value in Object(object))
                                );
                            }

                            /**
                             * Checks if `value` is suitable for use as unique object key.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                             */
                            function isKeyable(value) {
                                var type = typeof value;
                                return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'
                                    ? value !== '__proto__'
                                    : value === null;
                            }

                            /**
                             * Checks if `func` has a lazy counterpart.
                             *
                             * @private
                             * @param {Function} func The function to check.
                             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                             *  else `false`.
                             */
                            function isLaziable(func) {
                                var funcName = getFuncName(func),
                                    other = lodash[funcName];

                                if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                                    return false;
                                }
                                if (func === other) {
                                    return true;
                                }
                                var data = getData(other);
                                return !!data && func === data[0];
                            }

                            /**
                             * Checks if `func` has its source masked.
                             *
                             * @private
                             * @param {Function} func The function to check.
                             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                             */
                            function isMasked(func) {
                                return !!maskSrcKey && maskSrcKey in func;
                            }

                            /**
                             * Checks if `func` is capable of being masked.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                             */
                            var isMaskable = coreJsData ? isFunction : stubFalse;

                            /**
                             * Checks if `value` is likely a prototype object.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                             */
                            function isPrototype(value) {
                                var Ctor = value && value.constructor,
                                    proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                                return value === proto;
                            }

                            /**
                             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` if suitable for strict
                             *  equality comparisons, else `false`.
                             */
                            function isStrictComparable(value) {
                                return value === value && !isObject(value);
                            }

                            /**
                             * A specialized version of `matchesProperty` for source values suitable
                             * for strict equality comparisons, i.e. `===`.
                             *
                             * @private
                             * @param {string} key The key of the property to get.
                             * @param {*} srcValue The value to match.
                             * @returns {Function} Returns the new spec function.
                             */
                            function matchesStrictComparable(key, srcValue) {
                                return function (object) {
                                    if (object == null) {
                                        return false;
                                    }
                                    return (
                                        object[key] === srcValue && (srcValue !== undefined || key in Object(object))
                                    );
                                };
                            }

                            /**
                             * A specialized version of `_.memoize` which clears the memoized function's
                             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                             *
                             * @private
                             * @param {Function} func The function to have its output memoized.
                             * @returns {Function} Returns the new memoized function.
                             */
                            function memoizeCapped(func) {
                                var result = memoize(func, function (key) {
                                    if (cache.size === MAX_MEMOIZE_SIZE) {
                                        cache.clear();
                                    }
                                    return key;
                                });

                                var cache = result.cache;
                                return result;
                            }

                            /**
                             * Merges the function metadata of `source` into `data`.
                             *
                             * Merging metadata reduces the number of wrappers used to invoke a function.
                             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                             * may be applied regardless of execution order. Methods like `_.ary` and
                             * `_.rearg` modify function arguments, making the order in which they are
                             * executed important, preventing the merging of metadata. However, we make
                             * an exception for a safe combined case where curried functions have `_.ary`
                             * and or `_.rearg` applied.
                             *
                             * @private
                             * @param {Array} data The destination metadata.
                             * @param {Array} source The source metadata.
                             * @returns {Array} Returns `data`.
                             */
                            function mergeData(data, source) {
                                var bitmask = data[1],
                                    srcBitmask = source[1],
                                    newBitmask = bitmask | srcBitmask,
                                    isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                                var isCombo =
                                    (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
                                    (srcBitmask == WRAP_ARY_FLAG &&
                                        bitmask == WRAP_REARG_FLAG &&
                                        data[7].length <= source[8]) ||
                                    (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                                        source[7].length <= source[8] &&
                                        bitmask == WRAP_CURRY_FLAG);

                                // Exit early if metadata can't be merged.
                                if (!(isCommon || isCombo)) {
                                    return data;
                                }
                                // Use source `thisArg` if available.
                                if (srcBitmask & WRAP_BIND_FLAG) {
                                    data[2] = source[2];
                                    // Set when currying a bound function.
                                    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                                }
                                // Compose partial arguments.
                                var value = source[3];
                                if (value) {
                                    var partials = data[3];
                                    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                                    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                                }
                                // Compose partial right arguments.
                                value = source[5];
                                if (value) {
                                    partials = data[5];
                                    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                                    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                                }
                                // Use source `argPos` if available.
                                value = source[7];
                                if (value) {
                                    data[7] = value;
                                }
                                // Use source `ary` if it's smaller.
                                if (srcBitmask & WRAP_ARY_FLAG) {
                                    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                                }
                                // Use source `arity` if one is not provided.
                                if (data[9] == null) {
                                    data[9] = source[9];
                                }
                                // Use source `func` and merge bitmasks.
                                data[0] = source[0];
                                data[1] = newBitmask;

                                return data;
                            }

                            /**
                             * This function is like
                             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                             * except that it includes inherited enumerable properties.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             */
                            function nativeKeysIn(object) {
                                var result = [];
                                if (object != null) {
                                    for (var key in Object(object)) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * Converts `value` to a string using `Object.prototype.toString`.
                             *
                             * @private
                             * @param {*} value The value to convert.
                             * @returns {string} Returns the converted string.
                             */
                            function objectToString(value) {
                                return nativeObjectToString.call(value);
                            }

                            /**
                             * A specialized version of `baseRest` which transforms the rest array.
                             *
                             * @private
                             * @param {Function} func The function to apply a rest parameter to.
                             * @param {number} [start=func.length-1] The start position of the rest parameter.
                             * @param {Function} transform The rest array transform.
                             * @returns {Function} Returns the new function.
                             */
                            function overRest(func, start, transform) {
                                start = nativeMax(start === undefined ? func.length - 1 : start, 0);
                                return function () {
                                    var args = arguments,
                                        index = -1,
                                        length = nativeMax(args.length - start, 0),
                                        array = Array(length);

                                    while (++index < length) {
                                        array[index] = args[start + index];
                                    }
                                    index = -1;
                                    var otherArgs = Array(start + 1);
                                    while (++index < start) {
                                        otherArgs[index] = args[index];
                                    }
                                    otherArgs[start] = transform(array);
                                    return apply(func, this, otherArgs);
                                };
                            }

                            /**
                             * Gets the parent value at `path` of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {Array} path The path to get the parent value of.
                             * @returns {*} Returns the parent value.
                             */
                            function parent(object, path) {
                                return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                            }

                            /**
                             * Reorder `array` according to the specified indexes where the element at
                             * the first index is assigned as the first element, the element at
                             * the second index is assigned as the second element, and so on.
                             *
                             * @private
                             * @param {Array} array The array to reorder.
                             * @param {Array} indexes The arranged array indexes.
                             * @returns {Array} Returns `array`.
                             */
                            function reorder(array, indexes) {
                                var arrLength = array.length,
                                    length = nativeMin(indexes.length, arrLength),
                                    oldArray = copyArray(array);

                                while (length--) {
                                    var index = indexes[length];
                                    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                                }
                                return array;
                            }

                            /**
                             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {string} key The key of the property to get.
                             * @returns {*} Returns the property value.
                             */
                            function safeGet(object, key) {
                                if (key === 'constructor' && typeof object[key] === 'function') {
                                    return;
                                }

                                if (key == '__proto__') {
                                    return;
                                }

                                return object[key];
                            }

                            /**
                             * Sets metadata for `func`.
                             *
                             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                             * period of time, it will trip its breaker and transition to an identity
                             * function to avoid garbage collection pauses in V8. See
                             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                             * for more details.
                             *
                             * @private
                             * @param {Function} func The function to associate metadata with.
                             * @param {*} data The metadata.
                             * @returns {Function} Returns `func`.
                             */
                            var setData = shortOut(baseSetData);

                            /**
                             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                             *
                             * @private
                             * @param {Function} func The function to delay.
                             * @param {number} wait The number of milliseconds to delay invocation.
                             * @returns {number|Object} Returns the timer id or timeout object.
                             */
                            var setTimeout =
                                ctxSetTimeout ||
                                function (func, wait) {
                                    return root.setTimeout(func, wait);
                                };

                            /**
                             * Sets the `toString` method of `func` to return `string`.
                             *
                             * @private
                             * @param {Function} func The function to modify.
                             * @param {Function} string The `toString` result.
                             * @returns {Function} Returns `func`.
                             */
                            var setToString = shortOut(baseSetToString);

                            /**
                             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                             * with wrapper details in a comment at the top of the source body.
                             *
                             * @private
                             * @param {Function} wrapper The function to modify.
                             * @param {Function} reference The reference function.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @returns {Function} Returns `wrapper`.
                             */
                            function setWrapToString(wrapper, reference, bitmask) {
                                var source = reference + '';
                                return setToString(
                                    wrapper,
                                    insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)),
                                );
                            }

                            /**
                             * Creates a function that'll short out and invoke `identity` instead
                             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                             * milliseconds.
                             *
                             * @private
                             * @param {Function} func The function to restrict.
                             * @returns {Function} Returns the new shortable function.
                             */
                            function shortOut(func) {
                                var count = 0,
                                    lastCalled = 0;

                                return function () {
                                    var stamp = nativeNow(),
                                        remaining = HOT_SPAN - (stamp - lastCalled);

                                    lastCalled = stamp;
                                    if (remaining > 0) {
                                        if (++count >= HOT_COUNT) {
                                            return arguments[0];
                                        }
                                    } else {
                                        count = 0;
                                    }
                                    return func.apply(undefined, arguments);
                                };
                            }

                            /**
                             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                             *
                             * @private
                             * @param {Array} array The array to shuffle.
                             * @param {number} [size=array.length] The size of `array`.
                             * @returns {Array} Returns `array`.
                             */
                            function shuffleSelf(array, size) {
                                var index = -1,
                                    length = array.length,
                                    lastIndex = length - 1;

                                size = size === undefined ? length : size;
                                while (++index < size) {
                                    var rand = baseRandom(index, lastIndex),
                                        value = array[rand];

                                    array[rand] = array[index];
                                    array[index] = value;
                                }
                                array.length = size;
                                return array;
                            }

                            /**
                             * Converts `string` to a property path array.
                             *
                             * @private
                             * @param {string} string The string to convert.
                             * @returns {Array} Returns the property path array.
                             */
                            var stringToPath = memoizeCapped(function (string) {
                                var result = [];
                                if (string.charCodeAt(0) === 46 /* . */) {
                                    result.push('');
                                }
                                string.replace(rePropName, function (match, number, quote, subString) {
                                    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
                                });
                                return result;
                            });

                            /**
                             * Converts `value` to a string key if it's not a string or symbol.
                             *
                             * @private
                             * @param {*} value The value to inspect.
                             * @returns {string|symbol} Returns the key.
                             */
                            function toKey(value) {
                                if (typeof value == 'string' || isSymbol(value)) {
                                    return value;
                                }
                                var result = value + '';
                                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
                            }

                            /**
                             * Converts `func` to its source code.
                             *
                             * @private
                             * @param {Function} func The function to convert.
                             * @returns {string} Returns the source code.
                             */
                            function toSource(func) {
                                if (func != null) {
                                    try {
                                        return funcToString.call(func);
                                    } catch (e) {}
                                    try {
                                        return func + '';
                                    } catch (e) {}
                                }
                                return '';
                            }

                            /**
                             * Updates wrapper `details` based on `bitmask` flags.
                             *
                             * @private
                             * @returns {Array} details The details to modify.
                             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                             * @returns {Array} Returns `details`.
                             */
                            function updateWrapDetails(details, bitmask) {
                                arrayEach(wrapFlags, function (pair) {
                                    var value = '_.' + pair[0];
                                    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                                        details.push(value);
                                    }
                                });
                                return details.sort();
                            }

                            /**
                             * Creates a clone of `wrapper`.
                             *
                             * @private
                             * @param {Object} wrapper The wrapper to clone.
                             * @returns {Object} Returns the cloned wrapper.
                             */
                            function wrapperClone(wrapper) {
                                if (wrapper instanceof LazyWrapper) {
                                    return wrapper.clone();
                                }
                                var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                                result.__actions__ = copyArray(wrapper.__actions__);
                                result.__index__ = wrapper.__index__;
                                result.__values__ = wrapper.__values__;
                                return result;
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates an array of elements split into groups the length of `size`.
                             * If `array` can't be split evenly, the final chunk will be the remaining
                             * elements.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to process.
                             * @param {number} [size=1] The length of each chunk
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the new array of chunks.
                             * @example
                             *
                             * _.chunk(['a', 'b', 'c', 'd'], 2);
                             * // => [['a', 'b'], ['c', 'd']]
                             *
                             * _.chunk(['a', 'b', 'c', 'd'], 3);
                             * // => [['a', 'b', 'c'], ['d']]
                             */
                            function chunk(array, size, guard) {
                                if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
                                    size = 1;
                                } else {
                                    size = nativeMax(toInteger(size), 0);
                                }
                                var length = array == null ? 0 : array.length;
                                if (!length || size < 1) {
                                    return [];
                                }
                                var index = 0,
                                    resIndex = 0,
                                    result = Array(nativeCeil(length / size));

                                while (index < length) {
                                    result[resIndex++] = baseSlice(array, index, (index += size));
                                }
                                return result;
                            }

                            /**
                             * Creates an array with all falsey values removed. The values `false`, `null`,
                             * `0`, `""`, `undefined`, and `NaN` are falsey.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to compact.
                             * @returns {Array} Returns the new array of filtered values.
                             * @example
                             *
                             * _.compact([0, 1, false, 2, '', 3]);
                             * // => [1, 2, 3]
                             */
                            function compact(array) {
                                var index = -1,
                                    length = array == null ? 0 : array.length,
                                    resIndex = 0,
                                    result = [];

                                while (++index < length) {
                                    var value = array[index];
                                    if (value) {
                                        result[resIndex++] = value;
                                    }
                                }
                                return result;
                            }

                            /**
                             * Creates a new array concatenating `array` with any additional arrays
                             * and/or values.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to concatenate.
                             * @param {...*} [values] The values to concatenate.
                             * @returns {Array} Returns the new concatenated array.
                             * @example
                             *
                             * var array = [1];
                             * var other = _.concat(array, 2, [3], [[4]]);
                             *
                             * console.log(other);
                             * // => [1, 2, 3, [4]]
                             *
                             * console.log(array);
                             * // => [1]
                             */
                            function concat() {
                                var length = arguments.length;
                                if (!length) {
                                    return [];
                                }
                                var args = Array(length - 1),
                                    array = arguments[0],
                                    index = length;

                                while (index--) {
                                    args[index - 1] = arguments[index];
                                }
                                return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                            }

                            /**
                             * Creates an array of `array` values not included in the other given arrays
                             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons. The order and references of result values are
                             * determined by the first array.
                             *
                             * **Note:** Unlike `_.pullAll`, this method returns a new array.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {...Array} [values] The values to exclude.
                             * @returns {Array} Returns the new array of filtered values.
                             * @see _.without, _.xor
                             * @example
                             *
                             * _.difference([2, 1], [2, 3]);
                             * // => [1]
                             */
                            var difference = baseRest(function (array, values) {
                                return isArrayLikeObject(array)
                                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                                    : [];
                            });

                            /**
                             * This method is like `_.difference` except that it accepts `iteratee` which
                             * is invoked for each element of `array` and `values` to generate the criterion
                             * by which they're compared. The order and references of result values are
                             * determined by the first array. The iteratee is invoked with one argument:
                             * (value).
                             *
                             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {...Array} [values] The values to exclude.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Array} Returns the new array of filtered values.
                             * @example
                             *
                             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                             * // => [1.2]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                             * // => [{ 'x': 2 }]
                             */
                            var differenceBy = baseRest(function (array, values) {
                                var iteratee = last(values);
                                if (isArrayLikeObject(iteratee)) {
                                    iteratee = undefined;
                                }
                                return isArrayLikeObject(array)
                                    ? baseDifference(
                                          array,
                                          baseFlatten(values, 1, isArrayLikeObject, true),
                                          getIteratee(iteratee, 2),
                                      )
                                    : [];
                            });

                            /**
                             * This method is like `_.difference` except that it accepts `comparator`
                             * which is invoked to compare elements of `array` to `values`. The order and
                             * references of result values are determined by the first array. The comparator
                             * is invoked with two arguments: (arrVal, othVal).
                             *
                             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {...Array} [values] The values to exclude.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of filtered values.
                             * @example
                             *
                             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                             *
                             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                             * // => [{ 'x': 2, 'y': 1 }]
                             */
                            var differenceWith = baseRest(function (array, values) {
                                var comparator = last(values);
                                if (isArrayLikeObject(comparator)) {
                                    comparator = undefined;
                                }
                                return isArrayLikeObject(array)
                                    ? baseDifference(
                                          array,
                                          baseFlatten(values, 1, isArrayLikeObject, true),
                                          undefined,
                                          comparator,
                                      )
                                    : [];
                            });

                            /**
                             * Creates a slice of `array` with `n` elements dropped from the beginning.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.5.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {number} [n=1] The number of elements to drop.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * _.drop([1, 2, 3]);
                             * // => [2, 3]
                             *
                             * _.drop([1, 2, 3], 2);
                             * // => [3]
                             *
                             * _.drop([1, 2, 3], 5);
                             * // => []
                             *
                             * _.drop([1, 2, 3], 0);
                             * // => [1, 2, 3]
                             */
                            function drop(array, n, guard) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return [];
                                }
                                n = guard || n === undefined ? 1 : toInteger(n);
                                return baseSlice(array, n < 0 ? 0 : n, length);
                            }

                            /**
                             * Creates a slice of `array` with `n` elements dropped from the end.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {number} [n=1] The number of elements to drop.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * _.dropRight([1, 2, 3]);
                             * // => [1, 2]
                             *
                             * _.dropRight([1, 2, 3], 2);
                             * // => [1]
                             *
                             * _.dropRight([1, 2, 3], 5);
                             * // => []
                             *
                             * _.dropRight([1, 2, 3], 0);
                             * // => [1, 2, 3]
                             */
                            function dropRight(array, n, guard) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return [];
                                }
                                n = guard || n === undefined ? 1 : toInteger(n);
                                n = length - n;
                                return baseSlice(array, 0, n < 0 ? 0 : n);
                            }

                            /**
                             * Creates a slice of `array` excluding elements dropped from the end.
                             * Elements are dropped until `predicate` returns falsey. The predicate is
                             * invoked with three arguments: (value, index, array).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'active': true },
                             *   { 'user': 'fred',    'active': false },
                             *   { 'user': 'pebbles', 'active': false }
                             * ];
                             *
                             * _.dropRightWhile(users, function(o) { return !o.active; });
                             * // => objects for ['barney']
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                             * // => objects for ['barney', 'fred']
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.dropRightWhile(users, ['active', false]);
                             * // => objects for ['barney']
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.dropRightWhile(users, 'active');
                             * // => objects for ['barney', 'fred', 'pebbles']
                             */
                            function dropRightWhile(array, predicate) {
                                return array && array.length
                                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                                    : [];
                            }

                            /**
                             * Creates a slice of `array` excluding elements dropped from the beginning.
                             * Elements are dropped until `predicate` returns falsey. The predicate is
                             * invoked with three arguments: (value, index, array).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'active': false },
                             *   { 'user': 'fred',    'active': false },
                             *   { 'user': 'pebbles', 'active': true }
                             * ];
                             *
                             * _.dropWhile(users, function(o) { return !o.active; });
                             * // => objects for ['pebbles']
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.dropWhile(users, { 'user': 'barney', 'active': false });
                             * // => objects for ['fred', 'pebbles']
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.dropWhile(users, ['active', false]);
                             * // => objects for ['pebbles']
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.dropWhile(users, 'active');
                             * // => objects for ['barney', 'fred', 'pebbles']
                             */
                            function dropWhile(array, predicate) {
                                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
                            }

                            /**
                             * Fills elements of `array` with `value` from `start` up to, but not
                             * including, `end`.
                             *
                             * **Note:** This method mutates `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.2.0
                             * @category Array
                             * @param {Array} array The array to fill.
                             * @param {*} value The value to fill `array` with.
                             * @param {number} [start=0] The start position.
                             * @param {number} [end=array.length] The end position.
                             * @returns {Array} Returns `array`.
                             * @example
                             *
                             * var array = [1, 2, 3];
                             *
                             * _.fill(array, 'a');
                             * console.log(array);
                             * // => ['a', 'a', 'a']
                             *
                             * _.fill(Array(3), 2);
                             * // => [2, 2, 2]
                             *
                             * _.fill([4, 6, 8, 10], '*', 1, 3);
                             * // => [4, '*', '*', 10]
                             */
                            function fill(array, value, start, end) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return [];
                                }
                                if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                                    start = 0;
                                    end = length;
                                }
                                return baseFill(array, value, start, end);
                            }

                            /**
                             * This method is like `_.find` except that it returns the index of the first
                             * element `predicate` returns truthy for instead of the element itself.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.1.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @param {number} [fromIndex=0] The index to search from.
                             * @returns {number} Returns the index of the found element, else `-1`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'active': false },
                             *   { 'user': 'fred',    'active': false },
                             *   { 'user': 'pebbles', 'active': true }
                             * ];
                             *
                             * _.findIndex(users, function(o) { return o.user == 'barney'; });
                             * // => 0
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.findIndex(users, { 'user': 'fred', 'active': false });
                             * // => 1
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.findIndex(users, ['active', false]);
                             * // => 0
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.findIndex(users, 'active');
                             * // => 2
                             */
                            function findIndex(array, predicate, fromIndex) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return -1;
                                }
                                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                                if (index < 0) {
                                    index = nativeMax(length + index, 0);
                                }
                                return baseFindIndex(array, getIteratee(predicate, 3), index);
                            }

                            /**
                             * This method is like `_.findIndex` except that it iterates over elements
                             * of `collection` from right to left.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @param {number} [fromIndex=array.length-1] The index to search from.
                             * @returns {number} Returns the index of the found element, else `-1`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'active': true },
                             *   { 'user': 'fred',    'active': false },
                             *   { 'user': 'pebbles', 'active': false }
                             * ];
                             *
                             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                             * // => 2
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                             * // => 0
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.findLastIndex(users, ['active', false]);
                             * // => 2
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.findLastIndex(users, 'active');
                             * // => 0
                             */
                            function findLastIndex(array, predicate, fromIndex) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return -1;
                                }
                                var index = length - 1;
                                if (fromIndex !== undefined) {
                                    index = toInteger(fromIndex);
                                    index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                                }
                                return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                            }

                            /**
                             * Flattens `array` a single level deep.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to flatten.
                             * @returns {Array} Returns the new flattened array.
                             * @example
                             *
                             * _.flatten([1, [2, [3, [4]], 5]]);
                             * // => [1, 2, [3, [4]], 5]
                             */
                            function flatten(array) {
                                var length = array == null ? 0 : array.length;
                                return length ? baseFlatten(array, 1) : [];
                            }

                            /**
                             * Recursively flattens `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to flatten.
                             * @returns {Array} Returns the new flattened array.
                             * @example
                             *
                             * _.flattenDeep([1, [2, [3, [4]], 5]]);
                             * // => [1, 2, 3, 4, 5]
                             */
                            function flattenDeep(array) {
                                var length = array == null ? 0 : array.length;
                                return length ? baseFlatten(array, INFINITY) : [];
                            }

                            /**
                             * Recursively flatten `array` up to `depth` times.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.4.0
                             * @category Array
                             * @param {Array} array The array to flatten.
                             * @param {number} [depth=1] The maximum recursion depth.
                             * @returns {Array} Returns the new flattened array.
                             * @example
                             *
                             * var array = [1, [2, [3, [4]], 5]];
                             *
                             * _.flattenDepth(array, 1);
                             * // => [1, 2, [3, [4]], 5]
                             *
                             * _.flattenDepth(array, 2);
                             * // => [1, 2, 3, [4], 5]
                             */
                            function flattenDepth(array, depth) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return [];
                                }
                                depth = depth === undefined ? 1 : toInteger(depth);
                                return baseFlatten(array, depth);
                            }

                            /**
                             * The inverse of `_.toPairs`; this method returns an object composed
                             * from key-value `pairs`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} pairs The key-value pairs.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * _.fromPairs([['a', 1], ['b', 2]]);
                             * // => { 'a': 1, 'b': 2 }
                             */
                            function fromPairs(pairs) {
                                var index = -1,
                                    length = pairs == null ? 0 : pairs.length,
                                    result = {};

                                while (++index < length) {
                                    var pair = pairs[index];
                                    result[pair[0]] = pair[1];
                                }
                                return result;
                            }

                            /**
                             * Gets the first element of `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @alias first
                             * @category Array
                             * @param {Array} array The array to query.
                             * @returns {*} Returns the first element of `array`.
                             * @example
                             *
                             * _.head([1, 2, 3]);
                             * // => 1
                             *
                             * _.head([]);
                             * // => undefined
                             */
                            function head(array) {
                                return array && array.length ? array[0] : undefined;
                            }

                            /**
                             * Gets the index at which the first occurrence of `value` is found in `array`
                             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons. If `fromIndex` is negative, it's used as the
                             * offset from the end of `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {*} value The value to search for.
                             * @param {number} [fromIndex=0] The index to search from.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             * @example
                             *
                             * _.indexOf([1, 2, 1, 2], 2);
                             * // => 1
                             *
                             * // Search from the `fromIndex`.
                             * _.indexOf([1, 2, 1, 2], 2, 2);
                             * // => 3
                             */
                            function indexOf(array, value, fromIndex) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return -1;
                                }
                                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                                if (index < 0) {
                                    index = nativeMax(length + index, 0);
                                }
                                return baseIndexOf(array, value, index);
                            }

                            /**
                             * Gets all but the last element of `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * _.initial([1, 2, 3]);
                             * // => [1, 2]
                             */
                            function initial(array) {
                                var length = array == null ? 0 : array.length;
                                return length ? baseSlice(array, 0, -1) : [];
                            }

                            /**
                             * Creates an array of unique values that are included in all given arrays
                             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons. The order and references of result values are
                             * determined by the first array.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @returns {Array} Returns the new array of intersecting values.
                             * @example
                             *
                             * _.intersection([2, 1], [2, 3]);
                             * // => [2]
                             */
                            var intersection = baseRest(function (arrays) {
                                var mapped = arrayMap(arrays, castArrayLikeObject);
                                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
                            });

                            /**
                             * This method is like `_.intersection` except that it accepts `iteratee`
                             * which is invoked for each element of each `arrays` to generate the criterion
                             * by which they're compared. The order and references of result values are
                             * determined by the first array. The iteratee is invoked with one argument:
                             * (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Array} Returns the new array of intersecting values.
                             * @example
                             *
                             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                             * // => [2.1]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                             * // => [{ 'x': 1 }]
                             */
                            var intersectionBy = baseRest(function (arrays) {
                                var iteratee = last(arrays),
                                    mapped = arrayMap(arrays, castArrayLikeObject);

                                if (iteratee === last(mapped)) {
                                    iteratee = undefined;
                                } else {
                                    mapped.pop();
                                }
                                return mapped.length && mapped[0] === arrays[0]
                                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                                    : [];
                            });

                            /**
                             * This method is like `_.intersection` except that it accepts `comparator`
                             * which is invoked to compare elements of `arrays`. The order and references
                             * of result values are determined by the first array. The comparator is
                             * invoked with two arguments: (arrVal, othVal).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of intersecting values.
                             * @example
                             *
                             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                             *
                             * _.intersectionWith(objects, others, _.isEqual);
                             * // => [{ 'x': 1, 'y': 2 }]
                             */
                            var intersectionWith = baseRest(function (arrays) {
                                var comparator = last(arrays),
                                    mapped = arrayMap(arrays, castArrayLikeObject);

                                comparator = typeof comparator == 'function' ? comparator : undefined;
                                if (comparator) {
                                    mapped.pop();
                                }
                                return mapped.length && mapped[0] === arrays[0]
                                    ? baseIntersection(mapped, undefined, comparator)
                                    : [];
                            });

                            /**
                             * Converts all elements in `array` into a string separated by `separator`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to convert.
                             * @param {string} [separator=','] The element separator.
                             * @returns {string} Returns the joined string.
                             * @example
                             *
                             * _.join(['a', 'b', 'c'], '~');
                             * // => 'a~b~c'
                             */
                            function join(array, separator) {
                                return array == null ? '' : nativeJoin.call(array, separator);
                            }

                            /**
                             * Gets the last element of `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @returns {*} Returns the last element of `array`.
                             * @example
                             *
                             * _.last([1, 2, 3]);
                             * // => 3
                             */
                            function last(array) {
                                var length = array == null ? 0 : array.length;
                                return length ? array[length - 1] : undefined;
                            }

                            /**
                             * This method is like `_.indexOf` except that it iterates over elements of
                             * `array` from right to left.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {*} value The value to search for.
                             * @param {number} [fromIndex=array.length-1] The index to search from.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             * @example
                             *
                             * _.lastIndexOf([1, 2, 1, 2], 2);
                             * // => 3
                             *
                             * // Search from the `fromIndex`.
                             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                             * // => 1
                             */
                            function lastIndexOf(array, value, fromIndex) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return -1;
                                }
                                var index = length;
                                if (fromIndex !== undefined) {
                                    index = toInteger(fromIndex);
                                    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                                }
                                return value === value
                                    ? strictLastIndexOf(array, value, index)
                                    : baseFindIndex(array, baseIsNaN, index, true);
                            }

                            /**
                             * Gets the element at index `n` of `array`. If `n` is negative, the nth
                             * element from the end is returned.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.11.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {number} [n=0] The index of the element to return.
                             * @returns {*} Returns the nth element of `array`.
                             * @example
                             *
                             * var array = ['a', 'b', 'c', 'd'];
                             *
                             * _.nth(array, 1);
                             * // => 'b'
                             *
                             * _.nth(array, -2);
                             * // => 'c';
                             */
                            function nth(array, n) {
                                return array && array.length ? baseNth(array, toInteger(n)) : undefined;
                            }

                            /**
                             * Removes all given values from `array` using
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons.
                             *
                             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                             * to remove elements from an array by predicate.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @param {...*} [values] The values to remove.
                             * @returns {Array} Returns `array`.
                             * @example
                             *
                             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                             *
                             * _.pull(array, 'a', 'c');
                             * console.log(array);
                             * // => ['b', 'b']
                             */
                            var pull = baseRest(pullAll);

                            /**
                             * This method is like `_.pull` except that it accepts an array of values to remove.
                             *
                             * **Note:** Unlike `_.difference`, this method mutates `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @param {Array} values The values to remove.
                             * @returns {Array} Returns `array`.
                             * @example
                             *
                             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                             *
                             * _.pullAll(array, ['a', 'c']);
                             * console.log(array);
                             * // => ['b', 'b']
                             */
                            function pullAll(array, values) {
                                return array && array.length && values && values.length
                                    ? basePullAll(array, values)
                                    : array;
                            }

                            /**
                             * This method is like `_.pullAll` except that it accepts `iteratee` which is
                             * invoked for each element of `array` and `values` to generate the criterion
                             * by which they're compared. The iteratee is invoked with one argument: (value).
                             *
                             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @param {Array} values The values to remove.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Array} Returns `array`.
                             * @example
                             *
                             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                             *
                             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                             * console.log(array);
                             * // => [{ 'x': 2 }]
                             */
                            function pullAllBy(array, values, iteratee) {
                                return array && array.length && values && values.length
                                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                                    : array;
                            }

                            /**
                             * This method is like `_.pullAll` except that it accepts `comparator` which
                             * is invoked to compare elements of `array` to `values`. The comparator is
                             * invoked with two arguments: (arrVal, othVal).
                             *
                             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.6.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @param {Array} values The values to remove.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns `array`.
                             * @example
                             *
                             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                             *
                             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                             * console.log(array);
                             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                             */
                            function pullAllWith(array, values, comparator) {
                                return array && array.length && values && values.length
                                    ? basePullAll(array, values, undefined, comparator)
                                    : array;
                            }

                            /**
                             * Removes elements from `array` corresponding to `indexes` and returns an
                             * array of removed elements.
                             *
                             * **Note:** Unlike `_.at`, this method mutates `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                             * @returns {Array} Returns the new array of removed elements.
                             * @example
                             *
                             * var array = ['a', 'b', 'c', 'd'];
                             * var pulled = _.pullAt(array, [1, 3]);
                             *
                             * console.log(array);
                             * // => ['a', 'c']
                             *
                             * console.log(pulled);
                             * // => ['b', 'd']
                             */
                            var pullAt = flatRest(function (array, indexes) {
                                var length = array == null ? 0 : array.length,
                                    result = baseAt(array, indexes);

                                basePullAt(
                                    array,
                                    arrayMap(indexes, function (index) {
                                        return isIndex(index, length) ? +index : index;
                                    }).sort(compareAscending),
                                );

                                return result;
                            });

                            /**
                             * Removes all elements from `array` that `predicate` returns truthy for
                             * and returns an array of the removed elements. The predicate is invoked
                             * with three arguments: (value, index, array).
                             *
                             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                             * to pull elements from an array by value.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the new array of removed elements.
                             * @example
                             *
                             * var array = [1, 2, 3, 4];
                             * var evens = _.remove(array, function(n) {
                             *   return n % 2 == 0;
                             * });
                             *
                             * console.log(array);
                             * // => [1, 3]
                             *
                             * console.log(evens);
                             * // => [2, 4]
                             */
                            function remove(array, predicate) {
                                var result = [];
                                if (!(array && array.length)) {
                                    return result;
                                }
                                var index = -1,
                                    indexes = [],
                                    length = array.length;

                                predicate = getIteratee(predicate, 3);
                                while (++index < length) {
                                    var value = array[index];
                                    if (predicate(value, index, array)) {
                                        result.push(value);
                                        indexes.push(index);
                                    }
                                }
                                basePullAt(array, indexes);
                                return result;
                            }

                            /**
                             * Reverses `array` so that the first element becomes the last, the second
                             * element becomes the second to last, and so on.
                             *
                             * **Note:** This method mutates `array` and is based on
                             * [`Array#reverse`](https://mdn.io/Array/reverse).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to modify.
                             * @returns {Array} Returns `array`.
                             * @example
                             *
                             * var array = [1, 2, 3];
                             *
                             * _.reverse(array);
                             * // => [3, 2, 1]
                             *
                             * console.log(array);
                             * // => [3, 2, 1]
                             */
                            function reverse(array) {
                                return array == null ? array : nativeReverse.call(array);
                            }

                            /**
                             * Creates a slice of `array` from `start` up to, but not including, `end`.
                             *
                             * **Note:** This method is used instead of
                             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                             * returned.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to slice.
                             * @param {number} [start=0] The start position.
                             * @param {number} [end=array.length] The end position.
                             * @returns {Array} Returns the slice of `array`.
                             */
                            function slice(array, start, end) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return [];
                                }
                                if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                                    start = 0;
                                    end = length;
                                } else {
                                    start = start == null ? 0 : toInteger(start);
                                    end = end === undefined ? length : toInteger(end);
                                }
                                return baseSlice(array, start, end);
                            }

                            /**
                             * Uses a binary search to determine the lowest index at which `value`
                             * should be inserted into `array` in order to maintain its sort order.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The sorted array to inspect.
                             * @param {*} value The value to evaluate.
                             * @returns {number} Returns the index at which `value` should be inserted
                             *  into `array`.
                             * @example
                             *
                             * _.sortedIndex([30, 50], 40);
                             * // => 1
                             */
                            function sortedIndex(array, value) {
                                return baseSortedIndex(array, value);
                            }

                            /**
                             * This method is like `_.sortedIndex` except that it accepts `iteratee`
                             * which is invoked for `value` and each element of `array` to compute their
                             * sort ranking. The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The sorted array to inspect.
                             * @param {*} value The value to evaluate.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {number} Returns the index at which `value` should be inserted
                             *  into `array`.
                             * @example
                             *
                             * var objects = [{ 'x': 4 }, { 'x': 5 }];
                             *
                             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                             * // => 0
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                             * // => 0
                             */
                            function sortedIndexBy(array, value, iteratee) {
                                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                            }

                            /**
                             * This method is like `_.indexOf` except that it performs a binary
                             * search on a sorted `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {*} value The value to search for.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             * @example
                             *
                             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                             * // => 1
                             */
                            function sortedIndexOf(array, value) {
                                var length = array == null ? 0 : array.length;
                                if (length) {
                                    var index = baseSortedIndex(array, value);
                                    if (index < length && eq(array[index], value)) {
                                        return index;
                                    }
                                }
                                return -1;
                            }

                            /**
                             * This method is like `_.sortedIndex` except that it returns the highest
                             * index at which `value` should be inserted into `array` in order to
                             * maintain its sort order.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The sorted array to inspect.
                             * @param {*} value The value to evaluate.
                             * @returns {number} Returns the index at which `value` should be inserted
                             *  into `array`.
                             * @example
                             *
                             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                             * // => 4
                             */
                            function sortedLastIndex(array, value) {
                                return baseSortedIndex(array, value, true);
                            }

                            /**
                             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                             * which is invoked for `value` and each element of `array` to compute their
                             * sort ranking. The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The sorted array to inspect.
                             * @param {*} value The value to evaluate.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {number} Returns the index at which `value` should be inserted
                             *  into `array`.
                             * @example
                             *
                             * var objects = [{ 'x': 4 }, { 'x': 5 }];
                             *
                             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                             * // => 1
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                             * // => 1
                             */
                            function sortedLastIndexBy(array, value, iteratee) {
                                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                            }

                            /**
                             * This method is like `_.lastIndexOf` except that it performs a binary
                             * search on a sorted `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {*} value The value to search for.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             * @example
                             *
                             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                             * // => 3
                             */
                            function sortedLastIndexOf(array, value) {
                                var length = array == null ? 0 : array.length;
                                if (length) {
                                    var index = baseSortedIndex(array, value, true) - 1;
                                    if (eq(array[index], value)) {
                                        return index;
                                    }
                                }
                                return -1;
                            }

                            /**
                             * This method is like `_.uniq` except that it's designed and optimized
                             * for sorted arrays.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @returns {Array} Returns the new duplicate free array.
                             * @example
                             *
                             * _.sortedUniq([1, 1, 2]);
                             * // => [1, 2]
                             */
                            function sortedUniq(array) {
                                return array && array.length ? baseSortedUniq(array) : [];
                            }

                            /**
                             * This method is like `_.uniqBy` except that it's designed and optimized
                             * for sorted arrays.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {Function} [iteratee] The iteratee invoked per element.
                             * @returns {Array} Returns the new duplicate free array.
                             * @example
                             *
                             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                             * // => [1.1, 2.3]
                             */
                            function sortedUniqBy(array, iteratee) {
                                return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
                            }

                            /**
                             * Gets all but the first element of `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * _.tail([1, 2, 3]);
                             * // => [2, 3]
                             */
                            function tail(array) {
                                var length = array == null ? 0 : array.length;
                                return length ? baseSlice(array, 1, length) : [];
                            }

                            /**
                             * Creates a slice of `array` with `n` elements taken from the beginning.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {number} [n=1] The number of elements to take.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * _.take([1, 2, 3]);
                             * // => [1]
                             *
                             * _.take([1, 2, 3], 2);
                             * // => [1, 2]
                             *
                             * _.take([1, 2, 3], 5);
                             * // => [1, 2, 3]
                             *
                             * _.take([1, 2, 3], 0);
                             * // => []
                             */
                            function take(array, n, guard) {
                                if (!(array && array.length)) {
                                    return [];
                                }
                                n = guard || n === undefined ? 1 : toInteger(n);
                                return baseSlice(array, 0, n < 0 ? 0 : n);
                            }

                            /**
                             * Creates a slice of `array` with `n` elements taken from the end.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {number} [n=1] The number of elements to take.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * _.takeRight([1, 2, 3]);
                             * // => [3]
                             *
                             * _.takeRight([1, 2, 3], 2);
                             * // => [2, 3]
                             *
                             * _.takeRight([1, 2, 3], 5);
                             * // => [1, 2, 3]
                             *
                             * _.takeRight([1, 2, 3], 0);
                             * // => []
                             */
                            function takeRight(array, n, guard) {
                                var length = array == null ? 0 : array.length;
                                if (!length) {
                                    return [];
                                }
                                n = guard || n === undefined ? 1 : toInteger(n);
                                n = length - n;
                                return baseSlice(array, n < 0 ? 0 : n, length);
                            }

                            /**
                             * Creates a slice of `array` with elements taken from the end. Elements are
                             * taken until `predicate` returns falsey. The predicate is invoked with
                             * three arguments: (value, index, array).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'active': true },
                             *   { 'user': 'fred',    'active': false },
                             *   { 'user': 'pebbles', 'active': false }
                             * ];
                             *
                             * _.takeRightWhile(users, function(o) { return !o.active; });
                             * // => objects for ['fred', 'pebbles']
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                             * // => objects for ['pebbles']
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.takeRightWhile(users, ['active', false]);
                             * // => objects for ['fred', 'pebbles']
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.takeRightWhile(users, 'active');
                             * // => []
                             */
                            function takeRightWhile(array, predicate) {
                                return array && array.length
                                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                                    : [];
                            }

                            /**
                             * Creates a slice of `array` with elements taken from the beginning. Elements
                             * are taken until `predicate` returns falsey. The predicate is invoked with
                             * three arguments: (value, index, array).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Array
                             * @param {Array} array The array to query.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the slice of `array`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'active': false },
                             *   { 'user': 'fred',    'active': false },
                             *   { 'user': 'pebbles', 'active': true }
                             * ];
                             *
                             * _.takeWhile(users, function(o) { return !o.active; });
                             * // => objects for ['barney', 'fred']
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.takeWhile(users, { 'user': 'barney', 'active': false });
                             * // => objects for ['barney']
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.takeWhile(users, ['active', false]);
                             * // => objects for ['barney', 'fred']
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.takeWhile(users, 'active');
                             * // => []
                             */
                            function takeWhile(array, predicate) {
                                return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
                            }

                            /**
                             * Creates an array of unique values, in order, from all given arrays using
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @returns {Array} Returns the new array of combined values.
                             * @example
                             *
                             * _.union([2], [1, 2]);
                             * // => [2, 1]
                             */
                            var union = baseRest(function (arrays) {
                                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                            });

                            /**
                             * This method is like `_.union` except that it accepts `iteratee` which is
                             * invoked for each element of each `arrays` to generate the criterion by
                             * which uniqueness is computed. Result values are chosen from the first
                             * array in which the value occurs. The iteratee is invoked with one argument:
                             * (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Array} Returns the new array of combined values.
                             * @example
                             *
                             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                             * // => [2.1, 1.2]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                             * // => [{ 'x': 1 }, { 'x': 2 }]
                             */
                            var unionBy = baseRest(function (arrays) {
                                var iteratee = last(arrays);
                                if (isArrayLikeObject(iteratee)) {
                                    iteratee = undefined;
                                }
                                return baseUniq(
                                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                                    getIteratee(iteratee, 2),
                                );
                            });

                            /**
                             * This method is like `_.union` except that it accepts `comparator` which
                             * is invoked to compare elements of `arrays`. Result values are chosen from
                             * the first array in which the value occurs. The comparator is invoked
                             * with two arguments: (arrVal, othVal).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of combined values.
                             * @example
                             *
                             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                             *
                             * _.unionWith(objects, others, _.isEqual);
                             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                             */
                            var unionWith = baseRest(function (arrays) {
                                var comparator = last(arrays);
                                comparator = typeof comparator == 'function' ? comparator : undefined;
                                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                            });

                            /**
                             * Creates a duplicate-free version of an array, using
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons, in which only the first occurrence of each element
                             * is kept. The order of result values is determined by the order they occur
                             * in the array.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @returns {Array} Returns the new duplicate free array.
                             * @example
                             *
                             * _.uniq([2, 1, 2]);
                             * // => [2, 1]
                             */
                            function uniq(array) {
                                return array && array.length ? baseUniq(array) : [];
                            }

                            /**
                             * This method is like `_.uniq` except that it accepts `iteratee` which is
                             * invoked for each element in `array` to generate the criterion by which
                             * uniqueness is computed. The order of result values is determined by the
                             * order they occur in the array. The iteratee is invoked with one argument:
                             * (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Array} Returns the new duplicate free array.
                             * @example
                             *
                             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                             * // => [2.1, 1.2]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                             * // => [{ 'x': 1 }, { 'x': 2 }]
                             */
                            function uniqBy(array, iteratee) {
                                return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                            }

                            /**
                             * This method is like `_.uniq` except that it accepts `comparator` which
                             * is invoked to compare elements of `array`. The order of result values is
                             * determined by the order they occur in the array.The comparator is invoked
                             * with two arguments: (arrVal, othVal).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new duplicate free array.
                             * @example
                             *
                             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                             *
                             * _.uniqWith(objects, _.isEqual);
                             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                             */
                            function uniqWith(array, comparator) {
                                comparator = typeof comparator == 'function' ? comparator : undefined;
                                return array && array.length ? baseUniq(array, undefined, comparator) : [];
                            }

                            /**
                             * This method is like `_.zip` except that it accepts an array of grouped
                             * elements and creates an array regrouping the elements to their pre-zip
                             * configuration.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.2.0
                             * @category Array
                             * @param {Array} array The array of grouped elements to process.
                             * @returns {Array} Returns the new array of regrouped elements.
                             * @example
                             *
                             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                             * // => [['a', 1, true], ['b', 2, false]]
                             *
                             * _.unzip(zipped);
                             * // => [['a', 'b'], [1, 2], [true, false]]
                             */
                            function unzip(array) {
                                if (!(array && array.length)) {
                                    return [];
                                }
                                var length = 0;
                                array = arrayFilter(array, function (group) {
                                    if (isArrayLikeObject(group)) {
                                        length = nativeMax(group.length, length);
                                        return true;
                                    }
                                });
                                return baseTimes(length, function (index) {
                                    return arrayMap(array, baseProperty(index));
                                });
                            }

                            /**
                             * This method is like `_.unzip` except that it accepts `iteratee` to specify
                             * how regrouped values should be combined. The iteratee is invoked with the
                             * elements of each group: (...group).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.8.0
                             * @category Array
                             * @param {Array} array The array of grouped elements to process.
                             * @param {Function} [iteratee=_.identity] The function to combine
                             *  regrouped values.
                             * @returns {Array} Returns the new array of regrouped elements.
                             * @example
                             *
                             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                             * // => [[1, 10, 100], [2, 20, 200]]
                             *
                             * _.unzipWith(zipped, _.add);
                             * // => [3, 30, 300]
                             */
                            function unzipWith(array, iteratee) {
                                if (!(array && array.length)) {
                                    return [];
                                }
                                var result = unzip(array);
                                if (iteratee == null) {
                                    return result;
                                }
                                return arrayMap(result, function (group) {
                                    return apply(iteratee, undefined, group);
                                });
                            }

                            /**
                             * Creates an array excluding all given values using
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons.
                             *
                             * **Note:** Unlike `_.pull`, this method returns a new array.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {Array} array The array to inspect.
                             * @param {...*} [values] The values to exclude.
                             * @returns {Array} Returns the new array of filtered values.
                             * @see _.difference, _.xor
                             * @example
                             *
                             * _.without([2, 1, 2, 3], 1, 2);
                             * // => [3]
                             */
                            var without = baseRest(function (array, values) {
                                return isArrayLikeObject(array) ? baseDifference(array, values) : [];
                            });

                            /**
                             * Creates an array of unique values that is the
                             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                             * of the given arrays. The order of result values is determined by the order
                             * they occur in the arrays.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.4.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @returns {Array} Returns the new array of filtered values.
                             * @see _.difference, _.without
                             * @example
                             *
                             * _.xor([2, 1], [2, 3]);
                             * // => [1, 3]
                             */
                            var xor = baseRest(function (arrays) {
                                return baseXor(arrayFilter(arrays, isArrayLikeObject));
                            });

                            /**
                             * This method is like `_.xor` except that it accepts `iteratee` which is
                             * invoked for each element of each `arrays` to generate the criterion by
                             * which by which they're compared. The order of result values is determined
                             * by the order they occur in the arrays. The iteratee is invoked with one
                             * argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Array} Returns the new array of filtered values.
                             * @example
                             *
                             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                             * // => [1.2, 3.4]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                             * // => [{ 'x': 2 }]
                             */
                            var xorBy = baseRest(function (arrays) {
                                var iteratee = last(arrays);
                                if (isArrayLikeObject(iteratee)) {
                                    iteratee = undefined;
                                }
                                return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                            });

                            /**
                             * This method is like `_.xor` except that it accepts `comparator` which is
                             * invoked to compare elements of `arrays`. The order of result values is
                             * determined by the order they occur in the arrays. The comparator is invoked
                             * with two arguments: (arrVal, othVal).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to inspect.
                             * @param {Function} [comparator] The comparator invoked per element.
                             * @returns {Array} Returns the new array of filtered values.
                             * @example
                             *
                             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                             *
                             * _.xorWith(objects, others, _.isEqual);
                             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                             */
                            var xorWith = baseRest(function (arrays) {
                                var comparator = last(arrays);
                                comparator = typeof comparator == 'function' ? comparator : undefined;
                                return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                            });

                            /**
                             * Creates an array of grouped elements, the first of which contains the
                             * first elements of the given arrays, the second of which contains the
                             * second elements of the given arrays, and so on.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to process.
                             * @returns {Array} Returns the new array of grouped elements.
                             * @example
                             *
                             * _.zip(['a', 'b'], [1, 2], [true, false]);
                             * // => [['a', 1, true], ['b', 2, false]]
                             */
                            var zip = baseRest(unzip);

                            /**
                             * This method is like `_.fromPairs` except that it accepts two arrays,
                             * one of property identifiers and one of corresponding values.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.4.0
                             * @category Array
                             * @param {Array} [props=[]] The property identifiers.
                             * @param {Array} [values=[]] The property values.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * _.zipObject(['a', 'b'], [1, 2]);
                             * // => { 'a': 1, 'b': 2 }
                             */
                            function zipObject(props, values) {
                                return baseZipObject(props || [], values || [], assignValue);
                            }

                            /**
                             * This method is like `_.zipObject` except that it supports property paths.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.1.0
                             * @category Array
                             * @param {Array} [props=[]] The property identifiers.
                             * @param {Array} [values=[]] The property values.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                             */
                            function zipObjectDeep(props, values) {
                                return baseZipObject(props || [], values || [], baseSet);
                            }

                            /**
                             * This method is like `_.zip` except that it accepts `iteratee` to specify
                             * how grouped values should be combined. The iteratee is invoked with the
                             * elements of each group: (...group).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.8.0
                             * @category Array
                             * @param {...Array} [arrays] The arrays to process.
                             * @param {Function} [iteratee=_.identity] The function to combine
                             *  grouped values.
                             * @returns {Array} Returns the new array of grouped elements.
                             * @example
                             *
                             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                             *   return a + b + c;
                             * });
                             * // => [111, 222]
                             */
                            var zipWith = baseRest(function (arrays) {
                                var length = arrays.length,
                                    iteratee = length > 1 ? arrays[length - 1] : undefined;

                                iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                                return unzipWith(arrays, iteratee);
                            });

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                             * chain sequences enabled. The result of such sequences must be unwrapped
                             * with `_#value`.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.3.0
                             * @category Seq
                             * @param {*} value The value to wrap.
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'age': 36 },
                             *   { 'user': 'fred',    'age': 40 },
                             *   { 'user': 'pebbles', 'age': 1 }
                             * ];
                             *
                             * var youngest = _
                             *   .chain(users)
                             *   .sortBy('age')
                             *   .map(function(o) {
                             *     return o.user + ' is ' + o.age;
                             *   })
                             *   .head()
                             *   .value();
                             * // => 'pebbles is 1'
                             */
                            function chain(value) {
                                var result = lodash(value);
                                result.__chain__ = true;
                                return result;
                            }

                            /**
                             * This method invokes `interceptor` and returns `value`. The interceptor
                             * is invoked with one argument; (value). The purpose of this method is to
                             * "tap into" a method chain sequence in order to modify intermediate results.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Seq
                             * @param {*} value The value to provide to `interceptor`.
                             * @param {Function} interceptor The function to invoke.
                             * @returns {*} Returns `value`.
                             * @example
                             *
                             * _([1, 2, 3])
                             *  .tap(function(array) {
                             *    // Mutate input array.
                             *    array.pop();
                             *  })
                             *  .reverse()
                             *  .value();
                             * // => [2, 1]
                             */
                            function tap(value, interceptor) {
                                interceptor(value);
                                return value;
                            }

                            /**
                             * This method is like `_.tap` except that it returns the result of `interceptor`.
                             * The purpose of this method is to "pass thru" values replacing intermediate
                             * results in a method chain sequence.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Seq
                             * @param {*} value The value to provide to `interceptor`.
                             * @param {Function} interceptor The function to invoke.
                             * @returns {*} Returns the result of `interceptor`.
                             * @example
                             *
                             * _('  abc  ')
                             *  .chain()
                             *  .trim()
                             *  .thru(function(value) {
                             *    return [value];
                             *  })
                             *  .value();
                             * // => ['abc']
                             */
                            function thru(value, interceptor) {
                                return interceptor(value);
                            }

                            /**
                             * This method is the wrapper version of `_.at`.
                             *
                             * @name at
                             * @memberOf _
                             * @since 1.0.0
                             * @category Seq
                             * @param {...(string|string[])} [paths] The property paths to pick.
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                             *
                             * _(object).at(['a[0].b.c', 'a[1]']).value();
                             * // => [3, 4]
                             */
                            var wrapperAt = flatRest(function (paths) {
                                var length = paths.length,
                                    start = length ? paths[0] : 0,
                                    value = this.__wrapped__,
                                    interceptor = function (object) {
                                        return baseAt(object, paths);
                                    };

                                if (
                                    length > 1 ||
                                    this.__actions__.length ||
                                    !(value instanceof LazyWrapper) ||
                                    !isIndex(start)
                                ) {
                                    return this.thru(interceptor);
                                }
                                value = value.slice(start, +start + (length ? 1 : 0));
                                value.__actions__.push({
                                    func: thru,
                                    args: [interceptor],
                                    thisArg: undefined,
                                });
                                return new LodashWrapper(value, this.__chain__).thru(function (array) {
                                    if (length && !array.length) {
                                        array.push(undefined);
                                    }
                                    return array;
                                });
                            });

                            /**
                             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                             *
                             * @name chain
                             * @memberOf _
                             * @since 0.1.0
                             * @category Seq
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney', 'age': 36 },
                             *   { 'user': 'fred',   'age': 40 }
                             * ];
                             *
                             * // A sequence without explicit chaining.
                             * _(users).head();
                             * // => { 'user': 'barney', 'age': 36 }
                             *
                             * // A sequence with explicit chaining.
                             * _(users)
                             *   .chain()
                             *   .head()
                             *   .pick('user')
                             *   .value();
                             * // => { 'user': 'barney' }
                             */
                            function wrapperChain() {
                                return chain(this);
                            }

                            /**
                             * Executes the chain sequence and returns the wrapped result.
                             *
                             * @name commit
                             * @memberOf _
                             * @since 3.2.0
                             * @category Seq
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * var array = [1, 2];
                             * var wrapped = _(array).push(3);
                             *
                             * console.log(array);
                             * // => [1, 2]
                             *
                             * wrapped = wrapped.commit();
                             * console.log(array);
                             * // => [1, 2, 3]
                             *
                             * wrapped.last();
                             * // => 3
                             *
                             * console.log(array);
                             * // => [1, 2, 3]
                             */
                            function wrapperCommit() {
                                return new LodashWrapper(this.value(), this.__chain__);
                            }

                            /**
                             * Gets the next value on a wrapped object following the
                             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                             *
                             * @name next
                             * @memberOf _
                             * @since 4.0.0
                             * @category Seq
                             * @returns {Object} Returns the next iterator value.
                             * @example
                             *
                             * var wrapped = _([1, 2]);
                             *
                             * wrapped.next();
                             * // => { 'done': false, 'value': 1 }
                             *
                             * wrapped.next();
                             * // => { 'done': false, 'value': 2 }
                             *
                             * wrapped.next();
                             * // => { 'done': true, 'value': undefined }
                             */
                            function wrapperNext() {
                                if (this.__values__ === undefined) {
                                    this.__values__ = toArray(this.value());
                                }
                                var done = this.__index__ >= this.__values__.length,
                                    value = done ? undefined : this.__values__[this.__index__++];

                                return { done: done, value: value };
                            }

                            /**
                             * Enables the wrapper to be iterable.
                             *
                             * @name Symbol.iterator
                             * @memberOf _
                             * @since 4.0.0
                             * @category Seq
                             * @returns {Object} Returns the wrapper object.
                             * @example
                             *
                             * var wrapped = _([1, 2]);
                             *
                             * wrapped[Symbol.iterator]() === wrapped;
                             * // => true
                             *
                             * Array.from(wrapped);
                             * // => [1, 2]
                             */
                            function wrapperToIterator() {
                                return this;
                            }

                            /**
                             * Creates a clone of the chain sequence planting `value` as the wrapped value.
                             *
                             * @name plant
                             * @memberOf _
                             * @since 3.2.0
                             * @category Seq
                             * @param {*} value The value to plant.
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * function square(n) {
                             *   return n * n;
                             * }
                             *
                             * var wrapped = _([1, 2]).map(square);
                             * var other = wrapped.plant([3, 4]);
                             *
                             * other.value();
                             * // => [9, 16]
                             *
                             * wrapped.value();
                             * // => [1, 4]
                             */
                            function wrapperPlant(value) {
                                var result,
                                    parent = this;

                                while (parent instanceof baseLodash) {
                                    var clone = wrapperClone(parent);
                                    clone.__index__ = 0;
                                    clone.__values__ = undefined;
                                    if (result) {
                                        previous.__wrapped__ = clone;
                                    } else {
                                        result = clone;
                                    }
                                    var previous = clone;
                                    parent = parent.__wrapped__;
                                }
                                previous.__wrapped__ = value;
                                return result;
                            }

                            /**
                             * This method is the wrapper version of `_.reverse`.
                             *
                             * **Note:** This method mutates the wrapped array.
                             *
                             * @name reverse
                             * @memberOf _
                             * @since 0.1.0
                             * @category Seq
                             * @returns {Object} Returns the new `lodash` wrapper instance.
                             * @example
                             *
                             * var array = [1, 2, 3];
                             *
                             * _(array).reverse().value()
                             * // => [3, 2, 1]
                             *
                             * console.log(array);
                             * // => [3, 2, 1]
                             */
                            function wrapperReverse() {
                                var value = this.__wrapped__;
                                if (value instanceof LazyWrapper) {
                                    var wrapped = value;
                                    if (this.__actions__.length) {
                                        wrapped = new LazyWrapper(this);
                                    }
                                    wrapped = wrapped.reverse();
                                    wrapped.__actions__.push({
                                        func: thru,
                                        args: [reverse],
                                        thisArg: undefined,
                                    });
                                    return new LodashWrapper(wrapped, this.__chain__);
                                }
                                return this.thru(reverse);
                            }

                            /**
                             * Executes the chain sequence to resolve the unwrapped value.
                             *
                             * @name value
                             * @memberOf _
                             * @since 0.1.0
                             * @alias toJSON, valueOf
                             * @category Seq
                             * @returns {*} Returns the resolved unwrapped value.
                             * @example
                             *
                             * _([1, 2, 3]).value();
                             * // => [1, 2, 3]
                             */
                            function wrapperValue() {
                                return baseWrapperValue(this.__wrapped__, this.__actions__);
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Creates an object composed of keys generated from the results of running
                             * each element of `collection` thru `iteratee`. The corresponding value of
                             * each key is the number of times the key was returned by `iteratee`. The
                             * iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.5.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                             * @returns {Object} Returns the composed aggregate object.
                             * @example
                             *
                             * _.countBy([6.1, 4.2, 6.3], Math.floor);
                             * // => { '4': 1, '6': 2 }
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.countBy(['one', 'two', 'three'], 'length');
                             * // => { '3': 2, '5': 1 }
                             */
                            var countBy = createAggregator(function (result, value, key) {
                                if (hasOwnProperty.call(result, key)) {
                                    ++result[key];
                                } else {
                                    baseAssignValue(result, key, 1);
                                }
                            });

                            /**
                             * Checks if `predicate` returns truthy for **all** elements of `collection`.
                             * Iteration is stopped once `predicate` returns falsey. The predicate is
                             * invoked with three arguments: (value, index|key, collection).
                             *
                             * **Note:** This method returns `true` for
                             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                             * elements of empty collections.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {boolean} Returns `true` if all elements pass the predicate check,
                             *  else `false`.
                             * @example
                             *
                             * _.every([true, 1, null, 'yes'], Boolean);
                             * // => false
                             *
                             * var users = [
                             *   { 'user': 'barney', 'age': 36, 'active': false },
                             *   { 'user': 'fred',   'age': 40, 'active': false }
                             * ];
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.every(users, { 'user': 'barney', 'active': false });
                             * // => false
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.every(users, ['active', false]);
                             * // => true
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.every(users, 'active');
                             * // => false
                             */
                            function every(collection, predicate, guard) {
                                var func = isArray(collection) ? arrayEvery : baseEvery;
                                if (guard && isIterateeCall(collection, predicate, guard)) {
                                    predicate = undefined;
                                }
                                return func(collection, getIteratee(predicate, 3));
                            }

                            /**
                             * Iterates over elements of `collection`, returning an array of all elements
                             * `predicate` returns truthy for. The predicate is invoked with three
                             * arguments: (value, index|key, collection).
                             *
                             * **Note:** Unlike `_.remove`, this method returns a new array.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the new filtered array.
                             * @see _.reject
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney', 'age': 36, 'active': true },
                             *   { 'user': 'fred',   'age': 40, 'active': false }
                             * ];
                             *
                             * _.filter(users, function(o) { return !o.active; });
                             * // => objects for ['fred']
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.filter(users, { 'age': 36, 'active': true });
                             * // => objects for ['barney']
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.filter(users, ['active', false]);
                             * // => objects for ['fred']
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.filter(users, 'active');
                             * // => objects for ['barney']
                             *
                             * // Combining several predicates using `_.overEvery` or `_.overSome`.
                             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
                             * // => objects for ['fred', 'barney']
                             */
                            function filter(collection, predicate) {
                                var func = isArray(collection) ? arrayFilter : baseFilter;
                                return func(collection, getIteratee(predicate, 3));
                            }

                            /**
                             * Iterates over elements of `collection`, returning the first element
                             * `predicate` returns truthy for. The predicate is invoked with three
                             * arguments: (value, index|key, collection).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to inspect.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @param {number} [fromIndex=0] The index to search from.
                             * @returns {*} Returns the matched element, else `undefined`.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'age': 36, 'active': true },
                             *   { 'user': 'fred',    'age': 40, 'active': false },
                             *   { 'user': 'pebbles', 'age': 1,  'active': true }
                             * ];
                             *
                             * _.find(users, function(o) { return o.age < 40; });
                             * // => object for 'barney'
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.find(users, { 'age': 1, 'active': true });
                             * // => object for 'pebbles'
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.find(users, ['active', false]);
                             * // => object for 'fred'
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.find(users, 'active');
                             * // => object for 'barney'
                             */
                            var find = createFind(findIndex);

                            /**
                             * This method is like `_.find` except that it iterates over elements of
                             * `collection` from right to left.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to inspect.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @param {number} [fromIndex=collection.length-1] The index to search from.
                             * @returns {*} Returns the matched element, else `undefined`.
                             * @example
                             *
                             * _.findLast([1, 2, 3, 4], function(n) {
                             *   return n % 2 == 1;
                             * });
                             * // => 3
                             */
                            var findLast = createFind(findLastIndex);

                            /**
                             * Creates a flattened array of values by running each element in `collection`
                             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                             * with three arguments: (value, index|key, collection).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the new flattened array.
                             * @example
                             *
                             * function duplicate(n) {
                             *   return [n, n];
                             * }
                             *
                             * _.flatMap([1, 2], duplicate);
                             * // => [1, 1, 2, 2]
                             */
                            function flatMap(collection, iteratee) {
                                return baseFlatten(map(collection, iteratee), 1);
                            }

                            /**
                             * This method is like `_.flatMap` except that it recursively flattens the
                             * mapped results.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.7.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the new flattened array.
                             * @example
                             *
                             * function duplicate(n) {
                             *   return [[[n, n]]];
                             * }
                             *
                             * _.flatMapDeep([1, 2], duplicate);
                             * // => [1, 1, 2, 2]
                             */
                            function flatMapDeep(collection, iteratee) {
                                return baseFlatten(map(collection, iteratee), INFINITY);
                            }

                            /**
                             * This method is like `_.flatMap` except that it recursively flattens the
                             * mapped results up to `depth` times.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.7.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @param {number} [depth=1] The maximum recursion depth.
                             * @returns {Array} Returns the new flattened array.
                             * @example
                             *
                             * function duplicate(n) {
                             *   return [[[n, n]]];
                             * }
                             *
                             * _.flatMapDepth([1, 2], duplicate, 2);
                             * // => [[1, 1], [2, 2]]
                             */
                            function flatMapDepth(collection, iteratee, depth) {
                                depth = depth === undefined ? 1 : toInteger(depth);
                                return baseFlatten(map(collection, iteratee), depth);
                            }

                            /**
                             * Iterates over elements of `collection` and invokes `iteratee` for each element.
                             * The iteratee is invoked with three arguments: (value, index|key, collection).
                             * Iteratee functions may exit iteration early by explicitly returning `false`.
                             *
                             * **Note:** As with other "Collections" methods, objects with a "length"
                             * property are iterated like arrays. To avoid this behavior use `_.forIn`
                             * or `_.forOwn` for object iteration.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @alias each
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Array|Object} Returns `collection`.
                             * @see _.forEachRight
                             * @example
                             *
                             * _.forEach([1, 2], function(value) {
                             *   console.log(value);
                             * });
                             * // => Logs `1` then `2`.
                             *
                             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                             *   console.log(key);
                             * });
                             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                             */
                            function forEach(collection, iteratee) {
                                var func = isArray(collection) ? arrayEach : baseEach;
                                return func(collection, getIteratee(iteratee, 3));
                            }

                            /**
                             * This method is like `_.forEach` except that it iterates over elements of
                             * `collection` from right to left.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @alias eachRight
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Array|Object} Returns `collection`.
                             * @see _.forEach
                             * @example
                             *
                             * _.forEachRight([1, 2], function(value) {
                             *   console.log(value);
                             * });
                             * // => Logs `2` then `1`.
                             */
                            function forEachRight(collection, iteratee) {
                                var func = isArray(collection) ? arrayEachRight : baseEachRight;
                                return func(collection, getIteratee(iteratee, 3));
                            }

                            /**
                             * Creates an object composed of keys generated from the results of running
                             * each element of `collection` thru `iteratee`. The order of grouped values
                             * is determined by the order they occur in `collection`. The corresponding
                             * value of each key is an array of elements responsible for generating the
                             * key. The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                             * @returns {Object} Returns the composed aggregate object.
                             * @example
                             *
                             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                             * // => { '4': [4.2], '6': [6.1, 6.3] }
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.groupBy(['one', 'two', 'three'], 'length');
                             * // => { '3': ['one', 'two'], '5': ['three'] }
                             */
                            var groupBy = createAggregator(function (result, value, key) {
                                if (hasOwnProperty.call(result, key)) {
                                    result[key].push(value);
                                } else {
                                    baseAssignValue(result, key, [value]);
                                }
                            });

                            /**
                             * Checks if `value` is in `collection`. If `collection` is a string, it's
                             * checked for a substring of `value`, otherwise
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * is used for equality comparisons. If `fromIndex` is negative, it's used as
                             * the offset from the end of `collection`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object|string} collection The collection to inspect.
                             * @param {*} value The value to search for.
                             * @param {number} [fromIndex=0] The index to search from.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                             * @returns {boolean} Returns `true` if `value` is found, else `false`.
                             * @example
                             *
                             * _.includes([1, 2, 3], 1);
                             * // => true
                             *
                             * _.includes([1, 2, 3], 1, 2);
                             * // => false
                             *
                             * _.includes({ 'a': 1, 'b': 2 }, 1);
                             * // => true
                             *
                             * _.includes('abcd', 'bc');
                             * // => true
                             */
                            function includes(collection, value, fromIndex, guard) {
                                collection = isArrayLike(collection) ? collection : values(collection);
                                fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

                                var length = collection.length;
                                if (fromIndex < 0) {
                                    fromIndex = nativeMax(length + fromIndex, 0);
                                }
                                return isString(collection)
                                    ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
                                    : !!length && baseIndexOf(collection, value, fromIndex) > -1;
                            }

                            /**
                             * Invokes the method at `path` of each element in `collection`, returning
                             * an array of the results of each invoked method. Any additional arguments
                             * are provided to each invoked method. If `path` is a function, it's invoked
                             * for, and `this` bound to, each element in `collection`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Array|Function|string} path The path of the method to invoke or
                             *  the function invoked per iteration.
                             * @param {...*} [args] The arguments to invoke each method with.
                             * @returns {Array} Returns the array of results.
                             * @example
                             *
                             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                             * // => [[1, 5, 7], [1, 2, 3]]
                             *
                             * _.invokeMap([123, 456], String.prototype.split, '');
                             * // => [['1', '2', '3'], ['4', '5', '6']]
                             */
                            var invokeMap = baseRest(function (collection, path, args) {
                                var index = -1,
                                    isFunc = typeof path == 'function',
                                    result = isArrayLike(collection) ? Array(collection.length) : [];

                                baseEach(collection, function (value) {
                                    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                                });
                                return result;
                            });

                            /**
                             * Creates an object composed of keys generated from the results of running
                             * each element of `collection` thru `iteratee`. The corresponding value of
                             * each key is the last element responsible for generating the key. The
                             * iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                             * @returns {Object} Returns the composed aggregate object.
                             * @example
                             *
                             * var array = [
                             *   { 'dir': 'left', 'code': 97 },
                             *   { 'dir': 'right', 'code': 100 }
                             * ];
                             *
                             * _.keyBy(array, function(o) {
                             *   return String.fromCharCode(o.code);
                             * });
                             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                             *
                             * _.keyBy(array, 'dir');
                             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                             */
                            var keyBy = createAggregator(function (result, value, key) {
                                baseAssignValue(result, key, value);
                            });

                            /**
                             * Creates an array of values by running each element in `collection` thru
                             * `iteratee`. The iteratee is invoked with three arguments:
                             * (value, index|key, collection).
                             *
                             * Many lodash methods are guarded to work as iteratees for methods like
                             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                             *
                             * The guarded methods are:
                             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the new mapped array.
                             * @example
                             *
                             * function square(n) {
                             *   return n * n;
                             * }
                             *
                             * _.map([4, 8], square);
                             * // => [16, 64]
                             *
                             * _.map({ 'a': 4, 'b': 8 }, square);
                             * // => [16, 64] (iteration order is not guaranteed)
                             *
                             * var users = [
                             *   { 'user': 'barney' },
                             *   { 'user': 'fred' }
                             * ];
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.map(users, 'user');
                             * // => ['barney', 'fred']
                             */
                            function map(collection, iteratee) {
                                var func = isArray(collection) ? arrayMap : baseMap;
                                return func(collection, getIteratee(iteratee, 3));
                            }

                            /**
                             * This method is like `_.sortBy` except that it allows specifying the sort
                             * orders of the iteratees to sort by. If `orders` is unspecified, all values
                             * are sorted in ascending order. Otherwise, specify an order of "desc" for
                             * descending or "asc" for ascending sort order of corresponding values.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                             *  The iteratees to sort by.
                             * @param {string[]} [orders] The sort orders of `iteratees`.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                             * @returns {Array} Returns the new sorted array.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'fred',   'age': 48 },
                             *   { 'user': 'barney', 'age': 34 },
                             *   { 'user': 'fred',   'age': 40 },
                             *   { 'user': 'barney', 'age': 36 }
                             * ];
                             *
                             * // Sort by `user` in ascending order and by `age` in descending order.
                             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                             */
                            function orderBy(collection, iteratees, orders, guard) {
                                if (collection == null) {
                                    return [];
                                }
                                if (!isArray(iteratees)) {
                                    iteratees = iteratees == null ? [] : [iteratees];
                                }
                                orders = guard ? undefined : orders;
                                if (!isArray(orders)) {
                                    orders = orders == null ? [] : [orders];
                                }
                                return baseOrderBy(collection, iteratees, orders);
                            }

                            /**
                             * Creates an array of elements split into two groups, the first of which
                             * contains elements `predicate` returns truthy for, the second of which
                             * contains elements `predicate` returns falsey for. The predicate is
                             * invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the array of grouped elements.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney',  'age': 36, 'active': false },
                             *   { 'user': 'fred',    'age': 40, 'active': true },
                             *   { 'user': 'pebbles', 'age': 1,  'active': false }
                             * ];
                             *
                             * _.partition(users, function(o) { return o.active; });
                             * // => objects for [['fred'], ['barney', 'pebbles']]
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.partition(users, { 'age': 1, 'active': false });
                             * // => objects for [['pebbles'], ['barney', 'fred']]
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.partition(users, ['active', false]);
                             * // => objects for [['barney', 'pebbles'], ['fred']]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.partition(users, 'active');
                             * // => objects for [['fred'], ['barney', 'pebbles']]
                             */
                            var partition = createAggregator(
                                function (result, value, key) {
                                    result[key ? 0 : 1].push(value);
                                },
                                function () {
                                    return [[], []];
                                },
                            );

                            /**
                             * Reduces `collection` to a value which is the accumulated result of running
                             * each element in `collection` thru `iteratee`, where each successive
                             * invocation is supplied the return value of the previous. If `accumulator`
                             * is not given, the first element of `collection` is used as the initial
                             * value. The iteratee is invoked with four arguments:
                             * (accumulator, value, index|key, collection).
                             *
                             * Many lodash methods are guarded to work as iteratees for methods like
                             * `_.reduce`, `_.reduceRight`, and `_.transform`.
                             *
                             * The guarded methods are:
                             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                             * and `sortBy`
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @param {*} [accumulator] The initial value.
                             * @returns {*} Returns the accumulated value.
                             * @see _.reduceRight
                             * @example
                             *
                             * _.reduce([1, 2], function(sum, n) {
                             *   return sum + n;
                             * }, 0);
                             * // => 3
                             *
                             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                             *   (result[value] || (result[value] = [])).push(key);
                             *   return result;
                             * }, {});
                             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                             */
                            function reduce(collection, iteratee, accumulator) {
                                var func = isArray(collection) ? arrayReduce : baseReduce,
                                    initAccum = arguments.length < 3;

                                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                            }

                            /**
                             * This method is like `_.reduce` except that it iterates over elements of
                             * `collection` from right to left.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @param {*} [accumulator] The initial value.
                             * @returns {*} Returns the accumulated value.
                             * @see _.reduce
                             * @example
                             *
                             * var array = [[0, 1], [2, 3], [4, 5]];
                             *
                             * _.reduceRight(array, function(flattened, other) {
                             *   return flattened.concat(other);
                             * }, []);
                             * // => [4, 5, 2, 3, 0, 1]
                             */
                            function reduceRight(collection, iteratee, accumulator) {
                                var func = isArray(collection) ? arrayReduceRight : baseReduce,
                                    initAccum = arguments.length < 3;

                                return func(
                                    collection,
                                    getIteratee(iteratee, 4),
                                    accumulator,
                                    initAccum,
                                    baseEachRight,
                                );
                            }

                            /**
                             * The opposite of `_.filter`; this method returns the elements of `collection`
                             * that `predicate` does **not** return truthy for.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the new filtered array.
                             * @see _.filter
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney', 'age': 36, 'active': false },
                             *   { 'user': 'fred',   'age': 40, 'active': true }
                             * ];
                             *
                             * _.reject(users, function(o) { return !o.active; });
                             * // => objects for ['fred']
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.reject(users, { 'age': 40, 'active': true });
                             * // => objects for ['barney']
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.reject(users, ['active', false]);
                             * // => objects for ['fred']
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.reject(users, 'active');
                             * // => objects for ['barney']
                             */
                            function reject(collection, predicate) {
                                var func = isArray(collection) ? arrayFilter : baseFilter;
                                return func(collection, negate(getIteratee(predicate, 3)));
                            }

                            /**
                             * Gets a random element from `collection`.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to sample.
                             * @returns {*} Returns the random element.
                             * @example
                             *
                             * _.sample([1, 2, 3, 4]);
                             * // => 2
                             */
                            function sample(collection) {
                                var func = isArray(collection) ? arraySample : baseSample;
                                return func(collection);
                            }

                            /**
                             * Gets `n` random elements at unique keys from `collection` up to the
                             * size of `collection`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to sample.
                             * @param {number} [n=1] The number of elements to sample.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the random elements.
                             * @example
                             *
                             * _.sampleSize([1, 2, 3], 2);
                             * // => [3, 1]
                             *
                             * _.sampleSize([1, 2, 3], 4);
                             * // => [2, 3, 1]
                             */
                            function sampleSize(collection, n, guard) {
                                if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
                                    n = 1;
                                } else {
                                    n = toInteger(n);
                                }
                                var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                                return func(collection, n);
                            }

                            /**
                             * Creates an array of shuffled values, using a version of the
                             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to shuffle.
                             * @returns {Array} Returns the new shuffled array.
                             * @example
                             *
                             * _.shuffle([1, 2, 3, 4]);
                             * // => [4, 1, 3, 2]
                             */
                            function shuffle(collection) {
                                var func = isArray(collection) ? arrayShuffle : baseShuffle;
                                return func(collection);
                            }

                            /**
                             * Gets the size of `collection` by returning its length for array-like
                             * values or the number of own enumerable string keyed properties for objects.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object|string} collection The collection to inspect.
                             * @returns {number} Returns the collection size.
                             * @example
                             *
                             * _.size([1, 2, 3]);
                             * // => 3
                             *
                             * _.size({ 'a': 1, 'b': 2 });
                             * // => 2
                             *
                             * _.size('pebbles');
                             * // => 7
                             */
                            function size(collection) {
                                if (collection == null) {
                                    return 0;
                                }
                                if (isArrayLike(collection)) {
                                    return isString(collection) ? stringSize(collection) : collection.length;
                                }
                                var tag = getTag(collection);
                                if (tag == mapTag || tag == setTag) {
                                    return collection.size;
                                }
                                return baseKeys(collection).length;
                            }

                            /**
                             * Checks if `predicate` returns truthy for **any** element of `collection`.
                             * Iteration is stopped once `predicate` returns truthy. The predicate is
                             * invoked with three arguments: (value, index|key, collection).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {boolean} Returns `true` if any element passes the predicate check,
                             *  else `false`.
                             * @example
                             *
                             * _.some([null, 0, 'yes', false], Boolean);
                             * // => true
                             *
                             * var users = [
                             *   { 'user': 'barney', 'active': true },
                             *   { 'user': 'fred',   'active': false }
                             * ];
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.some(users, { 'user': 'barney', 'active': false });
                             * // => false
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.some(users, ['active', false]);
                             * // => true
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.some(users, 'active');
                             * // => true
                             */
                            function some(collection, predicate, guard) {
                                var func = isArray(collection) ? arraySome : baseSome;
                                if (guard && isIterateeCall(collection, predicate, guard)) {
                                    predicate = undefined;
                                }
                                return func(collection, getIteratee(predicate, 3));
                            }

                            /**
                             * Creates an array of elements, sorted in ascending order by the results of
                             * running each element in a collection thru each iteratee. This method
                             * performs a stable sort, that is, it preserves the original sort order of
                             * equal elements. The iteratees are invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Collection
                             * @param {Array|Object} collection The collection to iterate over.
                             * @param {...(Function|Function[])} [iteratees=[_.identity]]
                             *  The iteratees to sort by.
                             * @returns {Array} Returns the new sorted array.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'fred',   'age': 48 },
                             *   { 'user': 'barney', 'age': 36 },
                             *   { 'user': 'fred',   'age': 30 },
                             *   { 'user': 'barney', 'age': 34 }
                             * ];
                             *
                             * _.sortBy(users, [function(o) { return o.user; }]);
                             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
                             *
                             * _.sortBy(users, ['user', 'age']);
                             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
                             */
                            var sortBy = baseRest(function (collection, iteratees) {
                                if (collection == null) {
                                    return [];
                                }
                                var length = iteratees.length;
                                if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                                    iteratees = [];
                                } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                                    iteratees = [iteratees[0]];
                                }
                                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                            });

                            /*------------------------------------------------------------------------*/

                            /**
                             * Gets the timestamp of the number of milliseconds that have elapsed since
                             * the Unix epoch (1 January 1970 00:00:00 UTC).
                             *
                             * @static
                             * @memberOf _
                             * @since 2.4.0
                             * @category Date
                             * @returns {number} Returns the timestamp.
                             * @example
                             *
                             * _.defer(function(stamp) {
                             *   console.log(_.now() - stamp);
                             * }, _.now());
                             * // => Logs the number of milliseconds it took for the deferred invocation.
                             */
                            var now =
                                ctxNow ||
                                function () {
                                    return root.Date.now();
                                };

                            /*------------------------------------------------------------------------*/

                            /**
                             * The opposite of `_.before`; this method creates a function that invokes
                             * `func` once it's called `n` or more times.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {number} n The number of calls before `func` is invoked.
                             * @param {Function} func The function to restrict.
                             * @returns {Function} Returns the new restricted function.
                             * @example
                             *
                             * var saves = ['profile', 'settings'];
                             *
                             * var done = _.after(saves.length, function() {
                             *   console.log('done saving!');
                             * });
                             *
                             * _.forEach(saves, function(type) {
                             *   asyncSave({ 'type': type, 'complete': done });
                             * });
                             * // => Logs 'done saving!' after the two async saves have completed.
                             */
                            function after(n, func) {
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                n = toInteger(n);
                                return function () {
                                    if (--n < 1) {
                                        return func.apply(this, arguments);
                                    }
                                };
                            }

                            /**
                             * Creates a function that invokes `func`, with up to `n` arguments,
                             * ignoring any additional arguments.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Function
                             * @param {Function} func The function to cap arguments for.
                             * @param {number} [n=func.length] The arity cap.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Function} Returns the new capped function.
                             * @example
                             *
                             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                             * // => [6, 8, 10]
                             */
                            function ary(func, n, guard) {
                                n = guard ? undefined : n;
                                n = func && n == null ? func.length : n;
                                return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                            }

                            /**
                             * Creates a function that invokes `func`, with the `this` binding and arguments
                             * of the created function, while it's called less than `n` times. Subsequent
                             * calls to the created function return the result of the last `func` invocation.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Function
                             * @param {number} n The number of calls at which `func` is no longer invoked.
                             * @param {Function} func The function to restrict.
                             * @returns {Function} Returns the new restricted function.
                             * @example
                             *
                             * jQuery(element).on('click', _.before(5, addContactToList));
                             * // => Allows adding up to 4 contacts to the list.
                             */
                            function before(n, func) {
                                var result;
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                n = toInteger(n);
                                return function () {
                                    if (--n > 0) {
                                        result = func.apply(this, arguments);
                                    }
                                    if (n <= 1) {
                                        func = undefined;
                                    }
                                    return result;
                                };
                            }

                            /**
                             * Creates a function that invokes `func` with the `this` binding of `thisArg`
                             * and `partials` prepended to the arguments it receives.
                             *
                             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                             * may be used as a placeholder for partially applied arguments.
                             *
                             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                             * property of bound functions.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to bind.
                             * @param {*} thisArg The `this` binding of `func`.
                             * @param {...*} [partials] The arguments to be partially applied.
                             * @returns {Function} Returns the new bound function.
                             * @example
                             *
                             * function greet(greeting, punctuation) {
                             *   return greeting + ' ' + this.user + punctuation;
                             * }
                             *
                             * var object = { 'user': 'fred' };
                             *
                             * var bound = _.bind(greet, object, 'hi');
                             * bound('!');
                             * // => 'hi fred!'
                             *
                             * // Bound with placeholders.
                             * var bound = _.bind(greet, object, _, '!');
                             * bound('hi');
                             * // => 'hi fred!'
                             */
                            var bind = baseRest(function (func, thisArg, partials) {
                                var bitmask = WRAP_BIND_FLAG;
                                if (partials.length) {
                                    var holders = replaceHolders(partials, getHolder(bind));
                                    bitmask |= WRAP_PARTIAL_FLAG;
                                }
                                return createWrap(func, bitmask, thisArg, partials, holders);
                            });

                            /**
                             * Creates a function that invokes the method at `object[key]` with `partials`
                             * prepended to the arguments it receives.
                             *
                             * This method differs from `_.bind` by allowing bound functions to reference
                             * methods that may be redefined or don't yet exist. See
                             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                             * for more details.
                             *
                             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                             * builds, may be used as a placeholder for partially applied arguments.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.10.0
                             * @category Function
                             * @param {Object} object The object to invoke the method on.
                             * @param {string} key The key of the method.
                             * @param {...*} [partials] The arguments to be partially applied.
                             * @returns {Function} Returns the new bound function.
                             * @example
                             *
                             * var object = {
                             *   'user': 'fred',
                             *   'greet': function(greeting, punctuation) {
                             *     return greeting + ' ' + this.user + punctuation;
                             *   }
                             * };
                             *
                             * var bound = _.bindKey(object, 'greet', 'hi');
                             * bound('!');
                             * // => 'hi fred!'
                             *
                             * object.greet = function(greeting, punctuation) {
                             *   return greeting + 'ya ' + this.user + punctuation;
                             * };
                             *
                             * bound('!');
                             * // => 'hiya fred!'
                             *
                             * // Bound with placeholders.
                             * var bound = _.bindKey(object, 'greet', _, '!');
                             * bound('hi');
                             * // => 'hiya fred!'
                             */
                            var bindKey = baseRest(function (object, key, partials) {
                                var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                                if (partials.length) {
                                    var holders = replaceHolders(partials, getHolder(bindKey));
                                    bitmask |= WRAP_PARTIAL_FLAG;
                                }
                                return createWrap(key, bitmask, object, partials, holders);
                            });

                            /**
                             * Creates a function that accepts arguments of `func` and either invokes
                             * `func` returning its result, if at least `arity` number of arguments have
                             * been provided, or returns a function that accepts the remaining `func`
                             * arguments, and so on. The arity of `func` may be specified if `func.length`
                             * is not sufficient.
                             *
                             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                             * may be used as a placeholder for provided arguments.
                             *
                             * **Note:** This method doesn't set the "length" property of curried functions.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Function
                             * @param {Function} func The function to curry.
                             * @param {number} [arity=func.length] The arity of `func`.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Function} Returns the new curried function.
                             * @example
                             *
                             * var abc = function(a, b, c) {
                             *   return [a, b, c];
                             * };
                             *
                             * var curried = _.curry(abc);
                             *
                             * curried(1)(2)(3);
                             * // => [1, 2, 3]
                             *
                             * curried(1, 2)(3);
                             * // => [1, 2, 3]
                             *
                             * curried(1, 2, 3);
                             * // => [1, 2, 3]
                             *
                             * // Curried with placeholders.
                             * curried(1)(_, 3)(2);
                             * // => [1, 2, 3]
                             */
                            function curry(func, arity, guard) {
                                arity = guard ? undefined : arity;
                                var result = createWrap(
                                    func,
                                    WRAP_CURRY_FLAG,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    arity,
                                );
                                result.placeholder = curry.placeholder;
                                return result;
                            }

                            /**
                             * This method is like `_.curry` except that arguments are applied to `func`
                             * in the manner of `_.partialRight` instead of `_.partial`.
                             *
                             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                             * builds, may be used as a placeholder for provided arguments.
                             *
                             * **Note:** This method doesn't set the "length" property of curried functions.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Function
                             * @param {Function} func The function to curry.
                             * @param {number} [arity=func.length] The arity of `func`.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Function} Returns the new curried function.
                             * @example
                             *
                             * var abc = function(a, b, c) {
                             *   return [a, b, c];
                             * };
                             *
                             * var curried = _.curryRight(abc);
                             *
                             * curried(3)(2)(1);
                             * // => [1, 2, 3]
                             *
                             * curried(2, 3)(1);
                             * // => [1, 2, 3]
                             *
                             * curried(1, 2, 3);
                             * // => [1, 2, 3]
                             *
                             * // Curried with placeholders.
                             * curried(3)(1, _)(2);
                             * // => [1, 2, 3]
                             */
                            function curryRight(func, arity, guard) {
                                arity = guard ? undefined : arity;
                                var result = createWrap(
                                    func,
                                    WRAP_CURRY_RIGHT_FLAG,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    arity,
                                );
                                result.placeholder = curryRight.placeholder;
                                return result;
                            }

                            /**
                             * Creates a debounced function that delays invoking `func` until after `wait`
                             * milliseconds have elapsed since the last time the debounced function was
                             * invoked. The debounced function comes with a `cancel` method to cancel
                             * delayed `func` invocations and a `flush` method to immediately invoke them.
                             * Provide `options` to indicate whether `func` should be invoked on the
                             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                             * with the last arguments provided to the debounced function. Subsequent
                             * calls to the debounced function return the result of the last `func`
                             * invocation.
                             *
                             * **Note:** If `leading` and `trailing` options are `true`, `func` is
                             * invoked on the trailing edge of the timeout only if the debounced function
                             * is invoked more than once during the `wait` timeout.
                             *
                             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                             *
                             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                             * for details over the differences between `_.debounce` and `_.throttle`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to debounce.
                             * @param {number} [wait=0] The number of milliseconds to delay.
                             * @param {Object} [options={}] The options object.
                             * @param {boolean} [options.leading=false]
                             *  Specify invoking on the leading edge of the timeout.
                             * @param {number} [options.maxWait]
                             *  The maximum time `func` is allowed to be delayed before it's invoked.
                             * @param {boolean} [options.trailing=true]
                             *  Specify invoking on the trailing edge of the timeout.
                             * @returns {Function} Returns the new debounced function.
                             * @example
                             *
                             * // Avoid costly calculations while the window size is in flux.
                             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                             *
                             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                             * jQuery(element).on('click', _.debounce(sendMail, 300, {
                             *   'leading': true,
                             *   'trailing': false
                             * }));
                             *
                             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                             * var source = new EventSource('/stream');
                             * jQuery(source).on('message', debounced);
                             *
                             * // Cancel the trailing debounced invocation.
                             * jQuery(window).on('popstate', debounced.cancel);
                             */
                            function debounce(func, wait, options) {
                                var lastArgs,
                                    lastThis,
                                    maxWait,
                                    result,
                                    timerId,
                                    lastCallTime,
                                    lastInvokeTime = 0,
                                    leading = false,
                                    maxing = false,
                                    trailing = true;

                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                wait = toNumber(wait) || 0;
                                if (isObject(options)) {
                                    leading = !!options.leading;
                                    maxing = 'maxWait' in options;
                                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                                }

                                function invokeFunc(time) {
                                    var args = lastArgs,
                                        thisArg = lastThis;

                                    lastArgs = lastThis = undefined;
                                    lastInvokeTime = time;
                                    result = func.apply(thisArg, args);
                                    return result;
                                }

                                function leadingEdge(time) {
                                    // Reset any `maxWait` timer.
                                    lastInvokeTime = time;
                                    // Start the timer for the trailing edge.
                                    timerId = setTimeout(timerExpired, wait);
                                    // Invoke the leading edge.
                                    return leading ? invokeFunc(time) : result;
                                }

                                function remainingWait(time) {
                                    var timeSinceLastCall = time - lastCallTime,
                                        timeSinceLastInvoke = time - lastInvokeTime,
                                        timeWaiting = wait - timeSinceLastCall;

                                    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
                                }

                                function shouldInvoke(time) {
                                    var timeSinceLastCall = time - lastCallTime,
                                        timeSinceLastInvoke = time - lastInvokeTime;

                                    // Either this is the first call, activity has stopped and we're at the
                                    // trailing edge, the system time has gone backwards and we're treating
                                    // it as the trailing edge, or we've hit the `maxWait` limit.
                                    return (
                                        lastCallTime === undefined ||
                                        timeSinceLastCall >= wait ||
                                        timeSinceLastCall < 0 ||
                                        (maxing && timeSinceLastInvoke >= maxWait)
                                    );
                                }

                                function timerExpired() {
                                    var time = now();
                                    if (shouldInvoke(time)) {
                                        return trailingEdge(time);
                                    }
                                    // Restart the timer.
                                    timerId = setTimeout(timerExpired, remainingWait(time));
                                }

                                function trailingEdge(time) {
                                    timerId = undefined;

                                    // Only invoke if we have `lastArgs` which means `func` has been
                                    // debounced at least once.
                                    if (trailing && lastArgs) {
                                        return invokeFunc(time);
                                    }
                                    lastArgs = lastThis = undefined;
                                    return result;
                                }

                                function cancel() {
                                    if (timerId !== undefined) {
                                        clearTimeout(timerId);
                                    }
                                    lastInvokeTime = 0;
                                    lastArgs = lastCallTime = lastThis = timerId = undefined;
                                }

                                function flush() {
                                    return timerId === undefined ? result : trailingEdge(now());
                                }

                                function debounced() {
                                    var time = now(),
                                        isInvoking = shouldInvoke(time);

                                    lastArgs = arguments;
                                    lastThis = this;
                                    lastCallTime = time;

                                    if (isInvoking) {
                                        if (timerId === undefined) {
                                            return leadingEdge(lastCallTime);
                                        }
                                        if (maxing) {
                                            // Handle invocations in a tight loop.
                                            clearTimeout(timerId);
                                            timerId = setTimeout(timerExpired, wait);
                                            return invokeFunc(lastCallTime);
                                        }
                                    }
                                    if (timerId === undefined) {
                                        timerId = setTimeout(timerExpired, wait);
                                    }
                                    return result;
                                }
                                debounced.cancel = cancel;
                                debounced.flush = flush;
                                return debounced;
                            }

                            /**
                             * Defers invoking the `func` until the current call stack has cleared. Any
                             * additional arguments are provided to `func` when it's invoked.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to defer.
                             * @param {...*} [args] The arguments to invoke `func` with.
                             * @returns {number} Returns the timer id.
                             * @example
                             *
                             * _.defer(function(text) {
                             *   console.log(text);
                             * }, 'deferred');
                             * // => Logs 'deferred' after one millisecond.
                             */
                            var defer = baseRest(function (func, args) {
                                return baseDelay(func, 1, args);
                            });

                            /**
                             * Invokes `func` after `wait` milliseconds. Any additional arguments are
                             * provided to `func` when it's invoked.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to delay.
                             * @param {number} wait The number of milliseconds to delay invocation.
                             * @param {...*} [args] The arguments to invoke `func` with.
                             * @returns {number} Returns the timer id.
                             * @example
                             *
                             * _.delay(function(text) {
                             *   console.log(text);
                             * }, 1000, 'later');
                             * // => Logs 'later' after one second.
                             */
                            var delay = baseRest(function (func, wait, args) {
                                return baseDelay(func, toNumber(wait) || 0, args);
                            });

                            /**
                             * Creates a function that invokes `func` with arguments reversed.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Function
                             * @param {Function} func The function to flip arguments for.
                             * @returns {Function} Returns the new flipped function.
                             * @example
                             *
                             * var flipped = _.flip(function() {
                             *   return _.toArray(arguments);
                             * });
                             *
                             * flipped('a', 'b', 'c', 'd');
                             * // => ['d', 'c', 'b', 'a']
                             */
                            function flip(func) {
                                return createWrap(func, WRAP_FLIP_FLAG);
                            }

                            /**
                             * Creates a function that memoizes the result of `func`. If `resolver` is
                             * provided, it determines the cache key for storing the result based on the
                             * arguments provided to the memoized function. By default, the first argument
                             * provided to the memoized function is used as the map cache key. The `func`
                             * is invoked with the `this` binding of the memoized function.
                             *
                             * **Note:** The cache is exposed as the `cache` property on the memoized
                             * function. Its creation may be customized by replacing the `_.memoize.Cache`
                             * constructor with one whose instances implement the
                             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to have its output memoized.
                             * @param {Function} [resolver] The function to resolve the cache key.
                             * @returns {Function} Returns the new memoized function.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': 2 };
                             * var other = { 'c': 3, 'd': 4 };
                             *
                             * var values = _.memoize(_.values);
                             * values(object);
                             * // => [1, 2]
                             *
                             * values(other);
                             * // => [3, 4]
                             *
                             * object.a = 2;
                             * values(object);
                             * // => [1, 2]
                             *
                             * // Modify the result cache.
                             * values.cache.set(object, ['a', 'b']);
                             * values(object);
                             * // => ['a', 'b']
                             *
                             * // Replace `_.memoize.Cache`.
                             * _.memoize.Cache = WeakMap;
                             */
                            function memoize(func, resolver) {
                                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                var memoized = function () {
                                    var args = arguments,
                                        key = resolver ? resolver.apply(this, args) : args[0],
                                        cache = memoized.cache;

                                    if (cache.has(key)) {
                                        return cache.get(key);
                                    }
                                    var result = func.apply(this, args);
                                    memoized.cache = cache.set(key, result) || cache;
                                    return result;
                                };
                                memoized.cache = new (memoize.Cache || MapCache)();
                                return memoized;
                            }

                            // Expose `MapCache`.
                            memoize.Cache = MapCache;

                            /**
                             * Creates a function that negates the result of the predicate `func`. The
                             * `func` predicate is invoked with the `this` binding and arguments of the
                             * created function.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Function
                             * @param {Function} predicate The predicate to negate.
                             * @returns {Function} Returns the new negated function.
                             * @example
                             *
                             * function isEven(n) {
                             *   return n % 2 == 0;
                             * }
                             *
                             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                             * // => [1, 3, 5]
                             */
                            function negate(predicate) {
                                if (typeof predicate != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                return function () {
                                    var args = arguments;
                                    switch (args.length) {
                                        case 0:
                                            return !predicate.call(this);
                                        case 1:
                                            return !predicate.call(this, args[0]);
                                        case 2:
                                            return !predicate.call(this, args[0], args[1]);
                                        case 3:
                                            return !predicate.call(this, args[0], args[1], args[2]);
                                    }
                                    return !predicate.apply(this, args);
                                };
                            }

                            /**
                             * Creates a function that is restricted to invoking `func` once. Repeat calls
                             * to the function return the value of the first invocation. The `func` is
                             * invoked with the `this` binding and arguments of the created function.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to restrict.
                             * @returns {Function} Returns the new restricted function.
                             * @example
                             *
                             * var initialize = _.once(createApplication);
                             * initialize();
                             * initialize();
                             * // => `createApplication` is invoked once
                             */
                            function once(func) {
                                return before(2, func);
                            }

                            /**
                             * Creates a function that invokes `func` with its arguments transformed.
                             *
                             * @static
                             * @since 4.0.0
                             * @memberOf _
                             * @category Function
                             * @param {Function} func The function to wrap.
                             * @param {...(Function|Function[])} [transforms=[_.identity]]
                             *  The argument transforms.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * function doubled(n) {
                             *   return n * 2;
                             * }
                             *
                             * function square(n) {
                             *   return n * n;
                             * }
                             *
                             * var func = _.overArgs(function(x, y) {
                             *   return [x, y];
                             * }, [square, doubled]);
                             *
                             * func(9, 3);
                             * // => [81, 6]
                             *
                             * func(10, 5);
                             * // => [100, 10]
                             */
                            var overArgs = castRest(function (func, transforms) {
                                transforms =
                                    transforms.length == 1 && isArray(transforms[0])
                                        ? arrayMap(transforms[0], baseUnary(getIteratee()))
                                        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                                var funcsLength = transforms.length;
                                return baseRest(function (args) {
                                    var index = -1,
                                        length = nativeMin(args.length, funcsLength);

                                    while (++index < length) {
                                        args[index] = transforms[index].call(this, args[index]);
                                    }
                                    return apply(func, this, args);
                                });
                            });

                            /**
                             * Creates a function that invokes `func` with `partials` prepended to the
                             * arguments it receives. This method is like `_.bind` except it does **not**
                             * alter the `this` binding.
                             *
                             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                             * builds, may be used as a placeholder for partially applied arguments.
                             *
                             * **Note:** This method doesn't set the "length" property of partially
                             * applied functions.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.2.0
                             * @category Function
                             * @param {Function} func The function to partially apply arguments to.
                             * @param {...*} [partials] The arguments to be partially applied.
                             * @returns {Function} Returns the new partially applied function.
                             * @example
                             *
                             * function greet(greeting, name) {
                             *   return greeting + ' ' + name;
                             * }
                             *
                             * var sayHelloTo = _.partial(greet, 'hello');
                             * sayHelloTo('fred');
                             * // => 'hello fred'
                             *
                             * // Partially applied with placeholders.
                             * var greetFred = _.partial(greet, _, 'fred');
                             * greetFred('hi');
                             * // => 'hi fred'
                             */
                            var partial = baseRest(function (func, partials) {
                                var holders = replaceHolders(partials, getHolder(partial));
                                return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                            });

                            /**
                             * This method is like `_.partial` except that partially applied arguments
                             * are appended to the arguments it receives.
                             *
                             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                             * builds, may be used as a placeholder for partially applied arguments.
                             *
                             * **Note:** This method doesn't set the "length" property of partially
                             * applied functions.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.0.0
                             * @category Function
                             * @param {Function} func The function to partially apply arguments to.
                             * @param {...*} [partials] The arguments to be partially applied.
                             * @returns {Function} Returns the new partially applied function.
                             * @example
                             *
                             * function greet(greeting, name) {
                             *   return greeting + ' ' + name;
                             * }
                             *
                             * var greetFred = _.partialRight(greet, 'fred');
                             * greetFred('hi');
                             * // => 'hi fred'
                             *
                             * // Partially applied with placeholders.
                             * var sayHelloTo = _.partialRight(greet, 'hello', _);
                             * sayHelloTo('fred');
                             * // => 'hello fred'
                             */
                            var partialRight = baseRest(function (func, partials) {
                                var holders = replaceHolders(partials, getHolder(partialRight));
                                return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                            });

                            /**
                             * Creates a function that invokes `func` with arguments arranged according
                             * to the specified `indexes` where the argument value at the first index is
                             * provided as the first argument, the argument value at the second index is
                             * provided as the second argument, and so on.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Function
                             * @param {Function} func The function to rearrange arguments for.
                             * @param {...(number|number[])} indexes The arranged argument indexes.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var rearged = _.rearg(function(a, b, c) {
                             *   return [a, b, c];
                             * }, [2, 0, 1]);
                             *
                             * rearged('b', 'c', 'a')
                             * // => ['a', 'b', 'c']
                             */
                            var rearg = flatRest(function (func, indexes) {
                                return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                            });

                            /**
                             * Creates a function that invokes `func` with the `this` binding of the
                             * created function and arguments from `start` and beyond provided as
                             * an array.
                             *
                             * **Note:** This method is based on the
                             * [rest parameter](https://mdn.io/rest_parameters).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Function
                             * @param {Function} func The function to apply a rest parameter to.
                             * @param {number} [start=func.length-1] The start position of the rest parameter.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var say = _.rest(function(what, names) {
                             *   return what + ' ' + _.initial(names).join(', ') +
                             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                             * });
                             *
                             * say('hello', 'fred', 'barney', 'pebbles');
                             * // => 'hello fred, barney, & pebbles'
                             */
                            function rest(func, start) {
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                start = start === undefined ? start : toInteger(start);
                                return baseRest(func, start);
                            }

                            /**
                             * Creates a function that invokes `func` with the `this` binding of the
                             * create function and an array of arguments much like
                             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                             *
                             * **Note:** This method is based on the
                             * [spread operator](https://mdn.io/spread_operator).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.2.0
                             * @category Function
                             * @param {Function} func The function to spread arguments over.
                             * @param {number} [start=0] The start position of the spread.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var say = _.spread(function(who, what) {
                             *   return who + ' says ' + what;
                             * });
                             *
                             * say(['fred', 'hello']);
                             * // => 'fred says hello'
                             *
                             * var numbers = Promise.all([
                             *   Promise.resolve(40),
                             *   Promise.resolve(36)
                             * ]);
                             *
                             * numbers.then(_.spread(function(x, y) {
                             *   return x + y;
                             * }));
                             * // => a Promise of 76
                             */
                            function spread(func, start) {
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                start = start == null ? 0 : nativeMax(toInteger(start), 0);
                                return baseRest(function (args) {
                                    var array = args[start],
                                        otherArgs = castSlice(args, 0, start);

                                    if (array) {
                                        arrayPush(otherArgs, array);
                                    }
                                    return apply(func, this, otherArgs);
                                });
                            }

                            /**
                             * Creates a throttled function that only invokes `func` at most once per
                             * every `wait` milliseconds. The throttled function comes with a `cancel`
                             * method to cancel delayed `func` invocations and a `flush` method to
                             * immediately invoke them. Provide `options` to indicate whether `func`
                             * should be invoked on the leading and/or trailing edge of the `wait`
                             * timeout. The `func` is invoked with the last arguments provided to the
                             * throttled function. Subsequent calls to the throttled function return the
                             * result of the last `func` invocation.
                             *
                             * **Note:** If `leading` and `trailing` options are `true`, `func` is
                             * invoked on the trailing edge of the timeout only if the throttled function
                             * is invoked more than once during the `wait` timeout.
                             *
                             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                             *
                             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                             * for details over the differences between `_.throttle` and `_.debounce`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {Function} func The function to throttle.
                             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                             * @param {Object} [options={}] The options object.
                             * @param {boolean} [options.leading=true]
                             *  Specify invoking on the leading edge of the timeout.
                             * @param {boolean} [options.trailing=true]
                             *  Specify invoking on the trailing edge of the timeout.
                             * @returns {Function} Returns the new throttled function.
                             * @example
                             *
                             * // Avoid excessively updating the position while scrolling.
                             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                             *
                             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                             * jQuery(element).on('click', throttled);
                             *
                             * // Cancel the trailing throttled invocation.
                             * jQuery(window).on('popstate', throttled.cancel);
                             */
                            function throttle(func, wait, options) {
                                var leading = true,
                                    trailing = true;

                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                if (isObject(options)) {
                                    leading = 'leading' in options ? !!options.leading : leading;
                                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                                }
                                return debounce(func, wait, {
                                    leading: leading,
                                    maxWait: wait,
                                    trailing: trailing,
                                });
                            }

                            /**
                             * Creates a function that accepts up to one argument, ignoring any
                             * additional arguments.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Function
                             * @param {Function} func The function to cap arguments for.
                             * @returns {Function} Returns the new capped function.
                             * @example
                             *
                             * _.map(['6', '8', '10'], _.unary(parseInt));
                             * // => [6, 8, 10]
                             */
                            function unary(func) {
                                return ary(func, 1);
                            }

                            /**
                             * Creates a function that provides `value` to `wrapper` as its first
                             * argument. Any additional arguments provided to the function are appended
                             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                             * binding of the created function.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Function
                             * @param {*} value The value to wrap.
                             * @param {Function} [wrapper=identity] The wrapper function.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var p = _.wrap(_.escape, function(func, text) {
                             *   return '<p>' + func(text) + '</p>';
                             * });
                             *
                             * p('fred, barney, & pebbles');
                             * // => '<p>fred, barney, &amp; pebbles</p>'
                             */
                            function wrap(value, wrapper) {
                                return partial(castFunction(wrapper), value);
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Casts `value` as an array if it's not one.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.4.0
                             * @category Lang
                             * @param {*} value The value to inspect.
                             * @returns {Array} Returns the cast array.
                             * @example
                             *
                             * _.castArray(1);
                             * // => [1]
                             *
                             * _.castArray({ 'a': 1 });
                             * // => [{ 'a': 1 }]
                             *
                             * _.castArray('abc');
                             * // => ['abc']
                             *
                             * _.castArray(null);
                             * // => [null]
                             *
                             * _.castArray(undefined);
                             * // => [undefined]
                             *
                             * _.castArray();
                             * // => []
                             *
                             * var array = [1, 2, 3];
                             * console.log(_.castArray(array) === array);
                             * // => true
                             */
                            function castArray() {
                                if (!arguments.length) {
                                    return [];
                                }
                                var value = arguments[0];
                                return isArray(value) ? value : [value];
                            }

                            /**
                             * Creates a shallow clone of `value`.
                             *
                             * **Note:** This method is loosely based on the
                             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                             * and supports cloning arrays, array buffers, booleans, date objects, maps,
                             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                             * arrays. The own enumerable properties of `arguments` objects are cloned
                             * as plain objects. An empty object is returned for uncloneable values such
                             * as error objects, functions, DOM nodes, and WeakMaps.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to clone.
                             * @returns {*} Returns the cloned value.
                             * @see _.cloneDeep
                             * @example
                             *
                             * var objects = [{ 'a': 1 }, { 'b': 2 }];
                             *
                             * var shallow = _.clone(objects);
                             * console.log(shallow[0] === objects[0]);
                             * // => true
                             */
                            function clone(value) {
                                return baseClone(value, CLONE_SYMBOLS_FLAG);
                            }

                            /**
                             * This method is like `_.clone` except that it accepts `customizer` which
                             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                             * cloning is handled by the method instead. The `customizer` is invoked with
                             * up to four arguments; (value [, index|key, object, stack]).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to clone.
                             * @param {Function} [customizer] The function to customize cloning.
                             * @returns {*} Returns the cloned value.
                             * @see _.cloneDeepWith
                             * @example
                             *
                             * function customizer(value) {
                             *   if (_.isElement(value)) {
                             *     return value.cloneNode(false);
                             *   }
                             * }
                             *
                             * var el = _.cloneWith(document.body, customizer);
                             *
                             * console.log(el === document.body);
                             * // => false
                             * console.log(el.nodeName);
                             * // => 'BODY'
                             * console.log(el.childNodes.length);
                             * // => 0
                             */
                            function cloneWith(value, customizer) {
                                customizer = typeof customizer == 'function' ? customizer : undefined;
                                return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                            }

                            /**
                             * This method is like `_.clone` except that it recursively clones `value`.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.0.0
                             * @category Lang
                             * @param {*} value The value to recursively clone.
                             * @returns {*} Returns the deep cloned value.
                             * @see _.clone
                             * @example
                             *
                             * var objects = [{ 'a': 1 }, { 'b': 2 }];
                             *
                             * var deep = _.cloneDeep(objects);
                             * console.log(deep[0] === objects[0]);
                             * // => false
                             */
                            function cloneDeep(value) {
                                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                            }

                            /**
                             * This method is like `_.cloneWith` except that it recursively clones `value`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to recursively clone.
                             * @param {Function} [customizer] The function to customize cloning.
                             * @returns {*} Returns the deep cloned value.
                             * @see _.cloneWith
                             * @example
                             *
                             * function customizer(value) {
                             *   if (_.isElement(value)) {
                             *     return value.cloneNode(true);
                             *   }
                             * }
                             *
                             * var el = _.cloneDeepWith(document.body, customizer);
                             *
                             * console.log(el === document.body);
                             * // => false
                             * console.log(el.nodeName);
                             * // => 'BODY'
                             * console.log(el.childNodes.length);
                             * // => 20
                             */
                            function cloneDeepWith(value, customizer) {
                                customizer = typeof customizer == 'function' ? customizer : undefined;
                                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                            }

                            /**
                             * Checks if `object` conforms to `source` by invoking the predicate
                             * properties of `source` with the corresponding property values of `object`.
                             *
                             * **Note:** This method is equivalent to `_.conforms` when `source` is
                             * partially applied.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.14.0
                             * @category Lang
                             * @param {Object} object The object to inspect.
                             * @param {Object} source The object of property predicates to conform to.
                             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': 2 };
                             *
                             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                             * // => true
                             *
                             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                             * // => false
                             */
                            function conformsTo(object, source) {
                                return source == null || baseConformsTo(object, source, keys(source));
                            }

                            /**
                             * Performs a
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * comparison between two values to determine if they are equivalent.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                             * @example
                             *
                             * var object = { 'a': 1 };
                             * var other = { 'a': 1 };
                             *
                             * _.eq(object, object);
                             * // => true
                             *
                             * _.eq(object, other);
                             * // => false
                             *
                             * _.eq('a', 'a');
                             * // => true
                             *
                             * _.eq('a', Object('a'));
                             * // => false
                             *
                             * _.eq(NaN, NaN);
                             * // => true
                             */
                            function eq(value, other) {
                                return value === other || (value !== value && other !== other);
                            }

                            /**
                             * Checks if `value` is greater than `other`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.9.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if `value` is greater than `other`,
                             *  else `false`.
                             * @see _.lt
                             * @example
                             *
                             * _.gt(3, 1);
                             * // => true
                             *
                             * _.gt(3, 3);
                             * // => false
                             *
                             * _.gt(1, 3);
                             * // => false
                             */
                            var gt = createRelationalOperation(baseGt);

                            /**
                             * Checks if `value` is greater than or equal to `other`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.9.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if `value` is greater than or equal to
                             *  `other`, else `false`.
                             * @see _.lte
                             * @example
                             *
                             * _.gte(3, 1);
                             * // => true
                             *
                             * _.gte(3, 3);
                             * // => true
                             *
                             * _.gte(1, 3);
                             * // => false
                             */
                            var gte = createRelationalOperation(function (value, other) {
                                return value >= other;
                            });

                            /**
                             * Checks if `value` is likely an `arguments` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                             *  else `false`.
                             * @example
                             *
                             * _.isArguments(function() { return arguments; }());
                             * // => true
                             *
                             * _.isArguments([1, 2, 3]);
                             * // => false
                             */
                            var isArguments = baseIsArguments(
                                (function () {
                                    return arguments;
                                })(),
                            )
                                ? baseIsArguments
                                : function (value) {
                                      return (
                                          isObjectLike(value) &&
                                          hasOwnProperty.call(value, 'callee') &&
                                          !propertyIsEnumerable.call(value, 'callee')
                                      );
                                  };

                            /**
                             * Checks if `value` is classified as an `Array` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                             * @example
                             *
                             * _.isArray([1, 2, 3]);
                             * // => true
                             *
                             * _.isArray(document.body.children);
                             * // => false
                             *
                             * _.isArray('abc');
                             * // => false
                             *
                             * _.isArray(_.noop);
                             * // => false
                             */
                            var isArray = Array.isArray;

                            /**
                             * Checks if `value` is classified as an `ArrayBuffer` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                             * @example
                             *
                             * _.isArrayBuffer(new ArrayBuffer(2));
                             * // => true
                             *
                             * _.isArrayBuffer(new Array(2));
                             * // => false
                             */
                            var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                            /**
                             * Checks if `value` is array-like. A value is considered array-like if it's
                             * not a function and has a `value.length` that's an integer greater than or
                             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                             * @example
                             *
                             * _.isArrayLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isArrayLike(document.body.children);
                             * // => true
                             *
                             * _.isArrayLike('abc');
                             * // => true
                             *
                             * _.isArrayLike(_.noop);
                             * // => false
                             */
                            function isArrayLike(value) {
                                return value != null && isLength(value.length) && !isFunction(value);
                            }

                            /**
                             * This method is like `_.isArrayLike` except that it also checks if `value`
                             * is an object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array-like object,
                             *  else `false`.
                             * @example
                             *
                             * _.isArrayLikeObject([1, 2, 3]);
                             * // => true
                             *
                             * _.isArrayLikeObject(document.body.children);
                             * // => true
                             *
                             * _.isArrayLikeObject('abc');
                             * // => false
                             *
                             * _.isArrayLikeObject(_.noop);
                             * // => false
                             */
                            function isArrayLikeObject(value) {
                                return isObjectLike(value) && isArrayLike(value);
                            }

                            /**
                             * Checks if `value` is classified as a boolean primitive or object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                             * @example
                             *
                             * _.isBoolean(false);
                             * // => true
                             *
                             * _.isBoolean(null);
                             * // => false
                             */
                            function isBoolean(value) {
                                return (
                                    value === true ||
                                    value === false ||
                                    (isObjectLike(value) && baseGetTag(value) == boolTag)
                                );
                            }

                            /**
                             * Checks if `value` is a buffer.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                             * @example
                             *
                             * _.isBuffer(new Buffer(2));
                             * // => true
                             *
                             * _.isBuffer(new Uint8Array(2));
                             * // => false
                             */
                            var isBuffer = nativeIsBuffer || stubFalse;

                            /**
                             * Checks if `value` is classified as a `Date` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                             * @example
                             *
                             * _.isDate(new Date);
                             * // => true
                             *
                             * _.isDate('Mon April 23 2012');
                             * // => false
                             */
                            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                            /**
                             * Checks if `value` is likely a DOM element.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                             * @example
                             *
                             * _.isElement(document.body);
                             * // => true
                             *
                             * _.isElement('<body>');
                             * // => false
                             */
                            function isElement(value) {
                                return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                            }

                            /**
                             * Checks if `value` is an empty object, collection, map, or set.
                             *
                             * Objects are considered empty if they have no own enumerable string keyed
                             * properties.
                             *
                             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                             * jQuery-like collections are considered empty if they have a `length` of `0`.
                             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                             * @example
                             *
                             * _.isEmpty(null);
                             * // => true
                             *
                             * _.isEmpty(true);
                             * // => true
                             *
                             * _.isEmpty(1);
                             * // => true
                             *
                             * _.isEmpty([1, 2, 3]);
                             * // => false
                             *
                             * _.isEmpty({ 'a': 1 });
                             * // => false
                             */
                            function isEmpty(value) {
                                if (value == null) {
                                    return true;
                                }
                                if (
                                    isArrayLike(value) &&
                                    (isArray(value) ||
                                        typeof value == 'string' ||
                                        typeof value.splice == 'function' ||
                                        isBuffer(value) ||
                                        isTypedArray(value) ||
                                        isArguments(value))
                                ) {
                                    return !value.length;
                                }
                                var tag = getTag(value);
                                if (tag == mapTag || tag == setTag) {
                                    return !value.size;
                                }
                                if (isPrototype(value)) {
                                    return !baseKeys(value).length;
                                }
                                for (var key in value) {
                                    if (hasOwnProperty.call(value, key)) {
                                        return false;
                                    }
                                }
                                return true;
                            }

                            /**
                             * Performs a deep comparison between two values to determine if they are
                             * equivalent.
                             *
                             * **Note:** This method supports comparing arrays, array buffers, booleans,
                             * date objects, error objects, maps, numbers, `Object` objects, regexes,
                             * sets, strings, symbols, and typed arrays. `Object` objects are compared
                             * by their own, not inherited, enumerable properties. Functions and DOM
                             * nodes are compared by strict equality, i.e. `===`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                             * @example
                             *
                             * var object = { 'a': 1 };
                             * var other = { 'a': 1 };
                             *
                             * _.isEqual(object, other);
                             * // => true
                             *
                             * object === other;
                             * // => false
                             */
                            function isEqual(value, other) {
                                return baseIsEqual(value, other);
                            }

                            /**
                             * This method is like `_.isEqual` except that it accepts `customizer` which
                             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                             * are handled by the method instead. The `customizer` is invoked with up to
                             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @param {Function} [customizer] The function to customize comparisons.
                             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                             * @example
                             *
                             * function isGreeting(value) {
                             *   return /^h(?:i|ello)$/.test(value);
                             * }
                             *
                             * function customizer(objValue, othValue) {
                             *   if (isGreeting(objValue) && isGreeting(othValue)) {
                             *     return true;
                             *   }
                             * }
                             *
                             * var array = ['hello', 'goodbye'];
                             * var other = ['hi', 'goodbye'];
                             *
                             * _.isEqualWith(array, other, customizer);
                             * // => true
                             */
                            function isEqualWith(value, other, customizer) {
                                customizer = typeof customizer == 'function' ? customizer : undefined;
                                var result = customizer ? customizer(value, other) : undefined;
                                return result === undefined
                                    ? baseIsEqual(value, other, undefined, customizer)
                                    : !!result;
                            }

                            /**
                             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                             * `SyntaxError`, `TypeError`, or `URIError` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                             * @example
                             *
                             * _.isError(new Error);
                             * // => true
                             *
                             * _.isError(Error);
                             * // => false
                             */
                            function isError(value) {
                                if (!isObjectLike(value)) {
                                    return false;
                                }
                                var tag = baseGetTag(value);
                                return (
                                    tag == errorTag ||
                                    tag == domExcTag ||
                                    (typeof value.message == 'string' &&
                                        typeof value.name == 'string' &&
                                        !isPlainObject(value))
                                );
                            }

                            /**
                             * Checks if `value` is a finite primitive number.
                             *
                             * **Note:** This method is based on
                             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                             * @example
                             *
                             * _.isFinite(3);
                             * // => true
                             *
                             * _.isFinite(Number.MIN_VALUE);
                             * // => true
                             *
                             * _.isFinite(Infinity);
                             * // => false
                             *
                             * _.isFinite('3');
                             * // => false
                             */
                            function isFinite(value) {
                                return typeof value == 'number' && nativeIsFinite(value);
                            }

                            /**
                             * Checks if `value` is classified as a `Function` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                             * @example
                             *
                             * _.isFunction(_);
                             * // => true
                             *
                             * _.isFunction(/abc/);
                             * // => false
                             */
                            function isFunction(value) {
                                if (!isObject(value)) {
                                    return false;
                                }
                                // The use of `Object#toString` avoids issues with the `typeof` operator
                                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                                var tag = baseGetTag(value);
                                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                            }

                            /**
                             * Checks if `value` is an integer.
                             *
                             * **Note:** This method is based on
                             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                             * @example
                             *
                             * _.isInteger(3);
                             * // => true
                             *
                             * _.isInteger(Number.MIN_VALUE);
                             * // => false
                             *
                             * _.isInteger(Infinity);
                             * // => false
                             *
                             * _.isInteger('3');
                             * // => false
                             */
                            function isInteger(value) {
                                return typeof value == 'number' && value == toInteger(value);
                            }

                            /**
                             * Checks if `value` is a valid array-like length.
                             *
                             * **Note:** This method is loosely based on
                             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                             * @example
                             *
                             * _.isLength(3);
                             * // => true
                             *
                             * _.isLength(Number.MIN_VALUE);
                             * // => false
                             *
                             * _.isLength(Infinity);
                             * // => false
                             *
                             * _.isLength('3');
                             * // => false
                             */
                            function isLength(value) {
                                return (
                                    typeof value == 'number' &&
                                    value > -1 &&
                                    value % 1 == 0 &&
                                    value <= MAX_SAFE_INTEGER
                                );
                            }

                            /**
                             * Checks if `value` is the
                             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                             * @example
                             *
                             * _.isObject({});
                             * // => true
                             *
                             * _.isObject([1, 2, 3]);
                             * // => true
                             *
                             * _.isObject(_.noop);
                             * // => true
                             *
                             * _.isObject(null);
                             * // => false
                             */
                            function isObject(value) {
                                var type = typeof value;
                                return value != null && (type == 'object' || type == 'function');
                            }

                            /**
                             * Checks if `value` is object-like. A value is object-like if it's not `null`
                             * and has a `typeof` result of "object".
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                             * @example
                             *
                             * _.isObjectLike({});
                             * // => true
                             *
                             * _.isObjectLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isObjectLike(_.noop);
                             * // => false
                             *
                             * _.isObjectLike(null);
                             * // => false
                             */
                            function isObjectLike(value) {
                                return value != null && typeof value == 'object';
                            }

                            /**
                             * Checks if `value` is classified as a `Map` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                             * @example
                             *
                             * _.isMap(new Map);
                             * // => true
                             *
                             * _.isMap(new WeakMap);
                             * // => false
                             */
                            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                            /**
                             * Performs a partial deep comparison between `object` and `source` to
                             * determine if `object` contains equivalent property values.
                             *
                             * **Note:** This method is equivalent to `_.matches` when `source` is
                             * partially applied.
                             *
                             * Partial comparisons will match empty array and empty object `source`
                             * values against any array or object value, respectively. See `_.isEqual`
                             * for a list of supported value comparisons.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {Object} object The object to inspect.
                             * @param {Object} source The object of property values to match.
                             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': 2 };
                             *
                             * _.isMatch(object, { 'b': 2 });
                             * // => true
                             *
                             * _.isMatch(object, { 'b': 1 });
                             * // => false
                             */
                            function isMatch(object, source) {
                                return object === source || baseIsMatch(object, source, getMatchData(source));
                            }

                            /**
                             * This method is like `_.isMatch` except that it accepts `customizer` which
                             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                             * are handled by the method instead. The `customizer` is invoked with five
                             * arguments: (objValue, srcValue, index|key, object, source).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {Object} object The object to inspect.
                             * @param {Object} source The object of property values to match.
                             * @param {Function} [customizer] The function to customize comparisons.
                             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                             * @example
                             *
                             * function isGreeting(value) {
                             *   return /^h(?:i|ello)$/.test(value);
                             * }
                             *
                             * function customizer(objValue, srcValue) {
                             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                             *     return true;
                             *   }
                             * }
                             *
                             * var object = { 'greeting': 'hello' };
                             * var source = { 'greeting': 'hi' };
                             *
                             * _.isMatchWith(object, source, customizer);
                             * // => true
                             */
                            function isMatchWith(object, source, customizer) {
                                customizer = typeof customizer == 'function' ? customizer : undefined;
                                return baseIsMatch(object, source, getMatchData(source), customizer);
                            }

                            /**
                             * Checks if `value` is `NaN`.
                             *
                             * **Note:** This method is based on
                             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                             * `undefined` and other non-number values.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                             * @example
                             *
                             * _.isNaN(NaN);
                             * // => true
                             *
                             * _.isNaN(new Number(NaN));
                             * // => true
                             *
                             * isNaN(undefined);
                             * // => true
                             *
                             * _.isNaN(undefined);
                             * // => false
                             */
                            function isNaN(value) {
                                // An `NaN` primitive is the only value that is not equal to itself.
                                // Perform the `toStringTag` check first to avoid errors with some
                                // ActiveX objects in IE.
                                return isNumber(value) && value != +value;
                            }

                            /**
                             * Checks if `value` is a pristine native function.
                             *
                             * **Note:** This method can't reliably detect native functions in the presence
                             * of the core-js package because core-js circumvents this kind of detection.
                             * Despite multiple requests, the core-js maintainer has made it clear: any
                             * attempt to fix the detection will be obstructed. As a result, we're left
                             * with little choice but to throw an error. Unfortunately, this also affects
                             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                             * which rely on core-js.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a native function,
                             *  else `false`.
                             * @example
                             *
                             * _.isNative(Array.prototype.push);
                             * // => true
                             *
                             * _.isNative(_);
                             * // => false
                             */
                            function isNative(value) {
                                if (isMaskable(value)) {
                                    throw new Error(CORE_ERROR_TEXT);
                                }
                                return baseIsNative(value);
                            }

                            /**
                             * Checks if `value` is `null`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                             * @example
                             *
                             * _.isNull(null);
                             * // => true
                             *
                             * _.isNull(void 0);
                             * // => false
                             */
                            function isNull(value) {
                                return value === null;
                            }

                            /**
                             * Checks if `value` is `null` or `undefined`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                             * @example
                             *
                             * _.isNil(null);
                             * // => true
                             *
                             * _.isNil(void 0);
                             * // => true
                             *
                             * _.isNil(NaN);
                             * // => false
                             */
                            function isNil(value) {
                                return value == null;
                            }

                            /**
                             * Checks if `value` is classified as a `Number` primitive or object.
                             *
                             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                             * classified as numbers, use the `_.isFinite` method.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                             * @example
                             *
                             * _.isNumber(3);
                             * // => true
                             *
                             * _.isNumber(Number.MIN_VALUE);
                             * // => true
                             *
                             * _.isNumber(Infinity);
                             * // => true
                             *
                             * _.isNumber('3');
                             * // => false
                             */
                            function isNumber(value) {
                                return (
                                    typeof value == 'number' || (isObjectLike(value) && baseGetTag(value) == numberTag)
                                );
                            }

                            /**
                             * Checks if `value` is a plain object, that is, an object created by the
                             * `Object` constructor or one with a `[[Prototype]]` of `null`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.8.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             * }
                             *
                             * _.isPlainObject(new Foo);
                             * // => false
                             *
                             * _.isPlainObject([1, 2, 3]);
                             * // => false
                             *
                             * _.isPlainObject({ 'x': 0, 'y': 0 });
                             * // => true
                             *
                             * _.isPlainObject(Object.create(null));
                             * // => true
                             */
                            function isPlainObject(value) {
                                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                                    return false;
                                }
                                var proto = getPrototype(value);
                                if (proto === null) {
                                    return true;
                                }
                                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                                return (
                                    typeof Ctor == 'function' &&
                                    Ctor instanceof Ctor &&
                                    funcToString.call(Ctor) == objectCtorString
                                );
                            }

                            /**
                             * Checks if `value` is classified as a `RegExp` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                             * @example
                             *
                             * _.isRegExp(/abc/);
                             * // => true
                             *
                             * _.isRegExp('/abc/');
                             * // => false
                             */
                            var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                            /**
                             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                             * double precision number which isn't the result of a rounded unsafe integer.
                             *
                             * **Note:** This method is based on
                             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                             * @example
                             *
                             * _.isSafeInteger(3);
                             * // => true
                             *
                             * _.isSafeInteger(Number.MIN_VALUE);
                             * // => false
                             *
                             * _.isSafeInteger(Infinity);
                             * // => false
                             *
                             * _.isSafeInteger('3');
                             * // => false
                             */
                            function isSafeInteger(value) {
                                return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                            }

                            /**
                             * Checks if `value` is classified as a `Set` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                             * @example
                             *
                             * _.isSet(new Set);
                             * // => true
                             *
                             * _.isSet(new WeakSet);
                             * // => false
                             */
                            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                            /**
                             * Checks if `value` is classified as a `String` primitive or object.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                             * @example
                             *
                             * _.isString('abc');
                             * // => true
                             *
                             * _.isString(1);
                             * // => false
                             */
                            function isString(value) {
                                return (
                                    typeof value == 'string' ||
                                    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag)
                                );
                            }

                            /**
                             * Checks if `value` is classified as a `Symbol` primitive or object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                             * @example
                             *
                             * _.isSymbol(Symbol.iterator);
                             * // => true
                             *
                             * _.isSymbol('abc');
                             * // => false
                             */
                            function isSymbol(value) {
                                return (
                                    typeof value == 'symbol' || (isObjectLike(value) && baseGetTag(value) == symbolTag)
                                );
                            }

                            /**
                             * Checks if `value` is classified as a typed array.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                             * @example
                             *
                             * _.isTypedArray(new Uint8Array);
                             * // => true
                             *
                             * _.isTypedArray([]);
                             * // => false
                             */
                            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                            /**
                             * Checks if `value` is `undefined`.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                             * @example
                             *
                             * _.isUndefined(void 0);
                             * // => true
                             *
                             * _.isUndefined(null);
                             * // => false
                             */
                            function isUndefined(value) {
                                return value === undefined;
                            }

                            /**
                             * Checks if `value` is classified as a `WeakMap` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                             * @example
                             *
                             * _.isWeakMap(new WeakMap);
                             * // => true
                             *
                             * _.isWeakMap(new Map);
                             * // => false
                             */
                            function isWeakMap(value) {
                                return isObjectLike(value) && getTag(value) == weakMapTag;
                            }

                            /**
                             * Checks if `value` is classified as a `WeakSet` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                             * @example
                             *
                             * _.isWeakSet(new WeakSet);
                             * // => true
                             *
                             * _.isWeakSet(new Set);
                             * // => false
                             */
                            function isWeakSet(value) {
                                return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                            }

                            /**
                             * Checks if `value` is less than `other`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.9.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if `value` is less than `other`,
                             *  else `false`.
                             * @see _.gt
                             * @example
                             *
                             * _.lt(1, 3);
                             * // => true
                             *
                             * _.lt(3, 3);
                             * // => false
                             *
                             * _.lt(3, 1);
                             * // => false
                             */
                            var lt = createRelationalOperation(baseLt);

                            /**
                             * Checks if `value` is less than or equal to `other`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.9.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if `value` is less than or equal to
                             *  `other`, else `false`.
                             * @see _.gte
                             * @example
                             *
                             * _.lte(1, 3);
                             * // => true
                             *
                             * _.lte(3, 3);
                             * // => true
                             *
                             * _.lte(3, 1);
                             * // => false
                             */
                            var lte = createRelationalOperation(function (value, other) {
                                return value <= other;
                            });

                            /**
                             * Converts `value` to an array.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {Array} Returns the converted array.
                             * @example
                             *
                             * _.toArray({ 'a': 1, 'b': 2 });
                             * // => [1, 2]
                             *
                             * _.toArray('abc');
                             * // => ['a', 'b', 'c']
                             *
                             * _.toArray(1);
                             * // => []
                             *
                             * _.toArray(null);
                             * // => []
                             */
                            function toArray(value) {
                                if (!value) {
                                    return [];
                                }
                                if (isArrayLike(value)) {
                                    return isString(value) ? stringToArray(value) : copyArray(value);
                                }
                                if (symIterator && value[symIterator]) {
                                    return iteratorToArray(value[symIterator]());
                                }
                                var tag = getTag(value),
                                    func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

                                return func(value);
                            }

                            /**
                             * Converts `value` to a finite number.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.12.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {number} Returns the converted number.
                             * @example
                             *
                             * _.toFinite(3.2);
                             * // => 3.2
                             *
                             * _.toFinite(Number.MIN_VALUE);
                             * // => 5e-324
                             *
                             * _.toFinite(Infinity);
                             * // => 1.7976931348623157e+308
                             *
                             * _.toFinite('3.2');
                             * // => 3.2
                             */
                            function toFinite(value) {
                                if (!value) {
                                    return value === 0 ? value : 0;
                                }
                                value = toNumber(value);
                                if (value === INFINITY || value === -INFINITY) {
                                    var sign = value < 0 ? -1 : 1;
                                    return sign * MAX_INTEGER;
                                }
                                return value === value ? value : 0;
                            }

                            /**
                             * Converts `value` to an integer.
                             *
                             * **Note:** This method is loosely based on
                             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {number} Returns the converted integer.
                             * @example
                             *
                             * _.toInteger(3.2);
                             * // => 3
                             *
                             * _.toInteger(Number.MIN_VALUE);
                             * // => 0
                             *
                             * _.toInteger(Infinity);
                             * // => 1.7976931348623157e+308
                             *
                             * _.toInteger('3.2');
                             * // => 3
                             */
                            function toInteger(value) {
                                var result = toFinite(value),
                                    remainder = result % 1;

                                return result === result ? (remainder ? result - remainder : result) : 0;
                            }

                            /**
                             * Converts `value` to an integer suitable for use as the length of an
                             * array-like object.
                             *
                             * **Note:** This method is based on
                             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {number} Returns the converted integer.
                             * @example
                             *
                             * _.toLength(3.2);
                             * // => 3
                             *
                             * _.toLength(Number.MIN_VALUE);
                             * // => 0
                             *
                             * _.toLength(Infinity);
                             * // => 4294967295
                             *
                             * _.toLength('3.2');
                             * // => 3
                             */
                            function toLength(value) {
                                return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                            }

                            /**
                             * Converts `value` to a number.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to process.
                             * @returns {number} Returns the number.
                             * @example
                             *
                             * _.toNumber(3.2);
                             * // => 3.2
                             *
                             * _.toNumber(Number.MIN_VALUE);
                             * // => 5e-324
                             *
                             * _.toNumber(Infinity);
                             * // => Infinity
                             *
                             * _.toNumber('3.2');
                             * // => 3.2
                             */
                            function toNumber(value) {
                                if (typeof value == 'number') {
                                    return value;
                                }
                                if (isSymbol(value)) {
                                    return NAN;
                                }
                                if (isObject(value)) {
                                    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                                    value = isObject(other) ? other + '' : other;
                                }
                                if (typeof value != 'string') {
                                    return value === 0 ? value : +value;
                                }
                                value = baseTrim(value);
                                var isBinary = reIsBinary.test(value);
                                return isBinary || reIsOctal.test(value)
                                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                                    : reIsBadHex.test(value)
                                    ? NAN
                                    : +value;
                            }

                            /**
                             * Converts `value` to a plain object flattening inherited enumerable string
                             * keyed properties of `value` to own properties of the plain object.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {Object} Returns the converted plain object.
                             * @example
                             *
                             * function Foo() {
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.assign({ 'a': 1 }, new Foo);
                             * // => { 'a': 1, 'b': 2 }
                             *
                             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                             * // => { 'a': 1, 'b': 2, 'c': 3 }
                             */
                            function toPlainObject(value) {
                                return copyObject(value, keysIn(value));
                            }

                            /**
                             * Converts `value` to a safe integer. A safe integer can be compared and
                             * represented correctly.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {number} Returns the converted integer.
                             * @example
                             *
                             * _.toSafeInteger(3.2);
                             * // => 3
                             *
                             * _.toSafeInteger(Number.MIN_VALUE);
                             * // => 0
                             *
                             * _.toSafeInteger(Infinity);
                             * // => 9007199254740991
                             *
                             * _.toSafeInteger('3.2');
                             * // => 3
                             */
                            function toSafeInteger(value) {
                                return value
                                    ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                                    : value === 0
                                    ? value
                                    : 0;
                            }

                            /**
                             * Converts `value` to a string. An empty string is returned for `null`
                             * and `undefined` values. The sign of `-0` is preserved.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {string} Returns the converted string.
                             * @example
                             *
                             * _.toString(null);
                             * // => ''
                             *
                             * _.toString(-0);
                             * // => '-0'
                             *
                             * _.toString([1, 2, 3]);
                             * // => '1,2,3'
                             */
                            function toString(value) {
                                return value == null ? '' : baseToString(value);
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Assigns own enumerable string keyed properties of source objects to the
                             * destination object. Source objects are applied from left to right.
                             * Subsequent sources overwrite property assignments of previous sources.
                             *
                             * **Note:** This method mutates `object` and is loosely based on
                             * [`Object.assign`](https://mdn.io/Object/assign).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.10.0
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} [sources] The source objects.
                             * @returns {Object} Returns `object`.
                             * @see _.assignIn
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             * }
                             *
                             * function Bar() {
                             *   this.c = 3;
                             * }
                             *
                             * Foo.prototype.b = 2;
                             * Bar.prototype.d = 4;
                             *
                             * _.assign({ 'a': 0 }, new Foo, new Bar);
                             * // => { 'a': 1, 'c': 3 }
                             */
                            var assign = createAssigner(function (object, source) {
                                if (isPrototype(source) || isArrayLike(source)) {
                                    copyObject(source, keys(source), object);
                                    return;
                                }
                                for (var key in source) {
                                    if (hasOwnProperty.call(source, key)) {
                                        assignValue(object, key, source[key]);
                                    }
                                }
                            });

                            /**
                             * This method is like `_.assign` except that it iterates over own and
                             * inherited source properties.
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @alias extend
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} [sources] The source objects.
                             * @returns {Object} Returns `object`.
                             * @see _.assign
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             * }
                             *
                             * function Bar() {
                             *   this.c = 3;
                             * }
                             *
                             * Foo.prototype.b = 2;
                             * Bar.prototype.d = 4;
                             *
                             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                             */
                            var assignIn = createAssigner(function (object, source) {
                                copyObject(source, keysIn(source), object);
                            });

                            /**
                             * This method is like `_.assignIn` except that it accepts `customizer`
                             * which is invoked to produce the assigned values. If `customizer` returns
                             * `undefined`, assignment is handled by the method instead. The `customizer`
                             * is invoked with five arguments: (objValue, srcValue, key, object, source).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @alias extendWith
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} sources The source objects.
                             * @param {Function} [customizer] The function to customize assigned values.
                             * @returns {Object} Returns `object`.
                             * @see _.assignWith
                             * @example
                             *
                             * function customizer(objValue, srcValue) {
                             *   return _.isUndefined(objValue) ? srcValue : objValue;
                             * }
                             *
                             * var defaults = _.partialRight(_.assignInWith, customizer);
                             *
                             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                             * // => { 'a': 1, 'b': 2 }
                             */
                            var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                                copyObject(source, keysIn(source), object, customizer);
                            });

                            /**
                             * This method is like `_.assign` except that it accepts `customizer`
                             * which is invoked to produce the assigned values. If `customizer` returns
                             * `undefined`, assignment is handled by the method instead. The `customizer`
                             * is invoked with five arguments: (objValue, srcValue, key, object, source).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} sources The source objects.
                             * @param {Function} [customizer] The function to customize assigned values.
                             * @returns {Object} Returns `object`.
                             * @see _.assignInWith
                             * @example
                             *
                             * function customizer(objValue, srcValue) {
                             *   return _.isUndefined(objValue) ? srcValue : objValue;
                             * }
                             *
                             * var defaults = _.partialRight(_.assignWith, customizer);
                             *
                             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                             * // => { 'a': 1, 'b': 2 }
                             */
                            var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                                copyObject(source, keys(source), object, customizer);
                            });

                            /**
                             * Creates an array of values corresponding to `paths` of `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.0.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {...(string|string[])} [paths] The property paths to pick.
                             * @returns {Array} Returns the picked values.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                             *
                             * _.at(object, ['a[0].b.c', 'a[1]']);
                             * // => [3, 4]
                             */
                            var at = flatRest(baseAt);

                            /**
                             * Creates an object that inherits from the `prototype` object. If a
                             * `properties` object is given, its own enumerable string keyed properties
                             * are assigned to the created object.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.3.0
                             * @category Object
                             * @param {Object} prototype The object to inherit from.
                             * @param {Object} [properties] The properties to assign to the object.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * function Shape() {
                             *   this.x = 0;
                             *   this.y = 0;
                             * }
                             *
                             * function Circle() {
                             *   Shape.call(this);
                             * }
                             *
                             * Circle.prototype = _.create(Shape.prototype, {
                             *   'constructor': Circle
                             * });
                             *
                             * var circle = new Circle;
                             * circle instanceof Circle;
                             * // => true
                             *
                             * circle instanceof Shape;
                             * // => true
                             */
                            function create(prototype, properties) {
                                var result = baseCreate(prototype);
                                return properties == null ? result : baseAssign(result, properties);
                            }

                            /**
                             * Assigns own and inherited enumerable string keyed properties of source
                             * objects to the destination object for all destination properties that
                             * resolve to `undefined`. Source objects are applied from left to right.
                             * Once a property is set, additional values of the same property are ignored.
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} [sources] The source objects.
                             * @returns {Object} Returns `object`.
                             * @see _.defaultsDeep
                             * @example
                             *
                             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                             * // => { 'a': 1, 'b': 2 }
                             */
                            var defaults = baseRest(function (object, sources) {
                                object = Object(object);

                                var index = -1;
                                var length = sources.length;
                                var guard = length > 2 ? sources[2] : undefined;

                                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                    length = 1;
                                }

                                while (++index < length) {
                                    var source = sources[index];
                                    var props = keysIn(source);
                                    var propsIndex = -1;
                                    var propsLength = props.length;

                                    while (++propsIndex < propsLength) {
                                        var key = props[propsIndex];
                                        var value = object[key];

                                        if (
                                            value === undefined ||
                                            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))
                                        ) {
                                            object[key] = source[key];
                                        }
                                    }
                                }

                                return object;
                            });

                            /**
                             * This method is like `_.defaults` except that it recursively assigns
                             * default properties.
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.10.0
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} [sources] The source objects.
                             * @returns {Object} Returns `object`.
                             * @see _.defaults
                             * @example
                             *
                             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                             * // => { 'a': { 'b': 2, 'c': 3 } }
                             */
                            var defaultsDeep = baseRest(function (args) {
                                args.push(undefined, customDefaultsMerge);
                                return apply(mergeWith, undefined, args);
                            });

                            /**
                             * This method is like `_.find` except that it returns the key of the first
                             * element `predicate` returns truthy for instead of the element itself.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.1.0
                             * @category Object
                             * @param {Object} object The object to inspect.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {string|undefined} Returns the key of the matched element,
                             *  else `undefined`.
                             * @example
                             *
                             * var users = {
                             *   'barney':  { 'age': 36, 'active': true },
                             *   'fred':    { 'age': 40, 'active': false },
                             *   'pebbles': { 'age': 1,  'active': true }
                             * };
                             *
                             * _.findKey(users, function(o) { return o.age < 40; });
                             * // => 'barney' (iteration order is not guaranteed)
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.findKey(users, { 'age': 1, 'active': true });
                             * // => 'pebbles'
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.findKey(users, ['active', false]);
                             * // => 'fred'
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.findKey(users, 'active');
                             * // => 'barney'
                             */
                            function findKey(object, predicate) {
                                return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                            }

                            /**
                             * This method is like `_.findKey` except that it iterates over elements of
                             * a collection in the opposite order.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Object
                             * @param {Object} object The object to inspect.
                             * @param {Function} [predicate=_.identity] The function invoked per iteration.
                             * @returns {string|undefined} Returns the key of the matched element,
                             *  else `undefined`.
                             * @example
                             *
                             * var users = {
                             *   'barney':  { 'age': 36, 'active': true },
                             *   'fred':    { 'age': 40, 'active': false },
                             *   'pebbles': { 'age': 1,  'active': true }
                             * };
                             *
                             * _.findLastKey(users, function(o) { return o.age < 40; });
                             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.findLastKey(users, { 'age': 36, 'active': true });
                             * // => 'barney'
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.findLastKey(users, ['active', false]);
                             * // => 'fred'
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.findLastKey(users, 'active');
                             * // => 'pebbles'
                             */
                            function findLastKey(object, predicate) {
                                return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                            }

                            /**
                             * Iterates over own and inherited enumerable string keyed properties of an
                             * object and invokes `iteratee` for each property. The iteratee is invoked
                             * with three arguments: (value, key, object). Iteratee functions may exit
                             * iteration early by explicitly returning `false`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.3.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Object} Returns `object`.
                             * @see _.forInRight
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.forIn(new Foo, function(value, key) {
                             *   console.log(key);
                             * });
                             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                             */
                            function forIn(object, iteratee) {
                                return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
                            }

                            /**
                             * This method is like `_.forIn` except that it iterates over properties of
                             * `object` in the opposite order.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Object} Returns `object`.
                             * @see _.forIn
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.forInRight(new Foo, function(value, key) {
                             *   console.log(key);
                             * });
                             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                             */
                            function forInRight(object, iteratee) {
                                return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                            }

                            /**
                             * Iterates over own enumerable string keyed properties of an object and
                             * invokes `iteratee` for each property. The iteratee is invoked with three
                             * arguments: (value, key, object). Iteratee functions may exit iteration
                             * early by explicitly returning `false`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.3.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Object} Returns `object`.
                             * @see _.forOwnRight
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.forOwn(new Foo, function(value, key) {
                             *   console.log(key);
                             * });
                             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                             */
                            function forOwn(object, iteratee) {
                                return object && baseForOwn(object, getIteratee(iteratee, 3));
                            }

                            /**
                             * This method is like `_.forOwn` except that it iterates over properties of
                             * `object` in the opposite order.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.0.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Object} Returns `object`.
                             * @see _.forOwn
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.forOwnRight(new Foo, function(value, key) {
                             *   console.log(key);
                             * });
                             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                             */
                            function forOwnRight(object, iteratee) {
                                return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                            }

                            /**
                             * Creates an array of function property names from own enumerable properties
                             * of `object`.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The object to inspect.
                             * @returns {Array} Returns the function names.
                             * @see _.functionsIn
                             * @example
                             *
                             * function Foo() {
                             *   this.a = _.constant('a');
                             *   this.b = _.constant('b');
                             * }
                             *
                             * Foo.prototype.c = _.constant('c');
                             *
                             * _.functions(new Foo);
                             * // => ['a', 'b']
                             */
                            function functions(object) {
                                return object == null ? [] : baseFunctions(object, keys(object));
                            }

                            /**
                             * Creates an array of function property names from own and inherited
                             * enumerable properties of `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The object to inspect.
                             * @returns {Array} Returns the function names.
                             * @see _.functions
                             * @example
                             *
                             * function Foo() {
                             *   this.a = _.constant('a');
                             *   this.b = _.constant('b');
                             * }
                             *
                             * Foo.prototype.c = _.constant('c');
                             *
                             * _.functionsIn(new Foo);
                             * // => ['a', 'b', 'c']
                             */
                            function functionsIn(object) {
                                return object == null ? [] : baseFunctions(object, keysIn(object));
                            }

                            /**
                             * Gets the value at `path` of `object`. If the resolved value is
                             * `undefined`, the `defaultValue` is returned in its place.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.7.0
                             * @category Object
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path of the property to get.
                             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                             * @returns {*} Returns the resolved value.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                             *
                             * _.get(object, 'a[0].b.c');
                             * // => 3
                             *
                             * _.get(object, ['a', '0', 'b', 'c']);
                             * // => 3
                             *
                             * _.get(object, 'a.b.c', 'default');
                             * // => 'default'
                             */
                            function get(object, path, defaultValue) {
                                var result = object == null ? undefined : baseGet(object, path);
                                return result === undefined ? defaultValue : result;
                            }

                            /**
                             * Checks if `path` is a direct property of `object`.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path to check.
                             * @returns {boolean} Returns `true` if `path` exists, else `false`.
                             * @example
                             *
                             * var object = { 'a': { 'b': 2 } };
                             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                             *
                             * _.has(object, 'a');
                             * // => true
                             *
                             * _.has(object, 'a.b');
                             * // => true
                             *
                             * _.has(object, ['a', 'b']);
                             * // => true
                             *
                             * _.has(other, 'a');
                             * // => false
                             */
                            function has(object, path) {
                                return object != null && hasPath(object, path, baseHas);
                            }

                            /**
                             * Checks if `path` is a direct or inherited property of `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path to check.
                             * @returns {boolean} Returns `true` if `path` exists, else `false`.
                             * @example
                             *
                             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                             *
                             * _.hasIn(object, 'a');
                             * // => true
                             *
                             * _.hasIn(object, 'a.b');
                             * // => true
                             *
                             * _.hasIn(object, ['a', 'b']);
                             * // => true
                             *
                             * _.hasIn(object, 'b');
                             * // => false
                             */
                            function hasIn(object, path) {
                                return object != null && hasPath(object, path, baseHasIn);
                            }

                            /**
                             * Creates an object composed of the inverted keys and values of `object`.
                             * If `object` contains duplicate values, subsequent values overwrite
                             * property assignments of previous values.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.7.0
                             * @category Object
                             * @param {Object} object The object to invert.
                             * @returns {Object} Returns the new inverted object.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': 2, 'c': 1 };
                             *
                             * _.invert(object);
                             * // => { '1': 'c', '2': 'b' }
                             */
                            var invert = createInverter(function (result, value, key) {
                                if (value != null && typeof value.toString != 'function') {
                                    value = nativeObjectToString.call(value);
                                }

                                result[value] = key;
                            }, constant(identity));

                            /**
                             * This method is like `_.invert` except that the inverted object is generated
                             * from the results of running each element of `object` thru `iteratee`. The
                             * corresponding inverted value of each inverted key is an array of keys
                             * responsible for generating the inverted value. The iteratee is invoked
                             * with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.1.0
                             * @category Object
                             * @param {Object} object The object to invert.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {Object} Returns the new inverted object.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': 2, 'c': 1 };
                             *
                             * _.invertBy(object);
                             * // => { '1': ['a', 'c'], '2': ['b'] }
                             *
                             * _.invertBy(object, function(value) {
                             *   return 'group' + value;
                             * });
                             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                             */
                            var invertBy = createInverter(function (result, value, key) {
                                if (value != null && typeof value.toString != 'function') {
                                    value = nativeObjectToString.call(value);
                                }

                                if (hasOwnProperty.call(result, value)) {
                                    result[value].push(key);
                                } else {
                                    result[value] = [key];
                                }
                            }, getIteratee);

                            /**
                             * Invokes the method at `path` of `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path of the method to invoke.
                             * @param {...*} [args] The arguments to invoke the method with.
                             * @returns {*} Returns the result of the invoked method.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                             *
                             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                             * // => [2, 3]
                             */
                            var invoke = baseRest(baseInvoke);

                            /**
                             * Creates an array of the own enumerable property names of `object`.
                             *
                             * **Note:** Non-object values are coerced to objects. See the
                             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                             * for more details.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.keys(new Foo);
                             * // => ['a', 'b'] (iteration order is not guaranteed)
                             *
                             * _.keys('hi');
                             * // => ['0', '1']
                             */
                            function keys(object) {
                                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                            }

                            /**
                             * Creates an array of the own and inherited enumerable property names of `object`.
                             *
                             * **Note:** Non-object values are coerced to objects.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.keysIn(new Foo);
                             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                             */
                            function keysIn(object) {
                                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                            }

                            /**
                             * The opposite of `_.mapValues`; this method creates an object with the
                             * same values as `object` and keys generated by running each own enumerable
                             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                             * with three arguments: (value, key, object).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.8.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Object} Returns the new mapped object.
                             * @see _.mapValues
                             * @example
                             *
                             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                             *   return key + value;
                             * });
                             * // => { 'a1': 1, 'b2': 2 }
                             */
                            function mapKeys(object, iteratee) {
                                var result = {};
                                iteratee = getIteratee(iteratee, 3);

                                baseForOwn(object, function (value, key, object) {
                                    baseAssignValue(result, iteratee(value, key, object), value);
                                });
                                return result;
                            }

                            /**
                             * Creates an object with the same keys as `object` and values generated
                             * by running each own enumerable string keyed property of `object` thru
                             * `iteratee`. The iteratee is invoked with three arguments:
                             * (value, key, object).
                             *
                             * @static
                             * @memberOf _
                             * @since 2.4.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Object} Returns the new mapped object.
                             * @see _.mapKeys
                             * @example
                             *
                             * var users = {
                             *   'fred':    { 'user': 'fred',    'age': 40 },
                             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                             * };
                             *
                             * _.mapValues(users, function(o) { return o.age; });
                             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.mapValues(users, 'age');
                             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                             */
                            function mapValues(object, iteratee) {
                                var result = {};
                                iteratee = getIteratee(iteratee, 3);

                                baseForOwn(object, function (value, key, object) {
                                    baseAssignValue(result, key, iteratee(value, key, object));
                                });
                                return result;
                            }

                            /**
                             * This method is like `_.assign` except that it recursively merges own and
                             * inherited enumerable string keyed properties of source objects into the
                             * destination object. Source properties that resolve to `undefined` are
                             * skipped if a destination value exists. Array and plain object properties
                             * are merged recursively. Other objects and value types are overridden by
                             * assignment. Source objects are applied from left to right. Subsequent
                             * sources overwrite property assignments of previous sources.
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.5.0
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} [sources] The source objects.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * var object = {
                             *   'a': [{ 'b': 2 }, { 'd': 4 }]
                             * };
                             *
                             * var other = {
                             *   'a': [{ 'c': 3 }, { 'e': 5 }]
                             * };
                             *
                             * _.merge(object, other);
                             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                             */
                            var merge = createAssigner(function (object, source, srcIndex) {
                                baseMerge(object, source, srcIndex);
                            });

                            /**
                             * This method is like `_.merge` except that it accepts `customizer` which
                             * is invoked to produce the merged values of the destination and source
                             * properties. If `customizer` returns `undefined`, merging is handled by the
                             * method instead. The `customizer` is invoked with six arguments:
                             * (objValue, srcValue, key, object, source, stack).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} sources The source objects.
                             * @param {Function} customizer The function to customize assigned values.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * function customizer(objValue, srcValue) {
                             *   if (_.isArray(objValue)) {
                             *     return objValue.concat(srcValue);
                             *   }
                             * }
                             *
                             * var object = { 'a': [1], 'b': [2] };
                             * var other = { 'a': [3], 'b': [4] };
                             *
                             * _.mergeWith(object, other, customizer);
                             * // => { 'a': [1, 3], 'b': [2, 4] }
                             */
                            var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                                baseMerge(object, source, srcIndex, customizer);
                            });

                            /**
                             * The opposite of `_.pick`; this method creates an object composed of the
                             * own and inherited enumerable property paths of `object` that are not omitted.
                             *
                             * **Note:** This method is considerably slower than `_.pick`.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The source object.
                             * @param {...(string|string[])} [paths] The property paths to omit.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': '2', 'c': 3 };
                             *
                             * _.omit(object, ['a', 'c']);
                             * // => { 'b': '2' }
                             */
                            var omit = flatRest(function (object, paths) {
                                var result = {};
                                if (object == null) {
                                    return result;
                                }
                                var isDeep = false;
                                paths = arrayMap(paths, function (path) {
                                    path = castPath(path, object);
                                    isDeep || (isDeep = path.length > 1);
                                    return path;
                                });
                                copyObject(object, getAllKeysIn(object), result);
                                if (isDeep) {
                                    result = baseClone(
                                        result,
                                        CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                                        customOmitClone,
                                    );
                                }
                                var length = paths.length;
                                while (length--) {
                                    baseUnset(result, paths[length]);
                                }
                                return result;
                            });

                            /**
                             * The opposite of `_.pickBy`; this method creates an object composed of
                             * the own and inherited enumerable string keyed properties of `object` that
                             * `predicate` doesn't return truthy for. The predicate is invoked with two
                             * arguments: (value, key).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The source object.
                             * @param {Function} [predicate=_.identity] The function invoked per property.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': '2', 'c': 3 };
                             *
                             * _.omitBy(object, _.isNumber);
                             * // => { 'b': '2' }
                             */
                            function omitBy(object, predicate) {
                                return pickBy(object, negate(getIteratee(predicate)));
                            }

                            /**
                             * Creates an object composed of the picked `object` properties.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The source object.
                             * @param {...(string|string[])} [paths] The property paths to pick.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': '2', 'c': 3 };
                             *
                             * _.pick(object, ['a', 'c']);
                             * // => { 'a': 1, 'c': 3 }
                             */
                            var pick = flatRest(function (object, paths) {
                                return object == null ? {} : basePick(object, paths);
                            });

                            /**
                             * Creates an object composed of the `object` properties `predicate` returns
                             * truthy for. The predicate is invoked with two arguments: (value, key).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The source object.
                             * @param {Function} [predicate=_.identity] The function invoked per property.
                             * @returns {Object} Returns the new object.
                             * @example
                             *
                             * var object = { 'a': 1, 'b': '2', 'c': 3 };
                             *
                             * _.pickBy(object, _.isNumber);
                             * // => { 'a': 1, 'c': 3 }
                             */
                            function pickBy(object, predicate) {
                                if (object == null) {
                                    return {};
                                }
                                var props = arrayMap(getAllKeysIn(object), function (prop) {
                                    return [prop];
                                });
                                predicate = getIteratee(predicate);
                                return basePickBy(object, props, function (value, path) {
                                    return predicate(value, path[0]);
                                });
                            }

                            /**
                             * This method is like `_.get` except that if the resolved value is a
                             * function it's invoked with the `this` binding of its parent object and
                             * its result is returned.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The object to query.
                             * @param {Array|string} path The path of the property to resolve.
                             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                             * @returns {*} Returns the resolved value.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                             *
                             * _.result(object, 'a[0].b.c1');
                             * // => 3
                             *
                             * _.result(object, 'a[0].b.c2');
                             * // => 4
                             *
                             * _.result(object, 'a[0].b.c3', 'default');
                             * // => 'default'
                             *
                             * _.result(object, 'a[0].b.c3', _.constant('default'));
                             * // => 'default'
                             */
                            function result(object, path, defaultValue) {
                                path = castPath(path, object);

                                var index = -1,
                                    length = path.length;

                                // Ensure the loop is entered when path is empty.
                                if (!length) {
                                    length = 1;
                                    object = undefined;
                                }
                                while (++index < length) {
                                    var value = object == null ? undefined : object[toKey(path[index])];
                                    if (value === undefined) {
                                        index = length;
                                        value = defaultValue;
                                    }
                                    object = isFunction(value) ? value.call(object) : value;
                                }
                                return object;
                            }

                            /**
                             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                             * it's created. Arrays are created for missing index properties while objects
                             * are created for all other missing properties. Use `_.setWith` to customize
                             * `path` creation.
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.7.0
                             * @category Object
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                             *
                             * _.set(object, 'a[0].b.c', 4);
                             * console.log(object.a[0].b.c);
                             * // => 4
                             *
                             * _.set(object, ['x', '0', 'y', 'z'], 5);
                             * console.log(object.x[0].y.z);
                             * // => 5
                             */
                            function set(object, path, value) {
                                return object == null ? object : baseSet(object, path, value);
                            }

                            /**
                             * This method is like `_.set` except that it accepts `customizer` which is
                             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                             * path creation is handled by the method instead. The `customizer` is invoked
                             * with three arguments: (nsValue, key, nsObject).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to set.
                             * @param {*} value The value to set.
                             * @param {Function} [customizer] The function to customize assigned values.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * var object = {};
                             *
                             * _.setWith(object, '[0][1]', 'a', Object);
                             * // => { '0': { '1': 'a' } }
                             */
                            function setWith(object, path, value, customizer) {
                                customizer = typeof customizer == 'function' ? customizer : undefined;
                                return object == null ? object : baseSet(object, path, value, customizer);
                            }

                            /**
                             * Creates an array of own enumerable string keyed-value pairs for `object`
                             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                             * entries are returned.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @alias entries
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the key-value pairs.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.toPairs(new Foo);
                             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                             */
                            var toPairs = createToPairs(keys);

                            /**
                             * Creates an array of own and inherited enumerable string keyed-value pairs
                             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                             * or set, its entries are returned.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @alias entriesIn
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the key-value pairs.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.toPairsIn(new Foo);
                             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                             */
                            var toPairsIn = createToPairs(keysIn);

                            /**
                             * An alternative to `_.reduce`; this method transforms `object` to a new
                             * `accumulator` object which is the result of running each of its own
                             * enumerable string keyed properties thru `iteratee`, with each invocation
                             * potentially mutating the `accumulator` object. If `accumulator` is not
                             * provided, a new object with the same `[[Prototype]]` will be used. The
                             * iteratee is invoked with four arguments: (accumulator, value, key, object).
                             * Iteratee functions may exit iteration early by explicitly returning `false`.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.3.0
                             * @category Object
                             * @param {Object} object The object to iterate over.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @param {*} [accumulator] The custom accumulator value.
                             * @returns {*} Returns the accumulated value.
                             * @example
                             *
                             * _.transform([2, 3, 4], function(result, n) {
                             *   result.push(n *= n);
                             *   return n % 2 == 0;
                             * }, []);
                             * // => [4, 9]
                             *
                             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                             *   (result[value] || (result[value] = [])).push(key);
                             * }, {});
                             * // => { '1': ['a', 'c'], '2': ['b'] }
                             */
                            function transform(object, iteratee, accumulator) {
                                var isArr = isArray(object),
                                    isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                                iteratee = getIteratee(iteratee, 4);
                                if (accumulator == null) {
                                    var Ctor = object && object.constructor;
                                    if (isArrLike) {
                                        accumulator = isArr ? new Ctor() : [];
                                    } else if (isObject(object)) {
                                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                                    } else {
                                        accumulator = {};
                                    }
                                }
                                (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                                    return iteratee(accumulator, value, index, object);
                                });
                                return accumulator;
                            }

                            /**
                             * Removes the property at `path` of `object`.
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to unset.
                             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                             * _.unset(object, 'a[0].b.c');
                             * // => true
                             *
                             * console.log(object);
                             * // => { 'a': [{ 'b': {} }] };
                             *
                             * _.unset(object, ['a', '0', 'b', 'c']);
                             * // => true
                             *
                             * console.log(object);
                             * // => { 'a': [{ 'b': {} }] };
                             */
                            function unset(object, path) {
                                return object == null ? true : baseUnset(object, path);
                            }

                            /**
                             * This method is like `_.set` except that accepts `updater` to produce the
                             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                             * is invoked with one argument: (value).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.6.0
                             * @category Object
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to set.
                             * @param {Function} updater The function to produce the updated value.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                             *
                             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                             * console.log(object.a[0].b.c);
                             * // => 9
                             *
                             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                             * console.log(object.x[0].y.z);
                             * // => 0
                             */
                            function update(object, path, updater) {
                                return object == null ? object : baseUpdate(object, path, castFunction(updater));
                            }

                            /**
                             * This method is like `_.update` except that it accepts `customizer` which is
                             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                             * path creation is handled by the method instead. The `customizer` is invoked
                             * with three arguments: (nsValue, key, nsObject).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.6.0
                             * @category Object
                             * @param {Object} object The object to modify.
                             * @param {Array|string} path The path of the property to set.
                             * @param {Function} updater The function to produce the updated value.
                             * @param {Function} [customizer] The function to customize assigned values.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * var object = {};
                             *
                             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                             * // => { '0': { '1': 'a' } }
                             */
                            function updateWith(object, path, updater, customizer) {
                                customizer = typeof customizer == 'function' ? customizer : undefined;
                                return object == null
                                    ? object
                                    : baseUpdate(object, path, castFunction(updater), customizer);
                            }

                            /**
                             * Creates an array of the own enumerable string keyed property values of `object`.
                             *
                             * **Note:** Non-object values are coerced to objects.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property values.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.values(new Foo);
                             * // => [1, 2] (iteration order is not guaranteed)
                             *
                             * _.values('hi');
                             * // => ['h', 'i']
                             */
                            function values(object) {
                                return object == null ? [] : baseValues(object, keys(object));
                            }

                            /**
                             * Creates an array of the own and inherited enumerable string keyed property
                             * values of `object`.
                             *
                             * **Note:** Non-object values are coerced to objects.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property values.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.valuesIn(new Foo);
                             * // => [1, 2, 3] (iteration order is not guaranteed)
                             */
                            function valuesIn(object) {
                                return object == null ? [] : baseValues(object, keysIn(object));
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Clamps `number` within the inclusive `lower` and `upper` bounds.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Number
                             * @param {number} number The number to clamp.
                             * @param {number} [lower] The lower bound.
                             * @param {number} upper The upper bound.
                             * @returns {number} Returns the clamped number.
                             * @example
                             *
                             * _.clamp(-10, -5, 5);
                             * // => -5
                             *
                             * _.clamp(10, -5, 5);
                             * // => 5
                             */
                            function clamp(number, lower, upper) {
                                if (upper === undefined) {
                                    upper = lower;
                                    lower = undefined;
                                }
                                if (upper !== undefined) {
                                    upper = toNumber(upper);
                                    upper = upper === upper ? upper : 0;
                                }
                                if (lower !== undefined) {
                                    lower = toNumber(lower);
                                    lower = lower === lower ? lower : 0;
                                }
                                return baseClamp(toNumber(number), lower, upper);
                            }

                            /**
                             * Checks if `n` is between `start` and up to, but not including, `end`. If
                             * `end` is not specified, it's set to `start` with `start` then set to `0`.
                             * If `start` is greater than `end` the params are swapped to support
                             * negative ranges.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.3.0
                             * @category Number
                             * @param {number} number The number to check.
                             * @param {number} [start=0] The start of the range.
                             * @param {number} end The end of the range.
                             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                             * @see _.range, _.rangeRight
                             * @example
                             *
                             * _.inRange(3, 2, 4);
                             * // => true
                             *
                             * _.inRange(4, 8);
                             * // => true
                             *
                             * _.inRange(4, 2);
                             * // => false
                             *
                             * _.inRange(2, 2);
                             * // => false
                             *
                             * _.inRange(1.2, 2);
                             * // => true
                             *
                             * _.inRange(5.2, 4);
                             * // => false
                             *
                             * _.inRange(-3, -2, -6);
                             * // => true
                             */
                            function inRange(number, start, end) {
                                start = toFinite(start);
                                if (end === undefined) {
                                    end = start;
                                    start = 0;
                                } else {
                                    end = toFinite(end);
                                }
                                number = toNumber(number);
                                return baseInRange(number, start, end);
                            }

                            /**
                             * Produces a random number between the inclusive `lower` and `upper` bounds.
                             * If only one argument is provided a number between `0` and the given number
                             * is returned. If `floating` is `true`, or either `lower` or `upper` are
                             * floats, a floating-point number is returned instead of an integer.
                             *
                             * **Note:** JavaScript follows the IEEE-754 standard for resolving
                             * floating-point values which can produce unexpected results.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.7.0
                             * @category Number
                             * @param {number} [lower=0] The lower bound.
                             * @param {number} [upper=1] The upper bound.
                             * @param {boolean} [floating] Specify returning a floating-point number.
                             * @returns {number} Returns the random number.
                             * @example
                             *
                             * _.random(0, 5);
                             * // => an integer between 0 and 5
                             *
                             * _.random(5);
                             * // => also an integer between 0 and 5
                             *
                             * _.random(5, true);
                             * // => a floating-point number between 0 and 5
                             *
                             * _.random(1.2, 5.2);
                             * // => a floating-point number between 1.2 and 5.2
                             */
                            function random(lower, upper, floating) {
                                if (
                                    floating &&
                                    typeof floating != 'boolean' &&
                                    isIterateeCall(lower, upper, floating)
                                ) {
                                    upper = floating = undefined;
                                }
                                if (floating === undefined) {
                                    if (typeof upper == 'boolean') {
                                        floating = upper;
                                        upper = undefined;
                                    } else if (typeof lower == 'boolean') {
                                        floating = lower;
                                        lower = undefined;
                                    }
                                }
                                if (lower === undefined && upper === undefined) {
                                    lower = 0;
                                    upper = 1;
                                } else {
                                    lower = toFinite(lower);
                                    if (upper === undefined) {
                                        upper = lower;
                                        lower = 0;
                                    } else {
                                        upper = toFinite(upper);
                                    }
                                }
                                if (lower > upper) {
                                    var temp = lower;
                                    lower = upper;
                                    upper = temp;
                                }
                                if (floating || lower % 1 || upper % 1) {
                                    var rand = nativeRandom();
                                    return nativeMin(
                                        lower +
                                            rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))),
                                        upper,
                                    );
                                }
                                return baseRandom(lower, upper);
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the camel cased string.
                             * @example
                             *
                             * _.camelCase('Foo Bar');
                             * // => 'fooBar'
                             *
                             * _.camelCase('--foo-bar--');
                             * // => 'fooBar'
                             *
                             * _.camelCase('__FOO_BAR__');
                             * // => 'fooBar'
                             */
                            var camelCase = createCompounder(function (result, word, index) {
                                word = word.toLowerCase();
                                return result + (index ? capitalize(word) : word);
                            });

                            /**
                             * Converts the first character of `string` to upper case and the remaining
                             * to lower case.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to capitalize.
                             * @returns {string} Returns the capitalized string.
                             * @example
                             *
                             * _.capitalize('FRED');
                             * // => 'Fred'
                             */
                            function capitalize(string) {
                                return upperFirst(toString(string).toLowerCase());
                            }

                            /**
                             * Deburrs `string` by converting
                             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                             * letters to basic Latin letters and removing
                             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to deburr.
                             * @returns {string} Returns the deburred string.
                             * @example
                             *
                             * _.deburr('déjà vu');
                             * // => 'deja vu'
                             */
                            function deburr(string) {
                                string = toString(string);
                                return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                            }

                            /**
                             * Checks if `string` ends with the given target string.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to inspect.
                             * @param {string} [target] The string to search for.
                             * @param {number} [position=string.length] The position to search up to.
                             * @returns {boolean} Returns `true` if `string` ends with `target`,
                             *  else `false`.
                             * @example
                             *
                             * _.endsWith('abc', 'c');
                             * // => true
                             *
                             * _.endsWith('abc', 'b');
                             * // => false
                             *
                             * _.endsWith('abc', 'b', 2);
                             * // => true
                             */
                            function endsWith(string, target, position) {
                                string = toString(string);
                                target = baseToString(target);

                                var length = string.length;
                                position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

                                var end = position;
                                position -= target.length;
                                return position >= 0 && string.slice(position, end) == target;
                            }

                            /**
                             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                             * corresponding HTML entities.
                             *
                             * **Note:** No other characters are escaped. To escape additional
                             * characters use a third-party library like [_he_](https://mths.be/he).
                             *
                             * Though the ">" character is escaped for symmetry, characters like
                             * ">" and "/" don't need escaping in HTML and have no special meaning
                             * unless they're part of a tag or unquoted attribute value. See
                             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                             * (under "semi-related fun fact") for more details.
                             *
                             * When working with HTML you should always
                             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                             * XSS vectors.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category String
                             * @param {string} [string=''] The string to escape.
                             * @returns {string} Returns the escaped string.
                             * @example
                             *
                             * _.escape('fred, barney, & pebbles');
                             * // => 'fred, barney, &amp; pebbles'
                             */
                            function escape(string) {
                                string = toString(string);
                                return string && reHasUnescapedHtml.test(string)
                                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                                    : string;
                            }

                            /**
                             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to escape.
                             * @returns {string} Returns the escaped string.
                             * @example
                             *
                             * _.escapeRegExp('[lodash](https://lodash.com/)');
                             * // => '\[lodash\]\(https://lodash\.com/\)'
                             */
                            function escapeRegExp(string) {
                                string = toString(string);
                                return string && reHasRegExpChar.test(string)
                                    ? string.replace(reRegExpChar, '\\$&')
                                    : string;
                            }

                            /**
                             * Converts `string` to
                             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the kebab cased string.
                             * @example
                             *
                             * _.kebabCase('Foo Bar');
                             * // => 'foo-bar'
                             *
                             * _.kebabCase('fooBar');
                             * // => 'foo-bar'
                             *
                             * _.kebabCase('__FOO_BAR__');
                             * // => 'foo-bar'
                             */
                            var kebabCase = createCompounder(function (result, word, index) {
                                return result + (index ? '-' : '') + word.toLowerCase();
                            });

                            /**
                             * Converts `string`, as space separated words, to lower case.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the lower cased string.
                             * @example
                             *
                             * _.lowerCase('--Foo-Bar--');
                             * // => 'foo bar'
                             *
                             * _.lowerCase('fooBar');
                             * // => 'foo bar'
                             *
                             * _.lowerCase('__FOO_BAR__');
                             * // => 'foo bar'
                             */
                            var lowerCase = createCompounder(function (result, word, index) {
                                return result + (index ? ' ' : '') + word.toLowerCase();
                            });

                            /**
                             * Converts the first character of `string` to lower case.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the converted string.
                             * @example
                             *
                             * _.lowerFirst('Fred');
                             * // => 'fred'
                             *
                             * _.lowerFirst('FRED');
                             * // => 'fRED'
                             */
                            var lowerFirst = createCaseFirst('toLowerCase');

                            /**
                             * Pads `string` on the left and right sides if it's shorter than `length`.
                             * Padding characters are truncated if they can't be evenly divided by `length`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to pad.
                             * @param {number} [length=0] The padding length.
                             * @param {string} [chars=' '] The string used as padding.
                             * @returns {string} Returns the padded string.
                             * @example
                             *
                             * _.pad('abc', 8);
                             * // => '  abc   '
                             *
                             * _.pad('abc', 8, '_-');
                             * // => '_-abc_-_'
                             *
                             * _.pad('abc', 3);
                             * // => 'abc'
                             */
                            function pad(string, length, chars) {
                                string = toString(string);
                                length = toInteger(length);

                                var strLength = length ? stringSize(string) : 0;
                                if (!length || strLength >= length) {
                                    return string;
                                }
                                var mid = (length - strLength) / 2;
                                return (
                                    createPadding(nativeFloor(mid), chars) +
                                    string +
                                    createPadding(nativeCeil(mid), chars)
                                );
                            }

                            /**
                             * Pads `string` on the right side if it's shorter than `length`. Padding
                             * characters are truncated if they exceed `length`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to pad.
                             * @param {number} [length=0] The padding length.
                             * @param {string} [chars=' '] The string used as padding.
                             * @returns {string} Returns the padded string.
                             * @example
                             *
                             * _.padEnd('abc', 6);
                             * // => 'abc   '
                             *
                             * _.padEnd('abc', 6, '_-');
                             * // => 'abc_-_'
                             *
                             * _.padEnd('abc', 3);
                             * // => 'abc'
                             */
                            function padEnd(string, length, chars) {
                                string = toString(string);
                                length = toInteger(length);

                                var strLength = length ? stringSize(string) : 0;
                                return length && strLength < length
                                    ? string + createPadding(length - strLength, chars)
                                    : string;
                            }

                            /**
                             * Pads `string` on the left side if it's shorter than `length`. Padding
                             * characters are truncated if they exceed `length`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to pad.
                             * @param {number} [length=0] The padding length.
                             * @param {string} [chars=' '] The string used as padding.
                             * @returns {string} Returns the padded string.
                             * @example
                             *
                             * _.padStart('abc', 6);
                             * // => '   abc'
                             *
                             * _.padStart('abc', 6, '_-');
                             * // => '_-_abc'
                             *
                             * _.padStart('abc', 3);
                             * // => 'abc'
                             */
                            function padStart(string, length, chars) {
                                string = toString(string);
                                length = toInteger(length);

                                var strLength = length ? stringSize(string) : 0;
                                return length && strLength < length
                                    ? createPadding(length - strLength, chars) + string
                                    : string;
                            }

                            /**
                             * Converts `string` to an integer of the specified radix. If `radix` is
                             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                             * hexadecimal, in which case a `radix` of `16` is used.
                             *
                             * **Note:** This method aligns with the
                             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.1.0
                             * @category String
                             * @param {string} string The string to convert.
                             * @param {number} [radix=10] The radix to interpret `value` by.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {number} Returns the converted integer.
                             * @example
                             *
                             * _.parseInt('08');
                             * // => 8
                             *
                             * _.map(['6', '08', '10'], _.parseInt);
                             * // => [6, 8, 10]
                             */
                            function parseInt(string, radix, guard) {
                                if (guard || radix == null) {
                                    radix = 0;
                                } else if (radix) {
                                    radix = +radix;
                                }
                                return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                            }

                            /**
                             * Repeats the given string `n` times.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to repeat.
                             * @param {number} [n=1] The number of times to repeat the string.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {string} Returns the repeated string.
                             * @example
                             *
                             * _.repeat('*', 3);
                             * // => '***'
                             *
                             * _.repeat('abc', 2);
                             * // => 'abcabc'
                             *
                             * _.repeat('abc', 0);
                             * // => ''
                             */
                            function repeat(string, n, guard) {
                                if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                                    n = 1;
                                } else {
                                    n = toInteger(n);
                                }
                                return baseRepeat(toString(string), n);
                            }

                            /**
                             * Replaces matches for `pattern` in `string` with `replacement`.
                             *
                             * **Note:** This method is based on
                             * [`String#replace`](https://mdn.io/String/replace).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to modify.
                             * @param {RegExp|string} pattern The pattern to replace.
                             * @param {Function|string} replacement The match replacement.
                             * @returns {string} Returns the modified string.
                             * @example
                             *
                             * _.replace('Hi Fred', 'Fred', 'Barney');
                             * // => 'Hi Barney'
                             */
                            function replace() {
                                var args = arguments,
                                    string = toString(args[0]);

                                return args.length < 3 ? string : string.replace(args[1], args[2]);
                            }

                            /**
                             * Converts `string` to
                             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the snake cased string.
                             * @example
                             *
                             * _.snakeCase('Foo Bar');
                             * // => 'foo_bar'
                             *
                             * _.snakeCase('fooBar');
                             * // => 'foo_bar'
                             *
                             * _.snakeCase('--FOO-BAR--');
                             * // => 'foo_bar'
                             */
                            var snakeCase = createCompounder(function (result, word, index) {
                                return result + (index ? '_' : '') + word.toLowerCase();
                            });

                            /**
                             * Splits `string` by `separator`.
                             *
                             * **Note:** This method is based on
                             * [`String#split`](https://mdn.io/String/split).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to split.
                             * @param {RegExp|string} separator The separator pattern to split by.
                             * @param {number} [limit] The length to truncate results to.
                             * @returns {Array} Returns the string segments.
                             * @example
                             *
                             * _.split('a-b-c', '-', 2);
                             * // => ['a', 'b']
                             */
                            function split(string, separator, limit) {
                                if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                                    separator = limit = undefined;
                                }
                                limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                                if (!limit) {
                                    return [];
                                }
                                string = toString(string);
                                if (
                                    string &&
                                    (typeof separator == 'string' || (separator != null && !isRegExp(separator)))
                                ) {
                                    separator = baseToString(separator);
                                    if (!separator && hasUnicode(string)) {
                                        return castSlice(stringToArray(string), 0, limit);
                                    }
                                }
                                return string.split(separator, limit);
                            }

                            /**
                             * Converts `string` to
                             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                             *
                             * @static
                             * @memberOf _
                             * @since 3.1.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the start cased string.
                             * @example
                             *
                             * _.startCase('--foo-bar--');
                             * // => 'Foo Bar'
                             *
                             * _.startCase('fooBar');
                             * // => 'Foo Bar'
                             *
                             * _.startCase('__FOO_BAR__');
                             * // => 'FOO BAR'
                             */
                            var startCase = createCompounder(function (result, word, index) {
                                return result + (index ? ' ' : '') + upperFirst(word);
                            });

                            /**
                             * Checks if `string` starts with the given target string.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to inspect.
                             * @param {string} [target] The string to search for.
                             * @param {number} [position=0] The position to search from.
                             * @returns {boolean} Returns `true` if `string` starts with `target`,
                             *  else `false`.
                             * @example
                             *
                             * _.startsWith('abc', 'a');
                             * // => true
                             *
                             * _.startsWith('abc', 'b');
                             * // => false
                             *
                             * _.startsWith('abc', 'b', 1);
                             * // => true
                             */
                            function startsWith(string, target, position) {
                                string = toString(string);
                                position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);

                                target = baseToString(target);
                                return string.slice(position, position + target.length) == target;
                            }

                            /**
                             * Creates a compiled template function that can interpolate data properties
                             * in "interpolate" delimiters, HTML-escape interpolated data properties in
                             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                             * properties may be accessed as free variables in the template. If a setting
                             * object is given, it takes precedence over `_.templateSettings` values.
                             *
                             * **Note:** In the development build `_.template` utilizes
                             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                             * for easier debugging.
                             *
                             * For more information on precompiling templates see
                             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                             *
                             * For more information on Chrome extension sandboxes see
                             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category String
                             * @param {string} [string=''] The template string.
                             * @param {Object} [options={}] The options object.
                             * @param {RegExp} [options.escape=_.templateSettings.escape]
                             *  The HTML "escape" delimiter.
                             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                             *  The "evaluate" delimiter.
                             * @param {Object} [options.imports=_.templateSettings.imports]
                             *  An object to import into the template as free variables.
                             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                             *  The "interpolate" delimiter.
                             * @param {string} [options.sourceURL='lodash.templateSources[n]']
                             *  The sourceURL of the compiled template.
                             * @param {string} [options.variable='obj']
                             *  The data object variable name.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Function} Returns the compiled template function.
                             * @example
                             *
                             * // Use the "interpolate" delimiter to create a compiled template.
                             * var compiled = _.template('hello <%= user %>!');
                             * compiled({ 'user': 'fred' });
                             * // => 'hello fred!'
                             *
                             * // Use the HTML "escape" delimiter to escape data property values.
                             * var compiled = _.template('<b><%- value %></b>');
                             * compiled({ 'value': '<script>' });
                             * // => '<b>&lt;script&gt;</b>'
                             *
                             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                             * compiled({ 'users': ['fred', 'barney'] });
                             * // => '<li>fred</li><li>barney</li>'
                             *
                             * // Use the internal `print` function in "evaluate" delimiters.
                             * var compiled = _.template('<% print("hello " + user); %>!');
                             * compiled({ 'user': 'barney' });
                             * // => 'hello barney!'
                             *
                             * // Use the ES template literal delimiter as an "interpolate" delimiter.
                             * // Disable support by replacing the "interpolate" delimiter.
                             * var compiled = _.template('hello ${ user }!');
                             * compiled({ 'user': 'pebbles' });
                             * // => 'hello pebbles!'
                             *
                             * // Use backslashes to treat delimiters as plain text.
                             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                             * compiled({ 'value': 'ignored' });
                             * // => '<%- value %>'
                             *
                             * // Use the `imports` option to import `jQuery` as `jq`.
                             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                             * compiled({ 'users': ['fred', 'barney'] });
                             * // => '<li>fred</li><li>barney</li>'
                             *
                             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                             * compiled(data);
                             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                             *
                             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                             * compiled.source;
                             * // => function(data) {
                             * //   var __t, __p = '';
                             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                             * //   return __p;
                             * // }
                             *
                             * // Use custom template delimiters.
                             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                             * var compiled = _.template('hello {{ user }}!');
                             * compiled({ 'user': 'mustache' });
                             * // => 'hello mustache!'
                             *
                             * // Use the `source` property to inline compiled templates for meaningful
                             * // line numbers in error messages and stack traces.
                             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                             *   var JST = {\
                             *     "main": ' + _.template(mainText).source + '\
                             *   };\
                             * ');
                             */
                            function template(string, options, guard) {
                                // Based on John Resig's `tmpl` implementation
                                // (http://ejohn.org/blog/javascript-micro-templating/)
                                // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                                var settings = lodash.templateSettings;

                                if (guard && isIterateeCall(string, options, guard)) {
                                    options = undefined;
                                }
                                string = toString(string);
                                options = assignInWith({}, options, settings, customDefaultsAssignIn);

                                var imports = assignInWith(
                                        {},
                                        options.imports,
                                        settings.imports,
                                        customDefaultsAssignIn,
                                    ),
                                    importsKeys = keys(imports),
                                    importsValues = baseValues(imports, importsKeys);

                                var isEscaping,
                                    isEvaluating,
                                    index = 0,
                                    interpolate = options.interpolate || reNoMatch,
                                    source = "__p += '";

                                // Compile the regexp to match each delimiter.
                                var reDelimiters = RegExp(
                                    (options.escape || reNoMatch).source +
                                        '|' +
                                        interpolate.source +
                                        '|' +
                                        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source +
                                        '|' +
                                        (options.evaluate || reNoMatch).source +
                                        '|$',
                                    'g',
                                );

                                // Use a sourceURL for easier debugging.
                                // The sourceURL gets injected into the source that's eval-ed, so be careful
                                // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                                // and escape the comment, thus injecting code that gets evaled.
                                var sourceURL =
                                    '//# sourceURL=' +
                                    (hasOwnProperty.call(options, 'sourceURL')
                                        ? (options.sourceURL + '').replace(/\s/g, ' ')
                                        : 'lodash.templateSources[' + ++templateCounter + ']') +
                                    '\n';

                                string.replace(
                                    reDelimiters,
                                    function (
                                        match,
                                        escapeValue,
                                        interpolateValue,
                                        esTemplateValue,
                                        evaluateValue,
                                        offset,
                                    ) {
                                        interpolateValue || (interpolateValue = esTemplateValue);

                                        // Escape characters that can't be included in string literals.
                                        source += string
                                            .slice(index, offset)
                                            .replace(reUnescapedString, escapeStringChar);

                                        // Replace delimiters with snippets.
                                        if (escapeValue) {
                                            isEscaping = true;
                                            source += "' +\n__e(" + escapeValue + ") +\n'";
                                        }
                                        if (evaluateValue) {
                                            isEvaluating = true;
                                            source += "';\n" + evaluateValue + ";\n__p += '";
                                        }
                                        if (interpolateValue) {
                                            source +=
                                                "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                                        }
                                        index = offset + match.length;

                                        // The JS engine embedded in Adobe products needs `match` returned in
                                        // order to produce the correct `offset` value.
                                        return match;
                                    },
                                );

                                source += "';\n";

                                // If `variable` is not specified wrap a with-statement around the generated
                                // code to add the data object to the top of the scope chain.
                                var variable = hasOwnProperty.call(options, 'variable') && options.variable;
                                if (!variable) {
                                    source = 'with (obj) {\n' + source + '\n}\n';
                                }
                                // Throw an error if a forbidden character was found in `variable`, to prevent
                                // potential command injection attacks.
                                else if (reForbiddenIdentifierChars.test(variable)) {
                                    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
                                }

                                // Cleanup code by stripping empty strings.
                                source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                                    .replace(reEmptyStringMiddle, '$1')
                                    .replace(reEmptyStringTrailing, '$1;');

                                // Frame code as the function body.
                                source =
                                    'function(' +
                                    (variable || 'obj') +
                                    ') {\n' +
                                    (variable ? '' : 'obj || (obj = {});\n') +
                                    "var __t, __p = ''" +
                                    (isEscaping ? ', __e = _.escape' : '') +
                                    (isEvaluating
                                        ? ', __j = Array.prototype.join;\n' +
                                          "function print() { __p += __j.call(arguments, '') }\n"
                                        : ';\n') +
                                    source +
                                    'return __p\n}';

                                var result = attempt(function () {
                                    return Function(importsKeys, sourceURL + 'return ' + source).apply(
                                        undefined,
                                        importsValues,
                                    );
                                });

                                // Provide the compiled function's source by its `toString` method or
                                // the `source` property as a convenience for inlining compiled templates.
                                result.source = source;
                                if (isError(result)) {
                                    throw result;
                                }
                                return result;
                            }

                            /**
                             * Converts `string`, as a whole, to lower case just like
                             * [String#toLowerCase](https://mdn.io/toLowerCase).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the lower cased string.
                             * @example
                             *
                             * _.toLower('--Foo-Bar--');
                             * // => '--foo-bar--'
                             *
                             * _.toLower('fooBar');
                             * // => 'foobar'
                             *
                             * _.toLower('__FOO_BAR__');
                             * // => '__foo_bar__'
                             */
                            function toLower(value) {
                                return toString(value).toLowerCase();
                            }

                            /**
                             * Converts `string`, as a whole, to upper case just like
                             * [String#toUpperCase](https://mdn.io/toUpperCase).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the upper cased string.
                             * @example
                             *
                             * _.toUpper('--foo-bar--');
                             * // => '--FOO-BAR--'
                             *
                             * _.toUpper('fooBar');
                             * // => 'FOOBAR'
                             *
                             * _.toUpper('__foo_bar__');
                             * // => '__FOO_BAR__'
                             */
                            function toUpper(value) {
                                return toString(value).toUpperCase();
                            }

                            /**
                             * Removes leading and trailing whitespace or specified characters from `string`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to trim.
                             * @param {string} [chars=whitespace] The characters to trim.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {string} Returns the trimmed string.
                             * @example
                             *
                             * _.trim('  abc  ');
                             * // => 'abc'
                             *
                             * _.trim('-_-abc-_-', '_-');
                             * // => 'abc'
                             *
                             * _.map(['  foo  ', '  bar  '], _.trim);
                             * // => ['foo', 'bar']
                             */
                            function trim(string, chars, guard) {
                                string = toString(string);
                                if (string && (guard || chars === undefined)) {
                                    return baseTrim(string);
                                }
                                if (!string || !(chars = baseToString(chars))) {
                                    return string;
                                }
                                var strSymbols = stringToArray(string),
                                    chrSymbols = stringToArray(chars),
                                    start = charsStartIndex(strSymbols, chrSymbols),
                                    end = charsEndIndex(strSymbols, chrSymbols) + 1;

                                return castSlice(strSymbols, start, end).join('');
                            }

                            /**
                             * Removes trailing whitespace or specified characters from `string`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to trim.
                             * @param {string} [chars=whitespace] The characters to trim.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {string} Returns the trimmed string.
                             * @example
                             *
                             * _.trimEnd('  abc  ');
                             * // => '  abc'
                             *
                             * _.trimEnd('-_-abc-_-', '_-');
                             * // => '-_-abc'
                             */
                            function trimEnd(string, chars, guard) {
                                string = toString(string);
                                if (string && (guard || chars === undefined)) {
                                    return string.slice(0, trimmedEndIndex(string) + 1);
                                }
                                if (!string || !(chars = baseToString(chars))) {
                                    return string;
                                }
                                var strSymbols = stringToArray(string),
                                    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                                return castSlice(strSymbols, 0, end).join('');
                            }

                            /**
                             * Removes leading whitespace or specified characters from `string`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to trim.
                             * @param {string} [chars=whitespace] The characters to trim.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {string} Returns the trimmed string.
                             * @example
                             *
                             * _.trimStart('  abc  ');
                             * // => 'abc  '
                             *
                             * _.trimStart('-_-abc-_-', '_-');
                             * // => 'abc-_-'
                             */
                            function trimStart(string, chars, guard) {
                                string = toString(string);
                                if (string && (guard || chars === undefined)) {
                                    return string.replace(reTrimStart, '');
                                }
                                if (!string || !(chars = baseToString(chars))) {
                                    return string;
                                }
                                var strSymbols = stringToArray(string),
                                    start = charsStartIndex(strSymbols, stringToArray(chars));

                                return castSlice(strSymbols, start).join('');
                            }

                            /**
                             * Truncates `string` if it's longer than the given maximum string length.
                             * The last characters of the truncated string are replaced with the omission
                             * string which defaults to "...".
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to truncate.
                             * @param {Object} [options={}] The options object.
                             * @param {number} [options.length=30] The maximum string length.
                             * @param {string} [options.omission='...'] The string to indicate text is omitted.
                             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                             * @returns {string} Returns the truncated string.
                             * @example
                             *
                             * _.truncate('hi-diddly-ho there, neighborino');
                             * // => 'hi-diddly-ho there, neighbo...'
                             *
                             * _.truncate('hi-diddly-ho there, neighborino', {
                             *   'length': 24,
                             *   'separator': ' '
                             * });
                             * // => 'hi-diddly-ho there,...'
                             *
                             * _.truncate('hi-diddly-ho there, neighborino', {
                             *   'length': 24,
                             *   'separator': /,? +/
                             * });
                             * // => 'hi-diddly-ho there...'
                             *
                             * _.truncate('hi-diddly-ho there, neighborino', {
                             *   'omission': ' [...]'
                             * });
                             * // => 'hi-diddly-ho there, neig [...]'
                             */
                            function truncate(string, options) {
                                var length = DEFAULT_TRUNC_LENGTH,
                                    omission = DEFAULT_TRUNC_OMISSION;

                                if (isObject(options)) {
                                    var separator = 'separator' in options ? options.separator : separator;
                                    length = 'length' in options ? toInteger(options.length) : length;
                                    omission = 'omission' in options ? baseToString(options.omission) : omission;
                                }
                                string = toString(string);

                                var strLength = string.length;
                                if (hasUnicode(string)) {
                                    var strSymbols = stringToArray(string);
                                    strLength = strSymbols.length;
                                }
                                if (length >= strLength) {
                                    return string;
                                }
                                var end = length - stringSize(omission);
                                if (end < 1) {
                                    return omission;
                                }
                                var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

                                if (separator === undefined) {
                                    return result + omission;
                                }
                                if (strSymbols) {
                                    end += result.length - end;
                                }
                                if (isRegExp(separator)) {
                                    if (string.slice(end).search(separator)) {
                                        var match,
                                            substring = result;

                                        if (!separator.global) {
                                            separator = RegExp(
                                                separator.source,
                                                toString(reFlags.exec(separator)) + 'g',
                                            );
                                        }
                                        separator.lastIndex = 0;
                                        while ((match = separator.exec(substring))) {
                                            var newEnd = match.index;
                                        }
                                        result = result.slice(0, newEnd === undefined ? end : newEnd);
                                    }
                                } else if (string.indexOf(baseToString(separator), end) != end) {
                                    var index = result.lastIndexOf(separator);
                                    if (index > -1) {
                                        result = result.slice(0, index);
                                    }
                                }
                                return result + omission;
                            }

                            /**
                             * The inverse of `_.escape`; this method converts the HTML entities
                             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                             * their corresponding characters.
                             *
                             * **Note:** No other HTML entities are unescaped. To unescape additional
                             * HTML entities use a third-party library like [_he_](https://mths.be/he).
                             *
                             * @static
                             * @memberOf _
                             * @since 0.6.0
                             * @category String
                             * @param {string} [string=''] The string to unescape.
                             * @returns {string} Returns the unescaped string.
                             * @example
                             *
                             * _.unescape('fred, barney, &amp; pebbles');
                             * // => 'fred, barney, & pebbles'
                             */
                            function unescape(string) {
                                string = toString(string);
                                return string && reHasEscapedHtml.test(string)
                                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                                    : string;
                            }

                            /**
                             * Converts `string`, as space separated words, to upper case.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the upper cased string.
                             * @example
                             *
                             * _.upperCase('--foo-bar');
                             * // => 'FOO BAR'
                             *
                             * _.upperCase('fooBar');
                             * // => 'FOO BAR'
                             *
                             * _.upperCase('__foo_bar__');
                             * // => 'FOO BAR'
                             */
                            var upperCase = createCompounder(function (result, word, index) {
                                return result + (index ? ' ' : '') + word.toUpperCase();
                            });

                            /**
                             * Converts the first character of `string` to upper case.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category String
                             * @param {string} [string=''] The string to convert.
                             * @returns {string} Returns the converted string.
                             * @example
                             *
                             * _.upperFirst('fred');
                             * // => 'Fred'
                             *
                             * _.upperFirst('FRED');
                             * // => 'FRED'
                             */
                            var upperFirst = createCaseFirst('toUpperCase');

                            /**
                             * Splits `string` into an array of its words.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to inspect.
                             * @param {RegExp|string} [pattern] The pattern to match words.
                             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                             * @returns {Array} Returns the words of `string`.
                             * @example
                             *
                             * _.words('fred, barney, & pebbles');
                             * // => ['fred', 'barney', 'pebbles']
                             *
                             * _.words('fred, barney, & pebbles', /[^, ]+/g);
                             * // => ['fred', 'barney', '&', 'pebbles']
                             */
                            function words(string, pattern, guard) {
                                string = toString(string);
                                pattern = guard ? undefined : pattern;

                                if (pattern === undefined) {
                                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                                }
                                return string.match(pattern) || [];
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Attempts to invoke `func`, returning either the result or the caught error
                             * object. Any additional arguments are provided to `func` when it's invoked.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Util
                             * @param {Function} func The function to attempt.
                             * @param {...*} [args] The arguments to invoke `func` with.
                             * @returns {*} Returns the `func` result or error object.
                             * @example
                             *
                             * // Avoid throwing errors for invalid selectors.
                             * var elements = _.attempt(function(selector) {
                             *   return document.querySelectorAll(selector);
                             * }, '>_>');
                             *
                             * if (_.isError(elements)) {
                             *   elements = [];
                             * }
                             */
                            var attempt = baseRest(function (func, args) {
                                try {
                                    return apply(func, undefined, args);
                                } catch (e) {
                                    return isError(e) ? e : new Error(e);
                                }
                            });

                            /**
                             * Binds methods of an object to the object itself, overwriting the existing
                             * method.
                             *
                             * **Note:** This method doesn't set the "length" property of bound functions.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {Object} object The object to bind and assign the bound methods to.
                             * @param {...(string|string[])} methodNames The object method names to bind.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * var view = {
                             *   'label': 'docs',
                             *   'click': function() {
                             *     console.log('clicked ' + this.label);
                             *   }
                             * };
                             *
                             * _.bindAll(view, ['click']);
                             * jQuery(element).on('click', view.click);
                             * // => Logs 'clicked docs' when clicked.
                             */
                            var bindAll = flatRest(function (object, methodNames) {
                                arrayEach(methodNames, function (key) {
                                    key = toKey(key);
                                    baseAssignValue(object, key, bind(object[key], object));
                                });
                                return object;
                            });

                            /**
                             * Creates a function that iterates over `pairs` and invokes the corresponding
                             * function of the first predicate to return truthy. The predicate-function
                             * pairs are invoked with the `this` binding and arguments of the created
                             * function.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {Array} pairs The predicate-function pairs.
                             * @returns {Function} Returns the new composite function.
                             * @example
                             *
                             * var func = _.cond([
                             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                             *   [_.stubTrue,                      _.constant('no match')]
                             * ]);
                             *
                             * func({ 'a': 1, 'b': 2 });
                             * // => 'matches A'
                             *
                             * func({ 'a': 0, 'b': 1 });
                             * // => 'matches B'
                             *
                             * func({ 'a': '1', 'b': '2' });
                             * // => 'no match'
                             */
                            function cond(pairs) {
                                var length = pairs == null ? 0 : pairs.length,
                                    toIteratee = getIteratee();

                                pairs = !length
                                    ? []
                                    : arrayMap(pairs, function (pair) {
                                          if (typeof pair[1] != 'function') {
                                              throw new TypeError(FUNC_ERROR_TEXT);
                                          }
                                          return [toIteratee(pair[0]), pair[1]];
                                      });

                                return baseRest(function (args) {
                                    var index = -1;
                                    while (++index < length) {
                                        var pair = pairs[index];
                                        if (apply(pair[0], this, args)) {
                                            return apply(pair[1], this, args);
                                        }
                                    }
                                });
                            }

                            /**
                             * Creates a function that invokes the predicate properties of `source` with
                             * the corresponding property values of a given object, returning `true` if
                             * all predicates return truthy, else `false`.
                             *
                             * **Note:** The created function is equivalent to `_.conformsTo` with
                             * `source` partially applied.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {Object} source The object of property predicates to conform to.
                             * @returns {Function} Returns the new spec function.
                             * @example
                             *
                             * var objects = [
                             *   { 'a': 2, 'b': 1 },
                             *   { 'a': 1, 'b': 2 }
                             * ];
                             *
                             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                             * // => [{ 'a': 1, 'b': 2 }]
                             */
                            function conforms(source) {
                                return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                            }

                            /**
                             * Creates a function that returns `value`.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.4.0
                             * @category Util
                             * @param {*} value The value to return from the new function.
                             * @returns {Function} Returns the new constant function.
                             * @example
                             *
                             * var objects = _.times(2, _.constant({ 'a': 1 }));
                             *
                             * console.log(objects);
                             * // => [{ 'a': 1 }, { 'a': 1 }]
                             *
                             * console.log(objects[0] === objects[1]);
                             * // => true
                             */
                            function constant(value) {
                                return function () {
                                    return value;
                                };
                            }

                            /**
                             * Checks `value` to determine whether a default value should be returned in
                             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                             * or `undefined`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.14.0
                             * @category Util
                             * @param {*} value The value to check.
                             * @param {*} defaultValue The default value.
                             * @returns {*} Returns the resolved value.
                             * @example
                             *
                             * _.defaultTo(1, 10);
                             * // => 1
                             *
                             * _.defaultTo(undefined, 10);
                             * // => 10
                             */
                            function defaultTo(value, defaultValue) {
                                return value == null || value !== value ? defaultValue : value;
                            }

                            /**
                             * Creates a function that returns the result of invoking the given functions
                             * with the `this` binding of the created function, where each successive
                             * invocation is supplied the return value of the previous.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Util
                             * @param {...(Function|Function[])} [funcs] The functions to invoke.
                             * @returns {Function} Returns the new composite function.
                             * @see _.flowRight
                             * @example
                             *
                             * function square(n) {
                             *   return n * n;
                             * }
                             *
                             * var addSquare = _.flow([_.add, square]);
                             * addSquare(1, 2);
                             * // => 9
                             */
                            var flow = createFlow();

                            /**
                             * This method is like `_.flow` except that it creates a function that
                             * invokes the given functions from right to left.
                             *
                             * @static
                             * @since 3.0.0
                             * @memberOf _
                             * @category Util
                             * @param {...(Function|Function[])} [funcs] The functions to invoke.
                             * @returns {Function} Returns the new composite function.
                             * @see _.flow
                             * @example
                             *
                             * function square(n) {
                             *   return n * n;
                             * }
                             *
                             * var addSquare = _.flowRight([square, _.add]);
                             * addSquare(1, 2);
                             * // => 9
                             */
                            var flowRight = createFlow(true);

                            /**
                             * This method returns the first argument it receives.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {*} value Any value.
                             * @returns {*} Returns `value`.
                             * @example
                             *
                             * var object = { 'a': 1 };
                             *
                             * console.log(_.identity(object) === object);
                             * // => true
                             */
                            function identity(value) {
                                return value;
                            }

                            /**
                             * Creates a function that invokes `func` with the arguments of the created
                             * function. If `func` is a property name, the created function returns the
                             * property value for a given element. If `func` is an array or object, the
                             * created function returns `true` for elements that contain the equivalent
                             * source properties, otherwise it returns `false`.
                             *
                             * @static
                             * @since 4.0.0
                             * @memberOf _
                             * @category Util
                             * @param {*} [func=_.identity] The value to convert to a callback.
                             * @returns {Function} Returns the callback.
                             * @example
                             *
                             * var users = [
                             *   { 'user': 'barney', 'age': 36, 'active': true },
                             *   { 'user': 'fred',   'age': 40, 'active': false }
                             * ];
                             *
                             * // The `_.matches` iteratee shorthand.
                             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                             *
                             * // The `_.matchesProperty` iteratee shorthand.
                             * _.filter(users, _.iteratee(['user', 'fred']));
                             * // => [{ 'user': 'fred', 'age': 40 }]
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.map(users, _.iteratee('user'));
                             * // => ['barney', 'fred']
                             *
                             * // Create custom iteratee shorthands.
                             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                             *     return func.test(string);
                             *   };
                             * });
                             *
                             * _.filter(['abc', 'def'], /ef/);
                             * // => ['def']
                             */
                            function iteratee(func) {
                                return baseIteratee(
                                    typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG),
                                );
                            }

                            /**
                             * Creates a function that performs a partial deep comparison between a given
                             * object and `source`, returning `true` if the given object has equivalent
                             * property values, else `false`.
                             *
                             * **Note:** The created function is equivalent to `_.isMatch` with `source`
                             * partially applied.
                             *
                             * Partial comparisons will match empty array and empty object `source`
                             * values against any array or object value, respectively. See `_.isEqual`
                             * for a list of supported value comparisons.
                             *
                             * **Note:** Multiple values can be checked by combining several matchers
                             * using `_.overSome`
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Util
                             * @param {Object} source The object of property values to match.
                             * @returns {Function} Returns the new spec function.
                             * @example
                             *
                             * var objects = [
                             *   { 'a': 1, 'b': 2, 'c': 3 },
                             *   { 'a': 4, 'b': 5, 'c': 6 }
                             * ];
                             *
                             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                             *
                             * // Checking for several possible values
                             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
                             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                             */
                            function matches(source) {
                                return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                            }

                            /**
                             * Creates a function that performs a partial deep comparison between the
                             * value at `path` of a given object to `srcValue`, returning `true` if the
                             * object value is equivalent, else `false`.
                             *
                             * **Note:** Partial comparisons will match empty array and empty object
                             * `srcValue` values against any array or object value, respectively. See
                             * `_.isEqual` for a list of supported value comparisons.
                             *
                             * **Note:** Multiple values can be checked by combining several matchers
                             * using `_.overSome`
                             *
                             * @static
                             * @memberOf _
                             * @since 3.2.0
                             * @category Util
                             * @param {Array|string} path The path of the property to get.
                             * @param {*} srcValue The value to match.
                             * @returns {Function} Returns the new spec function.
                             * @example
                             *
                             * var objects = [
                             *   { 'a': 1, 'b': 2, 'c': 3 },
                             *   { 'a': 4, 'b': 5, 'c': 6 }
                             * ];
                             *
                             * _.find(objects, _.matchesProperty('a', 4));
                             * // => { 'a': 4, 'b': 5, 'c': 6 }
                             *
                             * // Checking for several possible values
                             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
                             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                             */
                            function matchesProperty(path, srcValue) {
                                return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                            }

                            /**
                             * Creates a function that invokes the method at `path` of a given object.
                             * Any additional arguments are provided to the invoked method.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.7.0
                             * @category Util
                             * @param {Array|string} path The path of the method to invoke.
                             * @param {...*} [args] The arguments to invoke the method with.
                             * @returns {Function} Returns the new invoker function.
                             * @example
                             *
                             * var objects = [
                             *   { 'a': { 'b': _.constant(2) } },
                             *   { 'a': { 'b': _.constant(1) } }
                             * ];
                             *
                             * _.map(objects, _.method('a.b'));
                             * // => [2, 1]
                             *
                             * _.map(objects, _.method(['a', 'b']));
                             * // => [2, 1]
                             */
                            var method = baseRest(function (path, args) {
                                return function (object) {
                                    return baseInvoke(object, path, args);
                                };
                            });

                            /**
                             * The opposite of `_.method`; this method creates a function that invokes
                             * the method at a given path of `object`. Any additional arguments are
                             * provided to the invoked method.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.7.0
                             * @category Util
                             * @param {Object} object The object to query.
                             * @param {...*} [args] The arguments to invoke the method with.
                             * @returns {Function} Returns the new invoker function.
                             * @example
                             *
                             * var array = _.times(3, _.constant),
                             *     object = { 'a': array, 'b': array, 'c': array };
                             *
                             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                             * // => [2, 0]
                             *
                             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                             * // => [2, 0]
                             */
                            var methodOf = baseRest(function (object, args) {
                                return function (path) {
                                    return baseInvoke(object, path, args);
                                };
                            });

                            /**
                             * Adds all own enumerable string keyed function properties of a source
                             * object to the destination object. If `object` is a function, then methods
                             * are added to its prototype as well.
                             *
                             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                             * avoid conflicts caused by modifying the original.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {Function|Object} [object=lodash] The destination object.
                             * @param {Object} source The object of functions to add.
                             * @param {Object} [options={}] The options object.
                             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                             * @returns {Function|Object} Returns `object`.
                             * @example
                             *
                             * function vowels(string) {
                             *   return _.filter(string, function(v) {
                             *     return /[aeiou]/i.test(v);
                             *   });
                             * }
                             *
                             * _.mixin({ 'vowels': vowels });
                             * _.vowels('fred');
                             * // => ['e']
                             *
                             * _('fred').vowels().value();
                             * // => ['e']
                             *
                             * _.mixin({ 'vowels': vowels }, { 'chain': false });
                             * _('fred').vowels();
                             * // => ['e']
                             */
                            function mixin(object, source, options) {
                                var props = keys(source),
                                    methodNames = baseFunctions(source, props);

                                if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                                    options = source;
                                    source = object;
                                    object = this;
                                    methodNames = baseFunctions(source, keys(source));
                                }
                                var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                                    isFunc = isFunction(object);

                                arrayEach(methodNames, function (methodName) {
                                    var func = source[methodName];
                                    object[methodName] = func;
                                    if (isFunc) {
                                        object.prototype[methodName] = function () {
                                            var chainAll = this.__chain__;
                                            if (chain || chainAll) {
                                                var result = object(this.__wrapped__),
                                                    actions = (result.__actions__ = copyArray(this.__actions__));

                                                actions.push({ func: func, args: arguments, thisArg: object });
                                                result.__chain__ = chainAll;
                                                return result;
                                            }
                                            return func.apply(object, arrayPush([this.value()], arguments));
                                        };
                                    }
                                });

                                return object;
                            }

                            /**
                             * Reverts the `_` variable to its previous value and returns a reference to
                             * the `lodash` function.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @returns {Function} Returns the `lodash` function.
                             * @example
                             *
                             * var lodash = _.noConflict();
                             */
                            function noConflict() {
                                if (root._ === this) {
                                    root._ = oldDash;
                                }
                                return this;
                            }

                            /**
                             * This method returns `undefined`.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.3.0
                             * @category Util
                             * @example
                             *
                             * _.times(2, _.noop);
                             * // => [undefined, undefined]
                             */
                            function noop() {
                                // No operation performed.
                            }

                            /**
                             * Creates a function that gets the argument at index `n`. If `n` is negative,
                             * the nth argument from the end is returned.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {number} [n=0] The index of the argument to return.
                             * @returns {Function} Returns the new pass-thru function.
                             * @example
                             *
                             * var func = _.nthArg(1);
                             * func('a', 'b', 'c', 'd');
                             * // => 'b'
                             *
                             * var func = _.nthArg(-2);
                             * func('a', 'b', 'c', 'd');
                             * // => 'c'
                             */
                            function nthArg(n) {
                                n = toInteger(n);
                                return baseRest(function (args) {
                                    return baseNth(args, n);
                                });
                            }

                            /**
                             * Creates a function that invokes `iteratees` with the arguments it receives
                             * and returns their results.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {...(Function|Function[])} [iteratees=[_.identity]]
                             *  The iteratees to invoke.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var func = _.over([Math.max, Math.min]);
                             *
                             * func(1, 2, 3, 4);
                             * // => [4, 1]
                             */
                            var over = createOver(arrayMap);

                            /**
                             * Creates a function that checks if **all** of the `predicates` return
                             * truthy when invoked with the arguments it receives.
                             *
                             * Following shorthands are possible for providing predicates.
                             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {...(Function|Function[])} [predicates=[_.identity]]
                             *  The predicates to check.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var func = _.overEvery([Boolean, isFinite]);
                             *
                             * func('1');
                             * // => true
                             *
                             * func(null);
                             * // => false
                             *
                             * func(NaN);
                             * // => false
                             */
                            var overEvery = createOver(arrayEvery);

                            /**
                             * Creates a function that checks if **any** of the `predicates` return
                             * truthy when invoked with the arguments it receives.
                             *
                             * Following shorthands are possible for providing predicates.
                             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {...(Function|Function[])} [predicates=[_.identity]]
                             *  The predicates to check.
                             * @returns {Function} Returns the new function.
                             * @example
                             *
                             * var func = _.overSome([Boolean, isFinite]);
                             *
                             * func('1');
                             * // => true
                             *
                             * func(null);
                             * // => true
                             *
                             * func(NaN);
                             * // => false
                             *
                             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
                             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
                             */
                            var overSome = createOver(arraySome);

                            /**
                             * Creates a function that returns the value at `path` of a given object.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.4.0
                             * @category Util
                             * @param {Array|string} path The path of the property to get.
                             * @returns {Function} Returns the new accessor function.
                             * @example
                             *
                             * var objects = [
                             *   { 'a': { 'b': 2 } },
                             *   { 'a': { 'b': 1 } }
                             * ];
                             *
                             * _.map(objects, _.property('a.b'));
                             * // => [2, 1]
                             *
                             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                             * // => [1, 2]
                             */
                            function property(path) {
                                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                            }

                            /**
                             * The opposite of `_.property`; this method creates a function that returns
                             * the value at a given path of `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Util
                             * @param {Object} object The object to query.
                             * @returns {Function} Returns the new accessor function.
                             * @example
                             *
                             * var array = [0, 1, 2],
                             *     object = { 'a': array, 'b': array, 'c': array };
                             *
                             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                             * // => [2, 0]
                             *
                             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                             * // => [2, 0]
                             */
                            function propertyOf(object) {
                                return function (path) {
                                    return object == null ? undefined : baseGet(object, path);
                                };
                            }

                            /**
                             * Creates an array of numbers (positive and/or negative) progressing from
                             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                             * `start` is specified without an `end` or `step`. If `end` is not specified,
                             * it's set to `start` with `start` then set to `0`.
                             *
                             * **Note:** JavaScript follows the IEEE-754 standard for resolving
                             * floating-point values which can produce unexpected results.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {number} [start=0] The start of the range.
                             * @param {number} end The end of the range.
                             * @param {number} [step=1] The value to increment or decrement by.
                             * @returns {Array} Returns the range of numbers.
                             * @see _.inRange, _.rangeRight
                             * @example
                             *
                             * _.range(4);
                             * // => [0, 1, 2, 3]
                             *
                             * _.range(-4);
                             * // => [0, -1, -2, -3]
                             *
                             * _.range(1, 5);
                             * // => [1, 2, 3, 4]
                             *
                             * _.range(0, 20, 5);
                             * // => [0, 5, 10, 15]
                             *
                             * _.range(0, -4, -1);
                             * // => [0, -1, -2, -3]
                             *
                             * _.range(1, 4, 0);
                             * // => [1, 1, 1]
                             *
                             * _.range(0);
                             * // => []
                             */
                            var range = createRange();

                            /**
                             * This method is like `_.range` except that it populates values in
                             * descending order.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {number} [start=0] The start of the range.
                             * @param {number} end The end of the range.
                             * @param {number} [step=1] The value to increment or decrement by.
                             * @returns {Array} Returns the range of numbers.
                             * @see _.inRange, _.range
                             * @example
                             *
                             * _.rangeRight(4);
                             * // => [3, 2, 1, 0]
                             *
                             * _.rangeRight(-4);
                             * // => [-3, -2, -1, 0]
                             *
                             * _.rangeRight(1, 5);
                             * // => [4, 3, 2, 1]
                             *
                             * _.rangeRight(0, 20, 5);
                             * // => [15, 10, 5, 0]
                             *
                             * _.rangeRight(0, -4, -1);
                             * // => [-3, -2, -1, 0]
                             *
                             * _.rangeRight(1, 4, 0);
                             * // => [1, 1, 1]
                             *
                             * _.rangeRight(0);
                             * // => []
                             */
                            var rangeRight = createRange(true);

                            /**
                             * This method returns a new empty array.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {Array} Returns the new empty array.
                             * @example
                             *
                             * var arrays = _.times(2, _.stubArray);
                             *
                             * console.log(arrays);
                             * // => [[], []]
                             *
                             * console.log(arrays[0] === arrays[1]);
                             * // => false
                             */
                            function stubArray() {
                                return [];
                            }

                            /**
                             * This method returns `false`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {boolean} Returns `false`.
                             * @example
                             *
                             * _.times(2, _.stubFalse);
                             * // => [false, false]
                             */
                            function stubFalse() {
                                return false;
                            }

                            /**
                             * This method returns a new empty object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {Object} Returns the new empty object.
                             * @example
                             *
                             * var objects = _.times(2, _.stubObject);
                             *
                             * console.log(objects);
                             * // => [{}, {}]
                             *
                             * console.log(objects[0] === objects[1]);
                             * // => false
                             */
                            function stubObject() {
                                return {};
                            }

                            /**
                             * This method returns an empty string.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {string} Returns the empty string.
                             * @example
                             *
                             * _.times(2, _.stubString);
                             * // => ['', '']
                             */
                            function stubString() {
                                return '';
                            }

                            /**
                             * This method returns `true`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {boolean} Returns `true`.
                             * @example
                             *
                             * _.times(2, _.stubTrue);
                             * // => [true, true]
                             */
                            function stubTrue() {
                                return true;
                            }

                            /**
                             * Invokes the iteratee `n` times, returning an array of the results of
                             * each invocation. The iteratee is invoked with one argument; (index).
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {number} n The number of times to invoke `iteratee`.
                             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                             * @returns {Array} Returns the array of results.
                             * @example
                             *
                             * _.times(3, String);
                             * // => ['0', '1', '2']
                             *
                             *  _.times(4, _.constant(0));
                             * // => [0, 0, 0, 0]
                             */
                            function times(n, iteratee) {
                                n = toInteger(n);
                                if (n < 1 || n > MAX_SAFE_INTEGER) {
                                    return [];
                                }
                                var index = MAX_ARRAY_LENGTH,
                                    length = nativeMin(n, MAX_ARRAY_LENGTH);

                                iteratee = getIteratee(iteratee);
                                n -= MAX_ARRAY_LENGTH;

                                var result = baseTimes(length, iteratee);
                                while (++index < n) {
                                    iteratee(index);
                                }
                                return result;
                            }

                            /**
                             * Converts `value` to a property path array.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Util
                             * @param {*} value The value to convert.
                             * @returns {Array} Returns the new property path array.
                             * @example
                             *
                             * _.toPath('a.b.c');
                             * // => ['a', 'b', 'c']
                             *
                             * _.toPath('a[0].b.c');
                             * // => ['a', '0', 'b', 'c']
                             */
                            function toPath(value) {
                                if (isArray(value)) {
                                    return arrayMap(value, toKey);
                                }
                                return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                            }

                            /**
                             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {string} [prefix=''] The value to prefix the ID with.
                             * @returns {string} Returns the unique ID.
                             * @example
                             *
                             * _.uniqueId('contact_');
                             * // => 'contact_104'
                             *
                             * _.uniqueId();
                             * // => '105'
                             */
                            function uniqueId(prefix) {
                                var id = ++idCounter;
                                return toString(prefix) + id;
                            }

                            /*------------------------------------------------------------------------*/

                            /**
                             * Adds two numbers.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.4.0
                             * @category Math
                             * @param {number} augend The first number in an addition.
                             * @param {number} addend The second number in an addition.
                             * @returns {number} Returns the total.
                             * @example
                             *
                             * _.add(6, 4);
                             * // => 10
                             */
                            var add = createMathOperation(function (augend, addend) {
                                return augend + addend;
                            }, 0);

                            /**
                             * Computes `number` rounded up to `precision`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.10.0
                             * @category Math
                             * @param {number} number The number to round up.
                             * @param {number} [precision=0] The precision to round up to.
                             * @returns {number} Returns the rounded up number.
                             * @example
                             *
                             * _.ceil(4.006);
                             * // => 5
                             *
                             * _.ceil(6.004, 2);
                             * // => 6.01
                             *
                             * _.ceil(6040, -2);
                             * // => 6100
                             */
                            var ceil = createRound('ceil');

                            /**
                             * Divide two numbers.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.7.0
                             * @category Math
                             * @param {number} dividend The first number in a division.
                             * @param {number} divisor The second number in a division.
                             * @returns {number} Returns the quotient.
                             * @example
                             *
                             * _.divide(6, 4);
                             * // => 1.5
                             */
                            var divide = createMathOperation(function (dividend, divisor) {
                                return dividend / divisor;
                            }, 1);

                            /**
                             * Computes `number` rounded down to `precision`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.10.0
                             * @category Math
                             * @param {number} number The number to round down.
                             * @param {number} [precision=0] The precision to round down to.
                             * @returns {number} Returns the rounded down number.
                             * @example
                             *
                             * _.floor(4.006);
                             * // => 4
                             *
                             * _.floor(0.046, 2);
                             * // => 0.04
                             *
                             * _.floor(4060, -2);
                             * // => 4000
                             */
                            var floor = createRound('floor');

                            /**
                             * Computes the maximum value of `array`. If `array` is empty or falsey,
                             * `undefined` is returned.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @returns {*} Returns the maximum value.
                             * @example
                             *
                             * _.max([4, 2, 8, 6]);
                             * // => 8
                             *
                             * _.max([]);
                             * // => undefined
                             */
                            function max(array) {
                                return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
                            }

                            /**
                             * This method is like `_.max` except that it accepts `iteratee` which is
                             * invoked for each element in `array` to generate the criterion by which
                             * the value is ranked. The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {*} Returns the maximum value.
                             * @example
                             *
                             * var objects = [{ 'n': 1 }, { 'n': 2 }];
                             *
                             * _.maxBy(objects, function(o) { return o.n; });
                             * // => { 'n': 2 }
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.maxBy(objects, 'n');
                             * // => { 'n': 2 }
                             */
                            function maxBy(array, iteratee) {
                                return array && array.length
                                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                                    : undefined;
                            }

                            /**
                             * Computes the mean of the values in `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @returns {number} Returns the mean.
                             * @example
                             *
                             * _.mean([4, 2, 8, 6]);
                             * // => 5
                             */
                            function mean(array) {
                                return baseMean(array, identity);
                            }

                            /**
                             * This method is like `_.mean` except that it accepts `iteratee` which is
                             * invoked for each element in `array` to generate the value to be averaged.
                             * The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.7.0
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {number} Returns the mean.
                             * @example
                             *
                             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                             *
                             * _.meanBy(objects, function(o) { return o.n; });
                             * // => 5
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.meanBy(objects, 'n');
                             * // => 5
                             */
                            function meanBy(array, iteratee) {
                                return baseMean(array, getIteratee(iteratee, 2));
                            }

                            /**
                             * Computes the minimum value of `array`. If `array` is empty or falsey,
                             * `undefined` is returned.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @returns {*} Returns the minimum value.
                             * @example
                             *
                             * _.min([4, 2, 8, 6]);
                             * // => 2
                             *
                             * _.min([]);
                             * // => undefined
                             */
                            function min(array) {
                                return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
                            }

                            /**
                             * This method is like `_.min` except that it accepts `iteratee` which is
                             * invoked for each element in `array` to generate the criterion by which
                             * the value is ranked. The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {*} Returns the minimum value.
                             * @example
                             *
                             * var objects = [{ 'n': 1 }, { 'n': 2 }];
                             *
                             * _.minBy(objects, function(o) { return o.n; });
                             * // => { 'n': 1 }
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.minBy(objects, 'n');
                             * // => { 'n': 1 }
                             */
                            function minBy(array, iteratee) {
                                return array && array.length
                                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                                    : undefined;
                            }

                            /**
                             * Multiply two numbers.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.7.0
                             * @category Math
                             * @param {number} multiplier The first number in a multiplication.
                             * @param {number} multiplicand The second number in a multiplication.
                             * @returns {number} Returns the product.
                             * @example
                             *
                             * _.multiply(6, 4);
                             * // => 24
                             */
                            var multiply = createMathOperation(function (multiplier, multiplicand) {
                                return multiplier * multiplicand;
                            }, 1);

                            /**
                             * Computes `number` rounded to `precision`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.10.0
                             * @category Math
                             * @param {number} number The number to round.
                             * @param {number} [precision=0] The precision to round to.
                             * @returns {number} Returns the rounded number.
                             * @example
                             *
                             * _.round(4.006);
                             * // => 4
                             *
                             * _.round(4.006, 2);
                             * // => 4.01
                             *
                             * _.round(4060, -2);
                             * // => 4100
                             */
                            var round = createRound('round');

                            /**
                             * Subtract two numbers.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Math
                             * @param {number} minuend The first number in a subtraction.
                             * @param {number} subtrahend The second number in a subtraction.
                             * @returns {number} Returns the difference.
                             * @example
                             *
                             * _.subtract(6, 4);
                             * // => 2
                             */
                            var subtract = createMathOperation(function (minuend, subtrahend) {
                                return minuend - subtrahend;
                            }, 0);

                            /**
                             * Computes the sum of the values in `array`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.4.0
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @returns {number} Returns the sum.
                             * @example
                             *
                             * _.sum([4, 2, 8, 6]);
                             * // => 20
                             */
                            function sum(array) {
                                return array && array.length ? baseSum(array, identity) : 0;
                            }

                            /**
                             * This method is like `_.sum` except that it accepts `iteratee` which is
                             * invoked for each element in `array` to generate the value to be summed.
                             * The iteratee is invoked with one argument: (value).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Math
                             * @param {Array} array The array to iterate over.
                             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                             * @returns {number} Returns the sum.
                             * @example
                             *
                             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                             *
                             * _.sumBy(objects, function(o) { return o.n; });
                             * // => 20
                             *
                             * // The `_.property` iteratee shorthand.
                             * _.sumBy(objects, 'n');
                             * // => 20
                             */
                            function sumBy(array, iteratee) {
                                return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
                            }

                            /*------------------------------------------------------------------------*/

                            // Add methods that return wrapped values in chain sequences.
                            lodash.after = after;
                            lodash.ary = ary;
                            lodash.assign = assign;
                            lodash.assignIn = assignIn;
                            lodash.assignInWith = assignInWith;
                            lodash.assignWith = assignWith;
                            lodash.at = at;
                            lodash.before = before;
                            lodash.bind = bind;
                            lodash.bindAll = bindAll;
                            lodash.bindKey = bindKey;
                            lodash.castArray = castArray;
                            lodash.chain = chain;
                            lodash.chunk = chunk;
                            lodash.compact = compact;
                            lodash.concat = concat;
                            lodash.cond = cond;
                            lodash.conforms = conforms;
                            lodash.constant = constant;
                            lodash.countBy = countBy;
                            lodash.create = create;
                            lodash.curry = curry;
                            lodash.curryRight = curryRight;
                            lodash.debounce = debounce;
                            lodash.defaults = defaults;
                            lodash.defaultsDeep = defaultsDeep;
                            lodash.defer = defer;
                            lodash.delay = delay;
                            lodash.difference = difference;
                            lodash.differenceBy = differenceBy;
                            lodash.differenceWith = differenceWith;
                            lodash.drop = drop;
                            lodash.dropRight = dropRight;
                            lodash.dropRightWhile = dropRightWhile;
                            lodash.dropWhile = dropWhile;
                            lodash.fill = fill;
                            lodash.filter = filter;
                            lodash.flatMap = flatMap;
                            lodash.flatMapDeep = flatMapDeep;
                            lodash.flatMapDepth = flatMapDepth;
                            lodash.flatten = flatten;
                            lodash.flattenDeep = flattenDeep;
                            lodash.flattenDepth = flattenDepth;
                            lodash.flip = flip;
                            lodash.flow = flow;
                            lodash.flowRight = flowRight;
                            lodash.fromPairs = fromPairs;
                            lodash.functions = functions;
                            lodash.functionsIn = functionsIn;
                            lodash.groupBy = groupBy;
                            lodash.initial = initial;
                            lodash.intersection = intersection;
                            lodash.intersectionBy = intersectionBy;
                            lodash.intersectionWith = intersectionWith;
                            lodash.invert = invert;
                            lodash.invertBy = invertBy;
                            lodash.invokeMap = invokeMap;
                            lodash.iteratee = iteratee;
                            lodash.keyBy = keyBy;
                            lodash.keys = keys;
                            lodash.keysIn = keysIn;
                            lodash.map = map;
                            lodash.mapKeys = mapKeys;
                            lodash.mapValues = mapValues;
                            lodash.matches = matches;
                            lodash.matchesProperty = matchesProperty;
                            lodash.memoize = memoize;
                            lodash.merge = merge;
                            lodash.mergeWith = mergeWith;
                            lodash.method = method;
                            lodash.methodOf = methodOf;
                            lodash.mixin = mixin;
                            lodash.negate = negate;
                            lodash.nthArg = nthArg;
                            lodash.omit = omit;
                            lodash.omitBy = omitBy;
                            lodash.once = once;
                            lodash.orderBy = orderBy;
                            lodash.over = over;
                            lodash.overArgs = overArgs;
                            lodash.overEvery = overEvery;
                            lodash.overSome = overSome;
                            lodash.partial = partial;
                            lodash.partialRight = partialRight;
                            lodash.partition = partition;
                            lodash.pick = pick;
                            lodash.pickBy = pickBy;
                            lodash.property = property;
                            lodash.propertyOf = propertyOf;
                            lodash.pull = pull;
                            lodash.pullAll = pullAll;
                            lodash.pullAllBy = pullAllBy;
                            lodash.pullAllWith = pullAllWith;
                            lodash.pullAt = pullAt;
                            lodash.range = range;
                            lodash.rangeRight = rangeRight;
                            lodash.rearg = rearg;
                            lodash.reject = reject;
                            lodash.remove = remove;
                            lodash.rest = rest;
                            lodash.reverse = reverse;
                            lodash.sampleSize = sampleSize;
                            lodash.set = set;
                            lodash.setWith = setWith;
                            lodash.shuffle = shuffle;
                            lodash.slice = slice;
                            lodash.sortBy = sortBy;
                            lodash.sortedUniq = sortedUniq;
                            lodash.sortedUniqBy = sortedUniqBy;
                            lodash.split = split;
                            lodash.spread = spread;
                            lodash.tail = tail;
                            lodash.take = take;
                            lodash.takeRight = takeRight;
                            lodash.takeRightWhile = takeRightWhile;
                            lodash.takeWhile = takeWhile;
                            lodash.tap = tap;
                            lodash.throttle = throttle;
                            lodash.thru = thru;
                            lodash.toArray = toArray;
                            lodash.toPairs = toPairs;
                            lodash.toPairsIn = toPairsIn;
                            lodash.toPath = toPath;
                            lodash.toPlainObject = toPlainObject;
                            lodash.transform = transform;
                            lodash.unary = unary;
                            lodash.union = union;
                            lodash.unionBy = unionBy;
                            lodash.unionWith = unionWith;
                            lodash.uniq = uniq;
                            lodash.uniqBy = uniqBy;
                            lodash.uniqWith = uniqWith;
                            lodash.unset = unset;
                            lodash.unzip = unzip;
                            lodash.unzipWith = unzipWith;
                            lodash.update = update;
                            lodash.updateWith = updateWith;
                            lodash.values = values;
                            lodash.valuesIn = valuesIn;
                            lodash.without = without;
                            lodash.words = words;
                            lodash.wrap = wrap;
                            lodash.xor = xor;
                            lodash.xorBy = xorBy;
                            lodash.xorWith = xorWith;
                            lodash.zip = zip;
                            lodash.zipObject = zipObject;
                            lodash.zipObjectDeep = zipObjectDeep;
                            lodash.zipWith = zipWith;

                            // Add aliases.
                            lodash.entries = toPairs;
                            lodash.entriesIn = toPairsIn;
                            lodash.extend = assignIn;
                            lodash.extendWith = assignInWith;

                            // Add methods to `lodash.prototype`.
                            mixin(lodash, lodash);

                            /*------------------------------------------------------------------------*/

                            // Add methods that return unwrapped values in chain sequences.
                            lodash.add = add;
                            lodash.attempt = attempt;
                            lodash.camelCase = camelCase;
                            lodash.capitalize = capitalize;
                            lodash.ceil = ceil;
                            lodash.clamp = clamp;
                            lodash.clone = clone;
                            lodash.cloneDeep = cloneDeep;
                            lodash.cloneDeepWith = cloneDeepWith;
                            lodash.cloneWith = cloneWith;
                            lodash.conformsTo = conformsTo;
                            lodash.deburr = deburr;
                            lodash.defaultTo = defaultTo;
                            lodash.divide = divide;
                            lodash.endsWith = endsWith;
                            lodash.eq = eq;
                            lodash.escape = escape;
                            lodash.escapeRegExp = escapeRegExp;
                            lodash.every = every;
                            lodash.find = find;
                            lodash.findIndex = findIndex;
                            lodash.findKey = findKey;
                            lodash.findLast = findLast;
                            lodash.findLastIndex = findLastIndex;
                            lodash.findLastKey = findLastKey;
                            lodash.floor = floor;
                            lodash.forEach = forEach;
                            lodash.forEachRight = forEachRight;
                            lodash.forIn = forIn;
                            lodash.forInRight = forInRight;
                            lodash.forOwn = forOwn;
                            lodash.forOwnRight = forOwnRight;
                            lodash.get = get;
                            lodash.gt = gt;
                            lodash.gte = gte;
                            lodash.has = has;
                            lodash.hasIn = hasIn;
                            lodash.head = head;
                            lodash.identity = identity;
                            lodash.includes = includes;
                            lodash.indexOf = indexOf;
                            lodash.inRange = inRange;
                            lodash.invoke = invoke;
                            lodash.isArguments = isArguments;
                            lodash.isArray = isArray;
                            lodash.isArrayBuffer = isArrayBuffer;
                            lodash.isArrayLike = isArrayLike;
                            lodash.isArrayLikeObject = isArrayLikeObject;
                            lodash.isBoolean = isBoolean;
                            lodash.isBuffer = isBuffer;
                            lodash.isDate = isDate;
                            lodash.isElement = isElement;
                            lodash.isEmpty = isEmpty;
                            lodash.isEqual = isEqual;
                            lodash.isEqualWith = isEqualWith;
                            lodash.isError = isError;
                            lodash.isFinite = isFinite;
                            lodash.isFunction = isFunction;
                            lodash.isInteger = isInteger;
                            lodash.isLength = isLength;
                            lodash.isMap = isMap;
                            lodash.isMatch = isMatch;
                            lodash.isMatchWith = isMatchWith;
                            lodash.isNaN = isNaN;
                            lodash.isNative = isNative;
                            lodash.isNil = isNil;
                            lodash.isNull = isNull;
                            lodash.isNumber = isNumber;
                            lodash.isObject = isObject;
                            lodash.isObjectLike = isObjectLike;
                            lodash.isPlainObject = isPlainObject;
                            lodash.isRegExp = isRegExp;
                            lodash.isSafeInteger = isSafeInteger;
                            lodash.isSet = isSet;
                            lodash.isString = isString;
                            lodash.isSymbol = isSymbol;
                            lodash.isTypedArray = isTypedArray;
                            lodash.isUndefined = isUndefined;
                            lodash.isWeakMap = isWeakMap;
                            lodash.isWeakSet = isWeakSet;
                            lodash.join = join;
                            lodash.kebabCase = kebabCase;
                            lodash.last = last;
                            lodash.lastIndexOf = lastIndexOf;
                            lodash.lowerCase = lowerCase;
                            lodash.lowerFirst = lowerFirst;
                            lodash.lt = lt;
                            lodash.lte = lte;
                            lodash.max = max;
                            lodash.maxBy = maxBy;
                            lodash.mean = mean;
                            lodash.meanBy = meanBy;
                            lodash.min = min;
                            lodash.minBy = minBy;
                            lodash.stubArray = stubArray;
                            lodash.stubFalse = stubFalse;
                            lodash.stubObject = stubObject;
                            lodash.stubString = stubString;
                            lodash.stubTrue = stubTrue;
                            lodash.multiply = multiply;
                            lodash.nth = nth;
                            lodash.noConflict = noConflict;
                            lodash.noop = noop;
                            lodash.now = now;
                            lodash.pad = pad;
                            lodash.padEnd = padEnd;
                            lodash.padStart = padStart;
                            lodash.parseInt = parseInt;
                            lodash.random = random;
                            lodash.reduce = reduce;
                            lodash.reduceRight = reduceRight;
                            lodash.repeat = repeat;
                            lodash.replace = replace;
                            lodash.result = result;
                            lodash.round = round;
                            lodash.runInContext = runInContext;
                            lodash.sample = sample;
                            lodash.size = size;
                            lodash.snakeCase = snakeCase;
                            lodash.some = some;
                            lodash.sortedIndex = sortedIndex;
                            lodash.sortedIndexBy = sortedIndexBy;
                            lodash.sortedIndexOf = sortedIndexOf;
                            lodash.sortedLastIndex = sortedLastIndex;
                            lodash.sortedLastIndexBy = sortedLastIndexBy;
                            lodash.sortedLastIndexOf = sortedLastIndexOf;
                            lodash.startCase = startCase;
                            lodash.startsWith = startsWith;
                            lodash.subtract = subtract;
                            lodash.sum = sum;
                            lodash.sumBy = sumBy;
                            lodash.template = template;
                            lodash.times = times;
                            lodash.toFinite = toFinite;
                            lodash.toInteger = toInteger;
                            lodash.toLength = toLength;
                            lodash.toLower = toLower;
                            lodash.toNumber = toNumber;
                            lodash.toSafeInteger = toSafeInteger;
                            lodash.toString = toString;
                            lodash.toUpper = toUpper;
                            lodash.trim = trim;
                            lodash.trimEnd = trimEnd;
                            lodash.trimStart = trimStart;
                            lodash.truncate = truncate;
                            lodash.unescape = unescape;
                            lodash.uniqueId = uniqueId;
                            lodash.upperCase = upperCase;
                            lodash.upperFirst = upperFirst;

                            // Add aliases.
                            lodash.each = forEach;
                            lodash.eachRight = forEachRight;
                            lodash.first = head;

                            mixin(
                                lodash,
                                (function () {
                                    var source = {};
                                    baseForOwn(lodash, function (func, methodName) {
                                        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                                            source[methodName] = func;
                                        }
                                    });
                                    return source;
                                })(),
                                { chain: false },
                            );

                            /*------------------------------------------------------------------------*/

                            /**
                             * The semantic version number.
                             *
                             * @static
                             * @memberOf _
                             * @type {string}
                             */
                            lodash.VERSION = VERSION;

                            // Assign default placeholders.
                            arrayEach(
                                ['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'],
                                function (methodName) {
                                    lodash[methodName].placeholder = lodash;
                                },
                            );

                            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                            arrayEach(['drop', 'take'], function (methodName, index) {
                                LazyWrapper.prototype[methodName] = function (n) {
                                    n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                                    var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

                                    if (result.__filtered__) {
                                        result.__takeCount__ = nativeMin(n, result.__takeCount__);
                                    } else {
                                        result.__views__.push({
                                            size: nativeMin(n, MAX_ARRAY_LENGTH),
                                            type: methodName + (result.__dir__ < 0 ? 'Right' : ''),
                                        });
                                    }
                                    return result;
                                };

                                LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                                    return this.reverse()[methodName](n).reverse();
                                };
                            });

                            // Add `LazyWrapper` methods that accept an `iteratee` value.
                            arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                                var type = index + 1,
                                    isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                                LazyWrapper.prototype[methodName] = function (iteratee) {
                                    var result = this.clone();
                                    result.__iteratees__.push({
                                        iteratee: getIteratee(iteratee, 3),
                                        type: type,
                                    });
                                    result.__filtered__ = result.__filtered__ || isFilter;
                                    return result;
                                };
                            });

                            // Add `LazyWrapper` methods for `_.head` and `_.last`.
                            arrayEach(['head', 'last'], function (methodName, index) {
                                var takeName = 'take' + (index ? 'Right' : '');

                                LazyWrapper.prototype[methodName] = function () {
                                    return this[takeName](1).value()[0];
                                };
                            });

                            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                            arrayEach(['initial', 'tail'], function (methodName, index) {
                                var dropName = 'drop' + (index ? '' : 'Right');

                                LazyWrapper.prototype[methodName] = function () {
                                    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                                };
                            });

                            LazyWrapper.prototype.compact = function () {
                                return this.filter(identity);
                            };

                            LazyWrapper.prototype.find = function (predicate) {
                                return this.filter(predicate).head();
                            };

                            LazyWrapper.prototype.findLast = function (predicate) {
                                return this.reverse().find(predicate);
                            };

                            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                                if (typeof path == 'function') {
                                    return new LazyWrapper(this);
                                }
                                return this.map(function (value) {
                                    return baseInvoke(value, path, args);
                                });
                            });

                            LazyWrapper.prototype.reject = function (predicate) {
                                return this.filter(negate(getIteratee(predicate)));
                            };

                            LazyWrapper.prototype.slice = function (start, end) {
                                start = toInteger(start);

                                var result = this;
                                if (result.__filtered__ && (start > 0 || end < 0)) {
                                    return new LazyWrapper(result);
                                }
                                if (start < 0) {
                                    result = result.takeRight(-start);
                                } else if (start) {
                                    result = result.drop(start);
                                }
                                if (end !== undefined) {
                                    end = toInteger(end);
                                    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                                }
                                return result;
                            };

                            LazyWrapper.prototype.takeRightWhile = function (predicate) {
                                return this.reverse().takeWhile(predicate).reverse();
                            };

                            LazyWrapper.prototype.toArray = function () {
                                return this.take(MAX_ARRAY_LENGTH);
                            };

                            // Add `LazyWrapper` methods to `lodash.prototype`.
                            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                                var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                                    isTaker = /^(?:head|last)$/.test(methodName),
                                    lodashFunc =
                                        lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
                                    retUnwrapped = isTaker || /^find/.test(methodName);

                                if (!lodashFunc) {
                                    return;
                                }
                                lodash.prototype[methodName] = function () {
                                    var value = this.__wrapped__,
                                        args = isTaker ? [1] : arguments,
                                        isLazy = value instanceof LazyWrapper,
                                        iteratee = args[0],
                                        useLazy = isLazy || isArray(value);

                                    var interceptor = function (value) {
                                        var result = lodashFunc.apply(lodash, arrayPush([value], args));
                                        return isTaker && chainAll ? result[0] : result;
                                    };

                                    if (
                                        useLazy &&
                                        checkIteratee &&
                                        typeof iteratee == 'function' &&
                                        iteratee.length != 1
                                    ) {
                                        // Avoid lazy use if the iteratee has a "length" value other than `1`.
                                        isLazy = useLazy = false;
                                    }
                                    var chainAll = this.__chain__,
                                        isHybrid = !!this.__actions__.length,
                                        isUnwrapped = retUnwrapped && !chainAll,
                                        onlyLazy = isLazy && !isHybrid;

                                    if (!retUnwrapped && useLazy) {
                                        value = onlyLazy ? value : new LazyWrapper(this);
                                        var result = func.apply(value, args);
                                        result.__actions__.push({
                                            func: thru,
                                            args: [interceptor],
                                            thisArg: undefined,
                                        });
                                        return new LodashWrapper(result, chainAll);
                                    }
                                    if (isUnwrapped && onlyLazy) {
                                        return func.apply(this, args);
                                    }
                                    result = this.thru(interceptor);
                                    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                                };
                            });

                            // Add `Array` methods to `lodash.prototype`.
                            arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                                var func = arrayProto[methodName],
                                    chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                                    retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                                lodash.prototype[methodName] = function () {
                                    var args = arguments;
                                    if (retUnwrapped && !this.__chain__) {
                                        var value = this.value();
                                        return func.apply(isArray(value) ? value : [], args);
                                    }
                                    return this[chainName](function (value) {
                                        return func.apply(isArray(value) ? value : [], args);
                                    });
                                };
                            });

                            // Map minified method names to their real names.
                            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                                var lodashFunc = lodash[methodName];
                                if (lodashFunc) {
                                    var key = lodashFunc.name + '';
                                    if (!hasOwnProperty.call(realNames, key)) {
                                        realNames[key] = [];
                                    }
                                    realNames[key].push({ name: methodName, func: lodashFunc });
                                }
                            });

                            realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
                                {
                                    name: 'wrapper',
                                    func: undefined,
                                },
                            ];

                            // Add methods to `LazyWrapper`.
                            LazyWrapper.prototype.clone = lazyClone;
                            LazyWrapper.prototype.reverse = lazyReverse;
                            LazyWrapper.prototype.value = lazyValue;

                            // Add chain sequence methods to the `lodash` wrapper.
                            lodash.prototype.at = wrapperAt;
                            lodash.prototype.chain = wrapperChain;
                            lodash.prototype.commit = wrapperCommit;
                            lodash.prototype.next = wrapperNext;
                            lodash.prototype.plant = wrapperPlant;
                            lodash.prototype.reverse = wrapperReverse;
                            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                            // Add lazy aliases.
                            lodash.prototype.first = lodash.prototype.head;

                            if (symIterator) {
                                lodash.prototype[symIterator] = wrapperToIterator;
                            }
                            return lodash;
                        };

                        /*--------------------------------------------------------------------------*/

                        // Export lodash.
                        var _ = runInContext();

                        // Some AMD build optimizers, like r.js, check for condition patterns like:
                        if (true) {
                            // Expose Lodash on the global object to prevent errors when Lodash is
                            // loaded by a script tag in the presence of an AMD loader.
                            // See http://requirejs.org/docs/errors.html#mismatch for more details.
                            // Use `_.noConflict` to remove Lodash from the global object.
                            root._ = _;

                            // Define as an anonymous module so, through path mapping, it can be
                            // referenced as the "underscore" module.
                            !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                                return _;
                            }.call(exports, __webpack_require__, exports, module)),
                            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                        }
                        // Check for `exports` after `define` in case a build optimizer adds it.
                        else {
                        }
                    }).call(this);

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(15), __webpack_require__(18)(module));

                /***/
            },
            /* 4 */
            /***/ function (module, exports) {
                module.exports = Next;

                /***/
            },
            /* 5 */
            /***/ function (module, exports) {
                module.exports = window.PropTypes;

                /***/
            },
            /* 6 */
            /***/ function (module, exports) {
                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                    var type = typeof value;
                    return value != null && (type == 'object' || type == 'function');
                }

                module.exports = isObject;

                /***/
            },
            /* 7 */
            /***/ function (module, exports, __webpack_require__) {
                var freeGlobal = __webpack_require__(29);

                /** Detect free variable `self`. */
                var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

                /** Used as a reference to the global object. */
                var root = freeGlobal || freeSelf || Function('return this')();

                module.exports = root;

                /***/
            },
            /* 8 */
            /***/ function (module, exports, __webpack_require__) {
                var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
                /* global define */

                (function () {
                    'use strict';

                    var hasOwn = {}.hasOwnProperty;

                    function classNames() {
                        var classes = '';

                        for (var i = 0; i < arguments.length; i++) {
                            var arg = arguments[i];
                            if (arg) {
                                classes = appendClass(classes, parseValue(arg));
                            }
                        }

                        return classes;
                    }

                    function parseValue(arg) {
                        if (typeof arg === 'string' || typeof arg === 'number') {
                            return arg;
                        }

                        if (typeof arg !== 'object') {
                            return '';
                        }

                        if (Array.isArray(arg)) {
                            return classNames.apply(null, arg);
                        }

                        if (
                            arg.toString !== Object.prototype.toString &&
                            !arg.toString.toString().includes('[native code]')
                        ) {
                            return arg.toString();
                        }

                        var classes = '';

                        for (var key in arg) {
                            if (hasOwn.call(arg, key) && arg[key]) {
                                classes = appendClass(classes, key);
                            }
                        }

                        return classes;
                    }

                    function appendClass(value, newClass) {
                        if (!newClass) {
                            return value;
                        }

                        if (value) {
                            return value + ' ' + newClass;
                        }

                        return value + newClass;
                    }

                    if (true && module.exports) {
                        classNames.default = classNames;
                        module.exports = classNames;
                    } else if (true) {
                        // register as 'classnames', consistent with npm package name
                        !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
                        (__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                            return classNames;
                        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    } else {
                    }
                })();

                /***/
            },
            /* 9 */
            /***/ function (module, exports) {
                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                    return value != null && typeof value == 'object';
                }

                module.exports = isObjectLike;

                /***/
            },
            /* 10 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                var R = typeof Reflect === 'object' ? Reflect : null;
                var ReflectApply =
                    R && typeof R.apply === 'function'
                        ? R.apply
                        : function ReflectApply(target, receiver, args) {
                              return Function.prototype.apply.call(target, receiver, args);
                          };

                var ReflectOwnKeys;
                if (R && typeof R.ownKeys === 'function') {
                    ReflectOwnKeys = R.ownKeys;
                } else if (Object.getOwnPropertySymbols) {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
                    };
                } else {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target);
                    };
                }

                function ProcessEmitWarning(warning) {
                    if (console && console.warn) console.warn(warning);
                }

                var NumberIsNaN =
                    Number.isNaN ||
                    function NumberIsNaN(value) {
                        return value !== value;
                    };

                function EventEmitter() {
                    EventEmitter.init.call(this);
                }
                module.exports = EventEmitter;
                module.exports.once = once;

                // Backwards-compat with node 0.10.x
                EventEmitter.EventEmitter = EventEmitter;

                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._eventsCount = 0;
                EventEmitter.prototype._maxListeners = undefined;

                // By default EventEmitters will print a warning if more than 10 listeners are
                // added to it. This is a useful default which helps finding memory leaks.
                var defaultMaxListeners = 10;

                function checkListener(listener) {
                    if (typeof listener !== 'function') {
                        throw new TypeError(
                            'The "listener" argument must be of type Function. Received type ' + typeof listener,
                        );
                    }
                }

                Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                    enumerable: true,
                    get: function () {
                        return defaultMaxListeners;
                    },
                    set: function (arg) {
                        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
                            throw new RangeError(
                                'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                                    arg +
                                    '.',
                            );
                        }
                        defaultMaxListeners = arg;
                    },
                });

                EventEmitter.init = function () {
                    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    }

                    this._maxListeners = this._maxListeners || undefined;
                };

                // Obviously not all Emitters should be limited to 10. This function allows
                // that to be increased. Set to zero for unlimited.
                EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
                        throw new RangeError(
                            'The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.',
                        );
                    }
                    this._maxListeners = n;
                    return this;
                };

                function _getMaxListeners(that) {
                    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                    return that._maxListeners;
                }

                EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                    return _getMaxListeners(this);
                };

                EventEmitter.prototype.emit = function emit(type) {
                    var args = [];
                    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
                    var doError = type === 'error';

                    var events = this._events;
                    if (events !== undefined) doError = doError && events.error === undefined;
                    else if (!doError) return false;

                    // If there is no 'error' event listener then throw.
                    if (doError) {
                        var er;
                        if (args.length > 0) er = args[0];
                        if (er instanceof Error) {
                            // Note: The comments on the `throw` lines are intentional, they show
                            // up in Node's output if this results in an unhandled exception.
                            throw er; // Unhandled 'error' event
                        }
                        // At least give some kind of context to the user
                        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
                        err.context = er;
                        throw err; // Unhandled 'error' event
                    }

                    var handler = events[type];

                    if (handler === undefined) return false;

                    if (typeof handler === 'function') {
                        ReflectApply(handler, this, args);
                    } else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
                    }

                    return true;
                };

                function _addListener(target, type, listener, prepend) {
                    var m;
                    var events;
                    var existing;

                    checkListener(listener);

                    events = target._events;
                    if (events === undefined) {
                        events = target._events = Object.create(null);
                        target._eventsCount = 0;
                    } else {
                        // To avoid recursion in the case that type === "newListener"! Before
                        // adding it to the listeners, first emit "newListener".
                        if (events.newListener !== undefined) {
                            target.emit('newListener', type, listener.listener ? listener.listener : listener);

                            // Re-assign `events` because a newListener handler could have caused the
                            // this._events to be assigned to a new object
                            events = target._events;
                        }
                        existing = events[type];
                    }

                    if (existing === undefined) {
                        // Optimize the case of one listener. Don't need the extra array object.
                        existing = events[type] = listener;
                        ++target._eventsCount;
                    } else {
                        if (typeof existing === 'function') {
                            // Adding the second element, need to change to array.
                            existing = events[type] = prepend ? [listener, existing] : [existing, listener];
                            // If we've already got an array, just append.
                        } else if (prepend) {
                            existing.unshift(listener);
                        } else {
                            existing.push(listener);
                        }

                        // Check for listener leak
                        m = _getMaxListeners(target);
                        if (m > 0 && existing.length > m && !existing.warned) {
                            existing.warned = true;
                            // No error code for this since it is a Warning
                            // eslint-disable-next-line no-restricted-syntax
                            var w = new Error(
                                'Possible EventEmitter memory leak detected. ' +
                                    existing.length +
                                    ' ' +
                                    String(type) +
                                    ' listeners ' +
                                    'added. Use emitter.setMaxListeners() to ' +
                                    'increase limit',
                            );
                            w.name = 'MaxListenersExceededWarning';
                            w.emitter = target;
                            w.type = type;
                            w.count = existing.length;
                            ProcessEmitWarning(w);
                        }
                    }

                    return target;
                }

                EventEmitter.prototype.addListener = function addListener(type, listener) {
                    return _addListener(this, type, listener, false);
                };

                EventEmitter.prototype.on = EventEmitter.prototype.addListener;

                EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                    return _addListener(this, type, listener, true);
                };

                function onceWrapper() {
                    if (!this.fired) {
                        this.target.removeListener(this.type, this.wrapFn);
                        this.fired = true;
                        if (arguments.length === 0) return this.listener.call(this.target);
                        return this.listener.apply(this.target, arguments);
                    }
                }

                function _onceWrap(target, type, listener) {
                    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
                    var wrapped = onceWrapper.bind(state);
                    wrapped.listener = listener;
                    state.wrapFn = wrapped;
                    return wrapped;
                }

                EventEmitter.prototype.once = function once(type, listener) {
                    checkListener(listener);
                    this.on(type, _onceWrap(this, type, listener));
                    return this;
                };

                EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
                    checkListener(listener);
                    this.prependListener(type, _onceWrap(this, type, listener));
                    return this;
                };

                // Emits a 'removeListener' event if and only if the listener was removed.
                EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                    var list, events, position, i, originalListener;

                    checkListener(listener);

                    events = this._events;
                    if (events === undefined) return this;

                    list = events[type];
                    if (list === undefined) return this;

                    if (list === listener || list.listener === listener) {
                        if (--this._eventsCount === 0) this._events = Object.create(null);
                        else {
                            delete events[type];
                            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
                        }
                    } else if (typeof list !== 'function') {
                        position = -1;

                        for (i = list.length - 1; i >= 0; i--) {
                            if (list[i] === listener || list[i].listener === listener) {
                                originalListener = list[i].listener;
                                position = i;
                                break;
                            }
                        }

                        if (position < 0) return this;

                        if (position === 0) list.shift();
                        else {
                            spliceOne(list, position);
                        }

                        if (list.length === 1) events[type] = list[0];

                        if (events.removeListener !== undefined)
                            this.emit('removeListener', type, originalListener || listener);
                    }

                    return this;
                };

                EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

                EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                    var listeners, events, i;

                    events = this._events;
                    if (events === undefined) return this;

                    // not listening for removeListener, no need to emit
                    if (events.removeListener === undefined) {
                        if (arguments.length === 0) {
                            this._events = Object.create(null);
                            this._eventsCount = 0;
                        } else if (events[type] !== undefined) {
                            if (--this._eventsCount === 0) this._events = Object.create(null);
                            else delete events[type];
                        }
                        return this;
                    }

                    // emit removeListener for all listeners on all events
                    if (arguments.length === 0) {
                        var keys = Object.keys(events);
                        var key;
                        for (i = 0; i < keys.length; ++i) {
                            key = keys[i];
                            if (key === 'removeListener') continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners('removeListener');
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                        return this;
                    }

                    listeners = events[type];

                    if (typeof listeners === 'function') {
                        this.removeListener(type, listeners);
                    } else if (listeners !== undefined) {
                        // LIFO order
                        for (i = listeners.length - 1; i >= 0; i--) {
                            this.removeListener(type, listeners[i]);
                        }
                    }

                    return this;
                };

                function _listeners(target, type, unwrap) {
                    var events = target._events;

                    if (events === undefined) return [];

                    var evlistener = events[type];
                    if (evlistener === undefined) return [];

                    if (typeof evlistener === 'function')
                        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

                    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
                }

                EventEmitter.prototype.listeners = function listeners(type) {
                    return _listeners(this, type, true);
                };

                EventEmitter.prototype.rawListeners = function rawListeners(type) {
                    return _listeners(this, type, false);
                };

                EventEmitter.listenerCount = function (emitter, type) {
                    if (typeof emitter.listenerCount === 'function') {
                        return emitter.listenerCount(type);
                    } else {
                        return listenerCount.call(emitter, type);
                    }
                };

                EventEmitter.prototype.listenerCount = listenerCount;
                function listenerCount(type) {
                    var events = this._events;

                    if (events !== undefined) {
                        var evlistener = events[type];

                        if (typeof evlistener === 'function') {
                            return 1;
                        } else if (evlistener !== undefined) {
                            return evlistener.length;
                        }
                    }

                    return 0;
                }

                EventEmitter.prototype.eventNames = function eventNames() {
                    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
                };

                function arrayClone(arr, n) {
                    var copy = new Array(n);
                    for (var i = 0; i < n; ++i) copy[i] = arr[i];
                    return copy;
                }

                function spliceOne(list, index) {
                    for (; index + 1 < list.length; index++) list[index] = list[index + 1];
                    list.pop();
                }

                function unwrapListeners(arr) {
                    var ret = new Array(arr.length);
                    for (var i = 0; i < ret.length; ++i) {
                        ret[i] = arr[i].listener || arr[i];
                    }
                    return ret;
                }

                function once(emitter, name) {
                    return new Promise(function (resolve, reject) {
                        function errorListener(err) {
                            emitter.removeListener(name, resolver);
                            reject(err);
                        }

                        function resolver() {
                            if (typeof emitter.removeListener === 'function') {
                                emitter.removeListener('error', errorListener);
                            }
                            resolve([].slice.call(arguments));
                        }

                        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
                        if (name !== 'error') {
                            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
                        }
                    });
                }

                function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                    if (typeof emitter.on === 'function') {
                        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
                    }
                }

                function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                    if (typeof emitter.on === 'function') {
                        if (flags.once) {
                            emitter.once(name, listener);
                        } else {
                            emitter.on(name, listener);
                        }
                    } else if (typeof emitter.addEventListener === 'function') {
                        // EventTarget does not have `error` event semantics like Node
                        // EventEmitters, we do not listen for `error` events here.
                        emitter.addEventListener(name, function wrapListener(arg) {
                            // IE does not have builtin `{ once: true }` support so we
                            // have to do it manually.
                            if (flags.once) {
                                emitter.removeEventListener(name, wrapListener);
                            }
                            listener(arg);
                        });
                    } else {
                        throw new TypeError(
                            'The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter,
                        );
                    }
                }

                /***/
            },
            /* 11 */
            /***/ function (module, exports, __webpack_require__) {
                var listCacheClear = __webpack_require__(59),
                    listCacheDelete = __webpack_require__(60),
                    listCacheGet = __webpack_require__(61),
                    listCacheHas = __webpack_require__(62),
                    listCacheSet = __webpack_require__(63);

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                    var index = -1,
                        length = entries == null ? 0 : entries.length;

                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype['delete'] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                module.exports = ListCache;

                /***/
            },
            /* 12 */
            /***/ function (module, exports, __webpack_require__) {
                var eq = __webpack_require__(13);

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                    var length = array.length;
                    while (length--) {
                        if (eq(array[length][0], key)) {
                            return length;
                        }
                    }
                    return -1;
                }

                module.exports = assocIndexOf;

                /***/
            },
            /* 13 */
            /***/ function (module, exports) {
                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                    return value === other || (value !== value && other !== other);
                }

                module.exports = eq;

                /***/
            },
            /* 14 */
            /***/ function (module, exports, __webpack_require__) {
                var Symbol = __webpack_require__(28),
                    getRawTag = __webpack_require__(70),
                    objectToString = __webpack_require__(71);

                /** `Object#toString` result references. */
                var nullTag = '[object Null]',
                    undefinedTag = '[object Undefined]';

                /** Built-in value references. */
                var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                    if (value == null) {
                        return value === undefined ? undefinedTag : nullTag;
                    }
                    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
                }

                module.exports = baseGetTag;

                /***/
            },
            /* 15 */
            /***/ function (module, exports) {
                var g;

                // This works in non-strict mode
                g = (function () {
                    return this;
                })();

                try {
                    // This works if eval is allowed (see CSP)
                    g = g || new Function('return this')();
                } catch (e) {
                    // This works if the window reference is available
                    if (typeof window === 'object') g = window;
                }

                // g can still be undefined, but nothing to do about it...
                // We return undefined, instead of nothing here, so it's
                // easier to handle this case. if(!global) { ...}

                module.exports = g;

                /***/
            },
            /* 16 */
            /***/ function (module, exports, __webpack_require__) {
                var getNative = __webpack_require__(20);

                /* Built-in method references that are verified to be native. */
                var nativeCreate = getNative(Object, 'create');

                module.exports = nativeCreate;

                /***/
            },
            /* 17 */
            /***/ function (module, exports, __webpack_require__) {
                var isKeyable = __webpack_require__(85);

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                    var data = map.__data__;
                    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
                }

                module.exports = getMapData;

                /***/
            },
            /* 18 */
            /***/ function (module, exports) {
                module.exports = function (module) {
                    if (!module.webpackPolyfill) {
                        module.deprecate = function () {};
                        module.paths = [];
                        // module.parent = undefined by default
                        if (!module.children) module.children = [];
                        Object.defineProperty(module, 'loaded', {
                            enumerable: true,
                            get: function () {
                                return module.l;
                            },
                        });
                        Object.defineProperty(module, 'id', {
                            enumerable: true,
                            get: function () {
                                return module.i;
                            },
                        });
                        module.webpackPolyfill = 1;
                    }
                    return module;
                };

                /***/
            },
            /* 19 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });
                exports.promiseSettled =
                    exports.getRequestHandler =
                    exports.defaultShouldFetch =
                    exports.defaultWillFetch =
                    exports.defaultDataHandler =
                        void 0;
                var tslib_1 = __webpack_require__(2);
                // 默认的 dataSourceItem 的 dataHandler
                var defaultDataHandler = function (response) {
                    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        return tslib_1.__generator(this, function (_a) {
                            return [2 /*return*/, response.data];
                        });
                    });
                };
                exports.defaultDataHandler = defaultDataHandler;
                // 默认的 dataSourceItem 的 willFetch
                var defaultWillFetch = function (options) {
                    return options;
                };
                exports.defaultWillFetch = defaultWillFetch;
                // 默认的 dataSourceItem 的 shouldFetch
                var defaultShouldFetch = function () {
                    return true;
                };
                exports.defaultShouldFetch = defaultShouldFetch;
                // 从当前 dataSourceItem 中获取 requestHandler
                var getRequestHandler = function (ds, requestHandlersMap) {
                    if (ds.type === 'custom') {
                        // 自定义类型处理
                        return ds.requestHandler; // 理论上这里应该是能强转的，就算为空，应该在 request 请求的时候触发失败
                    }
                    // type 协议默认值 fetch
                    return requestHandlersMap[ds.type || 'fetch'];
                };
                exports.getRequestHandler = getRequestHandler;
                exports.promiseSettled =
                    (Promise.allSettled ? Promise.allSettled.bind(Promise) : null) ||
                    function (promises) {
                        return Promise.all(
                            promises.map(function (p) {
                                return p
                                    .then(function (v) {
                                        return {
                                            status: 'fulfilled',
                                            value: v,
                                        };
                                    })
                                    .catch(function (e) {
                                        return {
                                            status: 'rejected',
                                            reason: e,
                                        };
                                    });
                            }),
                        );
                    };

                /***/
            },
            /* 20 */
            /***/ function (module, exports, __webpack_require__) {
                var baseIsNative = __webpack_require__(69),
                    getValue = __webpack_require__(75);

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                    var value = getValue(object, key);
                    return baseIsNative(value) ? value : undefined;
                }

                module.exports = getNative;

                /***/
            },
            /* 21 */
            /***/ function (module, exports, __webpack_require__) {
                var baseGetTag = __webpack_require__(14),
                    isObject = __webpack_require__(6);

                /** `Object#toString` result references. */
                var asyncTag = '[object AsyncFunction]',
                    funcTag = '[object Function]',
                    genTag = '[object GeneratorFunction]',
                    proxyTag = '[object Proxy]';

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                    if (!isObject(value)) {
                        return false;
                    }
                    // The use of `Object#toString` avoids issues with the `typeof` operator
                    // in Safari 9 which returns 'object' for typed arrays and other constructors.
                    var tag = baseGetTag(value);
                    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                }

                module.exports = isFunction;

                /***/
            },
            /* 22 */
            /***/ function (module, exports, __webpack_require__) {
                var defineProperty = __webpack_require__(31);

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                    if (key == '__proto__' && defineProperty) {
                        defineProperty(object, key, {
                            configurable: true,
                            enumerable: true,
                            value: value,
                            writable: true,
                        });
                    } else {
                        object[key] = value;
                    }
                }

                module.exports = baseAssignValue;

                /***/
            },
            /* 23 */
            /***/ function (module, exports, __webpack_require__) {
                var isFunction = __webpack_require__(21),
                    isLength = __webpack_require__(36);

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                    return value != null && isLength(value.length) && !isFunction(value);
                }

                module.exports = isArrayLike;

                /***/
            },
            /* 24 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                if (true) {
                    module.exports = __webpack_require__(126);
                } else {
                }

                /***/
            },
            /* 25 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */

                var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

                module.exports = ReactPropTypesSecret;

                /***/
            },
            /* 26 */
            /***/ function (module, exports) {
                module.exports = window.ReactDOM;

                /***/
            },
            /* 27 */
            /***/ function (module, exports, __webpack_require__) {
                var getNative = __webpack_require__(20),
                    root = __webpack_require__(7);

                /* Built-in method references that are verified to be native. */
                var Map = getNative(root, 'Map');

                module.exports = Map;

                /***/
            },
            /* 28 */
            /***/ function (module, exports, __webpack_require__) {
                var root = __webpack_require__(7);

                /** Built-in value references. */
                var Symbol = root.Symbol;

                module.exports = Symbol;

                /***/
            },
            /* 29 */
            /***/ function (module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function (global) {
                    /** Detect free variable `global` from Node.js. */
                    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                    module.exports = freeGlobal;

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(15));

                /***/
            },
            /* 30 */
            /***/ function (module, exports, __webpack_require__) {
                var baseAssignValue = __webpack_require__(22),
                    eq = __webpack_require__(13);

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                    if ((value !== undefined && !eq(object[key], value)) || (value === undefined && !(key in object))) {
                        baseAssignValue(object, key, value);
                    }
                }

                module.exports = assignMergeValue;

                /***/
            },
            /* 31 */
            /***/ function (module, exports, __webpack_require__) {
                var getNative = __webpack_require__(20);

                var defineProperty = (function () {
                    try {
                        var func = getNative(Object, 'defineProperty');
                        func({}, '', {});
                        return func;
                    } catch (e) {}
                })();

                module.exports = defineProperty;

                /***/
            },
            /* 32 */
            /***/ function (module, exports, __webpack_require__) {
                var overArg = __webpack_require__(99);

                /** Built-in value references. */
                var getPrototype = overArg(Object.getPrototypeOf, Object);

                module.exports = getPrototype;

                /***/
            },
            /* 33 */
            /***/ function (module, exports) {
                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                    var Ctor = value && value.constructor,
                        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                    return value === proto;
                }

                module.exports = isPrototype;

                /***/
            },
            /* 34 */
            /***/ function (module, exports, __webpack_require__) {
                var baseIsArguments = __webpack_require__(100),
                    isObjectLike = __webpack_require__(9);

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Built-in value references. */
                var propertyIsEnumerable = objectProto.propertyIsEnumerable;

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(
                    (function () {
                        return arguments;
                    })(),
                )
                    ? baseIsArguments
                    : function (value) {
                          return (
                              isObjectLike(value) &&
                              hasOwnProperty.call(value, 'callee') &&
                              !propertyIsEnumerable.call(value, 'callee')
                          );
                      };

                module.exports = isArguments;

                /***/
            },
            /* 35 */
            /***/ function (module, exports) {
                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                module.exports = isArray;

                /***/
            },
            /* 36 */
            /***/ function (module, exports) {
                /** Used as references for various `Number` constants. */
                var MAX_SAFE_INTEGER = 9007199254740991;

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                }

                module.exports = isLength;

                /***/
            },
            /* 37 */
            /***/ function (module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function (module) {
                    var root = __webpack_require__(7),
                        stubFalse = __webpack_require__(102);

                    /** Detect free variable `exports`. */
                    var freeExports = true && exports && !exports.nodeType && exports;

                    /** Detect free variable `module`. */
                    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                    /** Detect the popular CommonJS extension `module.exports`. */
                    var moduleExports = freeModule && freeModule.exports === freeExports;

                    /** Built-in value references. */
                    var Buffer = moduleExports ? root.Buffer : undefined;

                    /* Built-in method references for those with the same name as other `lodash` methods. */
                    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

                    /**
                     * Checks if `value` is a buffer.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                     * @example
                     *
                     * _.isBuffer(new Buffer(2));
                     * // => true
                     *
                     * _.isBuffer(new Uint8Array(2));
                     * // => false
                     */
                    var isBuffer = nativeIsBuffer || stubFalse;

                    module.exports = isBuffer;

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(18)(module));

                /***/
            },
            /* 38 */
            /***/ function (module, exports, __webpack_require__) {
                var baseIsTypedArray = __webpack_require__(104),
                    baseUnary = __webpack_require__(105),
                    nodeUtil = __webpack_require__(106);

                /* Node.js helper references. */
                var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                module.exports = isTypedArray;

                /***/
            },
            /* 39 */
            /***/ function (module, exports) {
                /**
                 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function safeGet(object, key) {
                    if (key === 'constructor' && typeof object[key] === 'function') {
                        return;
                    }

                    if (key == '__proto__') {
                        return;
                    }

                    return object[key];
                }

                module.exports = safeGet;

                /***/
            },
            /* 40 */
            /***/ function (module, exports, __webpack_require__) {
                var arrayLikeKeys = __webpack_require__(110),
                    baseKeysIn = __webpack_require__(112),
                    isArrayLike = __webpack_require__(23);

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                }

                module.exports = keysIn;

                /***/
            },
            /* 41 */
            /***/ function (module, exports) {
                /** Used as references for various `Number` constants. */
                var MAX_SAFE_INTEGER = 9007199254740991;

                /** Used to detect unsigned integer values. */
                var reIsUint = /^(?:0|[1-9]\d*)$/;

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                    var type = typeof value;
                    length = length == null ? MAX_SAFE_INTEGER : length;

                    return (
                        !!length &&
                        (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
                        value > -1 &&
                        value % 1 == 0 &&
                        value < length
                    );
                }

                module.exports = isIndex;

                /***/
            },
            /* 42 */
            /***/ function (module, exports) {
                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                    return value;
                }

                module.exports = identity;

                /***/
            },
            /* 43 */
            /***/ function (module, exports, __webpack_require__) {
                module.exports = __webpack_require__(51);

                /***/
            },
            /* 44 */
            /***/ function (module, __webpack_exports__, __webpack_require__) {
                'use strict';
                /* WEBPACK VAR INJECTION */ (function (global) {
                    /* unused harmony export $mobx */
                    /* unused harmony export FlowCancellationError */
                    /* unused harmony export ObservableMap */
                    /* unused harmony export ObservableSet */
                    /* unused harmony export Reaction */
                    /* unused harmony export _allowStateChanges */
                    /* unused harmony export _allowStateChangesInsideComputed */
                    /* unused harmony export _allowStateReadsEnd */
                    /* unused harmony export _allowStateReadsStart */
                    /* unused harmony export _autoAction */
                    /* unused harmony export _endAction */
                    /* unused harmony export _getAdministration */
                    /* unused harmony export _getGlobalState */
                    /* unused harmony export _interceptReads */
                    /* unused harmony export _isComputingDerivation */
                    /* unused harmony export _resetGlobalState */
                    /* unused harmony export _startAction */
                    /* unused harmony export action */
                    /* unused harmony export autorun */
                    /* unused harmony export comparer */
                    /* unused harmony export computed */
                    /* unused harmony export configure */
                    /* unused harmony export createAtom */
                    /* unused harmony export defineProperty */
                    /* unused harmony export entries */
                    /* unused harmony export extendObservable */
                    /* unused harmony export flow */
                    /* unused harmony export flowResult */
                    /* unused harmony export get */
                    /* unused harmony export getAtom */
                    /* unused harmony export getDebugName */
                    /* unused harmony export getDependencyTree */
                    /* unused harmony export getObserverTree */
                    /* unused harmony export has */
                    /* unused harmony export intercept */
                    /* unused harmony export isAction */
                    /* unused harmony export isBoxedObservable */
                    /* unused harmony export isComputed */
                    /* unused harmony export isComputedProp */
                    /* unused harmony export isFlow */
                    /* unused harmony export isFlowCancellationError */
                    /* unused harmony export isObservable */
                    /* unused harmony export isObservableArray */
                    /* unused harmony export isObservableMap */
                    /* unused harmony export isObservableObject */
                    /* unused harmony export isObservableProp */
                    /* unused harmony export isObservableSet */
                    /* unused harmony export keys */
                    /* unused harmony export makeAutoObservable */
                    /* unused harmony export makeObservable */
                    /* unused harmony export observable */
                    /* unused harmony export observe */
                    /* unused harmony export onBecomeObserved */
                    /* unused harmony export onBecomeUnobserved */
                    /* unused harmony export onReactionError */
                    /* unused harmony export override */
                    /* unused harmony export ownKeys */
                    /* unused harmony export reaction */
                    /* unused harmony export remove */
                    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'a', function () {
                        return runInAction;
                    });
                    /* unused harmony export set */
                    /* unused harmony export spy */
                    /* unused harmony export toJS */
                    /* unused harmony export trace */
                    /* unused harmony export transaction */
                    /* unused harmony export untracked */
                    /* unused harmony export values */
                    /* unused harmony export when */
                    var niceErrors = {
                        0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
                        1: function _(annotationType, key) {
                            return (
                                "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found."
                            );
                        },
                        /*
  2(prop) {
      return `invalid decorator for '${prop.toString()}'`
  },
  3(prop) {
      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`
  },
  4(prop) {
      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`
  },
  */
                        5: "'keys()' can only be used on observable objects, arrays, sets and maps",
                        6: "'values()' can only be used on observable objects, arrays, sets and maps",
                        7: "'entries()' can only be used on observable objects, arrays and maps",
                        8: "'set()' can only be used on observable objects, arrays and maps",
                        9: "'remove()' can only be used on observable objects, arrays and maps",
                        10: "'has()' can only be used on observable objects, arrays and maps",
                        11: "'get()' can only be used on observable objects, arrays and maps",
                        12: 'Invalid annotation',
                        13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
                        14: 'Intercept handlers should return nothing or a change object',
                        15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
                        16: 'Modification exception: the internal structure of an observable array was changed.',
                        17: function _(index, length) {
                            return '[mobx.array] Index out of bounds, ' + index + ' is larger than ' + length;
                        },
                        18: 'mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js',
                        19: function _(other) {
                            return 'Cannot initialize from classes that inherit from Map: ' + other.constructor.name;
                        },
                        20: function _(other) {
                            return 'Cannot initialize map from ' + other;
                        },
                        21: function _(dataStructure) {
                            return "Cannot convert to map from '" + dataStructure + "'";
                        },
                        22: 'mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js',
                        23: 'It is not possible to get index atoms from arrays',
                        24: function _(thing) {
                            return 'Cannot obtain administration from ' + thing;
                        },
                        25: function _(property, name) {
                            return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
                        },
                        26: 'please specify a property',
                        27: function _(property, name) {
                            return (
                                "no observable property '" +
                                property.toString() +
                                "' found on the observable object '" +
                                name +
                                "'"
                            );
                        },
                        28: function _(thing) {
                            return 'Cannot obtain atom from ' + thing;
                        },
                        29: 'Expecting some object',
                        30: 'invalid action stack. did you forget to finish an action?',
                        31: 'missing option for computed: get',
                        32: function _(name, derivation) {
                            return 'Cycle detected in computation ' + name + ': ' + derivation;
                        },
                        33: function _(name) {
                            return (
                                "The setter of computed value '" +
                                name +
                                "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"
                            );
                        },
                        34: function _(name) {
                            return (
                                "[ComputedValue '" +
                                name +
                                "'] It is not possible to assign a new value to a computed value."
                            );
                        },
                        35: 'There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`',
                        36: 'isolateGlobalState should be called before MobX is running any reactions',
                        37: function _(method) {
                            return (
                                '[mobx] `observableArray.' +
                                method +
                                '()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice().' +
                                method +
                                '()` instead'
                            );
                        },
                        38: "'ownKeys()' can only be used on observable objects",
                        39: "'defineProperty()' can only be used on observable objects",
                    };
                    var errors = false ? undefined : {};
                    function die(error) {
                        for (
                            var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
                            _key < _len;
                            _key++
                        ) {
                            args[_key - 1] = arguments[_key];
                        }
                        if (false) {
                            var e;
                        }
                        throw new Error(
                            typeof error === 'number'
                                ? '[MobX] minified error nr: ' +
                                  error +
                                  (args.length ? ' ' + args.map(String).join(',') : '') +
                                  '. Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts'
                                : '[MobX] ' + error,
                        );
                    }

                    var mockGlobal = {};
                    function getGlobal() {
                        if (typeof globalThis !== 'undefined') {
                            return globalThis;
                        }
                        if (typeof window !== 'undefined') {
                            return window;
                        }
                        if (typeof global !== 'undefined') {
                            return global;
                        }
                        if (typeof self !== 'undefined') {
                            return self;
                        }
                        return mockGlobal;
                    }

                    // We shorten anything used > 5 times
                    var assign = Object.assign;
                    var getDescriptor = Object.getOwnPropertyDescriptor;
                    var defineProperty = Object.defineProperty;
                    var objectPrototype = Object.prototype;
                    var EMPTY_ARRAY = [];
                    Object.freeze(EMPTY_ARRAY);
                    var EMPTY_OBJECT = {};
                    Object.freeze(EMPTY_OBJECT);
                    var hasProxy = typeof Proxy !== 'undefined';
                    var plainObjectString = /*#__PURE__*/ Object.toString();
                    function assertProxies() {
                        if (!hasProxy) {
                            die(false ? undefined : 'Proxy not available');
                        }
                    }
                    function warnAboutProxyRequirement(msg) {
                        if (false) {
                        }
                    }
                    function getNextId() {
                        return ++globalState.mobxGuid;
                    }
                    /**
                     * Makes sure that the provided function is invoked at most once.
                     */
                    function once(func) {
                        var invoked = false;
                        return function () {
                            if (invoked) {
                                return;
                            }
                            invoked = true;
                            return func.apply(this, arguments);
                        };
                    }
                    var noop = function noop() {};
                    function isFunction(fn) {
                        return typeof fn === 'function';
                    }
                    function isStringish(value) {
                        var t = typeof value;
                        switch (t) {
                            case 'string':
                            case 'symbol':
                            case 'number':
                                return true;
                        }
                        return false;
                    }
                    function isObject(value) {
                        return value !== null && typeof value === 'object';
                    }
                    function isPlainObject(value) {
                        if (!isObject(value)) {
                            return false;
                        }
                        var proto = Object.getPrototypeOf(value);
                        if (proto == null) {
                            return true;
                        }
                        var protoConstructor = Object.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                        return (
                            typeof protoConstructor === 'function' && protoConstructor.toString() === plainObjectString
                        );
                    }
                    // https://stackoverflow.com/a/37865170
                    function isGenerator(obj) {
                        var constructor = obj == null ? void 0 : obj.constructor;
                        if (!constructor) {
                            return false;
                        }
                        if (
                            'GeneratorFunction' === constructor.name ||
                            'GeneratorFunction' === constructor.displayName
                        ) {
                            return true;
                        }
                        return false;
                    }
                    function addHiddenProp(object, propName, value) {
                        defineProperty(object, propName, {
                            enumerable: false,
                            writable: true,
                            configurable: true,
                            value: value,
                        });
                    }
                    function addHiddenFinalProp(object, propName, value) {
                        defineProperty(object, propName, {
                            enumerable: false,
                            writable: false,
                            configurable: true,
                            value: value,
                        });
                    }
                    function createInstanceofPredicate(name, theClass) {
                        var propName = 'isMobX' + name;
                        theClass.prototype[propName] = true;
                        return function (x) {
                            return isObject(x) && x[propName] === true;
                        };
                    }
                    /**
                     * Yields true for both native and observable Map, even across different windows.
                     */
                    function isES6Map(thing) {
                        return thing != null && Object.prototype.toString.call(thing) === '[object Map]';
                    }
                    /**
                     * Makes sure a Map is an instance of non-inherited native or observable Map.
                     */
                    function isPlainES6Map(thing) {
                        var mapProto = Object.getPrototypeOf(thing);
                        var objectProto = Object.getPrototypeOf(mapProto);
                        var nullProto = Object.getPrototypeOf(objectProto);
                        return nullProto === null;
                    }
                    /**
                     * Yields true for both native and observable Set, even across different windows.
                     */
                    function isES6Set(thing) {
                        return thing != null && Object.prototype.toString.call(thing) === '[object Set]';
                    }
                    var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== 'undefined';
                    /**
                     * Returns the following: own enumerable keys and symbols.
                     */
                    function getPlainObjectKeys(object) {
                        var keys = Object.keys(object);
                        // Not supported in IE, so there are not going to be symbol props anyway...
                        if (!hasGetOwnPropertySymbols) {
                            return keys;
                        }
                        var symbols = Object.getOwnPropertySymbols(object);
                        if (!symbols.length) {
                            return keys;
                        }
                        return [].concat(
                            keys,
                            symbols.filter(function (s) {
                                return objectPrototype.propertyIsEnumerable.call(object, s);
                            }),
                        );
                    }
                    // From Immer utils
                    // Returns all own keys, including non-enumerable and symbolic
                    var ownKeys =
                        typeof Reflect !== 'undefined' && Reflect.ownKeys
                            ? Reflect.ownKeys
                            : hasGetOwnPropertySymbols
                            ? function (obj) {
                                  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
                              }
                            : /* istanbul ignore next */ Object.getOwnPropertyNames;
                    function stringifyKey(key) {
                        if (typeof key === 'string') {
                            return key;
                        }
                        if (typeof key === 'symbol') {
                            return key.toString();
                        }
                        return new String(key).toString();
                    }
                    function toPrimitive(value) {
                        return value === null ? null : typeof value === 'object' ? '' + value : value;
                    }
                    function hasProp(target, prop) {
                        return objectPrototype.hasOwnProperty.call(target, prop);
                    }
                    // From Immer utils
                    var getOwnPropertyDescriptors =
                        Object.getOwnPropertyDescriptors ||
                        function getOwnPropertyDescriptors(target) {
                            // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
                            var res = {};
                            // Note: without polyfill for ownKeys, symbols won't be picked up
                            ownKeys(target).forEach(function (key) {
                                res[key] = getDescriptor(target, key);
                            });
                            return res;
                        };
                    function getFlag(flags, mask) {
                        return !!(flags & mask);
                    }
                    function setFlag(flags, mask, newValue) {
                        if (newValue) {
                            flags |= mask;
                        } else {
                            flags &= ~mask;
                        }
                        return flags;
                    }

                    function _arrayLikeToArray(r, a) {
                        (null == a || a > r.length) && (a = r.length);
                        for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                        return n;
                    }
                    function _defineProperties(e, r) {
                        for (var t = 0; t < r.length; t++) {
                            var o = r[t];
                            (o.enumerable = o.enumerable || !1),
                                (o.configurable = !0),
                                'value' in o && (o.writable = !0),
                                Object.defineProperty(e, _toPropertyKey(o.key), o);
                        }
                    }
                    function _createClass(e, r, t) {
                        return (
                            r && _defineProperties(e.prototype, r),
                            t && _defineProperties(e, t),
                            Object.defineProperty(e, 'prototype', {
                                writable: !1,
                            }),
                            e
                        );
                    }
                    function _createForOfIteratorHelperLoose(r, e) {
                        var t = ('undefined' != typeof Symbol && r[Symbol.iterator]) || r['@@iterator'];
                        if (t) return (t = t.call(r)).next.bind(t);
                        if (
                            Array.isArray(r) ||
                            (t = _unsupportedIterableToArray(r)) ||
                            (e && r && 'number' == typeof r.length)
                        ) {
                            t && (r = t);
                            var o = 0;
                            return function () {
                                return o >= r.length
                                    ? {
                                          done: !0,
                                      }
                                    : {
                                          done: !1,
                                          value: r[o++],
                                      };
                            };
                        }
                        throw new TypeError(
                            'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                        );
                    }
                    function _extends() {
                        return (
                            (_extends = Object.assign
                                ? Object.assign.bind()
                                : function (n) {
                                      for (var e = 1; e < arguments.length; e++) {
                                          var t = arguments[e];
                                          for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
                                      }
                                      return n;
                                  }),
                            _extends.apply(null, arguments)
                        );
                    }
                    function _inheritsLoose(t, o) {
                        (t.prototype = Object.create(o.prototype)),
                            (t.prototype.constructor = t),
                            _setPrototypeOf(t, o);
                    }
                    function _setPrototypeOf(t, e) {
                        return (
                            (_setPrototypeOf = Object.setPrototypeOf
                                ? Object.setPrototypeOf.bind()
                                : function (t, e) {
                                      return (t.__proto__ = e), t;
                                  }),
                            _setPrototypeOf(t, e)
                        );
                    }
                    function _toPrimitive(t, r) {
                        if ('object' != typeof t || !t) return t;
                        var e = t[Symbol.toPrimitive];
                        if (void 0 !== e) {
                            var i = e.call(t, r || 'default');
                            if ('object' != typeof i) return i;
                            throw new TypeError('@@toPrimitive must return a primitive value.');
                        }
                        return ('string' === r ? String : Number)(t);
                    }
                    function _toPropertyKey(t) {
                        var i = _toPrimitive(t, 'string');
                        return 'symbol' == typeof i ? i : i + '';
                    }
                    function _unsupportedIterableToArray(r, a) {
                        if (r) {
                            if ('string' == typeof r) return _arrayLikeToArray(r, a);
                            var t = {}.toString.call(r).slice(8, -1);
                            return (
                                'Object' === t && r.constructor && (t = r.constructor.name),
                                'Map' === t || 'Set' === t
                                    ? Array.from(r)
                                    : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                                    ? _arrayLikeToArray(r, a)
                                    : void 0
                            );
                        }
                    }

                    var storedAnnotationsSymbol = /*#__PURE__*/ Symbol('mobx-stored-annotations');
                    /**
                     * Creates a function that acts as
                     * - decorator
                     * - annotation object
                     */
                    function createDecoratorAnnotation(annotation) {
                        function decorator(target, property) {
                            if (is20223Decorator(property)) {
                                return annotation.decorate_20223_(target, property);
                            } else {
                                storeAnnotation(target, property, annotation);
                            }
                        }
                        return Object.assign(decorator, annotation);
                    }
                    /**
                     * Stores annotation to prototype,
                     * so it can be inspected later by `makeObservable` called from constructor
                     */
                    function storeAnnotation(prototype, key, annotation) {
                        if (!hasProp(prototype, storedAnnotationsSymbol)) {
                            addHiddenProp(
                                prototype,
                                storedAnnotationsSymbol,
                                _extends({}, prototype[storedAnnotationsSymbol]),
                            );
                        }
                        // @override must override something
                        if (false) {
                            var fieldName;
                        }
                        // Cannot re-decorate
                        assertNotDecorated(prototype, annotation, key);
                        // Ignore override
                        if (!isOverride(annotation)) {
                            prototype[storedAnnotationsSymbol][key] = annotation;
                        }
                    }
                    function assertNotDecorated(prototype, annotation, key) {
                        if (false) {
                            var requestedAnnotationType, currentAnnotationType, fieldName;
                        }
                    }
                    /**
                     * Collects annotations from prototypes and stores them on target (instance)
                     */
                    function collectStoredAnnotations(target) {
                        if (!hasProp(target, storedAnnotationsSymbol)) {
                            // if (__DEV__ && !target[storedAnnotationsSymbol]) {
                            //     die(
                            //         `No annotations were passed to makeObservable, but no decorated members have been found either`
                            //     )
                            // }
                            // We need a copy as we will remove annotation from the list once it's applied.
                            addHiddenProp(
                                target,
                                storedAnnotationsSymbol,
                                _extends({}, target[storedAnnotationsSymbol]),
                            );
                        }
                        return target[storedAnnotationsSymbol];
                    }
                    function is20223Decorator(context) {
                        return typeof context == 'object' && typeof context['kind'] == 'string';
                    }
                    function assert20223DecoratorType(context, types) {
                        if (false) {
                        }
                    }

                    var $mobx = /*#__PURE__*/ Symbol('mobx administration');
                    var Atom = /*#__PURE__*/ (function () {
                        /**
                         * Create a new atom. For debugging purposes it is recommended to give it a name.
                         * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
                         */
                        function Atom(name_) {
                            if (name_ === void 0) {
                                name_ = false ? undefined : 'Atom';
                            }
                            this.name_ = void 0;
                            this.flags_ = 0;
                            this.observers_ = new Set();
                            this.lastAccessedBy_ = 0;
                            this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
                            // onBecomeObservedListeners
                            this.onBOL = void 0;
                            // onBecomeUnobservedListeners
                            this.onBUOL = void 0;
                            this.name_ = name_;
                        }
                        // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
                        var _proto = Atom.prototype;
                        _proto.onBO = function onBO() {
                            if (this.onBOL) {
                                this.onBOL.forEach(function (listener) {
                                    return listener();
                                });
                            }
                        };
                        _proto.onBUO = function onBUO() {
                            if (this.onBUOL) {
                                this.onBUOL.forEach(function (listener) {
                                    return listener();
                                });
                            }
                        };
                        /**
                         * Invoke this method to notify mobx that your atom has been used somehow.
                         * Returns true if there is currently a reactive context.
                         */
                        _proto.reportObserved = function reportObserved$1() {
                            return reportObserved(this);
                        };
                        /**
                         * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
                         */
                        _proto.reportChanged = function reportChanged() {
                            startBatch();
                            propagateChanged(this);
                            endBatch();
                        };
                        _proto.toString = function toString() {
                            return this.name_;
                        };
                        return _createClass(Atom, [
                            {
                                key: 'isBeingObserved',
                                get: function get() {
                                    return getFlag(this.flags_, Atom.isBeingObservedMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, Atom.isBeingObservedMask_, newValue);
                                },
                            },
                            {
                                key: 'isPendingUnobservation',
                                get: function get() {
                                    return getFlag(this.flags_, Atom.isPendingUnobservationMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, Atom.isPendingUnobservationMask_, newValue);
                                },
                            },
                            {
                                key: 'diffValue',
                                get: function get() {
                                    return getFlag(this.flags_, Atom.diffValueMask_) ? 1 : 0;
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(
                                        this.flags_,
                                        Atom.diffValueMask_,
                                        newValue === 1 ? true : false,
                                    );
                                },
                            },
                        ]);
                    })();
                    Atom.isBeingObservedMask_ = 1;
                    Atom.isPendingUnobservationMask_ = 2;
                    Atom.diffValueMask_ = 4;
                    var isAtom = /*#__PURE__*/ createInstanceofPredicate('Atom', Atom);
                    function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
                        if (onBecomeObservedHandler === void 0) {
                            onBecomeObservedHandler = noop;
                        }
                        if (onBecomeUnobservedHandler === void 0) {
                            onBecomeUnobservedHandler = noop;
                        }
                        var atom = new Atom(name);
                        // default `noop` listener will not initialize the hook Set
                        if (onBecomeObservedHandler !== noop) {
                            onBecomeObserved(atom, onBecomeObservedHandler);
                        }
                        if (onBecomeUnobservedHandler !== noop) {
                            onBecomeUnobserved(atom, onBecomeUnobservedHandler);
                        }
                        return atom;
                    }

                    function identityComparer(a, b) {
                        return a === b;
                    }
                    function structuralComparer(a, b) {
                        return deepEqual(a, b);
                    }
                    function shallowComparer(a, b) {
                        return deepEqual(a, b, 1);
                    }
                    function defaultComparer(a, b) {
                        if (Object.is) {
                            return Object.is(a, b);
                        }
                        return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
                    }
                    var comparer = {
                        identity: identityComparer,
                        structural: structuralComparer,
                        default: defaultComparer,
                        shallow: shallowComparer,
                    };

                    function deepEnhancer(v, _, name) {
                        // it is an observable already, done
                        if (isObservable(v)) {
                            return v;
                        }
                        // something that can be converted and mutated?
                        if (Array.isArray(v)) {
                            return observable.array(v, {
                                name: name,
                            });
                        }
                        if (isPlainObject(v)) {
                            return observable.object(v, undefined, {
                                name: name,
                            });
                        }
                        if (isES6Map(v)) {
                            return observable.map(v, {
                                name: name,
                            });
                        }
                        if (isES6Set(v)) {
                            return observable.set(v, {
                                name: name,
                            });
                        }
                        if (typeof v === 'function' && !isAction(v) && !isFlow(v)) {
                            if (isGenerator(v)) {
                                return flow(v);
                            } else {
                                return autoAction(name, v);
                            }
                        }
                        return v;
                    }
                    function shallowEnhancer(v, _, name) {
                        if (v === undefined || v === null) {
                            return v;
                        }
                        if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
                            return v;
                        }
                        if (Array.isArray(v)) {
                            return observable.array(v, {
                                name: name,
                                deep: false,
                            });
                        }
                        if (isPlainObject(v)) {
                            return observable.object(v, undefined, {
                                name: name,
                                deep: false,
                            });
                        }
                        if (isES6Map(v)) {
                            return observable.map(v, {
                                name: name,
                                deep: false,
                            });
                        }
                        if (isES6Set(v)) {
                            return observable.set(v, {
                                name: name,
                                deep: false,
                            });
                        }
                        if (false) {
                        }
                    }
                    function referenceEnhancer(newValue) {
                        // never turn into an observable
                        return newValue;
                    }
                    function refStructEnhancer(v, oldValue) {
                        if (false) {
                        }
                        if (deepEqual(v, oldValue)) {
                            return oldValue;
                        }
                        return v;
                    }

                    var OVERRIDE = 'override';
                    var override = /*#__PURE__*/ createDecoratorAnnotation({
                        annotationType_: OVERRIDE,
                        make_: make_,
                        extend_: extend_,
                        decorate_20223_: decorate_20223_,
                    });
                    function isOverride(annotation) {
                        return annotation.annotationType_ === OVERRIDE;
                    }
                    function make_(adm, key) {
                        // Must not be plain object
                        if (false) {
                        }
                        // Must override something
                        if (false) {
                        }
                        return 0 /* MakeResult.Cancel */;
                    }
                    function extend_(adm, key, descriptor, proxyTrap) {
                        die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
                    }
                    function decorate_20223_(desc, context) {
                        console.warn("'" + this.annotationType_ + "' cannot be used with decorators - this is a no-op");
                    }

                    function createActionAnnotation(name, options) {
                        return {
                            annotationType_: name,
                            options_: options,
                            make_: make_$1,
                            extend_: extend_$1,
                            decorate_20223_: decorate_20223_$1,
                        };
                    }
                    function make_$1(adm, key, descriptor, source) {
                        var _this$options_;
                        // bound
                        if ((_this$options_ = this.options_) != null && _this$options_.bound) {
                            return this.extend_(adm, key, descriptor, false) === null
                                ? 0 /* MakeResult.Cancel */
                                : 1 /* MakeResult.Break */;
                        }
                        // own
                        if (source === adm.target_) {
                            return this.extend_(adm, key, descriptor, false) === null
                                ? 0 /* MakeResult.Cancel */
                                : 2 /* MakeResult.Continue */;
                        }
                        // prototype
                        if (isAction(descriptor.value)) {
                            // A prototype could have been annotated already by other constructor,
                            // rest of the proto chain must be annotated already
                            return 1 /* MakeResult.Break */;
                        }
                        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
                        defineProperty(source, key, actionDescriptor);
                        return 2 /* MakeResult.Continue */;
                    }
                    function extend_$1(adm, key, descriptor, proxyTrap) {
                        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
                        return adm.defineProperty_(key, actionDescriptor, proxyTrap);
                    }
                    function decorate_20223_$1(mthd, context) {
                        if (false) {
                        }
                        var kind = context.kind,
                            name = context.name,
                            addInitializer = context.addInitializer;
                        var ann = this;
                        var _createAction = function _createAction(m) {
                            var _ann$options_$name, _ann$options_, _ann$options_$autoAct, _ann$options_2;
                            return createAction(
                                (_ann$options_$name =
                                    (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.name) != null
                                    ? _ann$options_$name
                                    : name.toString(),
                                m,
                                (_ann$options_$autoAct =
                                    (_ann$options_2 = ann.options_) == null ? void 0 : _ann$options_2.autoAction) !=
                                    null
                                    ? _ann$options_$autoAct
                                    : false,
                            );
                        };
                        if (kind == 'field') {
                            return function (initMthd) {
                                var _ann$options_3;
                                var mthd = initMthd;
                                if (!isAction(mthd)) {
                                    mthd = _createAction(mthd);
                                }
                                if ((_ann$options_3 = ann.options_) != null && _ann$options_3.bound) {
                                    mthd = mthd.bind(this);
                                    mthd.isMobxAction = true;
                                }
                                return mthd;
                            };
                        }
                        if (kind == 'method') {
                            var _this$options_2;
                            if (!isAction(mthd)) {
                                mthd = _createAction(mthd);
                            }
                            if ((_this$options_2 = this.options_) != null && _this$options_2.bound) {
                                addInitializer(function () {
                                    var self = this;
                                    var bound = self[name].bind(self);
                                    bound.isMobxAction = true;
                                    self[name] = bound;
                                });
                            }
                            return mthd;
                        }
                        die(
                            "Cannot apply '" +
                                ann.annotationType_ +
                                "' to '" +
                                String(name) +
                                "' (kind: " +
                                kind +
                                '):' +
                                ("\n'" +
                                    ann.annotationType_ +
                                    "' can only be used on properties with a function value."),
                        );
                    }
                    function assertActionDescriptor(adm, _ref, key, _ref2) {
                        var annotationType_ = _ref.annotationType_;
                        var value = _ref2.value;
                        if (false) {
                        }
                    }
                    function createActionDescriptor(
                        adm,
                        annotation,
                        key,
                        descriptor,
                        // provides ability to disable safeDescriptors for prototypes
                        safeDescriptors,
                    ) {
                        var _annotation$options_,
                            _annotation$options_$,
                            _annotation$options_2,
                            _annotation$options_$2,
                            _annotation$options_3,
                            _annotation$options_4,
                            _adm$proxy_2;
                        if (safeDescriptors === void 0) {
                            safeDescriptors = globalState.safeDescriptors;
                        }
                        assertActionDescriptor(adm, annotation, key, descriptor);
                        var value = descriptor.value;
                        if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
                            var _adm$proxy_;
                            value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
                        }
                        return {
                            value: createAction(
                                (_annotation$options_$ =
                                    (_annotation$options_2 = annotation.options_) == null
                                        ? void 0
                                        : _annotation$options_2.name) != null
                                    ? _annotation$options_$
                                    : key.toString(),
                                value,
                                (_annotation$options_$2 =
                                    (_annotation$options_3 = annotation.options_) == null
                                        ? void 0
                                        : _annotation$options_3.autoAction) != null
                                    ? _annotation$options_$2
                                    : false,
                                // https://github.com/mobxjs/mobx/discussions/3140
                                (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound
                                    ? (_adm$proxy_2 = adm.proxy_) != null
                                        ? _adm$proxy_2
                                        : adm.target_
                                    : undefined,
                            ),
                            // Non-configurable for classes
                            // prevents accidental field redefinition in subclass
                            configurable: safeDescriptors ? adm.isPlainObject_ : true,
                            // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
                            enumerable: false,
                            // Non-obsevable, therefore non-writable
                            // Also prevents rewriting in subclass constructor
                            writable: safeDescriptors ? false : true,
                        };
                    }

                    function createFlowAnnotation(name, options) {
                        return {
                            annotationType_: name,
                            options_: options,
                            make_: make_$2,
                            extend_: extend_$2,
                            decorate_20223_: decorate_20223_$2,
                        };
                    }
                    function make_$2(adm, key, descriptor, source) {
                        var _this$options_;
                        // own
                        if (source === adm.target_) {
                            return this.extend_(adm, key, descriptor, false) === null
                                ? 0 /* MakeResult.Cancel */
                                : 2 /* MakeResult.Continue */;
                        }
                        // prototype
                        // bound - must annotate protos to support super.flow()
                        if (
                            (_this$options_ = this.options_) != null &&
                            _this$options_.bound &&
                            (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))
                        ) {
                            if (this.extend_(adm, key, descriptor, false) === null) {
                                return 0 /* MakeResult.Cancel */;
                            }
                        }
                        if (isFlow(descriptor.value)) {
                            // A prototype could have been annotated already by other constructor,
                            // rest of the proto chain must be annotated already
                            return 1 /* MakeResult.Break */;
                        }
                        var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
                        defineProperty(source, key, flowDescriptor);
                        return 2 /* MakeResult.Continue */;
                    }
                    function extend_$2(adm, key, descriptor, proxyTrap) {
                        var _this$options_2;
                        var flowDescriptor = createFlowDescriptor(
                            adm,
                            this,
                            key,
                            descriptor,
                            (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound,
                        );
                        return adm.defineProperty_(key, flowDescriptor, proxyTrap);
                    }
                    function decorate_20223_$2(mthd, context) {
                        var _this$options_3;
                        if (false) {
                        }
                        var name = context.name,
                            addInitializer = context.addInitializer;
                        if (!isFlow(mthd)) {
                            mthd = flow(mthd);
                        }
                        if ((_this$options_3 = this.options_) != null && _this$options_3.bound) {
                            addInitializer(function () {
                                var self = this;
                                var bound = self[name].bind(self);
                                bound.isMobXFlow = true;
                                self[name] = bound;
                            });
                        }
                        return mthd;
                    }
                    function assertFlowDescriptor(adm, _ref, key, _ref2) {
                        var annotationType_ = _ref.annotationType_;
                        var value = _ref2.value;
                        if (false) {
                        }
                    }
                    function createFlowDescriptor(
                        adm,
                        annotation,
                        key,
                        descriptor,
                        bound,
                        // provides ability to disable safeDescriptors for prototypes
                        safeDescriptors,
                    ) {
                        if (safeDescriptors === void 0) {
                            safeDescriptors = globalState.safeDescriptors;
                        }
                        assertFlowDescriptor(adm, annotation, key, descriptor);
                        var value = descriptor.value;
                        // In case of flow.bound, the descriptor can be from already annotated prototype
                        if (!isFlow(value)) {
                            value = flow(value);
                        }
                        if (bound) {
                            var _adm$proxy_;
                            // We do not keep original function around, so we bind the existing flow
                            value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
                            // This is normally set by `flow`, but `bind` returns new function...
                            value.isMobXFlow = true;
                        }
                        return {
                            value: value,
                            // Non-configurable for classes
                            // prevents accidental field redefinition in subclass
                            configurable: safeDescriptors ? adm.isPlainObject_ : true,
                            // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
                            enumerable: false,
                            // Non-obsevable, therefore non-writable
                            // Also prevents rewriting in subclass constructor
                            writable: safeDescriptors ? false : true,
                        };
                    }

                    function createComputedAnnotation(name, options) {
                        return {
                            annotationType_: name,
                            options_: options,
                            make_: make_$3,
                            extend_: extend_$3,
                            decorate_20223_: decorate_20223_$3,
                        };
                    }
                    function make_$3(adm, key, descriptor) {
                        return this.extend_(adm, key, descriptor, false) === null
                            ? 0 /* MakeResult.Cancel */
                            : 1 /* MakeResult.Break */;
                    }
                    function extend_$3(adm, key, descriptor, proxyTrap) {
                        assertComputedDescriptor(adm, this, key, descriptor);
                        return adm.defineComputedProperty_(
                            key,
                            _extends({}, this.options_, {
                                get: descriptor.get,
                                set: descriptor.set,
                            }),
                            proxyTrap,
                        );
                    }
                    function decorate_20223_$3(get, context) {
                        if (false) {
                        }
                        var ann = this;
                        var key = context.name,
                            addInitializer = context.addInitializer;
                        addInitializer(function () {
                            var adm = asObservableObject(this)[$mobx];
                            var options = _extends({}, ann.options_, {
                                get: get,
                                context: this,
                            });
                            options.name || (options.name = false ? undefined : 'ObservableObject.' + key.toString());
                            adm.values_.set(key, new ComputedValue(options));
                        });
                        return function () {
                            return this[$mobx].getObservablePropValue_(key);
                        };
                    }
                    function assertComputedDescriptor(adm, _ref, key, _ref2) {
                        var annotationType_ = _ref.annotationType_;
                        var get = _ref2.get;
                        if (false) {
                        }
                    }

                    function createObservableAnnotation(name, options) {
                        return {
                            annotationType_: name,
                            options_: options,
                            make_: make_$4,
                            extend_: extend_$4,
                            decorate_20223_: decorate_20223_$4,
                        };
                    }
                    function make_$4(adm, key, descriptor) {
                        return this.extend_(adm, key, descriptor, false) === null
                            ? 0 /* MakeResult.Cancel */
                            : 1 /* MakeResult.Break */;
                    }
                    function extend_$4(adm, key, descriptor, proxyTrap) {
                        var _this$options_$enhanc, _this$options_;
                        assertObservableDescriptor(adm, this, key, descriptor);
                        return adm.defineObservableProperty_(
                            key,
                            descriptor.value,
                            (_this$options_$enhanc =
                                (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null
                                ? _this$options_$enhanc
                                : deepEnhancer,
                            proxyTrap,
                        );
                    }
                    function decorate_20223_$4(desc, context) {
                        if (false) {
                        }
                        var ann = this;
                        var kind = context.kind,
                            name = context.name;
                        // The laziness here is not ideal... It's a workaround to how 2022.3 Decorators are implemented:
                        //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).
                        //   This means that, if we were to do our stuff in an `addInitializer`, we'd attempt to read a private slot
                        //   before it has been initialized. The runtime doesn't like that and throws a `Cannot read private member
                        //   from an object whose class did not declare it` error.
                        // TODO: it seems that this will not be required anymore in the final version of the spec
                        // See TODO: link
                        var initializedObjects = new WeakSet();
                        function initializeObservable(target, value) {
                            var _ann$options_$enhance, _ann$options_;
                            var adm = asObservableObject(target)[$mobx];
                            var observable = new ObservableValue(
                                value,
                                (_ann$options_$enhance =
                                    (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.enhancer) != null
                                    ? _ann$options_$enhance
                                    : deepEnhancer,
                                false ? undefined : 'ObservableObject.' + name.toString(),
                                false,
                            );
                            adm.values_.set(name, observable);
                            initializedObjects.add(target);
                        }
                        if (kind == 'accessor') {
                            return {
                                get: function get() {
                                    if (!initializedObjects.has(this)) {
                                        initializeObservable(this, desc.get.call(this));
                                    }
                                    return this[$mobx].getObservablePropValue_(name);
                                },
                                set: function set(value) {
                                    if (!initializedObjects.has(this)) {
                                        initializeObservable(this, value);
                                    }
                                    return this[$mobx].setObservablePropValue_(name, value);
                                },
                                init: function init(value) {
                                    if (!initializedObjects.has(this)) {
                                        initializeObservable(this, value);
                                    }
                                    return value;
                                },
                            };
                        }
                        return;
                    }
                    function assertObservableDescriptor(adm, _ref, key, descriptor) {
                        var annotationType_ = _ref.annotationType_;
                        if (false) {
                        }
                    }

                    var AUTO = 'true';
                    var autoAnnotation = /*#__PURE__*/ createAutoAnnotation();
                    function createAutoAnnotation(options) {
                        return {
                            annotationType_: AUTO,
                            options_: options,
                            make_: make_$5,
                            extend_: extend_$5,
                            decorate_20223_: decorate_20223_$5,
                        };
                    }
                    function make_$5(adm, key, descriptor, source) {
                        var _this$options_3, _this$options_4;
                        // getter -> computed
                        if (descriptor.get) {
                            return computed.make_(adm, key, descriptor, source);
                        }
                        // lone setter -> action setter
                        if (descriptor.set) {
                            // TODO make action applicable to setter and delegate to action.make_
                            var set = createAction(key.toString(), descriptor.set);
                            // own
                            if (source === adm.target_) {
                                return adm.defineProperty_(key, {
                                    configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
                                    set: set,
                                }) === null
                                    ? 0 /* MakeResult.Cancel */
                                    : 2 /* MakeResult.Continue */;
                            }
                            // proto
                            defineProperty(source, key, {
                                configurable: true,
                                set: set,
                            });
                            return 2 /* MakeResult.Continue */;
                        }
                        // function on proto -> autoAction/flow
                        if (source !== adm.target_ && typeof descriptor.value === 'function') {
                            var _this$options_2;
                            if (isGenerator(descriptor.value)) {
                                var _this$options_;
                                var flowAnnotation =
                                    (_this$options_ = this.options_) != null && _this$options_.autoBind
                                        ? flow.bound
                                        : flow;
                                return flowAnnotation.make_(adm, key, descriptor, source);
                            }
                            var actionAnnotation =
                                (_this$options_2 = this.options_) != null && _this$options_2.autoBind
                                    ? autoAction.bound
                                    : autoAction;
                            return actionAnnotation.make_(adm, key, descriptor, source);
                        }
                        // other -> observable
                        // Copy props from proto as well, see test:
                        // "decorate should work with Object.create"
                        var observableAnnotation =
                            ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false
                                ? observable.ref
                                : observable;
                        // if function respect autoBind option
                        if (
                            typeof descriptor.value === 'function' &&
                            (_this$options_4 = this.options_) != null &&
                            _this$options_4.autoBind
                        ) {
                            var _adm$proxy_;
                            descriptor.value = descriptor.value.bind(
                                (_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_,
                            );
                        }
                        return observableAnnotation.make_(adm, key, descriptor, source);
                    }
                    function extend_$5(adm, key, descriptor, proxyTrap) {
                        var _this$options_5, _this$options_6;
                        // getter -> computed
                        if (descriptor.get) {
                            return computed.extend_(adm, key, descriptor, proxyTrap);
                        }
                        // lone setter -> action setter
                        if (descriptor.set) {
                            // TODO make action applicable to setter and delegate to action.extend_
                            return adm.defineProperty_(
                                key,
                                {
                                    configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
                                    set: createAction(key.toString(), descriptor.set),
                                },
                                proxyTrap,
                            );
                        }
                        // other -> observable
                        // if function respect autoBind option
                        if (
                            typeof descriptor.value === 'function' &&
                            (_this$options_5 = this.options_) != null &&
                            _this$options_5.autoBind
                        ) {
                            var _adm$proxy_2;
                            descriptor.value = descriptor.value.bind(
                                (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_,
                            );
                        }
                        var observableAnnotation =
                            ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false
                                ? observable.ref
                                : observable;
                        return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);
                    }
                    function decorate_20223_$5(desc, context) {
                        die("'" + this.annotationType_ + "' cannot be used as a decorator");
                    }

                    var OBSERVABLE = 'observable';
                    var OBSERVABLE_REF = 'observable.ref';
                    var OBSERVABLE_SHALLOW = 'observable.shallow';
                    var OBSERVABLE_STRUCT = 'observable.struct';
                    // Predefined bags of create observable options, to avoid allocating temporarily option objects
                    // in the majority of cases
                    var defaultCreateObservableOptions = {
                        deep: true,
                        name: undefined,
                        defaultDecorator: undefined,
                        proxy: true,
                    };
                    Object.freeze(defaultCreateObservableOptions);
                    function asCreateObservableOptions(thing) {
                        return thing || defaultCreateObservableOptions;
                    }
                    var observableAnnotation = /*#__PURE__*/ createObservableAnnotation(OBSERVABLE);
                    var observableRefAnnotation = /*#__PURE__*/ createObservableAnnotation(OBSERVABLE_REF, {
                        enhancer: referenceEnhancer,
                    });
                    var observableShallowAnnotation = /*#__PURE__*/ createObservableAnnotation(OBSERVABLE_SHALLOW, {
                        enhancer: shallowEnhancer,
                    });
                    var observableStructAnnotation = /*#__PURE__*/ createObservableAnnotation(OBSERVABLE_STRUCT, {
                        enhancer: refStructEnhancer,
                    });
                    var observableDecoratorAnnotation = /*#__PURE__*/ createDecoratorAnnotation(observableAnnotation);
                    function getEnhancerFromOptions(options) {
                        return options.deep === true
                            ? deepEnhancer
                            : options.deep === false
                            ? referenceEnhancer
                            : getEnhancerFromAnnotation(options.defaultDecorator);
                    }
                    function getAnnotationFromOptions(options) {
                        var _options$defaultDecor;
                        return options
                            ? (_options$defaultDecor = options.defaultDecorator) != null
                                ? _options$defaultDecor
                                : createAutoAnnotation(options)
                            : undefined;
                    }
                    function getEnhancerFromAnnotation(annotation) {
                        var _annotation$options_$, _annotation$options_;
                        return !annotation
                            ? deepEnhancer
                            : (_annotation$options_$ =
                                  (_annotation$options_ = annotation.options_) == null
                                      ? void 0
                                      : _annotation$options_.enhancer) != null
                            ? _annotation$options_$
                            : deepEnhancer;
                    }
                    /**
                     * Turns an object, array or function into a reactive structure.
                     * @param v the value which should become observable.
                     */
                    function createObservable(v, arg2, arg3) {
                        // @observable someProp; (2022.3 Decorators)
                        if (is20223Decorator(arg2)) {
                            return observableAnnotation.decorate_20223_(v, arg2);
                        }
                        // @observable someProp;
                        if (isStringish(arg2)) {
                            storeAnnotation(v, arg2, observableAnnotation);
                            return;
                        }
                        // already observable - ignore
                        if (isObservable(v)) {
                            return v;
                        }
                        // plain object
                        if (isPlainObject(v)) {
                            return observable.object(v, arg2, arg3);
                        }
                        // Array
                        if (Array.isArray(v)) {
                            return observable.array(v, arg2);
                        }
                        // Map
                        if (isES6Map(v)) {
                            return observable.map(v, arg2);
                        }
                        // Set
                        if (isES6Set(v)) {
                            return observable.set(v, arg2);
                        }
                        // other object - ignore
                        if (typeof v === 'object' && v !== null) {
                            return v;
                        }
                        // anything else
                        return observable.box(v, arg2);
                    }
                    assign(createObservable, observableDecoratorAnnotation);
                    var observableFactories = {
                        box: function box(value, options) {
                            var o = asCreateObservableOptions(options);
                            return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
                        },
                        array: function array(initialValues, options) {
                            var o = asCreateObservableOptions(options);
                            return (
                                globalState.useProxies === false || o.proxy === false
                                    ? createLegacyArray
                                    : createObservableArray
                            )(initialValues, getEnhancerFromOptions(o), o.name);
                        },
                        map: function map(initialValues, options) {
                            var o = asCreateObservableOptions(options);
                            return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
                        },
                        set: function set(initialValues, options) {
                            var o = asCreateObservableOptions(options);
                            return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
                        },
                        object: function object(props, decorators, options) {
                            return initObservable(function () {
                                return extendObservable(
                                    globalState.useProxies === false ||
                                        (options == null ? void 0 : options.proxy) === false
                                        ? asObservableObject({}, options)
                                        : asDynamicObservableObject({}, options),
                                    props,
                                    decorators,
                                );
                            });
                        },
                        ref: /*#__PURE__*/ createDecoratorAnnotation(observableRefAnnotation),
                        shallow: /*#__PURE__*/ createDecoratorAnnotation(observableShallowAnnotation),
                        deep: observableDecoratorAnnotation,
                        struct: /*#__PURE__*/ createDecoratorAnnotation(observableStructAnnotation),
                    };
                    // eslint-disable-next-line
                    var observable = /*#__PURE__*/ assign(createObservable, observableFactories);

                    var COMPUTED = 'computed';
                    var COMPUTED_STRUCT = 'computed.struct';
                    var computedAnnotation = /*#__PURE__*/ createComputedAnnotation(COMPUTED);
                    var computedStructAnnotation = /*#__PURE__*/ createComputedAnnotation(COMPUTED_STRUCT, {
                        equals: comparer.structural,
                    });
                    /**
                     * Decorator for class properties: @computed get value() { return expr; }.
                     * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
                     */
                    var computed = function computed(arg1, arg2) {
                        if (is20223Decorator(arg2)) {
                            // @computed (2022.3 Decorators)
                            return computedAnnotation.decorate_20223_(arg1, arg2);
                        }
                        if (isStringish(arg2)) {
                            // @computed
                            return storeAnnotation(arg1, arg2, computedAnnotation);
                        }
                        if (isPlainObject(arg1)) {
                            // @computed({ options })
                            return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
                        }
                        // computed(expr, options?)
                        if (false) {
                        }
                        var opts = isPlainObject(arg2) ? arg2 : {};
                        opts.get = arg1;
                        opts.name || (opts.name = arg1.name || ''); /* for generated name */
                        return new ComputedValue(opts);
                    };
                    Object.assign(computed, computedAnnotation);
                    computed.struct = /*#__PURE__*/ createDecoratorAnnotation(computedStructAnnotation);

                    var _getDescriptor$config, _getDescriptor;
                    // we don't use globalState for these in order to avoid possible issues with multiple
                    // mobx versions
                    var currentActionId = 0;
                    var nextActionId = 1;
                    var isFunctionNameConfigurable =
                        (_getDescriptor$config =
                            (_getDescriptor = /*#__PURE__*/ getDescriptor(function () {}, 'name')) == null
                                ? void 0
                                : _getDescriptor.configurable) != null
                            ? _getDescriptor$config
                            : false;
                    // we can safely recycle this object
                    var tmpNameDescriptor = {
                        value: 'action',
                        configurable: true,
                        writable: false,
                        enumerable: false,
                    };
                    function createAction(actionName, fn, autoAction, ref) {
                        if (autoAction === void 0) {
                            autoAction = false;
                        }
                        if (false) {
                        }
                        function res() {
                            return executeAction(actionName, autoAction, fn, ref || this, arguments);
                        }
                        res.isMobxAction = true;
                        res.toString = function () {
                            return fn.toString();
                        };
                        if (isFunctionNameConfigurable) {
                            tmpNameDescriptor.value = actionName;
                            defineProperty(res, 'name', tmpNameDescriptor);
                        }
                        return res;
                    }
                    function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
                        var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
                        try {
                            return fn.apply(scope, args);
                        } catch (err) {
                            runInfo.error_ = err;
                            throw err;
                        } finally {
                            _endAction(runInfo);
                        }
                    }
                    function _startAction(
                        actionName,
                        canRunAsDerivation,
                        // true for autoAction
                        scope,
                        args,
                    ) {
                        var notifySpy_ = false && false;
                        var startTime_ = 0;
                        if (false) {
                            var flattenedArgs;
                        }
                        var prevDerivation_ = globalState.trackingDerivation;
                        var runAsAction = !canRunAsDerivation || !prevDerivation_;
                        startBatch();
                        var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow
                        if (runAsAction) {
                            untrackedStart();
                            prevAllowStateChanges_ = allowStateChangesStart(true);
                        }
                        var prevAllowStateReads_ = allowStateReadsStart(true);
                        var runInfo = {
                            runAsAction_: runAsAction,
                            prevDerivation_: prevDerivation_,
                            prevAllowStateChanges_: prevAllowStateChanges_,
                            prevAllowStateReads_: prevAllowStateReads_,
                            notifySpy_: notifySpy_,
                            startTime_: startTime_,
                            actionId_: nextActionId++,
                            parentActionId_: currentActionId,
                        };
                        currentActionId = runInfo.actionId_;
                        return runInfo;
                    }
                    function _endAction(runInfo) {
                        if (currentActionId !== runInfo.actionId_) {
                            die(30);
                        }
                        currentActionId = runInfo.parentActionId_;
                        if (runInfo.error_ !== undefined) {
                            globalState.suppressReactionErrors = true;
                        }
                        allowStateChangesEnd(runInfo.prevAllowStateChanges_);
                        allowStateReadsEnd(runInfo.prevAllowStateReads_);
                        endBatch();
                        if (runInfo.runAsAction_) {
                            untrackedEnd(runInfo.prevDerivation_);
                        }
                        if (false) {
                        }
                        globalState.suppressReactionErrors = false;
                    }
                    function allowStateChanges(allowStateChanges, func) {
                        var prev = allowStateChangesStart(allowStateChanges);
                        try {
                            return func();
                        } finally {
                            allowStateChangesEnd(prev);
                        }
                    }
                    function allowStateChangesStart(allowStateChanges) {
                        var prev = globalState.allowStateChanges;
                        globalState.allowStateChanges = allowStateChanges;
                        return prev;
                    }
                    function allowStateChangesEnd(prev) {
                        globalState.allowStateChanges = prev;
                    }

                    var CREATE = 'create';
                    var ObservableValue = /*#__PURE__*/ (function (_Atom) {
                        function ObservableValue(value, enhancer, name_, notifySpy, equals) {
                            var _this;
                            if (name_ === void 0) {
                                name_ = false ? undefined : 'ObservableValue';
                            }
                            if (notifySpy === void 0) {
                                notifySpy = true;
                            }
                            if (equals === void 0) {
                                equals = comparer['default'];
                            }
                            _this = _Atom.call(this, name_) || this;
                            _this.enhancer = void 0;
                            _this.name_ = void 0;
                            _this.equals = void 0;
                            _this.hasUnreportedChange_ = false;
                            _this.interceptors_ = void 0;
                            _this.changeListeners_ = void 0;
                            _this.value_ = void 0;
                            _this.dehancer = void 0;
                            _this.enhancer = enhancer;
                            _this.name_ = name_;
                            _this.equals = equals;
                            _this.value_ = enhancer(value, undefined, name_);
                            if (false) {
                            }
                            return _this;
                        }
                        _inheritsLoose(ObservableValue, _Atom);
                        var _proto = ObservableValue.prototype;
                        _proto.dehanceValue = function dehanceValue(value) {
                            if (this.dehancer !== undefined) {
                                return this.dehancer(value);
                            }
                            return value;
                        };
                        _proto.set = function set(newValue) {
                            var oldValue = this.value_;
                            newValue = this.prepareNewValue_(newValue);
                            if (newValue !== globalState.UNCHANGED) {
                                var notifySpy = isSpyEnabled();
                                if (false) {
                                }
                                this.setNewValue_(newValue);
                                if (false) {
                                }
                            }
                        };
                        _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
                            checkIfStateModificationsAreAllowed(this);
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    object: this,
                                    type: UPDATE,
                                    newValue: newValue,
                                });
                                if (!change) {
                                    return globalState.UNCHANGED;
                                }
                                newValue = change.newValue;
                            }
                            // apply modifier
                            newValue = this.enhancer(newValue, this.value_, this.name_);
                            return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
                        };
                        _proto.setNewValue_ = function setNewValue_(newValue) {
                            var oldValue = this.value_;
                            this.value_ = newValue;
                            this.reportChanged();
                            if (hasListeners(this)) {
                                notifyListeners(this, {
                                    type: UPDATE,
                                    object: this,
                                    newValue: newValue,
                                    oldValue: oldValue,
                                });
                            }
                        };
                        _proto.get = function get() {
                            this.reportObserved();
                            return this.dehanceValue(this.value_);
                        };
                        _proto.intercept_ = function intercept_(handler) {
                            return registerInterceptor(this, handler);
                        };
                        _proto.observe_ = function observe_(listener, fireImmediately) {
                            if (fireImmediately) {
                                listener({
                                    observableKind: 'value',
                                    debugObjectName: this.name_,
                                    object: this,
                                    type: UPDATE,
                                    newValue: this.value_,
                                    oldValue: undefined,
                                });
                            }
                            return registerListener(this, listener);
                        };
                        _proto.raw = function raw() {
                            // used by MST ot get undehanced value
                            return this.value_;
                        };
                        _proto.toJSON = function toJSON() {
                            return this.get();
                        };
                        _proto.toString = function toString() {
                            return this.name_ + '[' + this.value_ + ']';
                        };
                        _proto.valueOf = function valueOf() {
                            return toPrimitive(this.get());
                        };
                        _proto[Symbol.toPrimitive] = function () {
                            return this.valueOf();
                        };
                        return ObservableValue;
                    })(Atom);
                    var isObservableValue = /*#__PURE__*/ createInstanceofPredicate('ObservableValue', ObservableValue);

                    /**
                     * A node in the state dependency root that observes other nodes, and can be observed itself.
                     *
                     * ComputedValue will remember the result of the computation for the duration of the batch, or
                     * while being observed.
                     *
                     * During this time it will recompute only when one of its direct dependencies changed,
                     * but only when it is being accessed with `ComputedValue.get()`.
                     *
                     * Implementation description:
                     * 1. First time it's being accessed it will compute and remember result
                     *    give back remembered result until 2. happens
                     * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
                     * 3. When it's being accessed, recompute if any shallow dependency changed.
                     *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
                     *    go to step 2. either way
                     *
                     * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
                     */
                    var ComputedValue = /*#__PURE__*/ (function () {
                        /**
                         * Create a new computed value based on a function expression.
                         *
                         * The `name` property is for debug purposes only.
                         *
                         * The `equals` property specifies the comparer function to use to determine if a newly produced
                         * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
                         * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
                         * Structural comparison can be convenient if you always produce a new aggregated object and
                         * don't want to notify observers if it is structurally the same.
                         * This is useful for working with vectors, mouse coordinates etc.
                         */
                        function ComputedValue(options) {
                            this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
                            this.observing_ = [];
                            // nodes we are looking at. Our value depends on these nodes
                            this.newObserving_ = null;
                            // during tracking it's an array with new observed observers
                            this.observers_ = new Set();
                            this.runId_ = 0;
                            this.lastAccessedBy_ = 0;
                            this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
                            this.unboundDepsCount_ = 0;
                            this.value_ = new CaughtException(null);
                            this.name_ = void 0;
                            this.triggeredBy_ = void 0;
                            this.flags_ = 0;
                            this.derivation = void 0;
                            // N.B: unminified as it is used by MST
                            this.setter_ = void 0;
                            this.isTracing_ = TraceMode.NONE;
                            this.scope_ = void 0;
                            this.equals_ = void 0;
                            this.requiresReaction_ = void 0;
                            this.keepAlive_ = void 0;
                            this.onBOL = void 0;
                            this.onBUOL = void 0;
                            if (!options.get) {
                                die(31);
                            }
                            this.derivation = options.get;
                            this.name_ = options.name || (false ? undefined : 'ComputedValue');
                            if (options.set) {
                                this.setter_ = createAction(false ? undefined : 'ComputedValue-setter', options.set);
                            }
                            this.equals_ =
                                options.equals ||
                                (options.compareStructural || options.struct
                                    ? comparer.structural
                                    : comparer['default']);
                            this.scope_ = options.context;
                            this.requiresReaction_ = options.requiresReaction;
                            this.keepAlive_ = !!options.keepAlive;
                        }
                        var _proto = ComputedValue.prototype;
                        _proto.onBecomeStale_ = function onBecomeStale_() {
                            propagateMaybeChanged(this);
                        };
                        _proto.onBO = function onBO() {
                            if (this.onBOL) {
                                this.onBOL.forEach(function (listener) {
                                    return listener();
                                });
                            }
                        };
                        _proto.onBUO = function onBUO() {
                            if (this.onBUOL) {
                                this.onBUOL.forEach(function (listener) {
                                    return listener();
                                });
                            }
                        };
                        // to check for cycles
                        /**
                         * Returns the current value of this computed value.
                         * Will evaluate its computation first if needed.
                         */
                        _proto.get = function get() {
                            if (this.isComputing) {
                                die(32, this.name_, this.derivation);
                            }
                            if (
                                globalState.inBatch === 0 &&
                                // !globalState.trackingDerivatpion &&
                                this.observers_.size === 0 &&
                                !this.keepAlive_
                            ) {
                                if (shouldCompute(this)) {
                                    this.warnAboutUntrackedRead_();
                                    startBatch(); // See perf test 'computed memoization'
                                    this.value_ = this.computeValue_(false);
                                    endBatch();
                                }
                            } else {
                                reportObserved(this);
                                if (shouldCompute(this)) {
                                    var prevTrackingContext = globalState.trackingContext;
                                    if (this.keepAlive_ && !prevTrackingContext) {
                                        globalState.trackingContext = this;
                                    }
                                    if (this.trackAndCompute()) {
                                        propagateChangeConfirmed(this);
                                    }
                                    globalState.trackingContext = prevTrackingContext;
                                }
                            }
                            var result = this.value_;
                            if (isCaughtException(result)) {
                                throw result.cause;
                            }
                            return result;
                        };
                        _proto.set = function set(value) {
                            if (this.setter_) {
                                if (this.isRunningSetter) {
                                    die(33, this.name_);
                                }
                                this.isRunningSetter = true;
                                try {
                                    this.setter_.call(this.scope_, value);
                                } finally {
                                    this.isRunningSetter = false;
                                }
                            } else {
                                die(34, this.name_);
                            }
                        };
                        _proto.trackAndCompute = function trackAndCompute() {
                            // N.B: unminified as it is used by MST
                            var oldValue = this.value_;
                            var wasSuspended =
                                /* see #1208 */ this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
                            var newValue = this.computeValue_(true);
                            var changed =
                                wasSuspended ||
                                isCaughtException(oldValue) ||
                                isCaughtException(newValue) ||
                                !this.equals_(oldValue, newValue);
                            if (changed) {
                                this.value_ = newValue;
                                if (false) {
                                }
                            }
                            return changed;
                        };
                        _proto.computeValue_ = function computeValue_(track) {
                            this.isComputing = true;
                            // don't allow state changes during computation
                            var prev = allowStateChangesStart(false);
                            var res;
                            if (track) {
                                res = trackDerivedFunction(this, this.derivation, this.scope_);
                            } else {
                                if (globalState.disableErrorBoundaries === true) {
                                    res = this.derivation.call(this.scope_);
                                } else {
                                    try {
                                        res = this.derivation.call(this.scope_);
                                    } catch (e) {
                                        res = new CaughtException(e);
                                    }
                                }
                            }
                            allowStateChangesEnd(prev);
                            this.isComputing = false;
                            return res;
                        };
                        _proto.suspend_ = function suspend_() {
                            if (!this.keepAlive_) {
                                clearObserving(this);
                                this.value_ = undefined; // don't hold on to computed value!
                                if (false) {
                                }
                            }
                        };
                        _proto.observe_ = function observe_(listener, fireImmediately) {
                            var _this = this;
                            var firstTime = true;
                            var prevValue = undefined;
                            return autorun(function () {
                                // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
                                var newValue = _this.get();
                                if (!firstTime || fireImmediately) {
                                    var prevU = untrackedStart();
                                    listener({
                                        observableKind: 'computed',
                                        debugObjectName: _this.name_,
                                        type: UPDATE,
                                        object: _this,
                                        newValue: newValue,
                                        oldValue: prevValue,
                                    });
                                    untrackedEnd(prevU);
                                }
                                firstTime = false;
                                prevValue = newValue;
                            });
                        };
                        _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
                            if (true) {
                                return;
                            }
                            if (this.isTracing_ !== TraceMode.NONE) {
                                console.log(
                                    "[mobx.trace] Computed value '" +
                                        this.name_ +
                                        "' is being read outside a reactive context. Doing a full recompute.",
                                );
                            }
                            if (
                                typeof this.requiresReaction_ === 'boolean'
                                    ? this.requiresReaction_
                                    : globalState.computedRequiresReaction
                            ) {
                                console.warn(
                                    "[mobx] Computed value '" +
                                        this.name_ +
                                        "' is being read outside a reactive context. Doing a full recompute.",
                                );
                            }
                        };
                        _proto.toString = function toString() {
                            return this.name_ + '[' + this.derivation.toString() + ']';
                        };
                        _proto.valueOf = function valueOf() {
                            return toPrimitive(this.get());
                        };
                        _proto[Symbol.toPrimitive] = function () {
                            return this.valueOf();
                        };
                        return _createClass(ComputedValue, [
                            {
                                key: 'isComputing',
                                get: function get() {
                                    return getFlag(this.flags_, ComputedValue.isComputingMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, ComputedValue.isComputingMask_, newValue);
                                },
                            },
                            {
                                key: 'isRunningSetter',
                                get: function get() {
                                    return getFlag(this.flags_, ComputedValue.isRunningSetterMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, ComputedValue.isRunningSetterMask_, newValue);
                                },
                            },
                            {
                                key: 'isBeingObserved',
                                get: function get() {
                                    return getFlag(this.flags_, ComputedValue.isBeingObservedMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, ComputedValue.isBeingObservedMask_, newValue);
                                },
                            },
                            {
                                key: 'isPendingUnobservation',
                                get: function get() {
                                    return getFlag(this.flags_, ComputedValue.isPendingUnobservationMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(
                                        this.flags_,
                                        ComputedValue.isPendingUnobservationMask_,
                                        newValue,
                                    );
                                },
                            },
                            {
                                key: 'diffValue',
                                get: function get() {
                                    return getFlag(this.flags_, ComputedValue.diffValueMask_) ? 1 : 0;
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(
                                        this.flags_,
                                        ComputedValue.diffValueMask_,
                                        newValue === 1 ? true : false,
                                    );
                                },
                            },
                        ]);
                    })();
                    ComputedValue.isComputingMask_ = 1;
                    ComputedValue.isRunningSetterMask_ = 2;
                    ComputedValue.isBeingObservedMask_ = 4;
                    ComputedValue.isPendingUnobservationMask_ = 8;
                    ComputedValue.diffValueMask_ = 16;
                    var isComputedValue = /*#__PURE__*/ createInstanceofPredicate('ComputedValue', ComputedValue);

                    var IDerivationState_;
                    (function (IDerivationState_) {
                        // before being run or (outside batch and not being observed)
                        // at this point derivation is not holding any data about dependency tree
                        IDerivationState_[(IDerivationState_['NOT_TRACKING_'] = -1)] = 'NOT_TRACKING_';
                        // no shallow dependency changed since last computation
                        // won't recalculate derivation
                        // this is what makes mobx fast
                        IDerivationState_[(IDerivationState_['UP_TO_DATE_'] = 0)] = 'UP_TO_DATE_';
                        // some deep dependency changed, but don't know if shallow dependency changed
                        // will require to check first if UP_TO_DATE or POSSIBLY_STALE
                        // currently only ComputedValue will propagate POSSIBLY_STALE
                        //
                        // having this state is second big optimization:
                        // don't have to recompute on every dependency change, but only when it's needed
                        IDerivationState_[(IDerivationState_['POSSIBLY_STALE_'] = 1)] = 'POSSIBLY_STALE_';
                        // A shallow dependency has changed since last computation and the derivation
                        // will need to recompute when it's needed next.
                        IDerivationState_[(IDerivationState_['STALE_'] = 2)] = 'STALE_';
                    })(IDerivationState_ || (IDerivationState_ = {}));
                    var TraceMode;
                    (function (TraceMode) {
                        TraceMode[(TraceMode['NONE'] = 0)] = 'NONE';
                        TraceMode[(TraceMode['LOG'] = 1)] = 'LOG';
                        TraceMode[(TraceMode['BREAK'] = 2)] = 'BREAK';
                    })(TraceMode || (TraceMode = {}));
                    var CaughtException = function CaughtException(cause) {
                        this.cause = void 0;
                        this.cause = cause;
                        // Empty
                    };
                    function isCaughtException(e) {
                        return e instanceof CaughtException;
                    }
                    /**
                     * Finds out whether any dependency of the derivation has actually changed.
                     * If dependenciesState is 1 then it will recalculate dependencies,
                     * if any dependency changed it will propagate it by changing dependenciesState to 2.
                     *
                     * By iterating over the dependencies in the same order that they were reported and
                     * stopping on the first change, all the recalculations are only called for ComputedValues
                     * that will be tracked by derivation. That is because we assume that if the first x
                     * dependencies of the derivation doesn't change then the derivation should run the same way
                     * up until accessing x-th dependency.
                     */
                    function shouldCompute(derivation) {
                        switch (derivation.dependenciesState_) {
                            case IDerivationState_.UP_TO_DATE_:
                                return false;
                            case IDerivationState_.NOT_TRACKING_:
                            case IDerivationState_.STALE_:
                                return true;
                            case IDerivationState_.POSSIBLY_STALE_: {
                                // state propagation can occur outside of action/reactive context #2195
                                var prevAllowStateReads = allowStateReadsStart(true);
                                var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
                                var obs = derivation.observing_,
                                    l = obs.length;
                                for (var i = 0; i < l; i++) {
                                    var obj = obs[i];
                                    if (isComputedValue(obj)) {
                                        if (globalState.disableErrorBoundaries) {
                                            obj.get();
                                        } else {
                                            try {
                                                obj.get();
                                            } catch (e) {
                                                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                                                untrackedEnd(prevUntracked);
                                                allowStateReadsEnd(prevAllowStateReads);
                                                return true;
                                            }
                                        }
                                        // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                                        // and `derivation` is an observer of `obj`
                                        // invariantShouldCompute(derivation)
                                        if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
                                            untrackedEnd(prevUntracked);
                                            allowStateReadsEnd(prevAllowStateReads);
                                            return true;
                                        }
                                    }
                                }
                                changeDependenciesStateTo0(derivation);
                                untrackedEnd(prevUntracked);
                                allowStateReadsEnd(prevAllowStateReads);
                                return false;
                            }
                        }
                    }
                    function isComputingDerivation() {
                        return globalState.trackingDerivation !== null; // filter out actions inside computations
                    }
                    function checkIfStateModificationsAreAllowed(atom) {
                        if (true) {
                            return;
                        }
                        var hasObservers = atom.observers_.size > 0;
                        // Should not be possible to change observed state outside strict mode, except during initialization, see #563
                        if (
                            !globalState.allowStateChanges &&
                            (hasObservers || globalState.enforceActions === 'always')
                        ) {
                            console.warn(
                                '[MobX] ' +
                                    (globalState.enforceActions
                                        ? 'Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: '
                                        : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") +
                                    atom.name_,
                            );
                        }
                    }
                    function checkIfStateReadsAreAllowed(observable) {
                        if (false) {
                        }
                    }
                    /**
                     * Executes the provided function `f` and tracks which observables are being accessed.
                     * The tracking information is stored on the `derivation` object and the derivation is registered
                     * as observer of any of the accessed observables.
                     */
                    function trackDerivedFunction(derivation, f, context) {
                        var prevAllowStateReads = allowStateReadsStart(true);
                        changeDependenciesStateTo0(derivation);
                        // Preallocate array; will be trimmed by bindDependencies.
                        derivation.newObserving_ = new Array(
                            // Reserve constant space for initial dependencies, dynamic space otherwise.
                            // See https://github.com/mobxjs/mobx/pull/3833
                            derivation.runId_ === 0 ? 100 : derivation.observing_.length,
                        );
                        derivation.unboundDepsCount_ = 0;
                        derivation.runId_ = ++globalState.runId;
                        var prevTracking = globalState.trackingDerivation;
                        globalState.trackingDerivation = derivation;
                        globalState.inBatch++;
                        var result;
                        if (globalState.disableErrorBoundaries === true) {
                            result = f.call(context);
                        } else {
                            try {
                                result = f.call(context);
                            } catch (e) {
                                result = new CaughtException(e);
                            }
                        }
                        globalState.inBatch--;
                        globalState.trackingDerivation = prevTracking;
                        bindDependencies(derivation);
                        warnAboutDerivationWithoutDependencies(derivation);
                        allowStateReadsEnd(prevAllowStateReads);
                        return result;
                    }
                    function warnAboutDerivationWithoutDependencies(derivation) {
                        if (true) {
                            return;
                        }
                        if (derivation.observing_.length !== 0) {
                            return;
                        }
                        if (
                            typeof derivation.requiresObservable_ === 'boolean'
                                ? derivation.requiresObservable_
                                : globalState.reactionRequiresObservable
                        ) {
                            console.warn(
                                "[mobx] Derivation '" +
                                    derivation.name_ +
                                    "' is created/updated without reading any observable value.",
                            );
                        }
                    }
                    /**
                     * diffs newObserving with observing.
                     * update observing to be newObserving with unique observables
                     * notify observers that become observed/unobserved
                     */
                    function bindDependencies(derivation) {
                        // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
                        var prevObserving = derivation.observing_;
                        var observing = (derivation.observing_ = derivation.newObserving_);
                        var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
                        // Go through all new observables and check diffValue: (this list can contain duplicates):
                        //   0: first occurrence, change to 1 and keep it
                        //   1: extra occurrence, drop it
                        var i0 = 0,
                            l = derivation.unboundDepsCount_;
                        for (var i = 0; i < l; i++) {
                            var dep = observing[i];
                            if (dep.diffValue === 0) {
                                dep.diffValue = 1;
                                if (i0 !== i) {
                                    observing[i0] = dep;
                                }
                                i0++;
                            }
                            // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
                            // not hitting the condition
                            if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
                                lowestNewObservingDerivationState = dep.dependenciesState_;
                            }
                        }
                        observing.length = i0;
                        derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
                        // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
                        //   0: it's not in new observables, unobserve it
                        //   1: it keeps being observed, don't want to notify it. change to 0
                        l = prevObserving.length;
                        while (l--) {
                            var _dep = prevObserving[l];
                            if (_dep.diffValue === 0) {
                                removeObserver(_dep, derivation);
                            }
                            _dep.diffValue = 0;
                        }
                        // Go through all new observables and check diffValue: (now it should be unique)
                        //   0: it was set to 0 in last loop. don't need to do anything.
                        //   1: it wasn't observed, let's observe it. set back to 0
                        while (i0--) {
                            var _dep2 = observing[i0];
                            if (_dep2.diffValue === 1) {
                                _dep2.diffValue = 0;
                                addObserver(_dep2, derivation);
                            }
                        }
                        // Some new observed derivations may become stale during this derivation computation
                        // so they have had no chance to propagate staleness (#916)
                        if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
                            derivation.dependenciesState_ = lowestNewObservingDerivationState;
                            derivation.onBecomeStale_();
                        }
                    }
                    function clearObserving(derivation) {
                        // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
                        var obs = derivation.observing_;
                        derivation.observing_ = [];
                        var i = obs.length;
                        while (i--) {
                            removeObserver(obs[i], derivation);
                        }
                        derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
                    }
                    function untracked(action) {
                        var prev = untrackedStart();
                        try {
                            return action();
                        } finally {
                            untrackedEnd(prev);
                        }
                    }
                    function untrackedStart() {
                        var prev = globalState.trackingDerivation;
                        globalState.trackingDerivation = null;
                        return prev;
                    }
                    function untrackedEnd(prev) {
                        globalState.trackingDerivation = prev;
                    }
                    function allowStateReadsStart(allowStateReads) {
                        var prev = globalState.allowStateReads;
                        globalState.allowStateReads = allowStateReads;
                        return prev;
                    }
                    function allowStateReadsEnd(prev) {
                        globalState.allowStateReads = prev;
                    }
                    /**
                     * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
                     *
                     */
                    function changeDependenciesStateTo0(derivation) {
                        if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
                            return;
                        }
                        derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
                        var obs = derivation.observing_;
                        var i = obs.length;
                        while (i--) {
                            obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
                        }
                    }

                    /**
                     * These values will persist if global state is reset
                     */
                    var persistentKeys = [
                        'mobxGuid',
                        'spyListeners',
                        'enforceActions',
                        'computedRequiresReaction',
                        'reactionRequiresObservable',
                        'observableRequiresReaction',
                        'allowStateReads',
                        'disableErrorBoundaries',
                        'runId',
                        'UNCHANGED',
                        'useProxies',
                    ];
                    var MobXGlobals = function MobXGlobals() {
                        /**
                         * MobXGlobals version.
                         * MobX compatiblity with other versions loaded in memory as long as this version matches.
                         * It indicates that the global state still stores similar information
                         *
                         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
                         * internal state storage of MobX, and can be the same across many different package versions
                         */
                        this.version = 6;
                        /**
                         * globally unique token to signal unchanged
                         */
                        this.UNCHANGED = {};
                        /**
                         * Currently running derivation
                         */
                        this.trackingDerivation = null;
                        /**
                         * Currently running reaction. This determines if we currently have a reactive context.
                         * (Tracking derivation is also set for temporal tracking of computed values inside actions,
                         * but trackingReaction can only be set by a form of Reaction)
                         */
                        this.trackingContext = null;
                        /**
                         * Each time a derivation is tracked, it is assigned a unique run-id
                         */
                        this.runId = 0;
                        /**
                         * 'guid' for general purpose. Will be persisted amongst resets.
                         */
                        this.mobxGuid = 0;
                        /**
                         * Are we in a batch block? (and how many of them)
                         */
                        this.inBatch = 0;
                        /**
                         * Observables that don't have observers anymore, and are about to be
                         * suspended, unless somebody else accesses it in the same batch
                         *
                         * @type {IObservable[]}
                         */
                        this.pendingUnobservations = [];
                        /**
                         * List of scheduled, not yet executed, reactions.
                         */
                        this.pendingReactions = [];
                        /**
                         * Are we currently processing reactions?
                         */
                        this.isRunningReactions = false;
                        /**
                         * Is it allowed to change observables at this point?
                         * In general, MobX doesn't allow that when running computations and React.render.
                         * To ensure that those functions stay pure.
                         */
                        this.allowStateChanges = false;
                        /**
                         * Is it allowed to read observables at this point?
                         * Used to hold the state needed for `observableRequiresReaction`
                         */
                        this.allowStateReads = true;
                        /**
                         * If strict mode is enabled, state changes are by default not allowed
                         */
                        this.enforceActions = true;
                        /**
                         * Spy callbacks
                         */
                        this.spyListeners = [];
                        /**
                         * Globally attached error handlers that react specifically to errors in reactions
                         */
                        this.globalReactionErrorHandlers = [];
                        /**
                         * Warn if computed values are accessed outside a reactive context
                         */
                        this.computedRequiresReaction = false;
                        /**
                         * (Experimental)
                         * Warn if you try to create to derivation / reactive context without accessing any observable.
                         */
                        this.reactionRequiresObservable = false;
                        /**
                         * (Experimental)
                         * Warn if observables are accessed outside a reactive context
                         */
                        this.observableRequiresReaction = false;
                        /*
                         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
                         * the stack when an exception occurs while debugging.
                         */
                        this.disableErrorBoundaries = false;
                        /*
                         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
                         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
                         */
                        this.suppressReactionErrors = false;
                        this.useProxies = true;
                        /*
                         * print warnings about code that would fail if proxies weren't available
                         */
                        this.verifyProxies = false;
                        /**
                         * False forces all object's descriptors to
                         * writable: true
                         * configurable: true
                         */
                        this.safeDescriptors = true;
                    };
                    var canMergeGlobalState = true;
                    var isolateCalled = false;
                    var globalState = /*#__PURE__*/ (function () {
                        var global = /*#__PURE__*/ getGlobal();
                        if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {
                            canMergeGlobalState = false;
                        }
                        if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {
                            canMergeGlobalState = false;
                        }
                        if (!canMergeGlobalState) {
                            // Because this is a IIFE we need to let isolateCalled a chance to change
                            // so we run it after the event loop completed at least 1 iteration
                            setTimeout(function () {
                                if (!isolateCalled) {
                                    die(35);
                                }
                            }, 1);
                            return new MobXGlobals();
                        } else if (global.__mobxGlobals) {
                            global.__mobxInstanceCount += 1;
                            if (!global.__mobxGlobals.UNCHANGED) {
                                global.__mobxGlobals.UNCHANGED = {};
                            } // make merge backward compatible
                            return global.__mobxGlobals;
                        } else {
                            global.__mobxInstanceCount = 1;
                            return (global.__mobxGlobals = /*#__PURE__*/ new MobXGlobals());
                        }
                    })();
                    function isolateGlobalState() {
                        if (
                            globalState.pendingReactions.length ||
                            globalState.inBatch ||
                            globalState.isRunningReactions
                        ) {
                            die(36);
                        }
                        isolateCalled = true;
                        if (canMergeGlobalState) {
                            var global = getGlobal();
                            if (--global.__mobxInstanceCount === 0) {
                                global.__mobxGlobals = undefined;
                            }
                            globalState = new MobXGlobals();
                        }
                    }
                    function getGlobalState() {
                        return globalState;
                    }
                    /**
                     * For testing purposes only; this will break the internal state of existing observables,
                     * but can be used to get back at a stable state after throwing errors
                     */
                    function resetGlobalState() {
                        var defaultGlobals = new MobXGlobals();
                        for (var key in defaultGlobals) {
                            if (persistentKeys.indexOf(key) === -1) {
                                globalState[key] = defaultGlobals[key];
                            }
                        }
                        globalState.allowStateChanges = !globalState.enforceActions;
                    }

                    function hasObservers(observable) {
                        return observable.observers_ && observable.observers_.size > 0;
                    }
                    function getObservers(observable) {
                        return observable.observers_;
                    }
                    // function invariantObservers(observable: IObservable) {
                    //     const list = observable.observers
                    //     const map = observable.observersIndexes
                    //     const l = list.length
                    //     for (let i = 0; i < l; i++) {
                    //         const id = list[i].__mapid
                    //         if (i) {
                    //             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
                    //         } else {
                    //             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
                    //         }
                    //     }
                    //     invariant(
                    //         list.length === 0 || Object.keys(map).length === list.length - 1,
                    //         "INTERNAL ERROR there is no junk in map"
                    //     )
                    // }
                    function addObserver(observable, node) {
                        // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
                        // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
                        // invariantObservers(observable);
                        observable.observers_.add(node);
                        if (observable.lowestObserverState_ > node.dependenciesState_) {
                            observable.lowestObserverState_ = node.dependenciesState_;
                        }
                        // invariantObservers(observable);
                        // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
                    }
                    function removeObserver(observable, node) {
                        // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
                        // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
                        // invariantObservers(observable);
                        observable.observers_['delete'](node);
                        if (observable.observers_.size === 0) {
                            // deleting last observer
                            queueForUnobservation(observable);
                        }
                        // invariantObservers(observable);
                        // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
                    }
                    function queueForUnobservation(observable) {
                        if (observable.isPendingUnobservation === false) {
                            // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
                            observable.isPendingUnobservation = true;
                            globalState.pendingUnobservations.push(observable);
                        }
                    }
                    /**
                     * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
                     * During a batch `onBecomeUnobserved` will be called at most once per observable.
                     * Avoids unnecessary recalculations.
                     */
                    function startBatch() {
                        globalState.inBatch++;
                    }
                    function endBatch() {
                        if (--globalState.inBatch === 0) {
                            runReactions();
                            // the batch is actually about to finish, all unobserving should happen here.
                            var list = globalState.pendingUnobservations;
                            for (var i = 0; i < list.length; i++) {
                                var observable = list[i];
                                observable.isPendingUnobservation = false;
                                if (observable.observers_.size === 0) {
                                    if (observable.isBeingObserved) {
                                        // if this observable had reactive observers, trigger the hooks
                                        observable.isBeingObserved = false;
                                        observable.onBUO();
                                    }
                                    if (observable instanceof ComputedValue) {
                                        // computed values are automatically teared down when the last observer leaves
                                        // this process happens recursively, this computed might be the last observabe of another, etc..
                                        observable.suspend_();
                                    }
                                }
                            }
                            globalState.pendingUnobservations = [];
                        }
                    }
                    function reportObserved(observable) {
                        checkIfStateReadsAreAllowed(observable);
                        var derivation = globalState.trackingDerivation;
                        if (derivation !== null) {
                            /**
                             * Simple optimization, give each derivation run an unique id (runId)
                             * Check if last time this observable was accessed the same runId is used
                             * if this is the case, the relation is already known
                             */
                            if (derivation.runId_ !== observable.lastAccessedBy_) {
                                observable.lastAccessedBy_ = derivation.runId_;
                                // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
                                derivation.newObserving_[derivation.unboundDepsCount_++] = observable;
                                if (!observable.isBeingObserved && globalState.trackingContext) {
                                    observable.isBeingObserved = true;
                                    observable.onBO();
                                }
                            }
                            return observable.isBeingObserved;
                        } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
                            queueForUnobservation(observable);
                        }
                        return false;
                    }
                    // function invariantLOS(observable: IObservable, msg: string) {
                    //     // it's expensive so better not run it in produciton. but temporarily helpful for testing
                    //     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
                    //     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
                    //     throw new Error(
                    //         "lowestObserverState is wrong for " +
                    //             msg +
                    //             " because " +
                    //             min +
                    //             " < " +
                    //             observable.lowestObserverState
                    //     )
                    // }
                    /**
                     * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
                     * It will propagate changes to observers from previous run
                     * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
                     * Hopefully self reruning autoruns aren't a feature people should depend on
                     * Also most basic use cases should be ok
                     */
                    // Called by Atom when its value changes
                    function propagateChanged(observable) {
                        // invariantLOS(observable, "changed start");
                        if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
                            return;
                        }
                        observable.lowestObserverState_ = IDerivationState_.STALE_;
                        // Ideally we use for..of here, but the downcompiled version is really slow...
                        observable.observers_.forEach(function (d) {
                            if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
                                if (false) {
                                }
                                d.onBecomeStale_();
                            }
                            d.dependenciesState_ = IDerivationState_.STALE_;
                        });
                        // invariantLOS(observable, "changed end");
                    }
                    // Called by ComputedValue when it recalculate and its value changed
                    function propagateChangeConfirmed(observable) {
                        // invariantLOS(observable, "confirmed start");
                        if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
                            return;
                        }
                        observable.lowestObserverState_ = IDerivationState_.STALE_;
                        observable.observers_.forEach(function (d) {
                            if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
                                d.dependenciesState_ = IDerivationState_.STALE_;
                                if (false) {
                                }
                            } else if (
                                d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
                            ) {
                                observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
                            }
                        });
                        // invariantLOS(observable, "confirmed end");
                    }
                    // Used by computed when its dependency changed, but we don't wan't to immediately recompute.
                    function propagateMaybeChanged(observable) {
                        // invariantLOS(observable, "maybe start");
                        if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
                            return;
                        }
                        observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
                        observable.observers_.forEach(function (d) {
                            if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
                                d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
                                d.onBecomeStale_();
                            }
                        });
                        // invariantLOS(observable, "maybe end");
                    }
                    function logTraceInfo(derivation, observable) {
                        console.log(
                            "[mobx.trace] '" +
                                derivation.name_ +
                                "' is invalidated due to a change in: '" +
                                observable.name_ +
                                "'",
                        );
                        if (derivation.isTracing_ === TraceMode.BREAK) {
                            var lines = [];
                            printDepTree(getDependencyTree(derivation), lines, 1);
                            // prettier-ignore
                            new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
                        }
                    }
                    function printDepTree(tree, lines, depth) {
                        if (lines.length >= 1000) {
                            lines.push('(and many more)');
                            return;
                        }
                        lines.push('' + '\t'.repeat(depth - 1) + tree.name);
                        if (tree.dependencies) {
                            tree.dependencies.forEach(function (child) {
                                return printDepTree(child, lines, depth + 1);
                            });
                        }
                    }

                    var Reaction = /*#__PURE__*/ (function () {
                        function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
                            if (name_ === void 0) {
                                name_ = false ? undefined : 'Reaction';
                            }
                            this.name_ = void 0;
                            this.onInvalidate_ = void 0;
                            this.errorHandler_ = void 0;
                            this.requiresObservable_ = void 0;
                            this.observing_ = [];
                            // nodes we are looking at. Our value depends on these nodes
                            this.newObserving_ = [];
                            this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
                            this.runId_ = 0;
                            this.unboundDepsCount_ = 0;
                            this.flags_ = 0;
                            this.isTracing_ = TraceMode.NONE;
                            this.name_ = name_;
                            this.onInvalidate_ = onInvalidate_;
                            this.errorHandler_ = errorHandler_;
                            this.requiresObservable_ = requiresObservable_;
                        }
                        var _proto = Reaction.prototype;
                        _proto.onBecomeStale_ = function onBecomeStale_() {
                            this.schedule_();
                        };
                        _proto.schedule_ = function schedule_() {
                            if (!this.isScheduled) {
                                this.isScheduled = true;
                                globalState.pendingReactions.push(this);
                                runReactions();
                            }
                        };
                        /**
                         * internal, use schedule() if you intend to kick off a reaction
                         */
                        _proto.runReaction_ = function runReaction_() {
                            if (!this.isDisposed) {
                                startBatch();
                                this.isScheduled = false;
                                var prev = globalState.trackingContext;
                                globalState.trackingContext = this;
                                if (shouldCompute(this)) {
                                    this.isTrackPending = true;
                                    try {
                                        this.onInvalidate_();
                                        if (false) {
                                        }
                                    } catch (e) {
                                        this.reportExceptionInDerivation_(e);
                                    }
                                }
                                globalState.trackingContext = prev;
                                endBatch();
                            }
                        };
                        _proto.track = function track(fn) {
                            if (this.isDisposed) {
                                return;
                                // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
                            }
                            startBatch();
                            var notify = isSpyEnabled();
                            var startTime;
                            if (false) {
                            }
                            this.isRunning = true;
                            var prevReaction = globalState.trackingContext; // reactions could create reactions...
                            globalState.trackingContext = this;
                            var result = trackDerivedFunction(this, fn, undefined);
                            globalState.trackingContext = prevReaction;
                            this.isRunning = false;
                            this.isTrackPending = false;
                            if (this.isDisposed) {
                                // disposed during last run. Clean up everything that was bound after the dispose call.
                                clearObserving(this);
                            }
                            if (isCaughtException(result)) {
                                this.reportExceptionInDerivation_(result.cause);
                            }
                            if (false) {
                            }
                            endBatch();
                        };
                        _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
                            var _this = this;
                            if (this.errorHandler_) {
                                this.errorHandler_(error, this);
                                return;
                            }
                            if (globalState.disableErrorBoundaries) {
                                throw error;
                            }
                            var message = false ? undefined : "[mobx] uncaught error in '" + this + "'";
                            if (!globalState.suppressReactionErrors) {
      console.error(message, error);
      /** If debugging brought you here, please, read the above message :-). Tnx! */
    } else if (false) {} // prettier-ignore
                            if (false) {
                            }
                            globalState.globalReactionErrorHandlers.forEach(function (f) {
                                return f(error, _this);
                            });
                        };
                        _proto.dispose = function dispose() {
                            if (!this.isDisposed) {
                                this.isDisposed = true;
                                if (!this.isRunning) {
                                    // if disposed while running, clean up later. Maybe not optimal, but rare case
                                    startBatch();
                                    clearObserving(this);
                                    endBatch();
                                }
                            }
                        };
                        _proto.getDisposer_ = function getDisposer_(abortSignal) {
                            var _this2 = this;
                            var dispose = function dispose() {
                                _this2.dispose();
                                abortSignal == null ||
                                    abortSignal.removeEventListener == null ||
                                    abortSignal.removeEventListener('abort', dispose);
                            };
                            abortSignal == null ||
                                abortSignal.addEventListener == null ||
                                abortSignal.addEventListener('abort', dispose);
                            dispose[$mobx] = this;
                            return dispose;
                        };
                        _proto.toString = function toString() {
                            return 'Reaction[' + this.name_ + ']';
                        };
                        _proto.trace = function trace$1(enterBreakPoint) {
                            if (enterBreakPoint === void 0) {
                                enterBreakPoint = false;
                            }
                            trace(this, enterBreakPoint);
                        };
                        return _createClass(Reaction, [
                            {
                                key: 'isDisposed',
                                get: function get() {
                                    return getFlag(this.flags_, Reaction.isDisposedMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, Reaction.isDisposedMask_, newValue);
                                },
                            },
                            {
                                key: 'isScheduled',
                                get: function get() {
                                    return getFlag(this.flags_, Reaction.isScheduledMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, Reaction.isScheduledMask_, newValue);
                                },
                            },
                            {
                                key: 'isTrackPending',
                                get: function get() {
                                    return getFlag(this.flags_, Reaction.isTrackPendingMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, Reaction.isTrackPendingMask_, newValue);
                                },
                            },
                            {
                                key: 'isRunning',
                                get: function get() {
                                    return getFlag(this.flags_, Reaction.isRunningMask_);
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(this.flags_, Reaction.isRunningMask_, newValue);
                                },
                            },
                            {
                                key: 'diffValue',
                                get: function get() {
                                    return getFlag(this.flags_, Reaction.diffValueMask_) ? 1 : 0;
                                },
                                set: function set(newValue) {
                                    this.flags_ = setFlag(
                                        this.flags_,
                                        Reaction.diffValueMask_,
                                        newValue === 1 ? true : false,
                                    );
                                },
                            },
                        ]);
                    })();
                    Reaction.isDisposedMask_ = 1;
                    Reaction.isScheduledMask_ = 2;
                    Reaction.isTrackPendingMask_ = 4;
                    Reaction.isRunningMask_ = 8;
                    Reaction.diffValueMask_ = 16;
                    function onReactionError(handler) {
                        globalState.globalReactionErrorHandlers.push(handler);
                        return function () {
                            var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
                            if (idx >= 0) {
                                globalState.globalReactionErrorHandlers.splice(idx, 1);
                            }
                        };
                    }
                    /**
                     * Magic number alert!
                     * Defines within how many times a reaction is allowed to re-trigger itself
                     * until it is assumed that this is gonna be a never ending loop...
                     */
                    var MAX_REACTION_ITERATIONS = 100;
                    var reactionScheduler = function reactionScheduler(f) {
                        return f();
                    };
                    function runReactions() {
                        // Trampolining, if runReactions are already running, new reactions will be picked up
                        if (globalState.inBatch > 0 || globalState.isRunningReactions) {
                            return;
                        }
                        reactionScheduler(runReactionsHelper);
                    }
                    function runReactionsHelper() {
                        globalState.isRunningReactions = true;
                        var allReactions = globalState.pendingReactions;
                        var iterations = 0;
                        // While running reactions, new reactions might be triggered.
                        // Hence we work with two variables and check whether
                        // we converge to no remaining reactions after a while.
                        while (allReactions.length > 0) {
                            if (++iterations === MAX_REACTION_ITERATIONS) {
                                console.error(false ? undefined : '[mobx] cycle in reaction: ' + allReactions[0]);
                                allReactions.splice(0); // clear reactions
                            }
                            var remainingReactions = allReactions.splice(0);
                            for (var i = 0, l = remainingReactions.length; i < l; i++) {
                                remainingReactions[i].runReaction_();
                            }
                        }
                        globalState.isRunningReactions = false;
                    }
                    var isReaction = /*#__PURE__*/ createInstanceofPredicate('Reaction', Reaction);
                    function setReactionScheduler(fn) {
                        var baseScheduler = reactionScheduler;
                        reactionScheduler = function reactionScheduler(f) {
                            return fn(function () {
                                return baseScheduler(f);
                            });
                        };
                    }

                    function isSpyEnabled() {
                        return false && false;
                    }
                    function spyReport(event) {
                        if (true) {
                            return;
                        } // dead code elimination can do the rest
                        if (!globalState.spyListeners.length) {
                            return;
                        }
                        var listeners = globalState.spyListeners;
                        for (var i = 0, l = listeners.length; i < l; i++) {
                            listeners[i](event);
                        }
                    }
                    function spyReportStart(event) {
                        if (true) {
                            return;
                        }
                        var change = _extends({}, event, {
                            spyReportStart: true,
                        });
                        spyReport(change);
                    }
                    var END_EVENT = {
                        type: 'report-end',
                        spyReportEnd: true,
                    };
                    function spyReportEnd(change) {
                        if (true) {
                            return;
                        }
                        if (change) {
                            spyReport(
                                _extends({}, change, {
                                    type: 'report-end',
                                    spyReportEnd: true,
                                }),
                            );
                        } else {
                            spyReport(END_EVENT);
                        }
                    }
                    function spy(listener) {
                        if (true) {
                            console.warn('[mobx.spy] Is a no-op in production builds');
                            return function () {};
                        } else {
                        }
                    }

                    var ACTION = 'action';
                    var ACTION_BOUND = 'action.bound';
                    var AUTOACTION = 'autoAction';
                    var AUTOACTION_BOUND = 'autoAction.bound';
                    var DEFAULT_ACTION_NAME = '<unnamed action>';
                    var actionAnnotation = /*#__PURE__*/ createActionAnnotation(ACTION);
                    var actionBoundAnnotation = /*#__PURE__*/ createActionAnnotation(ACTION_BOUND, {
                        bound: true,
                    });
                    var autoActionAnnotation = /*#__PURE__*/ createActionAnnotation(AUTOACTION, {
                        autoAction: true,
                    });
                    var autoActionBoundAnnotation = /*#__PURE__*/ createActionAnnotation(AUTOACTION_BOUND, {
                        autoAction: true,
                        bound: true,
                    });
                    function createActionFactory(autoAction) {
                        var res = function action(arg1, arg2) {
                            // action(fn() {})
                            if (isFunction(arg1)) {
                                return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);
                            }
                            // action("name", fn() {})
                            if (isFunction(arg2)) {
                                return createAction(arg1, arg2, autoAction);
                            }
                            // @action (2022.3 Decorators)
                            if (is20223Decorator(arg2)) {
                                return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(
                                    arg1,
                                    arg2,
                                );
                            }
                            // @action
                            if (isStringish(arg2)) {
                                return storeAnnotation(
                                    arg1,
                                    arg2,
                                    autoAction ? autoActionAnnotation : actionAnnotation,
                                );
                            }
                            // action("name") & @action("name")
                            if (isStringish(arg1)) {
                                return createDecoratorAnnotation(
                                    createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
                                        name: arg1,
                                        autoAction: autoAction,
                                    }),
                                );
                            }
                            if (false) {
                            }
                        };
                        return res;
                    }
                    var action = /*#__PURE__*/ createActionFactory(false);
                    Object.assign(action, actionAnnotation);
                    var autoAction = /*#__PURE__*/ createActionFactory(true);
                    Object.assign(autoAction, autoActionAnnotation);
                    action.bound = /*#__PURE__*/ createDecoratorAnnotation(actionBoundAnnotation);
                    autoAction.bound = /*#__PURE__*/ createDecoratorAnnotation(autoActionBoundAnnotation);
                    function runInAction(fn) {
                        return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
                    }
                    function isAction(thing) {
                        return isFunction(thing) && thing.isMobxAction === true;
                    }

                    /**
                     * Creates a named reactive view and keeps it alive, so that the view is always
                     * updated if one of the dependencies changes, even when the view is not further used by something else.
                     * @param view The reactive view
                     * @returns disposer function, which can be used to stop the view from being updated in the future.
                     */
                    function autorun(view, opts) {
                        var _opts$name, _opts, _opts2, _opts3;
                        if (opts === void 0) {
                            opts = EMPTY_OBJECT;
                        }
                        if (false) {
                        }
                        var name =
                            (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null
                                ? _opts$name
                                : false
                                ? undefined
                                : 'Autorun';
                        var runSync = !opts.scheduler && !opts.delay;
                        var reaction;
                        if (runSync) {
                            // normal autorun
                            reaction = new Reaction(
                                name,
                                function () {
                                    this.track(reactionRunner);
                                },
                                opts.onError,
                                opts.requiresObservable,
                            );
                        } else {
                            var scheduler = createSchedulerFromOptions(opts);
                            // debounced autorun
                            var isScheduled = false;
                            reaction = new Reaction(
                                name,
                                function () {
                                    if (!isScheduled) {
                                        isScheduled = true;
                                        scheduler(function () {
                                            isScheduled = false;
                                            if (!reaction.isDisposed) {
                                                reaction.track(reactionRunner);
                                            }
                                        });
                                    }
                                },
                                opts.onError,
                                opts.requiresObservable,
                            );
                        }
                        function reactionRunner() {
                            view(reaction);
                        }
                        if (!((_opts2 = opts) != null && (_opts2 = _opts2.signal) != null && _opts2.aborted)) {
                            reaction.schedule_();
                        }
                        return reaction.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);
                    }
                    var run = function run(f) {
                        return f();
                    };
                    function createSchedulerFromOptions(opts) {
                        return opts.scheduler
                            ? opts.scheduler
                            : opts.delay
                            ? function (f) {
                                  return setTimeout(f, opts.delay);
                              }
                            : run;
                    }
                    function reaction(expression, effect, opts) {
                        var _opts$name2, _opts4, _opts5;
                        if (opts === void 0) {
                            opts = EMPTY_OBJECT;
                        }
                        if (false) {
                        }
                        var name = (_opts$name2 = opts.name) != null ? _opts$name2 : false ? undefined : 'Reaction';
                        var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
                        var runSync = !opts.scheduler && !opts.delay;
                        var scheduler = createSchedulerFromOptions(opts);
                        var firstTime = true;
                        var isScheduled = false;
                        var value;
                        var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer['default'];
                        var r = new Reaction(
                            name,
                            function () {
                                if (firstTime || runSync) {
                                    reactionRunner();
                                } else if (!isScheduled) {
                                    isScheduled = true;
                                    scheduler(reactionRunner);
                                }
                            },
                            opts.onError,
                            opts.requiresObservable,
                        );
                        function reactionRunner() {
                            isScheduled = false;
                            if (r.isDisposed) {
                                return;
                            }
                            var changed = false;
                            var oldValue = value;
                            r.track(function () {
                                var nextValue = allowStateChanges(false, function () {
                                    return expression(r);
                                });
                                changed = firstTime || !equals(value, nextValue);
                                value = nextValue;
                            });
                            if (firstTime && opts.fireImmediately) {
                                effectAction(value, oldValue, r);
                            } else if (!firstTime && changed) {
                                effectAction(value, oldValue, r);
                            }
                            firstTime = false;
                        }
                        if (!((_opts4 = opts) != null && (_opts4 = _opts4.signal) != null && _opts4.aborted)) {
                            r.schedule_();
                        }
                        return r.getDisposer_((_opts5 = opts) == null ? void 0 : _opts5.signal);
                    }
                    function wrapErrorHandler(errorHandler, baseFn) {
                        return function () {
                            try {
                                return baseFn.apply(this, arguments);
                            } catch (e) {
                                errorHandler.call(this, e);
                            }
                        };
                    }

                    var ON_BECOME_OBSERVED = 'onBO';
                    var ON_BECOME_UNOBSERVED = 'onBUO';
                    function onBecomeObserved(thing, arg2, arg3) {
                        return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
                    }
                    function onBecomeUnobserved(thing, arg2, arg3) {
                        return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
                    }
                    function interceptHook(hook, thing, arg2, arg3) {
                        var atom = typeof arg3 === 'function' ? getAtom(thing, arg2) : getAtom(thing);
                        var cb = isFunction(arg3) ? arg3 : arg2;
                        var listenersKey = hook + 'L';
                        if (atom[listenersKey]) {
                            atom[listenersKey].add(cb);
                        } else {
                            atom[listenersKey] = new Set([cb]);
                        }
                        return function () {
                            var hookListeners = atom[listenersKey];
                            if (hookListeners) {
                                hookListeners['delete'](cb);
                                if (hookListeners.size === 0) {
                                    delete atom[listenersKey];
                                }
                            }
                        };
                    }

                    var NEVER = 'never';
                    var ALWAYS = 'always';
                    var OBSERVED = 'observed';
                    // const IF_AVAILABLE = "ifavailable"
                    function configure(options) {
                        if (options.isolateGlobalState === true) {
                            isolateGlobalState();
                        }
                        var useProxies = options.useProxies,
                            enforceActions = options.enforceActions;
                        if (useProxies !== undefined) {
                            globalState.useProxies =
                                useProxies === ALWAYS
                                    ? true
                                    : useProxies === NEVER
                                    ? false
                                    : typeof Proxy !== 'undefined';
                        }
                        if (useProxies === 'ifavailable') {
                            globalState.verifyProxies = true;
                        }
                        if (enforceActions !== undefined) {
                            var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
                            globalState.enforceActions = ea;
                            globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
                        }
                        [
                            'computedRequiresReaction',
                            'reactionRequiresObservable',
                            'observableRequiresReaction',
                            'disableErrorBoundaries',
                            'safeDescriptors',
                        ].forEach(function (key) {
                            if (key in options) {
                                globalState[key] = !!options[key];
                            }
                        });
                        globalState.allowStateReads = !globalState.observableRequiresReaction;
                        if (false) {
                        }
                        if (options.reactionScheduler) {
                            setReactionScheduler(options.reactionScheduler);
                        }
                    }

                    function extendObservable(target, properties, annotations, options) {
                        if (false) {
                        }
                        // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)
                        var descriptors = getOwnPropertyDescriptors(properties);
                        initObservable(function () {
                            var adm = asObservableObject(target, options)[$mobx];
                            ownKeys(descriptors).forEach(function (key) {
                                adm.extend_(
                                    key,
                                    descriptors[key],
                                    // must pass "undefined" for { key: undefined }
                                    !annotations ? true : key in annotations ? annotations[key] : true,
                                );
                            });
                        });
                        return target;
                    }

                    function getDependencyTree(thing, property) {
                        return nodeToDependencyTree(getAtom(thing, property));
                    }
                    function nodeToDependencyTree(node) {
                        var result = {
                            name: node.name_,
                        };
                        if (node.observing_ && node.observing_.length > 0) {
                            result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
                        }
                        return result;
                    }
                    function getObserverTree(thing, property) {
                        return nodeToObserverTree(getAtom(thing, property));
                    }
                    function nodeToObserverTree(node) {
                        var result = {
                            name: node.name_,
                        };
                        if (hasObservers(node)) {
                            result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
                        }
                        return result;
                    }
                    function unique(list) {
                        return Array.from(new Set(list));
                    }

                    var generatorId = 0;
                    function FlowCancellationError() {
                        this.message = 'FLOW_CANCELLED';
                    }
                    FlowCancellationError.prototype = /*#__PURE__*/ Object.create(Error.prototype);
                    function isFlowCancellationError(error) {
                        return error instanceof FlowCancellationError;
                    }
                    var flowAnnotation = /*#__PURE__*/ createFlowAnnotation('flow');
                    var flowBoundAnnotation = /*#__PURE__*/ createFlowAnnotation('flow.bound', {
                        bound: true,
                    });
                    var flow = /*#__PURE__*/ Object.assign(function flow(arg1, arg2) {
                        // @flow (2022.3 Decorators)
                        if (is20223Decorator(arg2)) {
                            return flowAnnotation.decorate_20223_(arg1, arg2);
                        }
                        // @flow
                        if (isStringish(arg2)) {
                            return storeAnnotation(arg1, arg2, flowAnnotation);
                        }
                        // flow(fn)
                        if (false) {
                        }
                        var generator = arg1;
                        var name = generator.name || '<unnamed flow>';
                        // Implementation based on https://github.com/tj/co/blob/master/index.js
                        var res = function res() {
                            var ctx = this;
                            var args = arguments;
                            var runId = ++generatorId;
                            var gen = action(name + ' - runid: ' + runId + ' - init', generator).apply(ctx, args);
                            var rejector;
                            var pendingPromise = undefined;
                            var promise = new Promise(function (resolve, reject) {
                                var stepId = 0;
                                rejector = reject;
                                function onFulfilled(res) {
                                    pendingPromise = undefined;
                                    var ret;
                                    try {
                                        ret = action(
                                            name + ' - runid: ' + runId + ' - yield ' + stepId++,
                                            gen.next,
                                        ).call(gen, res);
                                    } catch (e) {
                                        return reject(e);
                                    }
                                    next(ret);
                                }
                                function onRejected(err) {
                                    pendingPromise = undefined;
                                    var ret;
                                    try {
                                        ret = action(
                                            name + ' - runid: ' + runId + ' - yield ' + stepId++,
                                            gen['throw'],
                                        ).call(gen, err);
                                    } catch (e) {
                                        return reject(e);
                                    }
                                    next(ret);
                                }
                                function next(ret) {
                                    if (isFunction(ret == null ? void 0 : ret.then)) {
                                        // an async iterator
                                        ret.then(next, reject);
                                        return;
                                    }
                                    if (ret.done) {
                                        return resolve(ret.value);
                                    }
                                    pendingPromise = Promise.resolve(ret.value);
                                    return pendingPromise.then(onFulfilled, onRejected);
                                }
                                onFulfilled(undefined); // kick off the process
                            });
                            promise.cancel = action(name + ' - runid: ' + runId + ' - cancel', function () {
                                try {
                                    if (pendingPromise) {
                                        cancelPromise(pendingPromise);
                                    }
                                    // Finally block can return (or yield) stuff..
                                    var _res = gen['return'](undefined);
                                    // eat anything that promise would do, it's cancelled!
                                    var yieldedPromise = Promise.resolve(_res.value);
                                    yieldedPromise.then(noop, noop);
                                    cancelPromise(yieldedPromise); // maybe it can be cancelled :)
                                    // reject our original promise
                                    rejector(new FlowCancellationError());
                                } catch (e) {
                                    rejector(e); // there could be a throwing finally block
                                }
                            });
                            return promise;
                        };
                        res.isMobXFlow = true;
                        return res;
                    }, flowAnnotation);
                    flow.bound = /*#__PURE__*/ createDecoratorAnnotation(flowBoundAnnotation);
                    function cancelPromise(promise) {
                        if (isFunction(promise.cancel)) {
                            promise.cancel();
                        }
                    }
                    function flowResult(result) {
                        return result; // just tricking TypeScript :)
                    }
                    function isFlow(fn) {
                        return (fn == null ? void 0 : fn.isMobXFlow) === true;
                    }

                    function interceptReads(thing, propOrHandler, handler) {
                        var target;
                        if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
                            target = getAdministration(thing);
                        } else if (isObservableObject(thing)) {
                            if (false) {
                            }
                            target = getAdministration(thing, propOrHandler);
                        } else if (false) {
                        }
                        if (false) {
                        }
                        target.dehancer = typeof propOrHandler === 'function' ? propOrHandler : handler;
                        return function () {
                            target.dehancer = undefined;
                        };
                    }

                    function intercept(thing, propOrHandler, handler) {
                        if (isFunction(handler)) {
                            return interceptProperty(thing, propOrHandler, handler);
                        } else {
                            return interceptInterceptable(thing, propOrHandler);
                        }
                    }
                    function interceptInterceptable(thing, handler) {
                        return getAdministration(thing).intercept_(handler);
                    }
                    function interceptProperty(thing, property, handler) {
                        return getAdministration(thing, property).intercept_(handler);
                    }

                    function _isComputed(value, property) {
                        if (property === undefined) {
                            return isComputedValue(value);
                        }
                        if (isObservableObject(value) === false) {
                            return false;
                        }
                        if (!value[$mobx].values_.has(property)) {
                            return false;
                        }
                        var atom = getAtom(value, property);
                        return isComputedValue(atom);
                    }
                    function isComputed(value) {
                        if (false) {
                        }
                        return _isComputed(value);
                    }
                    function isComputedProp(value, propName) {
                        if (false) {
                        }
                        return _isComputed(value, propName);
                    }

                    function _isObservable(value, property) {
                        if (!value) {
                            return false;
                        }
                        if (property !== undefined) {
                            if (false) {
                            }
                            if (isObservableObject(value)) {
                                return value[$mobx].values_.has(property);
                            }
                            return false;
                        }
                        // For first check, see #701
                        return (
                            isObservableObject(value) ||
                            !!value[$mobx] ||
                            isAtom(value) ||
                            isReaction(value) ||
                            isComputedValue(value)
                        );
                    }
                    function isObservable(value) {
                        if (false) {
                        }
                        return _isObservable(value);
                    }
                    function isObservableProp(value, propName) {
                        if (false) {
                        }
                        return _isObservable(value, propName);
                    }

                    function keys(obj) {
                        if (isObservableObject(obj)) {
                            return obj[$mobx].keys_();
                        }
                        if (isObservableMap(obj) || isObservableSet(obj)) {
                            return Array.from(obj.keys());
                        }
                        if (isObservableArray(obj)) {
                            return obj.map(function (_, index) {
                                return index;
                            });
                        }
                        die(5);
                    }
                    function values(obj) {
                        if (isObservableObject(obj)) {
                            return keys(obj).map(function (key) {
                                return obj[key];
                            });
                        }
                        if (isObservableMap(obj)) {
                            return keys(obj).map(function (key) {
                                return obj.get(key);
                            });
                        }
                        if (isObservableSet(obj)) {
                            return Array.from(obj.values());
                        }
                        if (isObservableArray(obj)) {
                            return obj.slice();
                        }
                        die(6);
                    }
                    function entries(obj) {
                        if (isObservableObject(obj)) {
                            return keys(obj).map(function (key) {
                                return [key, obj[key]];
                            });
                        }
                        if (isObservableMap(obj)) {
                            return keys(obj).map(function (key) {
                                return [key, obj.get(key)];
                            });
                        }
                        if (isObservableSet(obj)) {
                            return Array.from(obj.entries());
                        }
                        if (isObservableArray(obj)) {
                            return obj.map(function (key, index) {
                                return [index, key];
                            });
                        }
                        die(7);
                    }
                    function set(obj, key, value) {
                        if (arguments.length === 2 && !isObservableSet(obj)) {
                            startBatch();
                            var _values = key;
                            try {
                                for (var _key in _values) {
                                    set(obj, _key, _values[_key]);
                                }
                            } finally {
                                endBatch();
                            }
                            return;
                        }
                        if (isObservableObject(obj)) {
                            obj[$mobx].set_(key, value);
                        } else if (isObservableMap(obj)) {
                            obj.set(key, value);
                        } else if (isObservableSet(obj)) {
                            obj.add(key);
                        } else if (isObservableArray(obj)) {
                            if (typeof key !== 'number') {
                                key = parseInt(key, 10);
                            }
                            if (key < 0) {
                                die("Invalid index: '" + key + "'");
                            }
                            startBatch();
                            if (key >= obj.length) {
                                obj.length = key + 1;
                            }
                            obj[key] = value;
                            endBatch();
                        } else {
                            die(8);
                        }
                    }
                    function remove(obj, key) {
                        if (isObservableObject(obj)) {
                            obj[$mobx].delete_(key);
                        } else if (isObservableMap(obj)) {
                            obj['delete'](key);
                        } else if (isObservableSet(obj)) {
                            obj['delete'](key);
                        } else if (isObservableArray(obj)) {
                            if (typeof key !== 'number') {
                                key = parseInt(key, 10);
                            }
                            obj.splice(key, 1);
                        } else {
                            die(9);
                        }
                    }
                    function has(obj, key) {
                        if (isObservableObject(obj)) {
                            return obj[$mobx].has_(key);
                        } else if (isObservableMap(obj)) {
                            return obj.has(key);
                        } else if (isObservableSet(obj)) {
                            return obj.has(key);
                        } else if (isObservableArray(obj)) {
                            return key >= 0 && key < obj.length;
                        }
                        die(10);
                    }
                    function get(obj, key) {
                        if (!has(obj, key)) {
                            return undefined;
                        }
                        if (isObservableObject(obj)) {
                            return obj[$mobx].get_(key);
                        } else if (isObservableMap(obj)) {
                            return obj.get(key);
                        } else if (isObservableArray(obj)) {
                            return obj[key];
                        }
                        die(11);
                    }
                    function apiDefineProperty(obj, key, descriptor) {
                        if (isObservableObject(obj)) {
                            return obj[$mobx].defineProperty_(key, descriptor);
                        }
                        die(39);
                    }
                    function apiOwnKeys(obj) {
                        if (isObservableObject(obj)) {
                            return obj[$mobx].ownKeys_();
                        }
                        die(38);
                    }

                    function observe(thing, propOrCb, cbOrFire, fireImmediately) {
                        if (isFunction(cbOrFire)) {
                            return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
                        } else {
                            return observeObservable(thing, propOrCb, cbOrFire);
                        }
                    }
                    function observeObservable(thing, listener, fireImmediately) {
                        return getAdministration(thing).observe_(listener, fireImmediately);
                    }
                    function observeObservableProperty(thing, property, listener, fireImmediately) {
                        return getAdministration(thing, property).observe_(listener, fireImmediately);
                    }

                    function cache(map, key, value) {
                        map.set(key, value);
                        return value;
                    }
                    function toJSHelper(source, __alreadySeen) {
                        if (
                            source == null ||
                            typeof source !== 'object' ||
                            source instanceof Date ||
                            !isObservable(source)
                        ) {
                            return source;
                        }
                        if (isObservableValue(source) || isComputedValue(source)) {
                            return toJSHelper(source.get(), __alreadySeen);
                        }
                        if (__alreadySeen.has(source)) {
                            return __alreadySeen.get(source);
                        }
                        if (isObservableArray(source)) {
                            var res = cache(__alreadySeen, source, new Array(source.length));
                            source.forEach(function (value, idx) {
                                res[idx] = toJSHelper(value, __alreadySeen);
                            });
                            return res;
                        }
                        if (isObservableSet(source)) {
                            var _res = cache(__alreadySeen, source, new Set());
                            source.forEach(function (value) {
                                _res.add(toJSHelper(value, __alreadySeen));
                            });
                            return _res;
                        }
                        if (isObservableMap(source)) {
                            var _res2 = cache(__alreadySeen, source, new Map());
                            source.forEach(function (value, key) {
                                _res2.set(key, toJSHelper(value, __alreadySeen));
                            });
                            return _res2;
                        } else {
                            // must be observable object
                            var _res3 = cache(__alreadySeen, source, {});
                            apiOwnKeys(source).forEach(function (key) {
                                if (objectPrototype.propertyIsEnumerable.call(source, key)) {
                                    _res3[key] = toJSHelper(source[key], __alreadySeen);
                                }
                            });
                            return _res3;
                        }
                    }
                    /**
                     * Recursively converts an observable to it's non-observable native counterpart.
                     * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.
                     * Computed and other non-enumerable properties are completely ignored.
                     * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.
                     */
                    function toJS(source, options) {
                        if (false) {
                        }
                        return toJSHelper(source, new Map());
                    }

                    function trace() {
                        if (true) {
                            return;
                        }
                        var enterBreakPoint = false;
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        if (typeof args[args.length - 1] === 'boolean') {
                            enterBreakPoint = args.pop();
                        }
                        var derivation = getAtomFromArgs(args);
                        if (!derivation) {
                            return die(
                                "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly",
                            );
                        }
                        if (derivation.isTracing_ === TraceMode.NONE) {
                            console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
                        }
                        derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
                    }
                    function getAtomFromArgs(args) {
                        switch (args.length) {
                            case 0:
                                return globalState.trackingDerivation;
                            case 1:
                                return getAtom(args[0]);
                            case 2:
                                return getAtom(args[0], args[1]);
                        }
                    }

                    /**
                     * During a transaction no views are updated until the end of the transaction.
                     * The transaction will be run synchronously nonetheless.
                     *
                     * @param action a function that updates some reactive state
                     * @returns any value that was returned by the 'action' parameter.
                     */
                    function transaction(action, thisArg) {
                        if (thisArg === void 0) {
                            thisArg = undefined;
                        }
                        startBatch();
                        try {
                            return action.apply(thisArg);
                        } finally {
                            endBatch();
                        }
                    }

                    function when(predicate, arg1, arg2) {
                        if (arguments.length === 1 || (arg1 && typeof arg1 === 'object')) {
                            return whenPromise(predicate, arg1);
                        }
                        return _when(predicate, arg1, arg2 || {});
                    }
                    function _when(predicate, effect, opts) {
                        var timeoutHandle;
                        if (typeof opts.timeout === 'number') {
                            var error = new Error('WHEN_TIMEOUT');
                            timeoutHandle = setTimeout(function () {
                                if (!disposer[$mobx].isDisposed) {
                                    disposer();
                                    if (opts.onError) {
                                        opts.onError(error);
                                    } else {
                                        throw error;
                                    }
                                }
                            }, opts.timeout);
                        }
                        opts.name = false ? undefined : 'When';
                        var effectAction = createAction(false ? undefined : 'When-effect', effect);
                        // eslint-disable-next-line
                        var disposer = autorun(function (r) {
                            // predicate should not change state
                            var cond = allowStateChanges(false, predicate);
                            if (cond) {
                                r.dispose();
                                if (timeoutHandle) {
                                    clearTimeout(timeoutHandle);
                                }
                                effectAction();
                            }
                        }, opts);
                        return disposer;
                    }
                    function whenPromise(predicate, opts) {
                        var _opts$signal;
                        if (false) {
                        }
                        if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {
                            return Object.assign(Promise.reject(new Error('WHEN_ABORTED')), {
                                cancel: function cancel() {
                                    return null;
                                },
                            });
                        }
                        var cancel;
                        var abort;
                        var res = new Promise(function (resolve, reject) {
                            var _opts$signal2;
                            var disposer = _when(
                                predicate,
                                resolve,
                                _extends({}, opts, {
                                    onError: reject,
                                }),
                            );
                            cancel = function cancel() {
                                disposer();
                                reject(new Error('WHEN_CANCELLED'));
                            };
                            abort = function abort() {
                                disposer();
                                reject(new Error('WHEN_ABORTED'));
                            };
                            opts == null ||
                                (_opts$signal2 = opts.signal) == null ||
                                _opts$signal2.addEventListener == null ||
                                _opts$signal2.addEventListener('abort', abort);
                        })['finally'](function () {
                            var _opts$signal3;
                            return opts == null ||
                                (_opts$signal3 = opts.signal) == null ||
                                _opts$signal3.removeEventListener == null
                                ? void 0
                                : _opts$signal3.removeEventListener('abort', abort);
                        });
                        res.cancel = cancel;
                        return res;
                    }

                    function getAdm(target) {
                        return target[$mobx];
                    }
                    // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
                    // and skip either the internal values map, or the base object with its property descriptors!
                    var objectProxyTraps = {
                        has: function has(target, name) {
                            if (false) {
                            }
                            return getAdm(target).has_(name);
                        },
                        get: function get(target, name) {
                            return getAdm(target).get_(name);
                        },
                        set: function set(target, name, value) {
                            var _getAdm$set_;
                            if (!isStringish(name)) {
                                return false;
                            }
                            if (false) {
                            }
                            // null (intercepted) -> true (success)
                            return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null
                                ? _getAdm$set_
                                : true;
                        },
                        deleteProperty: function deleteProperty(target, name) {
                            var _getAdm$delete_;
                            if (false) {
                            }
                            if (!isStringish(name)) {
                                return false;
                            }
                            // null (intercepted) -> true (success)
                            return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null
                                ? _getAdm$delete_
                                : true;
                        },
                        defineProperty: function defineProperty(target, name, descriptor) {
                            var _getAdm$definePropert;
                            if (false) {
                            }
                            // null (intercepted) -> true (success)
                            return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null
                                ? _getAdm$definePropert
                                : true;
                        },
                        ownKeys: function ownKeys(target) {
                            if (false) {
                            }
                            return getAdm(target).ownKeys_();
                        },
                        preventExtensions: function preventExtensions(target) {
                            die(13);
                        },
                    };
                    function asDynamicObservableObject(target, options) {
                        var _target$$mobx, _target$$mobx$proxy_;
                        assertProxies();
                        target = asObservableObject(target, options);
                        return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null
                            ? _target$$mobx$proxy_
                            : (_target$$mobx.proxy_ = new Proxy(target, objectProxyTraps));
                    }

                    function hasInterceptors(interceptable) {
                        return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
                    }
                    function registerInterceptor(interceptable, handler) {
                        var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
                        interceptors.push(handler);
                        return once(function () {
                            var idx = interceptors.indexOf(handler);
                            if (idx !== -1) {
                                interceptors.splice(idx, 1);
                            }
                        });
                    }
                    function interceptChange(interceptable, change) {
                        var prevU = untrackedStart();
                        try {
                            // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
                            var interceptors = [].concat(interceptable.interceptors_ || []);
                            for (var i = 0, l = interceptors.length; i < l; i++) {
                                change = interceptors[i](change);
                                if (change && !change.type) {
                                    die(14);
                                }
                                if (!change) {
                                    break;
                                }
                            }
                            return change;
                        } finally {
                            untrackedEnd(prevU);
                        }
                    }

                    function hasListeners(listenable) {
                        return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
                    }
                    function registerListener(listenable, handler) {
                        var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
                        listeners.push(handler);
                        return once(function () {
                            var idx = listeners.indexOf(handler);
                            if (idx !== -1) {
                                listeners.splice(idx, 1);
                            }
                        });
                    }
                    function notifyListeners(listenable, change) {
                        var prevU = untrackedStart();
                        var listeners = listenable.changeListeners_;
                        if (!listeners) {
                            return;
                        }
                        listeners = listeners.slice();
                        for (var i = 0, l = listeners.length; i < l; i++) {
                            listeners[i](change);
                        }
                        untrackedEnd(prevU);
                    }

                    function makeObservable(target, annotations, options) {
                        initObservable(function () {
                            var _annotations;
                            var adm = asObservableObject(target, options)[$mobx];
                            if (false) {
                            }
                            // Default to decorators
                            (_annotations = annotations) != null
                                ? _annotations
                                : (annotations = collectStoredAnnotations(target));
                            // Annotate
                            ownKeys(annotations).forEach(function (key) {
                                return adm.make_(key, annotations[key]);
                            });
                        });
                        return target;
                    }
                    // proto[keysSymbol] = new Set<PropertyKey>()
                    var keysSymbol = /*#__PURE__*/ Symbol('mobx-keys');
                    function makeAutoObservable(target, overrides, options) {
                        if (false) {
                        }
                        // Optimization: avoid visiting protos
                        // Assumes that annotation.make_/.extend_ works the same for plain objects
                        if (isPlainObject(target)) {
                            return extendObservable(target, target, overrides, options);
                        }
                        initObservable(function () {
                            var adm = asObservableObject(target, options)[$mobx];
                            // Optimization: cache keys on proto
                            // Assumes makeAutoObservable can be called only once per object and can't be used in subclass
                            if (!target[keysSymbol]) {
                                var proto = Object.getPrototypeOf(target);
                                var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));
                                keys['delete']('constructor');
                                keys['delete']($mobx);
                                addHiddenProp(proto, keysSymbol, keys);
                            }
                            target[keysSymbol].forEach(function (key) {
                                return adm.make_(
                                    key,
                                    // must pass "undefined" for { key: undefined }
                                    !overrides ? true : key in overrides ? overrides[key] : true,
                                );
                            });
                        });
                        return target;
                    }

                    var SPLICE = 'splice';
                    var UPDATE = 'update';
                    var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
                    var arrayTraps = {
                        get: function get(target, name) {
                            var adm = target[$mobx];
                            if (name === $mobx) {
                                return adm;
                            }
                            if (name === 'length') {
                                return adm.getArrayLength_();
                            }
                            if (typeof name === 'string' && !isNaN(name)) {
                                return adm.get_(parseInt(name));
                            }
                            if (hasProp(arrayExtensions, name)) {
                                return arrayExtensions[name];
                            }
                            return target[name];
                        },
                        set: function set(target, name, value) {
                            var adm = target[$mobx];
                            if (name === 'length') {
                                adm.setArrayLength_(value);
                            }
                            if (typeof name === 'symbol' || isNaN(name)) {
                                target[name] = value;
                            } else {
                                // numeric string
                                adm.set_(parseInt(name), value);
                            }
                            return true;
                        },
                        preventExtensions: function preventExtensions() {
                            die(15);
                        },
                    };
                    var ObservableArrayAdministration = /*#__PURE__*/ (function () {
                        function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
                            if (name === void 0) {
                                name = false ? undefined : 'ObservableArray';
                            }
                            this.owned_ = void 0;
                            this.legacyMode_ = void 0;
                            this.atom_ = void 0;
                            this.values_ = [];
                            // this is the prop that gets proxied, so can't replace it!
                            this.interceptors_ = void 0;
                            this.changeListeners_ = void 0;
                            this.enhancer_ = void 0;
                            this.dehancer = void 0;
                            this.proxy_ = void 0;
                            this.lastKnownLength_ = 0;
                            this.owned_ = owned_;
                            this.legacyMode_ = legacyMode_;
                            this.atom_ = new Atom(name);
                            this.enhancer_ = function (newV, oldV) {
                                return enhancer(newV, oldV, false ? undefined : 'ObservableArray[..]');
                            };
                        }
                        var _proto = ObservableArrayAdministration.prototype;
                        _proto.dehanceValue_ = function dehanceValue_(value) {
                            if (this.dehancer !== undefined) {
                                return this.dehancer(value);
                            }
                            return value;
                        };
                        _proto.dehanceValues_ = function dehanceValues_(values) {
                            if (this.dehancer !== undefined && values.length > 0) {
                                return values.map(this.dehancer);
                            }
                            return values;
                        };
                        _proto.intercept_ = function intercept_(handler) {
                            return registerInterceptor(this, handler);
                        };
                        _proto.observe_ = function observe_(listener, fireImmediately) {
                            if (fireImmediately === void 0) {
                                fireImmediately = false;
                            }
                            if (fireImmediately) {
                                listener({
                                    observableKind: 'array',
                                    object: this.proxy_,
                                    debugObjectName: this.atom_.name_,
                                    type: 'splice',
                                    index: 0,
                                    added: this.values_.slice(),
                                    addedCount: this.values_.length,
                                    removed: [],
                                    removedCount: 0,
                                });
                            }
                            return registerListener(this, listener);
                        };
                        _proto.getArrayLength_ = function getArrayLength_() {
                            this.atom_.reportObserved();
                            return this.values_.length;
                        };
                        _proto.setArrayLength_ = function setArrayLength_(newLength) {
                            if (typeof newLength !== 'number' || isNaN(newLength) || newLength < 0) {
                                die('Out of range: ' + newLength);
                            }
                            var currentLength = this.values_.length;
                            if (newLength === currentLength) {
                                return;
                            } else if (newLength > currentLength) {
                                var newItems = new Array(newLength - currentLength);
                                for (var i = 0; i < newLength - currentLength; i++) {
                                    newItems[i] = undefined;
                                } // No Array.fill everywhere...
                                this.spliceWithArray_(currentLength, 0, newItems);
                            } else {
                                this.spliceWithArray_(newLength, currentLength - newLength);
                            }
                        };
                        _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
                            if (oldLength !== this.lastKnownLength_) {
                                die(16);
                            }
                            this.lastKnownLength_ += delta;
                            if (this.legacyMode_ && delta > 0) {
                                reserveArrayBuffer(oldLength + delta + 1);
                            }
                        };
                        _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
                            var _this = this;
                            checkIfStateModificationsAreAllowed(this.atom_);
                            var length = this.values_.length;
                            if (index === undefined) {
                                index = 0;
                            } else if (index > length) {
                                index = length;
                            } else if (index < 0) {
                                index = Math.max(0, length + index);
                            }
                            if (arguments.length === 1) {
                                deleteCount = length - index;
                            } else if (deleteCount === undefined || deleteCount === null) {
                                deleteCount = 0;
                            } else {
                                deleteCount = Math.max(0, Math.min(deleteCount, length - index));
                            }
                            if (newItems === undefined) {
                                newItems = EMPTY_ARRAY;
                            }
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    object: this.proxy_,
                                    type: SPLICE,
                                    index: index,
                                    removedCount: deleteCount,
                                    added: newItems,
                                });
                                if (!change) {
                                    return EMPTY_ARRAY;
                                }
                                deleteCount = change.removedCount;
                                newItems = change.added;
                            }
                            newItems =
                                newItems.length === 0
                                    ? newItems
                                    : newItems.map(function (v) {
                                          return _this.enhancer_(v, undefined);
                                      });
                            if (this.legacyMode_ || 'production' !== 'production') {
                                var lengthDelta = newItems.length - deleteCount;
                                this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
                            }
                            var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
                            if (deleteCount !== 0 || newItems.length !== 0) {
                                this.notifyArraySplice_(index, newItems, res);
                            }
                            return this.dehanceValues_(res);
                        };
                        _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
                            if (newItems.length < MAX_SPLICE_SIZE) {
                                var _this$values_;
                                return (_this$values_ = this.values_).splice.apply(
                                    _this$values_,
                                    [index, deleteCount].concat(newItems),
                                );
                            } else {
                                // The items removed by the splice
                                var res = this.values_.slice(index, index + deleteCount);
                                // The items that that should remain at the end of the array
                                var oldItems = this.values_.slice(index + deleteCount);
                                // New length is the previous length + addition count - deletion count
                                this.values_.length += newItems.length - deleteCount;
                                for (var i = 0; i < newItems.length; i++) {
                                    this.values_[index + i] = newItems[i];
                                }
                                for (var _i = 0; _i < oldItems.length; _i++) {
                                    this.values_[index + newItems.length + _i] = oldItems[_i];
                                }
                                return res;
                            }
                        };
                        _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
                            var notifySpy = !this.owned_ && isSpyEnabled();
                            var notify = hasListeners(this);
                            var change =
                                notify || notifySpy
                                    ? {
                                          observableKind: 'array',
                                          object: this.proxy_,
                                          type: UPDATE,
                                          debugObjectName: this.atom_.name_,
                                          index: index,
                                          newValue: newValue,
                                          oldValue: oldValue,
                                      }
                                    : null;
                            // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
                            // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
                            if (false) {
                            }
                            this.atom_.reportChanged();
                            if (notify) {
                                notifyListeners(this, change);
                            }
                            if (false) {
                            }
                        };
                        _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
                            var notifySpy = !this.owned_ && isSpyEnabled();
                            var notify = hasListeners(this);
                            var change =
                                notify || notifySpy
                                    ? {
                                          observableKind: 'array',
                                          object: this.proxy_,
                                          debugObjectName: this.atom_.name_,
                                          type: SPLICE,
                                          index: index,
                                          removed: removed,
                                          added: added,
                                          removedCount: removed.length,
                                          addedCount: added.length,
                                      }
                                    : null;
                            if (false) {
                            }
                            this.atom_.reportChanged();
                            // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
                            if (notify) {
                                notifyListeners(this, change);
                            }
                            if (false) {
                            }
                        };
                        _proto.get_ = function get_(index) {
                            if (this.legacyMode_ && index >= this.values_.length) {
                                console.warn(false ? undefined : '[mobx] Out of bounds read: ' + index);
                                return undefined;
                            }
                            this.atom_.reportObserved();
                            return this.dehanceValue_(this.values_[index]);
                        };
                        _proto.set_ = function set_(index, newValue) {
                            var values = this.values_;
                            if (this.legacyMode_ && index > values.length) {
                                // out of bounds
                                die(17, index, values.length);
                            }
                            if (index < values.length) {
                                // update at index in range
                                checkIfStateModificationsAreAllowed(this.atom_);
                                var oldValue = values[index];
                                if (hasInterceptors(this)) {
                                    var change = interceptChange(this, {
                                        type: UPDATE,
                                        object: this.proxy_,
                                        // since "this" is the real array we need to pass its proxy
                                        index: index,
                                        newValue: newValue,
                                    });
                                    if (!change) {
                                        return;
                                    }
                                    newValue = change.newValue;
                                }
                                newValue = this.enhancer_(newValue, oldValue);
                                var changed = newValue !== oldValue;
                                if (changed) {
                                    values[index] = newValue;
                                    this.notifyArrayChildUpdate_(index, newValue, oldValue);
                                }
                            } else {
                                // For out of bound index, we don't create an actual sparse array,
                                // but rather fill the holes with undefined (same as setArrayLength_).
                                // This could be considered a bug.
                                var newItems = new Array(index + 1 - values.length);
                                for (var i = 0; i < newItems.length - 1; i++) {
                                    newItems[i] = undefined;
                                } // No Array.fill everywhere...
                                newItems[newItems.length - 1] = newValue;
                                this.spliceWithArray_(values.length, 0, newItems);
                            }
                        };
                        return ObservableArrayAdministration;
                    })();
                    function createObservableArray(initialValues, enhancer, name, owned) {
                        if (name === void 0) {
                            name = false ? undefined : 'ObservableArray';
                        }
                        if (owned === void 0) {
                            owned = false;
                        }
                        assertProxies();
                        return initObservable(function () {
                            var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
                            addHiddenFinalProp(adm.values_, $mobx, adm);
                            var proxy = new Proxy(adm.values_, arrayTraps);
                            adm.proxy_ = proxy;
                            if (initialValues && initialValues.length) {
                                adm.spliceWithArray_(0, 0, initialValues);
                            }
                            return proxy;
                        });
                    }
                    // eslint-disable-next-line
                    var arrayExtensions = {
                        clear: function clear() {
                            return this.splice(0);
                        },
                        replace: function replace(newItems) {
                            var adm = this[$mobx];
                            return adm.spliceWithArray_(0, adm.values_.length, newItems);
                        },
                        // Used by JSON.stringify
                        toJSON: function toJSON() {
                            return this.slice();
                        },
                        /*
                         * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
                         * since these functions alter the inner structure of the array, the have side effects.
                         * Because the have side effects, they should not be used in computed function,
                         * and for that reason the do not call dependencyState.notifyObserved
                         */
                        splice: function splice(index, deleteCount) {
                            for (
                                var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2;
                                _key < _len;
                                _key++
                            ) {
                                newItems[_key - 2] = arguments[_key];
                            }
                            var adm = this[$mobx];
                            switch (arguments.length) {
                                case 0:
                                    return [];
                                case 1:
                                    return adm.spliceWithArray_(index);
                                case 2:
                                    return adm.spliceWithArray_(index, deleteCount);
                            }
                            return adm.spliceWithArray_(index, deleteCount, newItems);
                        },
                        spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
                            return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
                        },
                        push: function push() {
                            var adm = this[$mobx];
                            for (
                                var _len2 = arguments.length, items = new Array(_len2), _key2 = 0;
                                _key2 < _len2;
                                _key2++
                            ) {
                                items[_key2] = arguments[_key2];
                            }
                            adm.spliceWithArray_(adm.values_.length, 0, items);
                            return adm.values_.length;
                        },
                        pop: function pop() {
                            return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
                        },
                        shift: function shift() {
                            return this.splice(0, 1)[0];
                        },
                        unshift: function unshift() {
                            var adm = this[$mobx];
                            for (
                                var _len3 = arguments.length, items = new Array(_len3), _key3 = 0;
                                _key3 < _len3;
                                _key3++
                            ) {
                                items[_key3] = arguments[_key3];
                            }
                            adm.spliceWithArray_(0, 0, items);
                            return adm.values_.length;
                        },
                        reverse: function reverse() {
                            // reverse by default mutates in place before returning the result
                            // which makes it both a 'derivation' and a 'mutation'.
                            if (globalState.trackingDerivation) {
                                die(37, 'reverse');
                            }
                            this.replace(this.slice().reverse());
                            return this;
                        },
                        sort: function sort() {
                            // sort by default mutates in place before returning the result
                            // which goes against all good practices. Let's not change the array in place!
                            if (globalState.trackingDerivation) {
                                die(37, 'sort');
                            }
                            var copy = this.slice();
                            copy.sort.apply(copy, arguments);
                            this.replace(copy);
                            return this;
                        },
                        remove: function remove(value) {
                            var adm = this[$mobx];
                            var idx = adm.dehanceValues_(adm.values_).indexOf(value);
                            if (idx > -1) {
                                this.splice(idx, 1);
                                return true;
                            }
                            return false;
                        },
                    };
                    /**
                     * Wrap function from prototype
                     * Without this, everything works as well, but this works
                     * faster as everything works on unproxied values
                     */
                    addArrayExtension('at', simpleFunc);
                    addArrayExtension('concat', simpleFunc);
                    addArrayExtension('flat', simpleFunc);
                    addArrayExtension('includes', simpleFunc);
                    addArrayExtension('indexOf', simpleFunc);
                    addArrayExtension('join', simpleFunc);
                    addArrayExtension('lastIndexOf', simpleFunc);
                    addArrayExtension('slice', simpleFunc);
                    addArrayExtension('toString', simpleFunc);
                    addArrayExtension('toLocaleString', simpleFunc);
                    addArrayExtension('toSorted', simpleFunc);
                    addArrayExtension('toSpliced', simpleFunc);
                    addArrayExtension('with', simpleFunc);
                    // map
                    addArrayExtension('every', mapLikeFunc);
                    addArrayExtension('filter', mapLikeFunc);
                    addArrayExtension('find', mapLikeFunc);
                    addArrayExtension('findIndex', mapLikeFunc);
                    addArrayExtension('findLast', mapLikeFunc);
                    addArrayExtension('findLastIndex', mapLikeFunc);
                    addArrayExtension('flatMap', mapLikeFunc);
                    addArrayExtension('forEach', mapLikeFunc);
                    addArrayExtension('map', mapLikeFunc);
                    addArrayExtension('some', mapLikeFunc);
                    addArrayExtension('toReversed', mapLikeFunc);
                    // reduce
                    addArrayExtension('reduce', reduceLikeFunc);
                    addArrayExtension('reduceRight', reduceLikeFunc);
                    function addArrayExtension(funcName, funcFactory) {
                        if (typeof Array.prototype[funcName] === 'function') {
                            arrayExtensions[funcName] = funcFactory(funcName);
                        }
                    }
                    // Report and delegate to dehanced array
                    function simpleFunc(funcName) {
                        return function () {
                            var adm = this[$mobx];
                            adm.atom_.reportObserved();
                            var dehancedValues = adm.dehanceValues_(adm.values_);
                            return dehancedValues[funcName].apply(dehancedValues, arguments);
                        };
                    }
                    // Make sure callbacks receive correct array arg #2326
                    function mapLikeFunc(funcName) {
                        return function (callback, thisArg) {
                            var _this2 = this;
                            var adm = this[$mobx];
                            adm.atom_.reportObserved();
                            var dehancedValues = adm.dehanceValues_(adm.values_);
                            return dehancedValues[funcName](function (element, index) {
                                return callback.call(thisArg, element, index, _this2);
                            });
                        };
                    }
                    // Make sure callbacks receive correct array arg #2326
                    function reduceLikeFunc(funcName) {
                        return function () {
                            var _this3 = this;
                            var adm = this[$mobx];
                            adm.atom_.reportObserved();
                            var dehancedValues = adm.dehanceValues_(adm.values_);
                            // #2432 - reduce behavior depends on arguments.length
                            var callback = arguments[0];
                            arguments[0] = function (accumulator, currentValue, index) {
                                return callback(accumulator, currentValue, index, _this3);
                            };
                            return dehancedValues[funcName].apply(dehancedValues, arguments);
                        };
                    }
                    var isObservableArrayAdministration = /*#__PURE__*/ createInstanceofPredicate(
                        'ObservableArrayAdministration',
                        ObservableArrayAdministration,
                    );
                    function isObservableArray(thing) {
                        return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
                    }

                    var ObservableMapMarker = {};
                    var ADD = 'add';
                    var DELETE = 'delete';
                    // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
                    // But: https://github.com/mobxjs/mobx/issues/1556
                    var ObservableMap = /*#__PURE__*/ (function () {
                        function ObservableMap(initialData, enhancer_, name_) {
                            var _this = this;
                            if (enhancer_ === void 0) {
                                enhancer_ = deepEnhancer;
                            }
                            if (name_ === void 0) {
                                name_ = false ? undefined : 'ObservableMap';
                            }
                            this.enhancer_ = void 0;
                            this.name_ = void 0;
                            this[$mobx] = ObservableMapMarker;
                            this.data_ = void 0;
                            this.hasMap_ = void 0;
                            // hasMap, not hashMap >-).
                            this.keysAtom_ = void 0;
                            this.interceptors_ = void 0;
                            this.changeListeners_ = void 0;
                            this.dehancer = void 0;
                            this.enhancer_ = enhancer_;
                            this.name_ = name_;
                            if (!isFunction(Map)) {
                                die(18);
                            }
                            initObservable(function () {
                                _this.keysAtom_ = createAtom(false ? undefined : 'ObservableMap.keys()');
                                _this.data_ = new Map();
                                _this.hasMap_ = new Map();
                                if (initialData) {
                                    _this.merge(initialData);
                                }
                            });
                        }
                        var _proto = ObservableMap.prototype;
                        _proto.has_ = function has_(key) {
                            return this.data_.has(key);
                        };
                        _proto.has = function has(key) {
                            var _this2 = this;
                            if (!globalState.trackingDerivation) {
                                return this.has_(key);
                            }
                            var entry = this.hasMap_.get(key);
                            if (!entry) {
                                var newEntry = (entry = new ObservableValue(
                                    this.has_(key),
                                    referenceEnhancer,
                                    false ? undefined : 'ObservableMap.key?',
                                    false,
                                ));
                                this.hasMap_.set(key, newEntry);
                                onBecomeUnobserved(newEntry, function () {
                                    return _this2.hasMap_['delete'](key);
                                });
                            }
                            return entry.get();
                        };
                        _proto.set = function set(key, value) {
                            var hasKey = this.has_(key);
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    type: hasKey ? UPDATE : ADD,
                                    object: this,
                                    newValue: value,
                                    name: key,
                                });
                                if (!change) {
                                    return this;
                                }
                                value = change.newValue;
                            }
                            if (hasKey) {
                                this.updateValue_(key, value);
                            } else {
                                this.addValue_(key, value);
                            }
                            return this;
                        };
                        _proto['delete'] = function _delete(key) {
                            var _this3 = this;
                            checkIfStateModificationsAreAllowed(this.keysAtom_);
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    type: DELETE,
                                    object: this,
                                    name: key,
                                });
                                if (!change) {
                                    return false;
                                }
                            }
                            if (this.has_(key)) {
                                var notifySpy = isSpyEnabled();
                                var notify = hasListeners(this);
                                var _change =
                                    notify || notifySpy
                                        ? {
                                              observableKind: 'map',
                                              debugObjectName: this.name_,
                                              type: DELETE,
                                              object: this,
                                              oldValue: this.data_.get(key).value_,
                                              name: key,
                                          }
                                        : null;
                                if (false) {
                                } // TODO fix type
                                transaction(function () {
                                    var _this3$hasMap_$get;
                                    _this3.keysAtom_.reportChanged();
                                    (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ||
                                        _this3$hasMap_$get.setNewValue_(false);
                                    var observable = _this3.data_.get(key);
                                    observable.setNewValue_(undefined);
                                    _this3.data_['delete'](key);
                                });
                                if (notify) {
                                    notifyListeners(this, _change);
                                }
                                if (false) {
                                }
                                return true;
                            }
                            return false;
                        };
                        _proto.updateValue_ = function updateValue_(key, newValue) {
                            var observable = this.data_.get(key);
                            newValue = observable.prepareNewValue_(newValue);
                            if (newValue !== globalState.UNCHANGED) {
                                var notifySpy = isSpyEnabled();
                                var notify = hasListeners(this);
                                var change =
                                    notify || notifySpy
                                        ? {
                                              observableKind: 'map',
                                              debugObjectName: this.name_,
                                              type: UPDATE,
                                              object: this,
                                              oldValue: observable.value_,
                                              name: key,
                                              newValue: newValue,
                                          }
                                        : null;
                                if (false) {
                                } // TODO fix type
                                observable.setNewValue_(newValue);
                                if (notify) {
                                    notifyListeners(this, change);
                                }
                                if (false) {
                                }
                            }
                        };
                        _proto.addValue_ = function addValue_(key, newValue) {
                            var _this4 = this;
                            checkIfStateModificationsAreAllowed(this.keysAtom_);
                            transaction(function () {
                                var _this4$hasMap_$get;
                                var observable = new ObservableValue(
                                    newValue,
                                    _this4.enhancer_,
                                    false ? undefined : 'ObservableMap.key',
                                    false,
                                );
                                _this4.data_.set(key, observable);
                                newValue = observable.value_; // value might have been changed
                                (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ||
                                    _this4$hasMap_$get.setNewValue_(true);
                                _this4.keysAtom_.reportChanged();
                            });
                            var notifySpy = isSpyEnabled();
                            var notify = hasListeners(this);
                            var change =
                                notify || notifySpy
                                    ? {
                                          observableKind: 'map',
                                          debugObjectName: this.name_,
                                          type: ADD,
                                          object: this,
                                          name: key,
                                          newValue: newValue,
                                      }
                                    : null;
                            if (false) {
                            } // TODO fix type
                            if (notify) {
                                notifyListeners(this, change);
                            }
                            if (false) {
                            }
                        };
                        _proto.get = function get(key) {
                            if (this.has(key)) {
                                return this.dehanceValue_(this.data_.get(key).get());
                            }
                            return this.dehanceValue_(undefined);
                        };
                        _proto.dehanceValue_ = function dehanceValue_(value) {
                            if (this.dehancer !== undefined) {
                                return this.dehancer(value);
                            }
                            return value;
                        };
                        _proto.keys = function keys() {
                            this.keysAtom_.reportObserved();
                            return this.data_.keys();
                        };
                        _proto.values = function values() {
                            var self = this;
                            var keys = this.keys();
                            return makeIterableForMap({
                                next: function next() {
                                    var _keys$next = keys.next(),
                                        done = _keys$next.done,
                                        value = _keys$next.value;
                                    return {
                                        done: done,
                                        value: done ? undefined : self.get(value),
                                    };
                                },
                            });
                        };
                        _proto.entries = function entries() {
                            var self = this;
                            var keys = this.keys();
                            return makeIterableForMap({
                                next: function next() {
                                    var _keys$next2 = keys.next(),
                                        done = _keys$next2.done,
                                        value = _keys$next2.value;
                                    return {
                                        done: done,
                                        value: done ? undefined : [value, self.get(value)],
                                    };
                                },
                            });
                        };
                        _proto[Symbol.iterator] = function () {
                            return this.entries();
                        };
                        _proto.forEach = function forEach(callback, thisArg) {
                            for (
                                var _iterator = _createForOfIteratorHelperLoose(this), _step;
                                !(_step = _iterator()).done;

                            ) {
                                var _step$value = _step.value,
                                    key = _step$value[0],
                                    value = _step$value[1];
                                callback.call(thisArg, value, key, this);
                            }
                        };
                        /** Merge another object into this object, returns this. */
                        _proto.merge = function merge(other) {
                            var _this5 = this;
                            if (isObservableMap(other)) {
                                other = new Map(other);
                            }
                            transaction(function () {
                                if (isPlainObject(other)) {
                                    getPlainObjectKeys(other).forEach(function (key) {
                                        return _this5.set(key, other[key]);
                                    });
                                } else if (Array.isArray(other)) {
                                    other.forEach(function (_ref) {
                                        var key = _ref[0],
                                            value = _ref[1];
                                        return _this5.set(key, value);
                                    });
                                } else if (isES6Map(other)) {
                                    if (!isPlainES6Map(other)) {
                                        die(19, other);
                                    }
                                    other.forEach(function (value, key) {
                                        return _this5.set(key, value);
                                    });
                                } else if (other !== null && other !== undefined) {
                                    die(20, other);
                                }
                            });
                            return this;
                        };
                        _proto.clear = function clear() {
                            var _this6 = this;
                            transaction(function () {
                                untracked(function () {
                                    for (
                                        var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2;
                                        !(_step2 = _iterator2()).done;

                                    ) {
                                        var key = _step2.value;
                                        _this6['delete'](key);
                                    }
                                });
                            });
                        };
                        _proto.replace = function replace(values) {
                            var _this7 = this;
                            // Implementation requirements:
                            // - respect ordering of replacement map
                            // - allow interceptors to run and potentially prevent individual operations
                            // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
                            // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
                            // - note that result map may differ from replacement map due to the interceptors
                            transaction(function () {
                                // Convert to map so we can do quick key lookups
                                var replacementMap = convertToMap(values);
                                var orderedData = new Map();
                                // Used for optimization
                                var keysReportChangedCalled = false;
                                // Delete keys that don't exist in replacement map
                                // if the key deletion is prevented by interceptor
                                // add entry at the beginning of the result map
                                for (
                                    var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3;
                                    !(_step3 = _iterator3()).done;

                                ) {
                                    var key = _step3.value;
                                    // Concurrently iterating/deleting keys
                                    // iterator should handle this correctly
                                    if (!replacementMap.has(key)) {
                                        var deleted = _this7['delete'](key);
                                        // Was the key removed?
                                        if (deleted) {
                                            // _keysAtom.reportChanged() was already called
                                            keysReportChangedCalled = true;
                                        } else {
                                            // Delete prevented by interceptor
                                            var value = _this7.data_.get(key);
                                            orderedData.set(key, value);
                                        }
                                    }
                                }
                                // Merge entries
                                for (
                                    var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4;
                                    !(_step4 = _iterator4()).done;

                                ) {
                                    var _step4$value = _step4.value,
                                        _key = _step4$value[0],
                                        _value = _step4$value[1];
                                    // We will want to know whether a new key is added
                                    var keyExisted = _this7.data_.has(_key);
                                    // Add or update value
                                    _this7.set(_key, _value);
                                    // The addition could have been prevent by interceptor
                                    if (_this7.data_.has(_key)) {
                                        // The update could have been prevented by interceptor
                                        // and also we want to preserve existing values
                                        // so use value from _data map (instead of replacement map)
                                        var _value2 = _this7.data_.get(_key);
                                        orderedData.set(_key, _value2);
                                        // Was a new key added?
                                        if (!keyExisted) {
                                            // _keysAtom.reportChanged() was already called
                                            keysReportChangedCalled = true;
                                        }
                                    }
                                }
                                // Check for possible key order change
                                if (!keysReportChangedCalled) {
                                    if (_this7.data_.size !== orderedData.size) {
                                        // If size differs, keys are definitely modified
                                        _this7.keysAtom_.reportChanged();
                                    } else {
                                        var iter1 = _this7.data_.keys();
                                        var iter2 = orderedData.keys();
                                        var next1 = iter1.next();
                                        var next2 = iter2.next();
                                        while (!next1.done) {
                                            if (next1.value !== next2.value) {
                                                _this7.keysAtom_.reportChanged();
                                                break;
                                            }
                                            next1 = iter1.next();
                                            next2 = iter2.next();
                                        }
                                    }
                                }
                                // Use correctly ordered map
                                _this7.data_ = orderedData;
                            });
                            return this;
                        };
                        _proto.toString = function toString() {
                            return '[object ObservableMap]';
                        };
                        _proto.toJSON = function toJSON() {
                            return Array.from(this);
                        };
                        /**
                         * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
                         * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
                         * for callback details
                         */
                        _proto.observe_ = function observe_(listener, fireImmediately) {
                            if (false) {
                            }
                            return registerListener(this, listener);
                        };
                        _proto.intercept_ = function intercept_(handler) {
                            return registerInterceptor(this, handler);
                        };
                        return _createClass(ObservableMap, [
                            {
                                key: 'size',
                                get: function get() {
                                    this.keysAtom_.reportObserved();
                                    return this.data_.size;
                                },
                            },
                            {
                                key: Symbol.toStringTag,
                                get: function get() {
                                    return 'Map';
                                },
                            },
                        ]);
                    })();
                    // eslint-disable-next-line
                    var isObservableMap = /*#__PURE__*/ createInstanceofPredicate('ObservableMap', ObservableMap);
                    function makeIterableForMap(iterator) {
                        iterator[Symbol.toStringTag] = 'MapIterator';
                        return makeIterable(iterator);
                    }
                    function convertToMap(dataStructure) {
                        if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
                            return dataStructure;
                        } else if (Array.isArray(dataStructure)) {
                            return new Map(dataStructure);
                        } else if (isPlainObject(dataStructure)) {
                            var map = new Map();
                            for (var key in dataStructure) {
                                map.set(key, dataStructure[key]);
                            }
                            return map;
                        } else {
                            return die(21, dataStructure);
                        }
                    }

                    var ObservableSetMarker = {};
                    var ObservableSet = /*#__PURE__*/ (function () {
                        function ObservableSet(initialData, enhancer, name_) {
                            var _this = this;
                            if (enhancer === void 0) {
                                enhancer = deepEnhancer;
                            }
                            if (name_ === void 0) {
                                name_ = false ? undefined : 'ObservableSet';
                            }
                            this.name_ = void 0;
                            this[$mobx] = ObservableSetMarker;
                            this.data_ = new Set();
                            this.atom_ = void 0;
                            this.changeListeners_ = void 0;
                            this.interceptors_ = void 0;
                            this.dehancer = void 0;
                            this.enhancer_ = void 0;
                            this.name_ = name_;
                            if (!isFunction(Set)) {
                                die(22);
                            }
                            this.enhancer_ = function (newV, oldV) {
                                return enhancer(newV, oldV, name_);
                            };
                            initObservable(function () {
                                _this.atom_ = createAtom(_this.name_);
                                if (initialData) {
                                    _this.replace(initialData);
                                }
                            });
                        }
                        var _proto = ObservableSet.prototype;
                        _proto.dehanceValue_ = function dehanceValue_(value) {
                            if (this.dehancer !== undefined) {
                                return this.dehancer(value);
                            }
                            return value;
                        };
                        _proto.clear = function clear() {
                            var _this2 = this;
                            transaction(function () {
                                untracked(function () {
                                    for (
                                        var _iterator = _createForOfIteratorHelperLoose(_this2.data_.values()), _step;
                                        !(_step = _iterator()).done;

                                    ) {
                                        var value = _step.value;
                                        _this2['delete'](value);
                                    }
                                });
                            });
                        };
                        _proto.forEach = function forEach(callbackFn, thisArg) {
                            for (
                                var _iterator2 = _createForOfIteratorHelperLoose(this), _step2;
                                !(_step2 = _iterator2()).done;

                            ) {
                                var value = _step2.value;
                                callbackFn.call(thisArg, value, value, this);
                            }
                        };
                        _proto.add = function add(value) {
                            var _this3 = this;
                            checkIfStateModificationsAreAllowed(this.atom_);
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    type: ADD,
                                    object: this,
                                    newValue: value,
                                });
                                if (!change) {
                                    return this;
                                }
                                // implemented reassignment same as it's done for ObservableMap
                                value = change.newValue;
                            }
                            if (!this.has(value)) {
                                transaction(function () {
                                    _this3.data_.add(_this3.enhancer_(value, undefined));
                                    _this3.atom_.reportChanged();
                                });
                                var notifySpy = false && false;
                                var notify = hasListeners(this);
                                var _change =
                                    notify || notifySpy
                                        ? {
                                              observableKind: 'set',
                                              debugObjectName: this.name_,
                                              type: ADD,
                                              object: this,
                                              newValue: value,
                                          }
                                        : null;
                                if (notifySpy && 'production' !== 'production') {
                                    spyReportStart(_change);
                                }
                                if (notify) {
                                    notifyListeners(this, _change);
                                }
                                if (notifySpy && 'production' !== 'production') {
                                    spyReportEnd();
                                }
                            }
                            return this;
                        };
                        _proto['delete'] = function _delete(value) {
                            var _this4 = this;
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    type: DELETE,
                                    object: this,
                                    oldValue: value,
                                });
                                if (!change) {
                                    return false;
                                }
                            }
                            if (this.has(value)) {
                                var notifySpy = false && false;
                                var notify = hasListeners(this);
                                var _change2 =
                                    notify || notifySpy
                                        ? {
                                              observableKind: 'set',
                                              debugObjectName: this.name_,
                                              type: DELETE,
                                              object: this,
                                              oldValue: value,
                                          }
                                        : null;
                                if (notifySpy && 'production' !== 'production') {
                                    spyReportStart(_change2);
                                }
                                transaction(function () {
                                    _this4.atom_.reportChanged();
                                    _this4.data_['delete'](value);
                                });
                                if (notify) {
                                    notifyListeners(this, _change2);
                                }
                                if (notifySpy && 'production' !== 'production') {
                                    spyReportEnd();
                                }
                                return true;
                            }
                            return false;
                        };
                        _proto.has = function has(value) {
                            this.atom_.reportObserved();
                            return this.data_.has(this.dehanceValue_(value));
                        };
                        _proto.entries = function entries() {
                            var values = this.values();
                            return makeIterableForSet({
                                next: function next() {
                                    var _values$next = values.next(),
                                        value = _values$next.value,
                                        done = _values$next.done;
                                    return !done
                                        ? {
                                              value: [value, value],
                                              done: done,
                                          }
                                        : {
                                              value: undefined,
                                              done: done,
                                          };
                                },
                            });
                        };
                        _proto.keys = function keys() {
                            return this.values();
                        };
                        _proto.values = function values() {
                            this.atom_.reportObserved();
                            var self = this;
                            var values = this.data_.values();
                            return makeIterableForSet({
                                next: function next() {
                                    var _values$next2 = values.next(),
                                        value = _values$next2.value,
                                        done = _values$next2.done;
                                    return !done
                                        ? {
                                              value: self.dehanceValue_(value),
                                              done: done,
                                          }
                                        : {
                                              value: undefined,
                                              done: done,
                                          };
                                },
                            });
                        };
                        _proto.intersection = function intersection(otherSet) {
                            if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
                                return otherSet.intersection(this);
                            } else {
                                var dehancedSet = new Set(this);
                                return dehancedSet.intersection(otherSet);
                            }
                        };
                        _proto.union = function union(otherSet) {
                            if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
                                return otherSet.union(this);
                            } else {
                                var dehancedSet = new Set(this);
                                return dehancedSet.union(otherSet);
                            }
                        };
                        _proto.difference = function difference(otherSet) {
                            return new Set(this).difference(otherSet);
                        };
                        _proto.symmetricDifference = function symmetricDifference(otherSet) {
                            if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
                                return otherSet.symmetricDifference(this);
                            } else {
                                var dehancedSet = new Set(this);
                                return dehancedSet.symmetricDifference(otherSet);
                            }
                        };
                        _proto.isSubsetOf = function isSubsetOf(otherSet) {
                            return new Set(this).isSubsetOf(otherSet);
                        };
                        _proto.isSupersetOf = function isSupersetOf(otherSet) {
                            return new Set(this).isSupersetOf(otherSet);
                        };
                        _proto.isDisjointFrom = function isDisjointFrom(otherSet) {
                            if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
                                return otherSet.isDisjointFrom(this);
                            } else {
                                var dehancedSet = new Set(this);
                                return dehancedSet.isDisjointFrom(otherSet);
                            }
                        };
                        _proto.replace = function replace(other) {
                            var _this5 = this;
                            if (isObservableSet(other)) {
                                other = new Set(other);
                            }
                            transaction(function () {
                                if (Array.isArray(other)) {
                                    _this5.clear();
                                    other.forEach(function (value) {
                                        return _this5.add(value);
                                    });
                                } else if (isES6Set(other)) {
                                    _this5.clear();
                                    other.forEach(function (value) {
                                        return _this5.add(value);
                                    });
                                } else if (other !== null && other !== undefined) {
                                    die('Cannot initialize set from ' + other);
                                }
                            });
                            return this;
                        };
                        _proto.observe_ = function observe_(listener, fireImmediately) {
                            // ... 'fireImmediately' could also be true?
                            if (false) {
                            }
                            return registerListener(this, listener);
                        };
                        _proto.intercept_ = function intercept_(handler) {
                            return registerInterceptor(this, handler);
                        };
                        _proto.toJSON = function toJSON() {
                            return Array.from(this);
                        };
                        _proto.toString = function toString() {
                            return '[object ObservableSet]';
                        };
                        _proto[Symbol.iterator] = function () {
                            return this.values();
                        };
                        return _createClass(ObservableSet, [
                            {
                                key: 'size',
                                get: function get() {
                                    this.atom_.reportObserved();
                                    return this.data_.size;
                                },
                            },
                            {
                                key: Symbol.toStringTag,
                                get: function get() {
                                    return 'Set';
                                },
                            },
                        ]);
                    })();
                    // eslint-disable-next-line
                    var isObservableSet = /*#__PURE__*/ createInstanceofPredicate('ObservableSet', ObservableSet);
                    function makeIterableForSet(iterator) {
                        iterator[Symbol.toStringTag] = 'SetIterator';
                        return makeIterable(iterator);
                    }

                    var descriptorCache = /*#__PURE__*/ Object.create(null);
                    var REMOVE = 'remove';
                    var ObservableObjectAdministration = /*#__PURE__*/ (function () {
                        function ObservableObjectAdministration(
                            target_,
                            values_,
                            name_,
                            // Used anytime annotation is not explicitely provided
                            defaultAnnotation_,
                        ) {
                            if (values_ === void 0) {
                                values_ = new Map();
                            }
                            if (defaultAnnotation_ === void 0) {
                                defaultAnnotation_ = autoAnnotation;
                            }
                            this.target_ = void 0;
                            this.values_ = void 0;
                            this.name_ = void 0;
                            this.defaultAnnotation_ = void 0;
                            this.keysAtom_ = void 0;
                            this.changeListeners_ = void 0;
                            this.interceptors_ = void 0;
                            this.proxy_ = void 0;
                            this.isPlainObject_ = void 0;
                            this.appliedAnnotations_ = void 0;
                            this.pendingKeys_ = void 0;
                            this.target_ = target_;
                            this.values_ = values_;
                            this.name_ = name_;
                            this.defaultAnnotation_ = defaultAnnotation_;
                            this.keysAtom_ = new Atom(false ? undefined : 'ObservableObject.keys');
                            // Optimization: we use this frequently
                            this.isPlainObject_ = isPlainObject(this.target_);
                            if (false) {
                            }
                            if (false) {
                            }
                        }
                        var _proto = ObservableObjectAdministration.prototype;
                        _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
                            return this.values_.get(key).get();
                        };
                        _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
                            var observable = this.values_.get(key);
                            if (observable instanceof ComputedValue) {
                                observable.set(newValue);
                                return true;
                            }
                            // intercept
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    type: UPDATE,
                                    object: this.proxy_ || this.target_,
                                    name: key,
                                    newValue: newValue,
                                });
                                if (!change) {
                                    return null;
                                }
                                newValue = change.newValue;
                            }
                            newValue = observable.prepareNewValue_(newValue);
                            // notify spy & observers
                            if (newValue !== globalState.UNCHANGED) {
                                var notify = hasListeners(this);
                                var notifySpy = false && false;
                                var _change =
                                    notify || notifySpy
                                        ? {
                                              type: UPDATE,
                                              observableKind: 'object',
                                              debugObjectName: this.name_,
                                              object: this.proxy_ || this.target_,
                                              oldValue: observable.value_,
                                              name: key,
                                              newValue: newValue,
                                          }
                                        : null;
                                if (false) {
                                }
                                observable.setNewValue_(newValue);
                                if (notify) {
                                    notifyListeners(this, _change);
                                }
                                if (false) {
                                }
                            }
                            return true;
                        };
                        _proto.get_ = function get_(key) {
                            if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
                                // Key doesn't exist yet, subscribe for it in case it's added later
                                this.has_(key);
                            }
                            return this.target_[key];
                        };
                        /**
                         * @param {PropertyKey} key
                         * @param {any} value
                         * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
                         * @param {boolean} proxyTrap whether it's called from proxy trap
                         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
                         */
                        _proto.set_ = function set_(key, value, proxyTrap) {
                            if (proxyTrap === void 0) {
                                proxyTrap = false;
                            }
                            // Don't use .has(key) - we care about own
                            if (hasProp(this.target_, key)) {
                                // Existing prop
                                if (this.values_.has(key)) {
                                    // Observable (can be intercepted)
                                    return this.setObservablePropValue_(key, value);
                                } else if (proxyTrap) {
                                    // Non-observable - proxy
                                    return Reflect.set(this.target_, key, value);
                                } else {
                                    // Non-observable
                                    this.target_[key] = value;
                                    return true;
                                }
                            } else {
                                // New prop
                                return this.extend_(
                                    key,
                                    {
                                        value: value,
                                        enumerable: true,
                                        writable: true,
                                        configurable: true,
                                    },
                                    this.defaultAnnotation_,
                                    proxyTrap,
                                );
                            }
                        };
                        // Trap for "in"
                        _proto.has_ = function has_(key) {
                            if (!globalState.trackingDerivation) {
                                // Skip key subscription outside derivation
                                return key in this.target_;
                            }
                            this.pendingKeys_ || (this.pendingKeys_ = new Map());
                            var entry = this.pendingKeys_.get(key);
                            if (!entry) {
                                entry = new ObservableValue(
                                    key in this.target_,
                                    referenceEnhancer,
                                    false ? undefined : 'ObservableObject.key?',
                                    false,
                                );
                                this.pendingKeys_.set(key, entry);
                            }
                            return entry.get();
                        };
                        /**
                         * @param {PropertyKey} key
                         * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop
                         */
                        _proto.make_ = function make_(key, annotation) {
                            if (annotation === true) {
                                annotation = this.defaultAnnotation_;
                            }
                            if (annotation === false) {
                                return;
                            }
                            assertAnnotable(this, annotation, key);
                            if (!(key in this.target_)) {
                                var _this$target_$storedA;
                                // Throw on missing key, except for decorators:
                                // Decorator annotations are collected from whole prototype chain.
                                // When called from super() some props may not exist yet.
                                // However we don't have to worry about missing prop,
                                // because the decorator must have been applied to something.
                                if (
                                    (_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null &&
                                    _this$target_$storedA[key]
                                ) {
                                    return; // will be annotated by subclass constructor
                                } else {
                                    die(1, annotation.annotationType_, this.name_ + '.' + key.toString());
                                }
                            }
                            var source = this.target_;
                            while (source && source !== objectPrototype) {
                                var descriptor = getDescriptor(source, key);
                                if (descriptor) {
                                    var outcome = annotation.make_(this, key, descriptor, source);
                                    if (outcome === 0 /* MakeResult.Cancel */) {
                                        return;
                                    }
                                    if (outcome === 1 /* MakeResult.Break */) {
                                        break;
                                    }
                                }
                                source = Object.getPrototypeOf(source);
                            }
                            recordAnnotationApplied(this, annotation, key);
                        };
                        /**
                         * @param {PropertyKey} key
                         * @param {PropertyDescriptor} descriptor
                         * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
                         * @param {boolean} proxyTrap whether it's called from proxy trap
                         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
                         */
                        _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
                            if (proxyTrap === void 0) {
                                proxyTrap = false;
                            }
                            if (annotation === true) {
                                annotation = this.defaultAnnotation_;
                            }
                            if (annotation === false) {
                                return this.defineProperty_(key, descriptor, proxyTrap);
                            }
                            assertAnnotable(this, annotation, key);
                            var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
                            if (outcome) {
                                recordAnnotationApplied(this, annotation, key);
                            }
                            return outcome;
                        };
                        /**
                         * @param {PropertyKey} key
                         * @param {PropertyDescriptor} descriptor
                         * @param {boolean} proxyTrap whether it's called from proxy trap
                         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
                         */
                        _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
                            if (proxyTrap === void 0) {
                                proxyTrap = false;
                            }
                            checkIfStateModificationsAreAllowed(this.keysAtom_);
                            try {
                                startBatch();
                                // Delete
                                var deleteOutcome = this.delete_(key);
                                if (!deleteOutcome) {
                                    // Failure or intercepted
                                    return deleteOutcome;
                                }
                                // ADD interceptor
                                if (hasInterceptors(this)) {
                                    var change = interceptChange(this, {
                                        object: this.proxy_ || this.target_,
                                        name: key,
                                        type: ADD,
                                        newValue: descriptor.value,
                                    });
                                    if (!change) {
                                        return null;
                                    }
                                    var newValue = change.newValue;
                                    if (descriptor.value !== newValue) {
                                        descriptor = _extends({}, descriptor, {
                                            value: newValue,
                                        });
                                    }
                                }
                                // Define
                                if (proxyTrap) {
                                    if (!Reflect.defineProperty(this.target_, key, descriptor)) {
                                        return false;
                                    }
                                } else {
                                    defineProperty(this.target_, key, descriptor);
                                }
                                // Notify
                                this.notifyPropertyAddition_(key, descriptor.value);
                            } finally {
                                endBatch();
                            }
                            return true;
                        };
                        // If original descriptor becomes relevant, move this to annotation directly
                        _proto.defineObservableProperty_ = function defineObservableProperty_(
                            key,
                            value,
                            enhancer,
                            proxyTrap,
                        ) {
                            if (proxyTrap === void 0) {
                                proxyTrap = false;
                            }
                            checkIfStateModificationsAreAllowed(this.keysAtom_);
                            try {
                                startBatch();
                                // Delete
                                var deleteOutcome = this.delete_(key);
                                if (!deleteOutcome) {
                                    // Failure or intercepted
                                    return deleteOutcome;
                                }
                                // ADD interceptor
                                if (hasInterceptors(this)) {
                                    var change = interceptChange(this, {
                                        object: this.proxy_ || this.target_,
                                        name: key,
                                        type: ADD,
                                        newValue: value,
                                    });
                                    if (!change) {
                                        return null;
                                    }
                                    value = change.newValue;
                                }
                                var cachedDescriptor = getCachedObservablePropDescriptor(key);
                                var descriptor = {
                                    configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
                                    enumerable: true,
                                    get: cachedDescriptor.get,
                                    set: cachedDescriptor.set,
                                };
                                // Define
                                if (proxyTrap) {
                                    if (!Reflect.defineProperty(this.target_, key, descriptor)) {
                                        return false;
                                    }
                                } else {
                                    defineProperty(this.target_, key, descriptor);
                                }
                                var observable = new ObservableValue(
                                    value,
                                    enhancer,
                                    false ? undefined : 'ObservableObject.key',
                                    false,
                                );
                                this.values_.set(key, observable);
                                // Notify (value possibly changed by ObservableValue)
                                this.notifyPropertyAddition_(key, observable.value_);
                            } finally {
                                endBatch();
                            }
                            return true;
                        };
                        // If original descriptor becomes relevant, move this to annotation directly
                        _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
                            if (proxyTrap === void 0) {
                                proxyTrap = false;
                            }
                            checkIfStateModificationsAreAllowed(this.keysAtom_);
                            try {
                                startBatch();
                                // Delete
                                var deleteOutcome = this.delete_(key);
                                if (!deleteOutcome) {
                                    // Failure or intercepted
                                    return deleteOutcome;
                                }
                                // ADD interceptor
                                if (hasInterceptors(this)) {
                                    var change = interceptChange(this, {
                                        object: this.proxy_ || this.target_,
                                        name: key,
                                        type: ADD,
                                        newValue: undefined,
                                    });
                                    if (!change) {
                                        return null;
                                    }
                                }
                                options.name || (options.name = false ? undefined : 'ObservableObject.key');
                                options.context = this.proxy_ || this.target_;
                                var cachedDescriptor = getCachedObservablePropDescriptor(key);
                                var descriptor = {
                                    configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
                                    enumerable: false,
                                    get: cachedDescriptor.get,
                                    set: cachedDescriptor.set,
                                };
                                // Define
                                if (proxyTrap) {
                                    if (!Reflect.defineProperty(this.target_, key, descriptor)) {
                                        return false;
                                    }
                                } else {
                                    defineProperty(this.target_, key, descriptor);
                                }
                                this.values_.set(key, new ComputedValue(options));
                                // Notify
                                this.notifyPropertyAddition_(key, undefined);
                            } finally {
                                endBatch();
                            }
                            return true;
                        };
                        /**
                         * @param {PropertyKey} key
                         * @param {PropertyDescriptor} descriptor
                         * @param {boolean} proxyTrap whether it's called from proxy trap
                         * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
                         */
                        _proto.delete_ = function delete_(key, proxyTrap) {
                            if (proxyTrap === void 0) {
                                proxyTrap = false;
                            }
                            checkIfStateModificationsAreAllowed(this.keysAtom_);
                            // No such prop
                            if (!hasProp(this.target_, key)) {
                                return true;
                            }
                            // Intercept
                            if (hasInterceptors(this)) {
                                var change = interceptChange(this, {
                                    object: this.proxy_ || this.target_,
                                    name: key,
                                    type: REMOVE,
                                });
                                // Cancelled
                                if (!change) {
                                    return null;
                                }
                            }
                            // Delete
                            try {
                                var _this$pendingKeys_;
                                startBatch();
                                var notify = hasListeners(this);
                                var notifySpy = false && false;
                                var observable = this.values_.get(key);
                                // Value needed for spies/listeners
                                var value = undefined;
                                // Optimization: don't pull the value unless we will need it
                                if (!observable && (notify || notifySpy)) {
                                    var _getDescriptor;
                                    value =
                                        (_getDescriptor = getDescriptor(this.target_, key)) == null
                                            ? void 0
                                            : _getDescriptor.value;
                                }
                                // delete prop (do first, may fail)
                                if (proxyTrap) {
                                    if (!Reflect.deleteProperty(this.target_, key)) {
                                        return false;
                                    }
                                } else {
                                    delete this.target_[key];
                                }
                                // Allow re-annotating this field
                                if (false) {
                                }
                                // Clear observable
                                if (observable) {
                                    this.values_['delete'](key);
                                    // for computed, value is undefined
                                    if (observable instanceof ObservableValue) {
                                        value = observable.value_;
                                    }
                                    // Notify: autorun(() => obj[key]), see #1796
                                    propagateChanged(observable);
                                }
                                // Notify "keys/entries/values" observers
                                this.keysAtom_.reportChanged();
                                // Notify "has" observers
                                // "in" as it may still exist in proto
                                (_this$pendingKeys_ = this.pendingKeys_) == null ||
                                    (_this$pendingKeys_ = _this$pendingKeys_.get(key)) == null ||
                                    _this$pendingKeys_.set(key in this.target_);
                                // Notify spies/listeners
                                if (notify || notifySpy) {
                                    var _change2 = {
                                        type: REMOVE,
                                        observableKind: 'object',
                                        object: this.proxy_ || this.target_,
                                        debugObjectName: this.name_,
                                        oldValue: value,
                                        name: key,
                                    };
                                    if (false) {
                                    }
                                    if (notify) {
                                        notifyListeners(this, _change2);
                                    }
                                    if (false) {
                                    }
                                }
                            } finally {
                                endBatch();
                            }
                            return true;
                        };
                        /**
                         * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
                         * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
                         * for callback details
                         */
                        _proto.observe_ = function observe_(callback, fireImmediately) {
                            if (false) {
                            }
                            return registerListener(this, callback);
                        };
                        _proto.intercept_ = function intercept_(handler) {
                            return registerInterceptor(this, handler);
                        };
                        _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
                            var _this$pendingKeys_2;
                            var notify = hasListeners(this);
                            var notifySpy = false && false;
                            if (notify || notifySpy) {
                                var change =
                                    notify || notifySpy
                                        ? {
                                              type: ADD,
                                              observableKind: 'object',
                                              debugObjectName: this.name_,
                                              object: this.proxy_ || this.target_,
                                              name: key,
                                              newValue: value,
                                          }
                                        : null;
                                if (false) {
                                }
                                if (notify) {
                                    notifyListeners(this, change);
                                }
                                if (false) {
                                }
                            }
                            (_this$pendingKeys_2 = this.pendingKeys_) == null ||
                                (_this$pendingKeys_2 = _this$pendingKeys_2.get(key)) == null ||
                                _this$pendingKeys_2.set(true);
                            // Notify "keys/entries/values" observers
                            this.keysAtom_.reportChanged();
                        };
                        _proto.ownKeys_ = function ownKeys_() {
                            this.keysAtom_.reportObserved();
                            return ownKeys(this.target_);
                        };
                        _proto.keys_ = function keys_() {
                            // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
                            // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
                            // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
                            // We choose to over-report in Object.keys(object), because:
                            // - typically it's used with simple data objects
                            // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
                            this.keysAtom_.reportObserved();
                            return Object.keys(this.target_);
                        };
                        return ObservableObjectAdministration;
                    })();
                    function asObservableObject(target, options) {
                        var _options$name;
                        if (false) {
                        }
                        if (hasProp(target, $mobx)) {
                            if (false) {
                            }
                            return target;
                        }
                        if (false) {
                        }
                        var name =
                            (_options$name = options == null ? void 0 : options.name) != null
                                ? _options$name
                                : false
                                ? undefined
                                : 'ObservableObject';
                        var adm = new ObservableObjectAdministration(
                            target,
                            new Map(),
                            String(name),
                            getAnnotationFromOptions(options),
                        );
                        addHiddenProp(target, $mobx, adm);
                        return target;
                    }
                    var isObservableObjectAdministration = /*#__PURE__*/ createInstanceofPredicate(
                        'ObservableObjectAdministration',
                        ObservableObjectAdministration,
                    );
                    function getCachedObservablePropDescriptor(key) {
                        return (
                            descriptorCache[key] ||
                            (descriptorCache[key] = {
                                get: function get() {
                                    return this[$mobx].getObservablePropValue_(key);
                                },
                                set: function set(value) {
                                    return this[$mobx].setObservablePropValue_(key, value);
                                },
                            })
                        );
                    }
                    function isObservableObject(thing) {
                        if (isObject(thing)) {
                            return isObservableObjectAdministration(thing[$mobx]);
                        }
                        return false;
                    }
                    function recordAnnotationApplied(adm, annotation, key) {
                        var _adm$target_$storedAn;
                        if (false) {
                        }
                        // Remove applied decorator annotation so we don't try to apply it again in subclass constructor
                        (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ||
                            delete _adm$target_$storedAn[key];
                    }
                    function assertAnnotable(adm, annotation, key) {
                        // Valid annotation
                        if (false) {
                        }
                        /*
  // Configurable, not sealed, not frozen
  // Possibly not needed, just a little better error then the one thrown by engine.
  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.
  if (__DEV__) {
      const configurable = getDescriptor(adm.target_, key)?.configurable
      const frozen = Object.isFrozen(adm.target_)
      const sealed = Object.isSealed(adm.target_)
      if (!configurable || frozen || sealed) {
          const fieldName = `${adm.name_}.${key.toString()}`
          const requestedAnnotationType = annotation.annotationType_
          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`
          if (frozen) {
              error += `\nObject is frozen.`
          }
          if (sealed) {
              error += `\nObject is sealed.`
          }
          if (!configurable) {
              error += `\nproperty is not configurable.`
              // Mention only if caused by us to avoid confusion
              if (hasProp(adm.appliedAnnotations!, key)) {
                  error += `\nTo prevent accidental re-definition of a field by a subclass, `
                  error += `all annotated fields of non-plain objects (classes) are not configurable.`
              }
          }
          die(error)
      }
  }
  */
                        // Not annotated
                        if (false) {
                            var requestedAnnotationType, currentAnnotationType, fieldName;
                        }
                    }

                    // Bug in safari 9.* (or iOS 9 safari mobile). See #364
                    var ENTRY_0 = /*#__PURE__*/ createArrayEntryDescriptor(0);
                    var safariPrototypeSetterInheritanceBug = /*#__PURE__*/ (function () {
                        var v = false;
                        var p = {};
                        Object.defineProperty(p, '0', {
                            set: function set() {
                                v = true;
                            },
                        });
                        /*#__PURE__*/ Object.create(p)['0'] = 1;
                        return v === false;
                    })();
                    /**
                     * This array buffer contains two lists of properties, so that all arrays
                     * can recycle their property definitions, which significantly improves performance of creating
                     * properties on the fly.
                     */
                    var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
                    // Typescript workaround to make sure ObservableArray extends Array
                    var StubArray = function StubArray() {};
                    function inherit(ctor, proto) {
                        if (Object.setPrototypeOf) {
                            Object.setPrototypeOf(ctor.prototype, proto);
                        } else if (ctor.prototype.__proto__ !== undefined) {
                            ctor.prototype.__proto__ = proto;
                        } else {
                            ctor.prototype = proto;
                        }
                    }
                    inherit(StubArray, Array.prototype);
                    // Weex proto freeze protection was here,
                    // but it is unclear why the hack is need as MobX never changed the prototype
                    // anyway, so removed it in V6
                    var LegacyObservableArray = /*#__PURE__*/ (function (_StubArray) {
                        function LegacyObservableArray(initialValues, enhancer, name, owned) {
                            var _this;
                            if (name === void 0) {
                                name = false ? undefined : 'ObservableArray';
                            }
                            if (owned === void 0) {
                                owned = false;
                            }
                            _this = _StubArray.call(this) || this;
                            initObservable(function () {
                                var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
                                adm.proxy_ = _this;
                                addHiddenFinalProp(_this, $mobx, adm);
                                if (initialValues && initialValues.length) {
                                    // @ts-ignore
                                    _this.spliceWithArray(0, 0, initialValues);
                                }
                                if (safariPrototypeSetterInheritanceBug) {
                                    // Seems that Safari won't use numeric prototype setter until any * numeric property is
                                    // defined on the instance. After that it works fine, even if this property is deleted.
                                    Object.defineProperty(_this, '0', ENTRY_0);
                                }
                            });
                            return _this;
                        }
                        _inheritsLoose(LegacyObservableArray, _StubArray);
                        var _proto = LegacyObservableArray.prototype;
                        _proto.concat = function concat() {
                            this[$mobx].atom_.reportObserved();
                            for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
                                arrays[_key] = arguments[_key];
                            }
                            return Array.prototype.concat.apply(
                                this.slice(),
                                //@ts-ignore
                                arrays.map(function (a) {
                                    return isObservableArray(a) ? a.slice() : a;
                                }),
                            );
                        };
                        _proto[Symbol.iterator] = function () {
                            var self = this;
                            var nextIndex = 0;
                            return makeIterable({
                                next: function next() {
                                    return nextIndex < self.length
                                        ? {
                                              value: self[nextIndex++],
                                              done: false,
                                          }
                                        : {
                                              done: true,
                                              value: undefined,
                                          };
                                },
                            });
                        };
                        return _createClass(LegacyObservableArray, [
                            {
                                key: 'length',
                                get: function get() {
                                    return this[$mobx].getArrayLength_();
                                },
                                set: function set(newLength) {
                                    this[$mobx].setArrayLength_(newLength);
                                },
                            },
                            {
                                key: Symbol.toStringTag,
                                get: function get() {
                                    return 'Array';
                                },
                            },
                        ]);
                    })(StubArray);
                    Object.entries(arrayExtensions).forEach(function (_ref) {
                        var prop = _ref[0],
                            fn = _ref[1];
                        if (prop !== 'concat') {
                            addHiddenProp(LegacyObservableArray.prototype, prop, fn);
                        }
                    });
                    function createArrayEntryDescriptor(index) {
                        return {
                            enumerable: false,
                            configurable: true,
                            get: function get() {
                                return this[$mobx].get_(index);
                            },
                            set: function set(value) {
                                this[$mobx].set_(index, value);
                            },
                        };
                    }
                    function createArrayBufferItem(index) {
                        defineProperty(LegacyObservableArray.prototype, '' + index, createArrayEntryDescriptor(index));
                    }
                    function reserveArrayBuffer(max) {
                        if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
                            for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
                                createArrayBufferItem(index);
                            }
                            OBSERVABLE_ARRAY_BUFFER_SIZE = max;
                        }
                    }
                    reserveArrayBuffer(1000);
                    function createLegacyArray(initialValues, enhancer, name) {
                        return new LegacyObservableArray(initialValues, enhancer, name);
                    }

                    function getAtom(thing, property) {
                        if (typeof thing === 'object' && thing !== null) {
                            if (isObservableArray(thing)) {
                                if (property !== undefined) {
                                    die(23);
                                }
                                return thing[$mobx].atom_;
                            }
                            if (isObservableSet(thing)) {
                                return thing.atom_;
                            }
                            if (isObservableMap(thing)) {
                                if (property === undefined) {
                                    return thing.keysAtom_;
                                }
                                var observable = thing.data_.get(property) || thing.hasMap_.get(property);
                                if (!observable) {
                                    die(25, property, getDebugName(thing));
                                }
                                return observable;
                            }
                            if (isObservableObject(thing)) {
                                if (!property) {
                                    return die(26);
                                }
                                var _observable = thing[$mobx].values_.get(property);
                                if (!_observable) {
                                    die(27, property, getDebugName(thing));
                                }
                                return _observable;
                            }
                            if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
                                return thing;
                            }
                        } else if (isFunction(thing)) {
                            if (isReaction(thing[$mobx])) {
                                // disposer function
                                return thing[$mobx];
                            }
                        }
                        die(28);
                    }
                    function getAdministration(thing, property) {
                        if (!thing) {
                            die(29);
                        }
                        if (property !== undefined) {
                            return getAdministration(getAtom(thing, property));
                        }
                        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
                            return thing;
                        }
                        if (isObservableMap(thing) || isObservableSet(thing)) {
                            return thing;
                        }
                        if (thing[$mobx]) {
                            return thing[$mobx];
                        }
                        die(24, thing);
                    }
                    function getDebugName(thing, property) {
                        var named;
                        if (property !== undefined) {
                            named = getAtom(thing, property);
                        } else if (isAction(thing)) {
                            return thing.name;
                        } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
                            named = getAdministration(thing);
                        } else {
                            // valid for arrays as well
                            named = getAtom(thing);
                        }
                        return named.name_;
                    }
                    /**
                     * Helper function for initializing observable structures, it applies:
                     * 1. allowStateChanges so we don't violate enforceActions.
                     * 2. untracked so we don't accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.
                     * 3. batch to avoid state version updates
                     */
                    function initObservable(cb) {
                        var derivation = untrackedStart();
                        var allowStateChanges = allowStateChangesStart(true);
                        startBatch();
                        try {
                            return cb();
                        } finally {
                            endBatch();
                            allowStateChangesEnd(allowStateChanges);
                            untrackedEnd(derivation);
                        }
                    }

                    var toString = objectPrototype.toString;
                    function deepEqual(a, b, depth) {
                        if (depth === void 0) {
                            depth = -1;
                        }
                        return eq(a, b, depth);
                    }
                    // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
                    // Modified: "Deep compare objects" part to iterate over keys in forward order instead of reverse order.
                    //
                    // Internal recursive comparison function for `isEqual`.
                    function eq(a, b, depth, aStack, bStack) {
                        // Identical objects are equal. `0 === -0`, but they aren't identical.
                        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
                        if (a === b) {
                            return a !== 0 || 1 / a === 1 / b;
                        }
                        // `null` or `undefined` only equal to itself (strict comparison).
                        if (a == null || b == null) {
                            return false;
                        }
                        // `NaN`s are equivalent, but non-reflexive.
                        if (a !== a) {
                            return b !== b;
                        }
                        // Exhaust primitive checks
                        var type = typeof a;
                        if (type !== 'function' && type !== 'object' && typeof b != 'object') {
                            return false;
                        }
                        // Compare `[[Class]]` names.
                        var className = toString.call(a);
                        if (className !== toString.call(b)) {
                            return false;
                        }
                        switch (className) {
                            // Strings, numbers, regular expressions, dates, and booleans are compared by value.
                            case '[object RegExp]':
                            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
                            case '[object String]':
                                // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                                // equivalent to `new String("5")`.
                                return '' + a === '' + b;
                            case '[object Number]':
                                // `NaN`s are equivalent, but non-reflexive.
                                // Object(NaN) is equivalent to NaN.
                                if (+a !== +a) {
                                    return +b !== +b;
                                }
                                // An `egal` comparison is performed for other numeric values.
                                return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                            case '[object Date]':
                            case '[object Boolean]':
                                // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                                // millisecond representations. Note that invalid dates with millisecond representations
                                // of `NaN` are not equivalent.
                                return +a === +b;
                            case '[object Symbol]':
                                return (
                                    typeof Symbol !== 'undefined' && Symbol.valueOf.call(a) === Symbol.valueOf.call(b)
                                );
                            case '[object Map]':
                            case '[object Set]':
                                // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
                                // Hide this extra level by increasing the depth.
                                if (depth >= 0) {
                                    depth++;
                                }
                                break;
                        }
                        // Unwrap any wrapped objects.
                        a = unwrap(a);
                        b = unwrap(b);
                        var areArrays = className === '[object Array]';
                        if (!areArrays) {
                            if (typeof a != 'object' || typeof b != 'object') {
                                return false;
                            }
                            // Objects with different constructors are not equivalent, but `Object`s or `Array`s
                            // from different frames are.
                            var aCtor = a.constructor,
                                bCtor = b.constructor;
                            if (
                                aCtor !== bCtor &&
                                !(
                                    isFunction(aCtor) &&
                                    aCtor instanceof aCtor &&
                                    isFunction(bCtor) &&
                                    bCtor instanceof bCtor
                                ) &&
                                'constructor' in a &&
                                'constructor' in b
                            ) {
                                return false;
                            }
                        }
                        if (depth === 0) {
                            return false;
                        } else if (depth < 0) {
                            depth = -1;
                        }
                        // Assume equality for cyclic structures. The algorithm for detecting cyclic
                        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
                        // Initializing stack of traversed objects.
                        // It's done here since we only need them for objects and arrays comparison.
                        aStack = aStack || [];
                        bStack = bStack || [];
                        var length = aStack.length;
                        while (length--) {
                            // Linear search. Performance is inversely proportional to the number of
                            // unique nested structures.
                            if (aStack[length] === a) {
                                return bStack[length] === b;
                            }
                        }
                        // Add the first object to the stack of traversed objects.
                        aStack.push(a);
                        bStack.push(b);
                        // Recursively compare objects and arrays.
                        if (areArrays) {
                            // Compare array lengths to determine if a deep comparison is necessary.
                            length = a.length;
                            if (length !== b.length) {
                                return false;
                            }
                            // Deep compare the contents, ignoring non-numeric properties.
                            while (length--) {
                                if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {
                                    return false;
                                }
                            }
                        } else {
                            // Deep compare objects.
                            var keys = Object.keys(a);
                            var _length = keys.length;
                            // Ensure that both objects contain the same number of properties before comparing deep equality.
                            if (Object.keys(b).length !== _length) {
                                return false;
                            }
                            for (var i = 0; i < _length; i++) {
                                // Deep compare each member
                                var key = keys[i];
                                if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {
                                    return false;
                                }
                            }
                        }
                        // Remove the first object from the stack of traversed objects.
                        aStack.pop();
                        bStack.pop();
                        return true;
                    }
                    function unwrap(a) {
                        if (isObservableArray(a)) {
                            return a.slice();
                        }
                        if (isES6Map(a) || isObservableMap(a)) {
                            return Array.from(a.entries());
                        }
                        if (isES6Set(a) || isObservableSet(a)) {
                            return Array.from(a.entries());
                        }
                        return a;
                    }

                    var _getGlobal$Iterator;
                    // safely get iterator prototype if available
                    var maybeIteratorPrototype =
                        ((_getGlobal$Iterator = /*#__PURE__*/ getGlobal().Iterator) == null
                            ? void 0
                            : _getGlobal$Iterator.prototype) || {};
                    function makeIterable(iterator) {
                        iterator[Symbol.iterator] = getSelf;
                        return Object.assign(Object.create(maybeIteratorPrototype), iterator);
                    }
                    function getSelf() {
                        return this;
                    }

                    function isAnnotation(thing) {
                        return (
                            // Can be function
                            thing instanceof Object &&
                            typeof thing.annotationType_ === 'string' &&
                            isFunction(thing.make_) &&
                            isFunction(thing.extend_)
                        );
                    }

                    /**
                     * (c) Michel Weststrate 2015 - 2020
                     * MIT Licensed
                     *
                     * Welcome to the mobx sources! To get a global overview of how MobX internally works,
                     * this is a good place to start:
                     * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
                     *
                     * Source folders:
                     * ===============
                     *
                     * - api/     Most of the public static methods exposed by the module can be found here.
                     * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
                     * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
                     * - utils/   Utility stuff.
                     *
                     */
                    ['Symbol', 'Map', 'Set'].forEach(function (m) {
                        var g = getGlobal();
                        if (typeof g[m] === 'undefined') {
                            die("MobX requires global '" + m + "' to be available or polyfilled");
                        }
                    });
                    if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === 'object') {
                        // See: https://github.com/andykog/mobx-devtools/
                        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
                            spy: spy,
                            extras: {
                                getDebugName: getDebugName,
                            },
                            $mobx: $mobx,
                        });
                    }

                    //# sourceMappingURL=mobx.esm.js.map

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(15));

                /***/
            },
            /* 45 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */

                var ReactIs = __webpack_require__(24);
                var assign = __webpack_require__(127);

                var ReactPropTypesSecret = __webpack_require__(25);
                var has = __webpack_require__(128);
                var checkPropTypes = __webpack_require__(129);

                var printWarning = function () {};

                if (false) {
                }

                function emptyFunctionThatReturnsNull() {
                    return null;
                }

                module.exports = function (isValidElement, throwOnDirectAccess) {
                    /* global Symbol */
                    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

                    /**
                     * Returns the iterator method function contained on the iterable object.
                     *
                     * Be sure to invoke the function with the iterable as context:
                     *
                     *     var iteratorFn = getIteratorFn(myIterable);
                     *     if (iteratorFn) {
                     *       var iterator = iteratorFn.call(myIterable);
                     *       ...
                     *     }
                     *
                     * @param {?object} maybeIterable
                     * @return {?function}
                     */
                    function getIteratorFn(maybeIterable) {
                        var iteratorFn =
                            maybeIterable &&
                            ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                                maybeIterable[FAUX_ITERATOR_SYMBOL]);
                        if (typeof iteratorFn === 'function') {
                            return iteratorFn;
                        }
                    }

                    /**
                     * Collection of methods that allow declaration and validation of props that are
                     * supplied to React components. Example usage:
                     *
                     *   var Props = require('ReactPropTypes');
                     *   var MyArticle = React.createClass({
                     *     propTypes: {
                     *       // An optional string prop named "description".
                     *       description: Props.string,
                     *
                     *       // A required enum prop named "category".
                     *       category: Props.oneOf(['News','Photos']).isRequired,
                     *
                     *       // A prop named "dialog" that requires an instance of Dialog.
                     *       dialog: Props.instanceOf(Dialog).isRequired
                     *     },
                     *     render: function() { ... }
                     *   });
                     *
                     * A more formal specification of how these methods are used:
                     *
                     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
                     *   decl := ReactPropTypes.{type}(.isRequired)?
                     *
                     * Each and every declaration produces a function with the same signature. This
                     * allows the creation of custom validation functions. For example:
                     *
                     *  var MyLink = React.createClass({
                     *    propTypes: {
                     *      // An optional string or URI prop named "href".
                     *      href: function(props, propName, componentName) {
                     *        var propValue = props[propName];
                     *        if (propValue != null && typeof propValue !== 'string' &&
                     *            !(propValue instanceof URI)) {
                     *          return new Error(
                     *            'Expected a string or an URI for ' + propName + ' in ' +
                     *            componentName
                     *          );
                     *        }
                     *      }
                     *    },
                     *    render: function() {...}
                     *  });
                     *
                     * @internal
                     */

                    var ANONYMOUS = '<<anonymous>>';

                    // Important!
                    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
                    var ReactPropTypes = {
                        array: createPrimitiveTypeChecker('array'),
                        bigint: createPrimitiveTypeChecker('bigint'),
                        bool: createPrimitiveTypeChecker('boolean'),
                        func: createPrimitiveTypeChecker('function'),
                        number: createPrimitiveTypeChecker('number'),
                        object: createPrimitiveTypeChecker('object'),
                        string: createPrimitiveTypeChecker('string'),
                        symbol: createPrimitiveTypeChecker('symbol'),

                        any: createAnyTypeChecker(),
                        arrayOf: createArrayOfTypeChecker,
                        element: createElementTypeChecker(),
                        elementType: createElementTypeTypeChecker(),
                        instanceOf: createInstanceTypeChecker,
                        node: createNodeChecker(),
                        objectOf: createObjectOfTypeChecker,
                        oneOf: createEnumTypeChecker,
                        oneOfType: createUnionTypeChecker,
                        shape: createShapeTypeChecker,
                        exact: createStrictShapeTypeChecker,
                    };

                    /**
                     * inlined Object.is polyfill to avoid requiring consumers ship their own
                     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                     */
                    /*eslint-disable no-self-compare*/
                    function is(x, y) {
                        // SameValue algorithm
                        if (x === y) {
                            // Steps 1-5, 7-10
                            // Steps 6.b-6.e: +0 != -0
                            return x !== 0 || 1 / x === 1 / y;
                        } else {
                            // Step 6.a: NaN == NaN
                            return x !== x && y !== y;
                        }
                    }
                    /*eslint-enable no-self-compare*/

                    /**
                     * We use an Error-like object for backward compatibility as people may call
                     * PropTypes directly and inspect their output. However, we don't use real
                     * Errors anymore. We don't inspect their stack anyway, and creating them
                     * is prohibitively expensive if they are created too often, such as what
                     * happens in oneOfType() for any type before the one that matched.
                     */
                    function PropTypeError(message, data) {
                        this.message = message;
                        this.data = data && typeof data === 'object' ? data : {};
                        this.stack = '';
                    }
                    // Make `instanceof Error` still work for returned errors.
                    PropTypeError.prototype = Error.prototype;

                    function createChainableTypeChecker(validate) {
                        if (false) {
                            var manualPropTypeWarningCount, manualPropTypeCallCache;
                        }
                        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                            componentName = componentName || ANONYMOUS;
                            propFullName = propFullName || propName;

                            if (secret !== ReactPropTypesSecret) {
                                if (throwOnDirectAccess) {
                                    // New behavior only for users of `prop-types` package
                                    var err = new Error(
                                        'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                                            'Use `PropTypes.checkPropTypes()` to call them. ' +
                                            'Read more at http://fb.me/use-check-prop-types',
                                    );
                                    err.name = 'Invariant Violation';
                                    throw err;
                                } else if (false) {
                                    var cacheKey;
                                }
                            }
                            if (props[propName] == null) {
                                if (isRequired) {
                                    if (props[propName] === null) {
                                        return new PropTypeError(
                                            'The ' +
                                                location +
                                                ' `' +
                                                propFullName +
                                                '` is marked as required ' +
                                                ('in `' + componentName + '`, but its value is `null`.'),
                                        );
                                    }
                                    return new PropTypeError(
                                        'The ' +
                                            location +
                                            ' `' +
                                            propFullName +
                                            '` is marked as required in ' +
                                            ('`' + componentName + '`, but its value is `undefined`.'),
                                    );
                                }
                                return null;
                            } else {
                                return validate(props, propName, componentName, location, propFullName);
                            }
                        }

                        var chainedCheckType = checkType.bind(null, false);
                        chainedCheckType.isRequired = checkType.bind(null, true);

                        return chainedCheckType;
                    }

                    function createPrimitiveTypeChecker(expectedType) {
                        function validate(props, propName, componentName, location, propFullName, secret) {
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== expectedType) {
                                // `propValue` being instance of, say, date/regexp, pass the 'object'
                                // check, but we can offer a more precise error message here rather than
                                // 'of type `object`'.
                                var preciseType = getPreciseType(propValue);

                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type ' +
                                        ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') +
                                        ('`' + expectedType + '`.'),
                                    { expectedType: expectedType },
                                );
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createAnyTypeChecker() {
                        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
                    }

                    function createArrayOfTypeChecker(typeChecker) {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (typeof typeChecker !== 'function') {
                                return new PropTypeError(
                                    'Property `' +
                                        propFullName +
                                        '` of component `' +
                                        componentName +
                                        '` has invalid PropType notation inside arrayOf.',
                                );
                            }
                            var propValue = props[propName];
                            if (!Array.isArray(propValue)) {
                                var propType = getPropType(propValue);
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type ' +
                                        ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'),
                                );
                            }
                            for (var i = 0; i < propValue.length; i++) {
                                var error = typeChecker(
                                    propValue,
                                    i,
                                    componentName,
                                    location,
                                    propFullName + '[' + i + ']',
                                    ReactPropTypesSecret,
                                );
                                if (error instanceof Error) {
                                    return error;
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createElementTypeChecker() {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            if (!isValidElement(propValue)) {
                                var propType = getPropType(propValue);
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type ' +
                                        ('`' +
                                            propType +
                                            '` supplied to `' +
                                            componentName +
                                            '`, expected a single ReactElement.'),
                                );
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createElementTypeTypeChecker() {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            if (!ReactIs.isValidElementType(propValue)) {
                                var propType = getPropType(propValue);
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type ' +
                                        ('`' +
                                            propType +
                                            '` supplied to `' +
                                            componentName +
                                            '`, expected a single ReactElement type.'),
                                );
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createInstanceTypeChecker(expectedClass) {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (!(props[propName] instanceof expectedClass)) {
                                var expectedClassName = expectedClass.name || ANONYMOUS;
                                var actualClassName = getClassName(props[propName]);
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type ' +
                                        ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') +
                                        ('instance of `' + expectedClassName + '`.'),
                                );
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createEnumTypeChecker(expectedValues) {
                        if (!Array.isArray(expectedValues)) {
                            if (false) {
                            }
                            return emptyFunctionThatReturnsNull;
                        }

                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            for (var i = 0; i < expectedValues.length; i++) {
                                if (is(propValue, expectedValues[i])) {
                                    return null;
                                }
                            }

                            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                                var type = getPreciseType(value);
                                if (type === 'symbol') {
                                    return String(value);
                                }
                                return value;
                            });
                            return new PropTypeError(
                                'Invalid ' +
                                    location +
                                    ' `' +
                                    propFullName +
                                    '` of value `' +
                                    String(propValue) +
                                    '` ' +
                                    ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'),
                            );
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createObjectOfTypeChecker(typeChecker) {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (typeof typeChecker !== 'function') {
                                return new PropTypeError(
                                    'Property `' +
                                        propFullName +
                                        '` of component `' +
                                        componentName +
                                        '` has invalid PropType notation inside objectOf.',
                                );
                            }
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== 'object') {
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type ' +
                                        ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'),
                                );
                            }
                            for (var key in propValue) {
                                if (has(propValue, key)) {
                                    var error = typeChecker(
                                        propValue,
                                        key,
                                        componentName,
                                        location,
                                        propFullName + '.' + key,
                                        ReactPropTypesSecret,
                                    );
                                    if (error instanceof Error) {
                                        return error;
                                    }
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createUnionTypeChecker(arrayOfTypeCheckers) {
                        if (!Array.isArray(arrayOfTypeCheckers)) {
                            false ? undefined : void 0;
                            return emptyFunctionThatReturnsNull;
                        }

                        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                            var checker = arrayOfTypeCheckers[i];
                            if (typeof checker !== 'function') {
                                printWarning(
                                    'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                                        'received ' +
                                        getPostfixForTypeWarning(checker) +
                                        ' at index ' +
                                        i +
                                        '.',
                                );
                                return emptyFunctionThatReturnsNull;
                            }
                        }

                        function validate(props, propName, componentName, location, propFullName) {
                            var expectedTypes = [];
                            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                                var checker = arrayOfTypeCheckers[i];
                                var checkerResult = checker(
                                    props,
                                    propName,
                                    componentName,
                                    location,
                                    propFullName,
                                    ReactPropTypesSecret,
                                );
                                if (checkerResult == null) {
                                    return null;
                                }
                                if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
                                    expectedTypes.push(checkerResult.data.expectedType);
                                }
                            }
                            var expectedTypesMessage =
                                expectedTypes.length > 0
                                    ? ', expected one of type [' + expectedTypes.join(', ') + ']'
                                    : '';
                            return new PropTypeError(
                                'Invalid ' +
                                    location +
                                    ' `' +
                                    propFullName +
                                    '` supplied to ' +
                                    ('`' + componentName + '`' + expectedTypesMessage + '.'),
                            );
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createNodeChecker() {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (!isNode(props[propName])) {
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` supplied to ' +
                                        ('`' + componentName + '`, expected a ReactNode.'),
                                );
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function invalidValidatorError(componentName, location, propFullName, key, type) {
                        return new PropTypeError(
                            (componentName || 'React class') +
                                ': ' +
                                location +
                                ' type `' +
                                propFullName +
                                '.' +
                                key +
                                '` is invalid; ' +
                                'it must be a function, usually from the `prop-types` package, but received `' +
                                type +
                                '`.',
                        );
                    }

                    function createShapeTypeChecker(shapeTypes) {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== 'object') {
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type `' +
                                        propType +
                                        '` ' +
                                        ('supplied to `' + componentName + '`, expected `object`.'),
                                );
                            }
                            for (var key in shapeTypes) {
                                var checker = shapeTypes[key];
                                if (typeof checker !== 'function') {
                                    return invalidValidatorError(
                                        componentName,
                                        location,
                                        propFullName,
                                        key,
                                        getPreciseType(checker),
                                    );
                                }
                                var error = checker(
                                    propValue,
                                    key,
                                    componentName,
                                    location,
                                    propFullName + '.' + key,
                                    ReactPropTypesSecret,
                                );
                                if (error) {
                                    return error;
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }

                    function createStrictShapeTypeChecker(shapeTypes) {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== 'object') {
                                return new PropTypeError(
                                    'Invalid ' +
                                        location +
                                        ' `' +
                                        propFullName +
                                        '` of type `' +
                                        propType +
                                        '` ' +
                                        ('supplied to `' + componentName + '`, expected `object`.'),
                                );
                            }
                            // We need to check all keys in case some are required but missing from props.
                            var allKeys = assign({}, props[propName], shapeTypes);
                            for (var key in allKeys) {
                                var checker = shapeTypes[key];
                                if (has(shapeTypes, key) && typeof checker !== 'function') {
                                    return invalidValidatorError(
                                        componentName,
                                        location,
                                        propFullName,
                                        key,
                                        getPreciseType(checker),
                                    );
                                }
                                if (!checker) {
                                    return new PropTypeError(
                                        'Invalid ' +
                                            location +
                                            ' `' +
                                            propFullName +
                                            '` key `' +
                                            key +
                                            '` supplied to `' +
                                            componentName +
                                            '`.' +
                                            '\nBad object: ' +
                                            JSON.stringify(props[propName], null, '  ') +
                                            '\nValid keys: ' +
                                            JSON.stringify(Object.keys(shapeTypes), null, '  '),
                                    );
                                }
                                var error = checker(
                                    propValue,
                                    key,
                                    componentName,
                                    location,
                                    propFullName + '.' + key,
                                    ReactPropTypesSecret,
                                );
                                if (error) {
                                    return error;
                                }
                            }
                            return null;
                        }

                        return createChainableTypeChecker(validate);
                    }

                    function isNode(propValue) {
                        switch (typeof propValue) {
                            case 'number':
                            case 'string':
                            case 'undefined':
                                return true;
                            case 'boolean':
                                return !propValue;
                            case 'object':
                                if (Array.isArray(propValue)) {
                                    return propValue.every(isNode);
                                }
                                if (propValue === null || isValidElement(propValue)) {
                                    return true;
                                }

                                var iteratorFn = getIteratorFn(propValue);
                                if (iteratorFn) {
                                    var iterator = iteratorFn.call(propValue);
                                    var step;
                                    if (iteratorFn !== propValue.entries) {
                                        while (!(step = iterator.next()).done) {
                                            if (!isNode(step.value)) {
                                                return false;
                                            }
                                        }
                                    } else {
                                        // Iterator will provide entry [k,v] tuples rather than values.
                                        while (!(step = iterator.next()).done) {
                                            var entry = step.value;
                                            if (entry) {
                                                if (!isNode(entry[1])) {
                                                    return false;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    return false;
                                }

                                return true;
                            default:
                                return false;
                        }
                    }

                    function isSymbol(propType, propValue) {
                        // Native Symbol.
                        if (propType === 'symbol') {
                            return true;
                        }

                        // falsy value can't be a Symbol
                        if (!propValue) {
                            return false;
                        }

                        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
                        if (propValue['@@toStringTag'] === 'Symbol') {
                            return true;
                        }

                        // Fallback for non-spec compliant Symbols which are polyfilled.
                        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                            return true;
                        }

                        return false;
                    }

                    // Equivalent of `typeof` but with special handling for array and regexp.
                    function getPropType(propValue) {
                        var propType = typeof propValue;
                        if (Array.isArray(propValue)) {
                            return 'array';
                        }
                        if (propValue instanceof RegExp) {
                            // Old webkits (at least until Android 4.0) return 'function' rather than
                            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                            // passes PropTypes.object.
                            return 'object';
                        }
                        if (isSymbol(propType, propValue)) {
                            return 'symbol';
                        }
                        return propType;
                    }

                    // This handles more types than `getPropType`. Only used for error messages.
                    // See `createPrimitiveTypeChecker`.
                    function getPreciseType(propValue) {
                        if (typeof propValue === 'undefined' || propValue === null) {
                            return '' + propValue;
                        }
                        var propType = getPropType(propValue);
                        if (propType === 'object') {
                            if (propValue instanceof Date) {
                                return 'date';
                            } else if (propValue instanceof RegExp) {
                                return 'regexp';
                            }
                        }
                        return propType;
                    }

                    // Returns a string that is postfixed to a warning about an invalid type.
                    // For example, "undefined" or "of type array"
                    function getPostfixForTypeWarning(value) {
                        var type = getPreciseType(value);
                        switch (type) {
                            case 'array':
                            case 'object':
                                return 'an ' + type;
                            case 'boolean':
                            case 'date':
                            case 'regexp':
                                return 'a ' + type;
                            default:
                                return type;
                        }
                    }

                    // Returns class name of the object, if any.
                    function getClassName(propValue) {
                        if (!propValue.constructor || !propValue.constructor.name) {
                            return ANONYMOUS;
                        }
                        return propValue.constructor.name;
                    }

                    ReactPropTypes.checkPropTypes = checkPropTypes;
                    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
                    ReactPropTypes.PropTypes = ReactPropTypes;

                    return ReactPropTypes;
                };

                /***/
            },
            /* 46 */
            /***/ function (module) {
                module.exports = JSON.parse(
                    '{"name":"@alilc/lowcode-renderer-core","version":"1.3.2","description":"renderer core","license":"MIT","main":"lib/index.js","module":"es/index.js","files":["lib","es"],"scripts":{"build":"build-scripts build","test":"build-scripts test --config build.test.json","test:cov":"build-scripts test --config build.test.json --jest-coverage"},"dependencies":{"@alilc/lowcode-datasource-engine":"^1.0.0","@alilc/lowcode-types":"1.3.2","@alilc/lowcode-utils":"1.3.2","classnames":"^2.2.6","debug":"^4.1.1","fetch-jsonp":"^1.1.3","intl-messageformat":"^9.3.1","jsonuri":"^2.1.2","lodash":"^4.17.11","prop-types":"^15.7.2","react-is":"^16.10.1","socket.io-client":"^2.2.0","whatwg-fetch":"^3.0.0"},"devDependencies":{"@alib/build-scripts":"^0.1.18","@alifd/next":"^1.26.0","@alilc/lowcode-designer":"1.3.2","@babel/plugin-transform-typescript":"^7.16.8","@testing-library/react":"^11.2.2","@types/classnames":"^2.2.11","@types/debug":"^4.1.5","@types/jest":"^26.0.16","@types/lodash":"^4.14.167","@types/node":"^13.7.1","@types/prop-types":"^15.7.3","@types/react-is":"^17.0.3","@types/react-test-renderer":"^17.0.1","jest":"^26.6.3","react-test-renderer":"^17.0.2","ts-jest":"^26.5.0"},"publishConfig":{"access":"public","registry":"https://registry.npmjs.org/"},"repository":{"type":"http","url":"https://github.com/alibaba/lowcode-engine/tree/main/packages/renderer-core"},"gitHead":"2669f179e6f899d395ce1942d0fe04f9c5ed48a6","bugs":"https://github.com/alibaba/lowcode-engine/issues","homepage":"https://github.com/alibaba/lowcode-engine/#readme"}',
                );

                /***/
            },
            /* 47 */
            /***/ function (module, exports, __webpack_require__) {
                var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
                (function (global, factory) {
                    if (true) {
                        !((__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, module]),
                        (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
                        (__WEBPACK_AMD_DEFINE_RESULT__ =
                            typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function'
                                ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)
                                : __WEBPACK_AMD_DEFINE_FACTORY__),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    } else {
                        var mod;
                    }
                })(this, function (exports, module) {
                    'use strict';

                    var defaultOptions = {
                        timeout: 5000,
                        jsonpCallback: 'callback',
                        jsonpCallbackFunction: null,
                    };

                    function generateCallbackFunction() {
                        return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);
                    }

                    function clearFunction(functionName) {
                        // IE8 throws an exception when you try to delete a property on window
                        // http://stackoverflow.com/a/1824228/751089
                        try {
                            delete window[functionName];
                        } catch (e) {
                            window[functionName] = undefined;
                        }
                    }

                    function removeScript(scriptId) {
                        var script = document.getElementById(scriptId);
                        if (script) {
                            document.getElementsByTagName('head')[0].removeChild(script);
                        }
                    }

                    function fetchJsonp(_url) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        // to avoid param reassign
                        var url = _url;
                        var timeout = options.timeout || defaultOptions.timeout;
                        var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;

                        var timeoutId = undefined;

                        return new Promise(function (resolve, reject) {
                            var callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();
                            var scriptId = jsonpCallback + '_' + callbackFunction;

                            window[callbackFunction] = function (response) {
                                resolve({
                                    ok: true,
                                    // keep consistent with fetch API
                                    json: function json() {
                                        return Promise.resolve(response);
                                    },
                                });

                                if (timeoutId) clearTimeout(timeoutId);

                                removeScript(scriptId);

                                clearFunction(callbackFunction);
                            };

                            // Check if the user set their own params, and if not add a ? to start a list of params
                            url += url.indexOf('?') === -1 ? '?' : '&';

                            var jsonpScript = document.createElement('script');
                            jsonpScript.setAttribute('src', '' + url + jsonpCallback + '=' + callbackFunction);
                            if (options.charset) {
                                jsonpScript.setAttribute('charset', options.charset);
                            }
                            if (options.nonce) {
                                jsonpScript.setAttribute('nonce', options.nonce);
                            }
                            if (options.referrerPolicy) {
                                jsonpScript.setAttribute('referrerPolicy', options.referrerPolicy);
                            }
                            if (options.crossorigin) {
                                jsonpScript.setAttribute('crossorigin', 'true');
                            }
                            jsonpScript.id = scriptId;
                            document.getElementsByTagName('head')[0].appendChild(jsonpScript);

                            timeoutId = setTimeout(function () {
                                reject(new Error('JSONP request to ' + _url + ' timed out'));

                                clearFunction(callbackFunction);
                                removeScript(scriptId);
                                window[callbackFunction] = function () {
                                    clearFunction(callbackFunction);
                                };
                            }, timeout);

                            // Caught if got 404/500
                            jsonpScript.onerror = function () {
                                reject(new Error('JSONP request to ' + _url + ' failed'));

                                clearFunction(callbackFunction);
                                removeScript(scriptId);
                                if (timeoutId) clearTimeout(timeoutId);
                            };
                        });
                    }

                    // export as global function
                    /*
  let local;
  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }
  local.fetchJsonp = fetchJsonp;
  */

                    module.exports = fetchJsonp;
                });

                /***/
            },
            /* 48 */
            /***/ function (module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function (process) {
                    /* eslint-env browser */

                    /**
                     * This is the web browser implementation of `debug()`.
                     */

                    exports.formatArgs = formatArgs;
                    exports.save = save;
                    exports.load = load;
                    exports.useColors = useColors;
                    exports.storage = localstorage();
                    exports.destroy = (() => {
                        let warned = false;

                        return () => {
                            if (!warned) {
                                warned = true;
                                console.warn(
                                    'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.',
                                );
                            }
                        };
                    })();

                    /**
                     * Colors.
                     */

                    exports.colors = [
                        '#0000CC',
                        '#0000FF',
                        '#0033CC',
                        '#0033FF',
                        '#0066CC',
                        '#0066FF',
                        '#0099CC',
                        '#0099FF',
                        '#00CC00',
                        '#00CC33',
                        '#00CC66',
                        '#00CC99',
                        '#00CCCC',
                        '#00CCFF',
                        '#3300CC',
                        '#3300FF',
                        '#3333CC',
                        '#3333FF',
                        '#3366CC',
                        '#3366FF',
                        '#3399CC',
                        '#3399FF',
                        '#33CC00',
                        '#33CC33',
                        '#33CC66',
                        '#33CC99',
                        '#33CCCC',
                        '#33CCFF',
                        '#6600CC',
                        '#6600FF',
                        '#6633CC',
                        '#6633FF',
                        '#66CC00',
                        '#66CC33',
                        '#9900CC',
                        '#9900FF',
                        '#9933CC',
                        '#9933FF',
                        '#99CC00',
                        '#99CC33',
                        '#CC0000',
                        '#CC0033',
                        '#CC0066',
                        '#CC0099',
                        '#CC00CC',
                        '#CC00FF',
                        '#CC3300',
                        '#CC3333',
                        '#CC3366',
                        '#CC3399',
                        '#CC33CC',
                        '#CC33FF',
                        '#CC6600',
                        '#CC6633',
                        '#CC9900',
                        '#CC9933',
                        '#CCCC00',
                        '#CCCC33',
                        '#FF0000',
                        '#FF0033',
                        '#FF0066',
                        '#FF0099',
                        '#FF00CC',
                        '#FF00FF',
                        '#FF3300',
                        '#FF3333',
                        '#FF3366',
                        '#FF3399',
                        '#FF33CC',
                        '#FF33FF',
                        '#FF6600',
                        '#FF6633',
                        '#FF9900',
                        '#FF9933',
                        '#FFCC00',
                        '#FFCC33',
                    ];

                    /**
                     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
                     * and the Firebug extension (any Firefox version) are known
                     * to support "%c" CSS customizations.
                     *
                     * TODO: add a `localStorage` variable to explicitly enable/disable colors
                     */

                    // eslint-disable-next-line complexity
                    function useColors() {
                        // NB: In an Electron preload script, document will be defined but not fully
                        // initialized. Since we know we're in Chrome, we'll just detect this case
                        // explicitly
                        if (
                            typeof window !== 'undefined' &&
                            window.process &&
                            (window.process.type === 'renderer' || window.process.__nwjs)
                        ) {
                            return true;
                        }

                        // Internet Explorer and Edge do not support colors.
                        if (
                            typeof navigator !== 'undefined' &&
                            navigator.userAgent &&
                            navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
                        ) {
                            return false;
                        }

                        let m;

                        // Is webkit? http://stackoverflow.com/a/16459606/376773
                        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
                        // eslint-disable-next-line no-return-assign
                        return (
                            (typeof document !== 'undefined' &&
                                document.documentElement &&
                                document.documentElement.style &&
                                document.documentElement.style.WebkitAppearance) ||
                            // Is firebug? http://stackoverflow.com/a/398120/376773
                            (typeof window !== 'undefined' &&
                                window.console &&
                                (window.console.firebug || (window.console.exception && window.console.table))) ||
                            // Is firefox >= v31?
                            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
                            (typeof navigator !== 'undefined' &&
                                navigator.userAgent &&
                                (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) &&
                                parseInt(m[1], 10) >= 31) ||
                            // Double check webkit in userAgent just in case we are in a worker
                            (typeof navigator !== 'undefined' &&
                                navigator.userAgent &&
                                navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
                        );
                    }

                    /**
                     * Colorize log arguments if enabled.
                     *
                     * @api public
                     */

                    function formatArgs(args) {
                        args[0] =
                            (this.useColors ? '%c' : '') +
                            this.namespace +
                            (this.useColors ? ' %c' : ' ') +
                            args[0] +
                            (this.useColors ? '%c ' : ' ') +
                            '+' +
                            module.exports.humanize(this.diff);

                        if (!this.useColors) {
                            return;
                        }

                        const c = 'color: ' + this.color;
                        args.splice(1, 0, c, 'color: inherit');

                        // The final "%c" is somewhat tricky, because there could be other
                        // arguments passed either before or after the %c, so we need to
                        // figure out the correct index to insert the CSS into
                        let index = 0;
                        let lastC = 0;
                        args[0].replace(/%[a-zA-Z%]/g, (match) => {
                            if (match === '%%') {
                                return;
                            }
                            index++;
                            if (match === '%c') {
                                // We only are interested in the *last* %c
                                // (the user may have provided their own)
                                lastC = index;
                            }
                        });

                        args.splice(lastC, 0, c);
                    }

                    /**
                     * Invokes `console.debug()` when available.
                     * No-op when `console.debug` is not a "function".
                     * If `console.debug` is not available, falls back
                     * to `console.log`.
                     *
                     * @api public
                     */
                    exports.log = console.debug || console.log || (() => {});

                    /**
                     * Save `namespaces`.
                     *
                     * @param {String} namespaces
                     * @api private
                     */
                    function save(namespaces) {
                        try {
                            if (namespaces) {
                                exports.storage.setItem('debug', namespaces);
                            } else {
                                exports.storage.removeItem('debug');
                            }
                        } catch (error) {
                            // Swallow
                            // XXX (@Qix-) should we be logging these?
                        }
                    }

                    /**
                     * Load `namespaces`.
                     *
                     * @return {String} returns the previously persisted debug modes
                     * @api private
                     */
                    function load() {
                        let r;
                        try {
                            r = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG');
                        } catch (error) {
                            // Swallow
                            // XXX (@Qix-) should we be logging these?
                        }

                        // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
                        if (!r && typeof process !== 'undefined' && 'env' in process) {
                            r = process.env.DEBUG;
                        }

                        return r;
                    }

                    /**
                     * Localstorage attempts to return the localstorage.
                     *
                     * This is necessary because safari throws
                     * when a user disables cookies/localstorage
                     * and you attempt to access it.
                     *
                     * @return {LocalStorage}
                     * @api private
                     */

                    function localstorage() {
                        try {
                            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
                            // The Browser also has localStorage in the global context.
                            return localStorage;
                        } catch (error) {
                            // Swallow
                            // XXX (@Qix-) should we be logging these?
                        }
                    }

                    module.exports = __webpack_require__(133)(exports);

                    const { formatters } = module.exports;

                    /**
                     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
                     */

                    formatters.j = function (v) {
                        try {
                            return JSON.stringify(v);
                        } catch (error) {
                            return '[UnexpectedJSONParseError]: ' + error.message;
                        }
                    };

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(132));

                /***/
            },
            /* 49 */
            /***/ function (module, exports) {
                module.exports = __WEBPACK_EXTERNAL_MODULE__49__;

                /***/
            },
            /* 50 */
            /***/ function (module, exports, __webpack_require__) {
                module.exports = __webpack_require__(135);

                /***/
            },
            /* 51 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });
                exports.create = void 0;
                var tslib_1 = __webpack_require__(2);
                var DataSourceEngineFactory_1 = tslib_1.__importDefault(__webpack_require__(52));
                exports.create = DataSourceEngineFactory_1.default;

                /***/
            },
            /* 52 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });
                var adapter_1 = __webpack_require__(53);
                var RuntimeDataSourceItem_1 = __webpack_require__(55);
                var reloadDataSourceFactory_1 = __webpack_require__(123);
                var helpers_1 = __webpack_require__(19);
                /**
                 * @param dataSource
                 * @param context
                 * @param extraConfig: { requestHandlersMap }
                 */
                exports.default = function (dataSource, context, extraConfig) {
                    if (extraConfig === void 0) {
                        extraConfig = { requestHandlersMap: {} };
                    }
                    var requestHandlersMap = extraConfig.requestHandlersMap;
                    var runtimeDataSource = (0, adapter_1.adapt2Runtime)(dataSource, context, {
                        defaultDataHandler: extraConfig.defaultDataHandler,
                    });
                    var dataSourceMap = runtimeDataSource.list.reduce(function (prev, current) {
                        prev[current.id] = new RuntimeDataSourceItem_1.RuntimeDataSourceItem(
                            current,
                            (0, helpers_1.getRequestHandler)(current, requestHandlersMap),
                            context,
                        );
                        return prev;
                    }, {});
                    return {
                        dataSourceMap: dataSourceMap,
                        reloadDataSource: (0, reloadDataSourceFactory_1.reloadDataSourceFactory)(
                            runtimeDataSource,
                            dataSourceMap,
                            runtimeDataSource.dataHandler,
                        ),
                    };
                };

                /***/
            },
            /* 53 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });
                exports.adapt2Runtime = void 0;
                var utils_1 = __webpack_require__(54);
                var helpers_1 = __webpack_require__(19);
                var adapt2Runtime = function (dataSource, context, extraConfig) {
                    var interpretConfigList = dataSource.list,
                        interpretDataHandler = dataSource.dataHandler;
                    var dataHandler = interpretDataHandler
                        ? (0, utils_1.getRuntimeJsValue)(interpretDataHandler, context)
                        : undefined;
                    // 为空判断
                    if (!interpretConfigList || !interpretConfigList.length) {
                        return {
                            list: [],
                            dataHandler: dataHandler,
                        };
                    }
                    var list = interpretConfigList.map(function (el) {
                        var customDataHandler = extraConfig.defaultDataHandler;
                        var finalDataHandler = customDataHandler || helpers_1.defaultDataHandler;
                        return {
                            id: el.id,
                            isInit: (0, utils_1.getRuntimeValueFromConfig)('boolean', el.isInit, context),
                            isSync: (0, utils_1.getRuntimeValueFromConfig)('boolean', el.isSync, context),
                            type: el.type || 'fetch',
                            willFetch: el.willFetch
                                ? (0, utils_1.getRuntimeJsValue)(el.willFetch, context)
                                : helpers_1.defaultWillFetch,
                            shouldFetch: (0, utils_1.buildShouldFetch)(el, context),
                            dataHandler: el.dataHandler
                                ? (0, utils_1.getRuntimeJsValue)(el.dataHandler, context)
                                : finalDataHandler,
                            errorHandler: el.errorHandler
                                ? (0, utils_1.getRuntimeJsValue)(el.errorHandler, context)
                                : undefined,
                            requestHandler: el.requestHandler
                                ? (0, utils_1.getRuntimeJsValue)(el.requestHandler, context)
                                : undefined,
                            options: (0, utils_1.buildOptions)(el, context),
                        };
                    });
                    return {
                        list: list,
                        dataHandler: dataHandler,
                    };
                };
                exports.adapt2Runtime = adapt2Runtime;

                /***/
            },
            /* 54 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                /* eslint-disable no-new-func */
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.buildOptions =
                    exports.buildShouldFetch =
                    exports.buildJsonObj =
                    exports.getRuntimeValueFromConfig =
                    exports.getRuntimeBaseValue =
                    exports.getRuntimeJsValue =
                    exports.transformBoolStr =
                    exports.transformFunction =
                    exports.transformExpression =
                        void 0;
                var lowcode_types_1 = __webpack_require__(0);
                function isObject(obj) {
                    return Object.prototype.toString.call(obj).indexOf('Object') !== -1;
                }
                var transformExpression = function (code, context) {
                    // 补充异常情况兼容性
                    if (code === undefined) {
                        return function () {};
                    }
                    if (code === '') {
                        return function () {
                            return '';
                        };
                    }
                    try {
                        return new Function('return ('.concat(code, ')')).call(context);
                    } catch (error) {
                        console.error(
                            'transformExpression error, code is '
                                .concat(code, ', context is ')
                                .concat(context, ', error is ')
                                .concat(error),
                        );
                    }
                };
                exports.transformExpression = transformExpression;
                var transformFunction = function (code, context) {
                    if (code === undefined) {
                        return function () {};
                    }
                    if (code === '') {
                        return function () {
                            return '';
                        };
                    }
                    try {
                        return new Function('return ('.concat(code, ')')).call(context).bind(context);
                    } catch (error) {
                        console.error(
                            'transformFunction error, code is '
                                .concat(code, ', context is ')
                                .concat(context, ', error is ')
                                .concat(error),
                        );
                    }
                };
                exports.transformFunction = transformFunction;
                var transformBoolStr = function (str) {
                    return str !== 'false';
                };
                exports.transformBoolStr = transformBoolStr;
                var getRuntimeJsValue = function (value, context) {
                    if (!['JSExpression', 'JSFunction'].includes(value.type)) {
                        console.error('translate error, value is '.concat(JSON.stringify(value)));
                        return '';
                    }
                    // TODO: 类型修复
                    var code = value.compiled || value.value;
                    return value.type === 'JSFunction'
                        ? (0, exports.transformFunction)(code, context)
                        : (0, exports.transformExpression)(code, context);
                };
                exports.getRuntimeJsValue = getRuntimeJsValue;
                var getRuntimeBaseValue = function (type, value) {
                    switch (type) {
                        case 'string':
                            return ''.concat(value);
                        case 'boolean':
                            return typeof value === 'string' ? (0, exports.transformBoolStr)(value) : !!value;
                        case 'number':
                            return Number(value);
                        default:
                            return value;
                    }
                };
                exports.getRuntimeBaseValue = getRuntimeBaseValue;
                var getRuntimeValueFromConfig = function (type, value, context) {
                    if (value === undefined) {
                        return undefined;
                    }
                    if ((0, lowcode_types_1.isJSExpression)(value) || (0, lowcode_types_1.isJSFunction)(value)) {
                        return (0, exports.getRuntimeBaseValue)(type, (0, exports.getRuntimeJsValue)(value, context));
                    }
                    return value;
                };
                exports.getRuntimeValueFromConfig = getRuntimeValueFromConfig;
                var buildJsonObj = function (params, context) {
                    if ((0, lowcode_types_1.isJSExpression)(params)) {
                        return (0, exports.transformExpression)(params.value, context);
                    } else if (isObject(params)) {
                        // 处理params内部为JSExpression的问题
                        var newParams = {};
                        for (var _i = 0, _a = Object.entries(params); _i < _a.length; _i++) {
                            var _b = _a[_i],
                                name_1 = _b[0],
                                param = _b[1];
                            if ((0, lowcode_types_1.isJSExpression)(param)) {
                                newParams[name_1] = (0, exports.transformExpression)(
                                    param === null || param === void 0 ? void 0 : param.value,
                                    context,
                                );
                            } else if (isObject(param)) {
                                newParams[name_1] = (0, exports.buildJsonObj)(param, context);
                            } else {
                                newParams[name_1] = param;
                            }
                        }
                        return newParams;
                    }
                    return params;
                };
                exports.buildJsonObj = buildJsonObj;
                var buildShouldFetch = function (ds, context) {
                    if (!ds.options || !ds.shouldFetch) {
                        return true; // 默认为 true
                    }
                    if (
                        (0, lowcode_types_1.isJSExpression)(ds.shouldFetch) ||
                        (0, lowcode_types_1.isJSFunction)(ds.shouldFetch)
                    ) {
                        return (0, exports.getRuntimeJsValue)(ds.shouldFetch, context);
                    }
                    return (0, exports.getRuntimeBaseValue)('boolean', ds.shouldFetch);
                };
                exports.buildShouldFetch = buildShouldFetch;
                var buildOptions = function (ds, context) {
                    var options = ds.options;
                    if (!options) return undefined;
                    // eslint-disable-next-line space-before-function-paren
                    return function () {
                        // 默认值
                        var fetchOptions = {
                            uri: '',
                            params: {},
                            method: 'GET',
                            isCors: true,
                            timeout: 5000,
                            headers: undefined,
                            v: '1.0',
                        };
                        Object.keys(options).forEach(function (key) {
                            switch (key) {
                                case 'uri':
                                    fetchOptions.uri = (0, exports.getRuntimeValueFromConfig)(
                                        'string',
                                        options.uri,
                                        context,
                                    );
                                    break;
                                case 'params':
                                    fetchOptions.params = (0, exports.buildJsonObj)(options.params, context);
                                    break;
                                case 'method':
                                    fetchOptions.method = (0, exports.getRuntimeValueFromConfig)(
                                        'string',
                                        options.method,
                                        context,
                                    );
                                    break;
                                case 'isCors':
                                    fetchOptions.isCors = (0, exports.getRuntimeValueFromConfig)(
                                        'boolean',
                                        options.isCors,
                                        context,
                                    );
                                    break;
                                case 'timeout':
                                    fetchOptions.timeout = (0, exports.getRuntimeValueFromConfig)(
                                        'number',
                                        options.timeout,
                                        context,
                                    );
                                    break;
                                case 'headers':
                                    fetchOptions.headers = (0, exports.buildJsonObj)(options.headers, context);
                                    break;
                                case 'v':
                                    fetchOptions.v = (0, exports.getRuntimeValueFromConfig)(
                                        'string',
                                        options.v,
                                        context,
                                    );
                                    break;
                                default:
                                    // 其余的除了做表达式或者 function 的转换，直接透传
                                    fetchOptions[key] = (0, exports.getRuntimeValueFromConfig)(
                                        'unknown',
                                        options[key],
                                        context,
                                    );
                            }
                        });
                        return fetchOptions;
                    };
                };
                exports.buildOptions = buildOptions;

                /***/
            },
            /* 55 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });
                exports.RuntimeDataSourceItem = void 0;
                var tslib_1 = __webpack_require__(2);
                /* eslint-disable @typescript-eslint/indent */
                var merge_1 = tslib_1.__importDefault(__webpack_require__(56));
                var lowcode_types_1 = __webpack_require__(0);
                var RuntimeDataSourceItem = /** @class */ (function () {
                    function RuntimeDataSourceItem(dataSourceConfig, request, context) {
                        this._status = lowcode_types_1.RuntimeDataSourceStatus.Initial;
                        this._dataSourceConfig = dataSourceConfig;
                        this._request = request;
                        this._context = context;
                    }
                    Object.defineProperty(RuntimeDataSourceItem.prototype, 'data', {
                        get: function () {
                            return this._data;
                        },
                        enumerable: false,
                        configurable: true,
                    });
                    Object.defineProperty(RuntimeDataSourceItem.prototype, 'error', {
                        get: function () {
                            return this._error;
                        },
                        enumerable: false,
                        configurable: true,
                    });
                    Object.defineProperty(RuntimeDataSourceItem.prototype, 'status', {
                        get: function () {
                            return this._status;
                        },
                        enumerable: false,
                        configurable: true,
                    });
                    Object.defineProperty(RuntimeDataSourceItem.prototype, 'isLoading', {
                        get: function () {
                            return this._status === lowcode_types_1.RuntimeDataSourceStatus.Loading;
                        },
                        enumerable: false,
                        configurable: true,
                    });
                    RuntimeDataSourceItem.prototype.load = function (params) {
                        return tslib_1.__awaiter(this, void 0, void 0, function () {
                            var response,
                                shouldFetch,
                                fetchOptions,
                                error_1,
                                dataHandler,
                                errorHandler,
                                result,
                                error_2;
                            var _a, _b, _c;
                            return tslib_1.__generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        if (!this._dataSourceConfig) return [2 /*return*/];
                                        // 考虑没有绑定对应的 handler 的情况
                                        if (!this._request) {
                                            this._error = new Error(
                                                'no '.concat(this._dataSourceConfig.type, ' handler provide'),
                                            );
                                            this._status = lowcode_types_1.RuntimeDataSourceStatus.Error;
                                            throw this._error;
                                        }
                                        if (!(this._dataSourceConfig.type === 'urlParams')) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this._request(this._context)];
                                    case 1:
                                        response = _d.sent();
                                        this._context.setState(
                                            ((_a = {}), (_a[this._dataSourceConfig.id] = response), _a),
                                        );
                                        this._data = response;
                                        this._status = lowcode_types_1.RuntimeDataSourceStatus.Loaded;
                                        return [2 /*return*/, response];
                                    case 2:
                                        if (!this._dataSourceConfig.options) {
                                            throw new Error(''.concat(this._dataSourceConfig.id, ' has no options'));
                                        }
                                        if (typeof this._dataSourceConfig.options === 'function') {
                                            this._options = this._dataSourceConfig.options();
                                        }
                                        // 考虑转换之后是 null 的场景
                                        if (!this._options) {
                                            throw new Error(
                                                ''.concat(this._dataSourceConfig.id, ' options transform error'),
                                            );
                                        }
                                        shouldFetch = true;
                                        fetchOptions = this._options;
                                        // 如果load存在参数则采取合并的策略合并参数，合并后再一起参与shouldFetch，willFetch的计算
                                        if (params) {
                                            fetchOptions.params = (0, merge_1.default)(fetchOptions.params, params);
                                        }
                                        if (this._dataSourceConfig.shouldFetch) {
                                            if (typeof this._dataSourceConfig.shouldFetch === 'function') {
                                                shouldFetch = this._dataSourceConfig.shouldFetch(fetchOptions);
                                            } else if (typeof this._dataSourceConfig.shouldFetch === 'boolean') {
                                                shouldFetch = this._dataSourceConfig.shouldFetch;
                                            }
                                        }
                                        if (!shouldFetch) {
                                            this._status = lowcode_types_1.RuntimeDataSourceStatus.Error;
                                            this._error = new Error(
                                                'the '.concat(
                                                    this._dataSourceConfig.id,
                                                    ' request should not fetch, please check the condition',
                                                ),
                                            );
                                            console.warn(this.error);
                                            return [2 /*return*/];
                                        }
                                        if (!this._dataSourceConfig.willFetch) return [3 /*break*/, 6];
                                        _d.label = 3;
                                    case 3:
                                        _d.trys.push([3, 5, , 6]);
                                        return [4 /*yield*/, this._dataSourceConfig.willFetch(this._options)];
                                    case 4:
                                        fetchOptions = _d.sent();
                                        return [3 /*break*/, 6];
                                    case 5:
                                        error_1 = _d.sent();
                                        console.error(error_1);
                                        return [3 /*break*/, 6];
                                    case 6:
                                        dataHandler = this._dataSourceConfig.dataHandler;
                                        errorHandler = this._dataSourceConfig.errorHandler;
                                        _d.label = 7;
                                    case 7:
                                        _d.trys.push([7, 9, , 10]);
                                        this._status = lowcode_types_1.RuntimeDataSourceStatus.Loading;
                                        return [
                                            4 /*yield*/,
                                            this._request(fetchOptions, this._context).then(dataHandler, errorHandler),
                                        ];
                                    case 8:
                                        result = _d.sent();
                                        // 结果赋值
                                        this._data = result;
                                        this._status = lowcode_types_1.RuntimeDataSourceStatus.Loaded;
                                        // setState
                                        this._context.setState(
                                            ((_b = {
                                                UNSTABLE_dataSourceUpdatedAt: Date.now(),
                                            }),
                                            (_b[this._dataSourceConfig.id] = result),
                                            _b),
                                        );
                                        return [2 /*return*/, this._data];
                                    case 9:
                                        error_2 = _d.sent();
                                        this._error = error_2;
                                        this._status = lowcode_types_1.RuntimeDataSourceStatus.Error;
                                        // setState
                                        this._context.setState(
                                            ((_c = {
                                                UNSTABLE_dataSourceUpdatedAt: Date.now(),
                                            }),
                                            (_c['UNSTABLE_'.concat(this._dataSourceConfig.id, '_error')] = error_2),
                                            _c),
                                        );
                                        throw error_2;
                                    case 10:
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                    return RuntimeDataSourceItem;
                })();
                exports.RuntimeDataSourceItem = RuntimeDataSourceItem;

                /***/
            },
            /* 56 */
            /***/ function (module, exports, __webpack_require__) {
                var baseMerge = __webpack_require__(57),
                    createAssigner = __webpack_require__(114);

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
                 *   'a': [{ 'b': 2 }, { 'd': 4 }]
                 * };
                 *
                 * var other = {
                 *   'a': [{ 'c': 3 }, { 'e': 5 }]
                 * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function (object, source, srcIndex) {
                    baseMerge(object, source, srcIndex);
                });

                module.exports = merge;

                /***/
            },
            /* 57 */
            /***/ function (module, exports, __webpack_require__) {
                var Stack = __webpack_require__(58),
                    assignMergeValue = __webpack_require__(30),
                    baseFor = __webpack_require__(89),
                    baseMergeDeep = __webpack_require__(91),
                    isObject = __webpack_require__(6),
                    keysIn = __webpack_require__(40),
                    safeGet = __webpack_require__(39);

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(object, source, srcIndex, customizer, stack) {
                    if (object === source) {
                        return;
                    }
                    baseFor(
                        source,
                        function (srcValue, key) {
                            stack || (stack = new Stack());
                            if (isObject(srcValue)) {
                                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                            } else {
                                var newValue = customizer
                                    ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack)
                                    : undefined;

                                if (newValue === undefined) {
                                    newValue = srcValue;
                                }
                                assignMergeValue(object, key, newValue);
                            }
                        },
                        keysIn,
                    );
                }

                module.exports = baseMerge;

                /***/
            },
            /* 58 */
            /***/ function (module, exports, __webpack_require__) {
                var ListCache = __webpack_require__(11),
                    stackClear = __webpack_require__(64),
                    stackDelete = __webpack_require__(65),
                    stackGet = __webpack_require__(66),
                    stackHas = __webpack_require__(67),
                    stackSet = __webpack_require__(68);

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                    var data = (this.__data__ = new ListCache(entries));
                    this.size = data.size;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype['delete'] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                module.exports = Stack;

                /***/
            },
            /* 59 */
            /***/ function (module, exports) {
                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                    this.__data__ = [];
                    this.size = 0;
                }

                module.exports = listCacheClear;

                /***/
            },
            /* 60 */
            /***/ function (module, exports, __webpack_require__) {
                var assocIndexOf = __webpack_require__(12);

                /** Used for built-in method references. */
                var arrayProto = Array.prototype;

                /** Built-in value references. */
                var splice = arrayProto.splice;

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                    var data = this.__data__,
                        index = assocIndexOf(data, key);

                    if (index < 0) {
                        return false;
                    }
                    var lastIndex = data.length - 1;
                    if (index == lastIndex) {
                        data.pop();
                    } else {
                        splice.call(data, index, 1);
                    }
                    --this.size;
                    return true;
                }

                module.exports = listCacheDelete;

                /***/
            },
            /* 61 */
            /***/ function (module, exports, __webpack_require__) {
                var assocIndexOf = __webpack_require__(12);

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                    var data = this.__data__,
                        index = assocIndexOf(data, key);

                    return index < 0 ? undefined : data[index][1];
                }

                module.exports = listCacheGet;

                /***/
            },
            /* 62 */
            /***/ function (module, exports, __webpack_require__) {
                var assocIndexOf = __webpack_require__(12);

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                    return assocIndexOf(this.__data__, key) > -1;
                }

                module.exports = listCacheHas;

                /***/
            },
            /* 63 */
            /***/ function (module, exports, __webpack_require__) {
                var assocIndexOf = __webpack_require__(12);

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                    var data = this.__data__,
                        index = assocIndexOf(data, key);

                    if (index < 0) {
                        ++this.size;
                        data.push([key, value]);
                    } else {
                        data[index][1] = value;
                    }
                    return this;
                }

                module.exports = listCacheSet;

                /***/
            },
            /* 64 */
            /***/ function (module, exports, __webpack_require__) {
                var ListCache = __webpack_require__(11);

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                    this.__data__ = new ListCache();
                    this.size = 0;
                }

                module.exports = stackClear;

                /***/
            },
            /* 65 */
            /***/ function (module, exports) {
                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                    var data = this.__data__,
                        result = data['delete'](key);

                    this.size = data.size;
                    return result;
                }

                module.exports = stackDelete;

                /***/
            },
            /* 66 */
            /***/ function (module, exports) {
                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                    return this.__data__.get(key);
                }

                module.exports = stackGet;

                /***/
            },
            /* 67 */
            /***/ function (module, exports) {
                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                    return this.__data__.has(key);
                }

                module.exports = stackHas;

                /***/
            },
            /* 68 */
            /***/ function (module, exports, __webpack_require__) {
                var ListCache = __webpack_require__(11),
                    Map = __webpack_require__(27),
                    MapCache = __webpack_require__(76);

                /** Used as the size to enable large array optimizations. */
                var LARGE_ARRAY_SIZE = 200;

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                    var data = this.__data__;
                    if (data instanceof ListCache) {
                        var pairs = data.__data__;
                        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                            pairs.push([key, value]);
                            this.size = ++data.size;
                            return this;
                        }
                        data = this.__data__ = new MapCache(pairs);
                    }
                    data.set(key, value);
                    this.size = data.size;
                    return this;
                }

                module.exports = stackSet;

                /***/
            },
            /* 69 */
            /***/ function (module, exports, __webpack_require__) {
                var isFunction = __webpack_require__(21),
                    isMasked = __webpack_require__(72),
                    isObject = __webpack_require__(6),
                    toSource = __webpack_require__(74);

                /**
                 * Used to match `RegExp`
                 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                 */
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

                /** Used to detect host constructors (Safari). */
                var reIsHostCtor = /^\[object .+?Constructor\]$/;

                /** Used for built-in method references. */
                var funcProto = Function.prototype,
                    objectProto = Object.prototype;

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp(
                    '^' +
                        funcToString
                            .call(hasOwnProperty)
                            .replace(reRegExpChar, '\\$&')
                            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                        '$',
                );

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                    if (!isObject(value) || isMasked(value)) {
                        return false;
                    }
                    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                    return pattern.test(toSource(value));
                }

                module.exports = baseIsNative;

                /***/
            },
            /* 70 */
            /***/ function (module, exports, __webpack_require__) {
                var Symbol = __webpack_require__(28);

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Built-in value references. */
                var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                    var isOwn = hasOwnProperty.call(value, symToStringTag),
                        tag = value[symToStringTag];

                    try {
                        value[symToStringTag] = undefined;
                        var unmasked = true;
                    } catch (e) {}

                    var result = nativeObjectToString.call(value);
                    if (unmasked) {
                        if (isOwn) {
                            value[symToStringTag] = tag;
                        } else {
                            delete value[symToStringTag];
                        }
                    }
                    return result;
                }

                module.exports = getRawTag;

                /***/
            },
            /* 71 */
            /***/ function (module, exports) {
                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                    return nativeObjectToString.call(value);
                }

                module.exports = objectToString;

                /***/
            },
            /* 72 */
            /***/ function (module, exports, __webpack_require__) {
                var coreJsData = __webpack_require__(73);

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function () {
                    var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');
                    return uid ? 'Symbol(src)_1.' + uid : '';
                })();

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                    return !!maskSrcKey && maskSrcKey in func;
                }

                module.exports = isMasked;

                /***/
            },
            /* 73 */
            /***/ function (module, exports, __webpack_require__) {
                var root = __webpack_require__(7);

                /** Used to detect overreaching core-js shims. */
                var coreJsData = root['__core-js_shared__'];

                module.exports = coreJsData;

                /***/
            },
            /* 74 */
            /***/ function (module, exports) {
                /** Used for built-in method references. */
                var funcProto = Function.prototype;

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                    if (func != null) {
                        try {
                            return funcToString.call(func);
                        } catch (e) {}
                        try {
                            return func + '';
                        } catch (e) {}
                    }
                    return '';
                }

                module.exports = toSource;

                /***/
            },
            /* 75 */
            /***/ function (module, exports) {
                /**
                 * Gets the value at `key` of `object`.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function getValue(object, key) {
                    return object == null ? undefined : object[key];
                }

                module.exports = getValue;

                /***/
            },
            /* 76 */
            /***/ function (module, exports, __webpack_require__) {
                var mapCacheClear = __webpack_require__(77),
                    mapCacheDelete = __webpack_require__(84),
                    mapCacheGet = __webpack_require__(86),
                    mapCacheHas = __webpack_require__(87),
                    mapCacheSet = __webpack_require__(88);

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                    var index = -1,
                        length = entries == null ? 0 : entries.length;

                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype['delete'] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                module.exports = MapCache;

                /***/
            },
            /* 77 */
            /***/ function (module, exports, __webpack_require__) {
                var Hash = __webpack_require__(78),
                    ListCache = __webpack_require__(11),
                    Map = __webpack_require__(27);

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                    this.size = 0;
                    this.__data__ = {
                        hash: new Hash(),
                        map: new (Map || ListCache)(),
                        string: new Hash(),
                    };
                }

                module.exports = mapCacheClear;

                /***/
            },
            /* 78 */
            /***/ function (module, exports, __webpack_require__) {
                var hashClear = __webpack_require__(79),
                    hashDelete = __webpack_require__(80),
                    hashGet = __webpack_require__(81),
                    hashHas = __webpack_require__(82),
                    hashSet = __webpack_require__(83);

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                    var index = -1,
                        length = entries == null ? 0 : entries.length;

                    this.clear();
                    while (++index < length) {
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype['delete'] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                module.exports = Hash;

                /***/
            },
            /* 79 */
            /***/ function (module, exports, __webpack_require__) {
                var nativeCreate = __webpack_require__(16);

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                    this.__data__ = nativeCreate ? nativeCreate(null) : {};
                    this.size = 0;
                }

                module.exports = hashClear;

                /***/
            },
            /* 80 */
            /***/ function (module, exports) {
                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                    var result = this.has(key) && delete this.__data__[key];
                    this.size -= result ? 1 : 0;
                    return result;
                }

                module.exports = hashDelete;

                /***/
            },
            /* 81 */
            /***/ function (module, exports, __webpack_require__) {
                var nativeCreate = __webpack_require__(16);

                /** Used to stand-in for `undefined` hash values. */
                var HASH_UNDEFINED = '__lodash_hash_undefined__';

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                    var data = this.__data__;
                    if (nativeCreate) {
                        var result = data[key];
                        return result === HASH_UNDEFINED ? undefined : result;
                    }
                    return hasOwnProperty.call(data, key) ? data[key] : undefined;
                }

                module.exports = hashGet;

                /***/
            },
            /* 82 */
            /***/ function (module, exports, __webpack_require__) {
                var nativeCreate = __webpack_require__(16);

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                    var data = this.__data__;
                    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
                }

                module.exports = hashHas;

                /***/
            },
            /* 83 */
            /***/ function (module, exports, __webpack_require__) {
                var nativeCreate = __webpack_require__(16);

                /** Used to stand-in for `undefined` hash values. */
                var HASH_UNDEFINED = '__lodash_hash_undefined__';

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                    var data = this.__data__;
                    this.size += this.has(key) ? 0 : 1;
                    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
                    return this;
                }

                module.exports = hashSet;

                /***/
            },
            /* 84 */
            /***/ function (module, exports, __webpack_require__) {
                var getMapData = __webpack_require__(17);

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                    var result = getMapData(this, key)['delete'](key);
                    this.size -= result ? 1 : 0;
                    return result;
                }

                module.exports = mapCacheDelete;

                /***/
            },
            /* 85 */
            /***/ function (module, exports) {
                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                    var type = typeof value;
                    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'
                        ? value !== '__proto__'
                        : value === null;
                }

                module.exports = isKeyable;

                /***/
            },
            /* 86 */
            /***/ function (module, exports, __webpack_require__) {
                var getMapData = __webpack_require__(17);

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                    return getMapData(this, key).get(key);
                }

                module.exports = mapCacheGet;

                /***/
            },
            /* 87 */
            /***/ function (module, exports, __webpack_require__) {
                var getMapData = __webpack_require__(17);

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                    return getMapData(this, key).has(key);
                }

                module.exports = mapCacheHas;

                /***/
            },
            /* 88 */
            /***/ function (module, exports, __webpack_require__) {
                var getMapData = __webpack_require__(17);

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                    var data = getMapData(this, key),
                        size = data.size;

                    data.set(key, value);
                    this.size += data.size == size ? 0 : 1;
                    return this;
                }

                module.exports = mapCacheSet;

                /***/
            },
            /* 89 */
            /***/ function (module, exports, __webpack_require__) {
                var createBaseFor = __webpack_require__(90);

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                module.exports = baseFor;

                /***/
            },
            /* 90 */
            /***/ function (module, exports) {
                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                    return function (object, iteratee, keysFunc) {
                        var index = -1,
                            iterable = Object(object),
                            props = keysFunc(object),
                            length = props.length;

                        while (length--) {
                            var key = props[fromRight ? length : ++index];
                            if (iteratee(iterable[key], key, iterable) === false) {
                                break;
                            }
                        }
                        return object;
                    };
                }

                module.exports = createBaseFor;

                /***/
            },
            /* 91 */
            /***/ function (module, exports, __webpack_require__) {
                var assignMergeValue = __webpack_require__(30),
                    cloneBuffer = __webpack_require__(92),
                    cloneTypedArray = __webpack_require__(93),
                    copyArray = __webpack_require__(96),
                    initCloneObject = __webpack_require__(97),
                    isArguments = __webpack_require__(34),
                    isArray = __webpack_require__(35),
                    isArrayLikeObject = __webpack_require__(101),
                    isBuffer = __webpack_require__(37),
                    isFunction = __webpack_require__(21),
                    isObject = __webpack_require__(6),
                    isPlainObject = __webpack_require__(103),
                    isTypedArray = __webpack_require__(38),
                    safeGet = __webpack_require__(39),
                    toPlainObject = __webpack_require__(107);

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                    var objValue = safeGet(object, key),
                        srcValue = safeGet(source, key),
                        stacked = stack.get(srcValue);

                    if (stacked) {
                        assignMergeValue(object, key, stacked);
                        return;
                    }
                    var newValue = customizer
                        ? customizer(objValue, srcValue, key + '', object, source, stack)
                        : undefined;

                    var isCommon = newValue === undefined;

                    if (isCommon) {
                        var isArr = isArray(srcValue),
                            isBuff = !isArr && isBuffer(srcValue),
                            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                        newValue = srcValue;
                        if (isArr || isBuff || isTyped) {
                            if (isArray(objValue)) {
                                newValue = objValue;
                            } else if (isArrayLikeObject(objValue)) {
                                newValue = copyArray(objValue);
                            } else if (isBuff) {
                                isCommon = false;
                                newValue = cloneBuffer(srcValue, true);
                            } else if (isTyped) {
                                isCommon = false;
                                newValue = cloneTypedArray(srcValue, true);
                            } else {
                                newValue = [];
                            }
                        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                            newValue = objValue;
                            if (isArguments(objValue)) {
                                newValue = toPlainObject(objValue);
                            } else if (!isObject(objValue) || isFunction(objValue)) {
                                newValue = initCloneObject(srcValue);
                            }
                        } else {
                            isCommon = false;
                        }
                    }
                    if (isCommon) {
                        // Recursively merge objects and arrays (susceptible to call stack limits).
                        stack.set(srcValue, newValue);
                        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                        stack['delete'](srcValue);
                    }
                    assignMergeValue(object, key, newValue);
                }

                module.exports = baseMergeDeep;

                /***/
            },
            /* 92 */
            /***/ function (module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function (module) {
                    var root = __webpack_require__(7);

                    /** Detect free variable `exports`. */
                    var freeExports = true && exports && !exports.nodeType && exports;

                    /** Detect free variable `module`. */
                    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                    /** Detect the popular CommonJS extension `module.exports`. */
                    var moduleExports = freeModule && freeModule.exports === freeExports;

                    /** Built-in value references. */
                    var Buffer = moduleExports ? root.Buffer : undefined,
                        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

                    /**
                     * Creates a clone of  `buffer`.
                     *
                     * @private
                     * @param {Buffer} buffer The buffer to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Buffer} Returns the cloned buffer.
                     */
                    function cloneBuffer(buffer, isDeep) {
                        if (isDeep) {
                            return buffer.slice();
                        }
                        var length = buffer.length,
                            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                        buffer.copy(result);
                        return result;
                    }

                    module.exports = cloneBuffer;

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(18)(module));

                /***/
            },
            /* 93 */
            /***/ function (module, exports, __webpack_require__) {
                var cloneArrayBuffer = __webpack_require__(94);

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                }

                module.exports = cloneTypedArray;

                /***/
            },
            /* 94 */
            /***/ function (module, exports, __webpack_require__) {
                var Uint8Array = __webpack_require__(95);

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                    return result;
                }

                module.exports = cloneArrayBuffer;

                /***/
            },
            /* 95 */
            /***/ function (module, exports, __webpack_require__) {
                var root = __webpack_require__(7);

                /** Built-in value references. */
                var Uint8Array = root.Uint8Array;

                module.exports = Uint8Array;

                /***/
            },
            /* 96 */
            /***/ function (module, exports) {
                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                    var index = -1,
                        length = source.length;

                    array || (array = Array(length));
                    while (++index < length) {
                        array[index] = source[index];
                    }
                    return array;
                }

                module.exports = copyArray;

                /***/
            },
            /* 97 */
            /***/ function (module, exports, __webpack_require__) {
                var baseCreate = __webpack_require__(98),
                    getPrototype = __webpack_require__(32),
                    isPrototype = __webpack_require__(33);

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                    return typeof object.constructor == 'function' && !isPrototype(object)
                        ? baseCreate(getPrototype(object))
                        : {};
                }

                module.exports = initCloneObject;

                /***/
            },
            /* 98 */
            /***/ function (module, exports, __webpack_require__) {
                var isObject = __webpack_require__(6);

                /** Built-in value references. */
                var objectCreate = Object.create;

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function () {
                    function object() {}
                    return function (proto) {
                        if (!isObject(proto)) {
                            return {};
                        }
                        if (objectCreate) {
                            return objectCreate(proto);
                        }
                        object.prototype = proto;
                        var result = new object();
                        object.prototype = undefined;
                        return result;
                    };
                })();

                module.exports = baseCreate;

                /***/
            },
            /* 99 */
            /***/ function (module, exports) {
                /**
                 * Creates a unary function that invokes `func` with its argument transformed.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {Function} transform The argument transform.
                 * @returns {Function} Returns the new function.
                 */
                function overArg(func, transform) {
                    return function (arg) {
                        return func(transform(arg));
                    };
                }

                module.exports = overArg;

                /***/
            },
            /* 100 */
            /***/ function (module, exports, __webpack_require__) {
                var baseGetTag = __webpack_require__(14),
                    isObjectLike = __webpack_require__(9);

                /** `Object#toString` result references. */
                var argsTag = '[object Arguments]';

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                    return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                module.exports = baseIsArguments;

                /***/
            },
            /* 101 */
            /***/ function (module, exports, __webpack_require__) {
                var isArrayLike = __webpack_require__(23),
                    isObjectLike = __webpack_require__(9);

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                    return isObjectLike(value) && isArrayLike(value);
                }

                module.exports = isArrayLikeObject;

                /***/
            },
            /* 102 */
            /***/ function (module, exports) {
                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                    return false;
                }

                module.exports = stubFalse;

                /***/
            },
            /* 103 */
            /***/ function (module, exports, __webpack_require__) {
                var baseGetTag = __webpack_require__(14),
                    getPrototype = __webpack_require__(32),
                    isObjectLike = __webpack_require__(9);

                /** `Object#toString` result references. */
                var objectTag = '[object Object]';

                /** Used for built-in method references. */
                var funcProto = Function.prototype,
                    objectProto = Object.prototype;

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                        return false;
                    }
                    var proto = getPrototype(value);
                    if (proto === null) {
                        return true;
                    }
                    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                    return (
                        typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString
                    );
                }

                module.exports = isPlainObject;

                /***/
            },
            /* 104 */
            /***/ function (module, exports, __webpack_require__) {
                var baseGetTag = __webpack_require__(14),
                    isLength = __webpack_require__(36),
                    isObjectLike = __webpack_require__(9);

                /** `Object#toString` result references. */
                var argsTag = '[object Arguments]',
                    arrayTag = '[object Array]',
                    boolTag = '[object Boolean]',
                    dateTag = '[object Date]',
                    errorTag = '[object Error]',
                    funcTag = '[object Function]',
                    mapTag = '[object Map]',
                    numberTag = '[object Number]',
                    objectTag = '[object Object]',
                    regexpTag = '[object RegExp]',
                    setTag = '[object Set]',
                    stringTag = '[object String]',
                    weakMapTag = '[object WeakMap]';

                var arrayBufferTag = '[object ArrayBuffer]',
                    dataViewTag = '[object DataView]',
                    float32Tag = '[object Float32Array]',
                    float64Tag = '[object Float64Array]',
                    int8Tag = '[object Int8Array]',
                    int16Tag = '[object Int16Array]',
                    int32Tag = '[object Int32Array]',
                    uint8Tag = '[object Uint8Array]',
                    uint8ClampedTag = '[object Uint8ClampedArray]',
                    uint16Tag = '[object Uint16Array]',
                    uint32Tag = '[object Uint32Array]';

                /** Used to identify `toStringTag` values of typed arrays. */
                var typedArrayTags = {};
                typedArrayTags[float32Tag] =
                    typedArrayTags[float64Tag] =
                    typedArrayTags[int8Tag] =
                    typedArrayTags[int16Tag] =
                    typedArrayTags[int32Tag] =
                    typedArrayTags[uint8Tag] =
                    typedArrayTags[uint8ClampedTag] =
                    typedArrayTags[uint16Tag] =
                    typedArrayTags[uint32Tag] =
                        true;
                typedArrayTags[argsTag] =
                    typedArrayTags[arrayTag] =
                    typedArrayTags[arrayBufferTag] =
                    typedArrayTags[boolTag] =
                    typedArrayTags[dataViewTag] =
                    typedArrayTags[dateTag] =
                    typedArrayTags[errorTag] =
                    typedArrayTags[funcTag] =
                    typedArrayTags[mapTag] =
                    typedArrayTags[numberTag] =
                    typedArrayTags[objectTag] =
                    typedArrayTags[regexpTag] =
                    typedArrayTags[setTag] =
                    typedArrayTags[stringTag] =
                    typedArrayTags[weakMapTag] =
                        false;

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                }

                module.exports = baseIsTypedArray;

                /***/
            },
            /* 105 */
            /***/ function (module, exports) {
                /**
                 * The base implementation of `_.unary` without support for storing metadata.
                 *
                 * @private
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 */
                function baseUnary(func) {
                    return function (value) {
                        return func(value);
                    };
                }

                module.exports = baseUnary;

                /***/
            },
            /* 106 */
            /***/ function (module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function (module) {
                    var freeGlobal = __webpack_require__(29);

                    /** Detect free variable `exports`. */
                    var freeExports = true && exports && !exports.nodeType && exports;

                    /** Detect free variable `module`. */
                    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                    /** Detect the popular CommonJS extension `module.exports`. */
                    var moduleExports = freeModule && freeModule.exports === freeExports;

                    /** Detect free variable `process` from Node.js. */
                    var freeProcess = moduleExports && freeGlobal.process;

                    /** Used to access faster Node.js helpers. */
                    var nodeUtil = (function () {
                        try {
                            // Use `util.types` for Node.js 10+.
                            var types = freeModule && freeModule.require && freeModule.require('util').types;

                            if (types) {
                                return types;
                            }

                            // Legacy `process.binding('util')` for Node.js < 10.
                            return freeProcess && freeProcess.binding && freeProcess.binding('util');
                        } catch (e) {}
                    })();

                    module.exports = nodeUtil;

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(18)(module));

                /***/
            },
            /* 107 */
            /***/ function (module, exports, __webpack_require__) {
                var copyObject = __webpack_require__(108),
                    keysIn = __webpack_require__(40);

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                    return copyObject(value, keysIn(value));
                }

                module.exports = toPlainObject;

                /***/
            },
            /* 108 */
            /***/ function (module, exports, __webpack_require__) {
                var assignValue = __webpack_require__(109),
                    baseAssignValue = __webpack_require__(22);

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                    var isNew = !object;
                    object || (object = {});

                    var index = -1,
                        length = props.length;

                    while (++index < length) {
                        var key = props[index];

                        var newValue = customizer
                            ? customizer(object[key], source[key], key, object, source)
                            : undefined;

                        if (newValue === undefined) {
                            newValue = source[key];
                        }
                        if (isNew) {
                            baseAssignValue(object, key, newValue);
                        } else {
                            assignValue(object, key, newValue);
                        }
                    }
                    return object;
                }

                module.exports = copyObject;

                /***/
            },
            /* 109 */
            /***/ function (module, exports, __webpack_require__) {
                var baseAssignValue = __webpack_require__(22),
                    eq = __webpack_require__(13);

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                    var objValue = object[key];
                    if (
                        !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                        (value === undefined && !(key in object))
                    ) {
                        baseAssignValue(object, key, value);
                    }
                }

                module.exports = assignValue;

                /***/
            },
            /* 110 */
            /***/ function (module, exports, __webpack_require__) {
                var baseTimes = __webpack_require__(111),
                    isArguments = __webpack_require__(34),
                    isArray = __webpack_require__(35),
                    isBuffer = __webpack_require__(37),
                    isIndex = __webpack_require__(41),
                    isTypedArray = __webpack_require__(38);

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                    var isArr = isArray(value),
                        isArg = !isArr && isArguments(value),
                        isBuff = !isArr && !isArg && isBuffer(value),
                        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                        skipIndexes = isArr || isArg || isBuff || isType,
                        result = skipIndexes ? baseTimes(value.length, String) : [],
                        length = result.length;

                    for (var key in value) {
                        if (
                            (inherited || hasOwnProperty.call(value, key)) &&
                            !(
                                skipIndexes &&
                                // Safari 9 has enumerable `arguments.length` in strict mode.
                                (key == 'length' ||
                                    // Node.js 0.10 has enumerable non-index properties on buffers.
                                    (isBuff && (key == 'offset' || key == 'parent')) ||
                                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                    // Skip index properties.
                                    isIndex(key, length))
                            )
                        ) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                module.exports = arrayLikeKeys;

                /***/
            },
            /* 111 */
            /***/ function (module, exports) {
                /**
                 * The base implementation of `_.times` without support for iteratee shorthands
                 * or max array length checks.
                 *
                 * @private
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 */
                function baseTimes(n, iteratee) {
                    var index = -1,
                        result = Array(n);

                    while (++index < n) {
                        result[index] = iteratee(index);
                    }
                    return result;
                }

                module.exports = baseTimes;

                /***/
            },
            /* 112 */
            /***/ function (module, exports, __webpack_require__) {
                var isObject = __webpack_require__(6),
                    isPrototype = __webpack_require__(33),
                    nativeKeysIn = __webpack_require__(113);

                /** Used for built-in method references. */
                var objectProto = Object.prototype;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                    if (!isObject(object)) {
                        return nativeKeysIn(object);
                    }
                    var isProto = isPrototype(object),
                        result = [];

                    for (var key in object) {
                        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                module.exports = baseKeysIn;

                /***/
            },
            /* 113 */
            /***/ function (module, exports) {
                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                    var result = [];
                    if (object != null) {
                        for (var key in Object(object)) {
                            result.push(key);
                        }
                    }
                    return result;
                }

                module.exports = nativeKeysIn;

                /***/
            },
            /* 114 */
            /***/ function (module, exports, __webpack_require__) {
                var baseRest = __webpack_require__(115),
                    isIterateeCall = __webpack_require__(122);

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                    return baseRest(function (object, sources) {
                        var index = -1,
                            length = sources.length,
                            customizer = length > 1 ? sources[length - 1] : undefined,
                            guard = length > 2 ? sources[2] : undefined;

                        customizer =
                            assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

                        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                            customizer = length < 3 ? undefined : customizer;
                            length = 1;
                        }
                        object = Object(object);
                        while (++index < length) {
                            var source = sources[index];
                            if (source) {
                                assigner(object, source, index, customizer);
                            }
                        }
                        return object;
                    });
                }

                module.exports = createAssigner;

                /***/
            },
            /* 115 */
            /***/ function (module, exports, __webpack_require__) {
                var identity = __webpack_require__(42),
                    overRest = __webpack_require__(116),
                    setToString = __webpack_require__(118);

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                    return setToString(overRest(func, start, identity), func + '');
                }

                module.exports = baseRest;

                /***/
            },
            /* 116 */
            /***/ function (module, exports, __webpack_require__) {
                var apply = __webpack_require__(117);

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeMax = Math.max;

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
                    return function () {
                        var args = arguments,
                            index = -1,
                            length = nativeMax(args.length - start, 0),
                            array = Array(length);

                        while (++index < length) {
                            array[index] = args[start + index];
                        }
                        index = -1;
                        var otherArgs = Array(start + 1);
                        while (++index < start) {
                            otherArgs[index] = args[index];
                        }
                        otherArgs[start] = transform(array);
                        return apply(func, this, otherArgs);
                    };
                }

                module.exports = overRest;

                /***/
            },
            /* 117 */
            /***/ function (module, exports) {
                /**
                 * A faster alternative to `Function#apply`, this function invokes `func`
                 * with the `this` binding of `thisArg` and the arguments of `args`.
                 *
                 * @private
                 * @param {Function} func The function to invoke.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} args The arguments to invoke `func` with.
                 * @returns {*} Returns the result of `func`.
                 */
                function apply(func, thisArg, args) {
                    switch (args.length) {
                        case 0:
                            return func.call(thisArg);
                        case 1:
                            return func.call(thisArg, args[0]);
                        case 2:
                            return func.call(thisArg, args[0], args[1]);
                        case 3:
                            return func.call(thisArg, args[0], args[1], args[2]);
                    }
                    return func.apply(thisArg, args);
                }

                module.exports = apply;

                /***/
            },
            /* 118 */
            /***/ function (module, exports, __webpack_require__) {
                var baseSetToString = __webpack_require__(119),
                    shortOut = __webpack_require__(121);

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                module.exports = setToString;

                /***/
            },
            /* 119 */
            /***/ function (module, exports, __webpack_require__) {
                var constant = __webpack_require__(120),
                    defineProperty = __webpack_require__(31),
                    identity = __webpack_require__(42);

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty
                    ? identity
                    : function (func, string) {
                          return defineProperty(func, 'toString', {
                              configurable: true,
                              enumerable: false,
                              value: constant(string),
                              writable: true,
                          });
                      };

                module.exports = baseSetToString;

                /***/
            },
            /* 120 */
            /***/ function (module, exports) {
                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                    return function () {
                        return value;
                    };
                }

                module.exports = constant;

                /***/
            },
            /* 121 */
            /***/ function (module, exports) {
                /** Used to detect hot functions by number of calls within a span of milliseconds. */
                var HOT_COUNT = 800,
                    HOT_SPAN = 16;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeNow = Date.now;

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                    var count = 0,
                        lastCalled = 0;

                    return function () {
                        var stamp = nativeNow(),
                            remaining = HOT_SPAN - (stamp - lastCalled);

                        lastCalled = stamp;
                        if (remaining > 0) {
                            if (++count >= HOT_COUNT) {
                                return arguments[0];
                            }
                        } else {
                            count = 0;
                        }
                        return func.apply(undefined, arguments);
                    };
                }

                module.exports = shortOut;

                /***/
            },
            /* 122 */
            /***/ function (module, exports, __webpack_require__) {
                var eq = __webpack_require__(13),
                    isArrayLike = __webpack_require__(23),
                    isIndex = __webpack_require__(41),
                    isObject = __webpack_require__(6);

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                    if (!isObject(object)) {
                        return false;
                    }
                    var type = typeof index;
                    if (
                        type == 'number'
                            ? isArrayLike(object) && isIndex(index, object.length)
                            : type == 'string' && index in object
                    ) {
                        return eq(object[index], value);
                    }
                    return false;
                }

                module.exports = isIterateeCall;

                /***/
            },
            /* 123 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';

                Object.defineProperty(exports, '__esModule', { value: true });
                exports.reloadDataSourceFactory = void 0;
                var tslib_1 = __webpack_require__(2);
                var helpers_1 = __webpack_require__(19);
                var reloadDataSourceFactory = function (dataSource, dataSourceMap, dataHandler) {
                    return function () {
                        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            var allAsyncLoadings,
                                remainRuntimeDataSourceList,
                                _i,
                                remainRuntimeDataSourceList_1,
                                ds,
                                _a,
                                remainRuntimeDataSourceList_2,
                                ds,
                                e_1;
                            return tslib_1.__generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        allAsyncLoadings = [];
                                        // TODO: 那么，如果有新的类型过来，这个地方怎么处理???
                                        // 单独处理 urlParams 类型的
                                        dataSource.list
                                            .filter(function (el) {
                                                // eslint-disable-next-line implicit-arrow-linebreak
                                                return el.type === 'urlParams' && isInit(el);
                                            })
                                            .forEach(function (el) {
                                                dataSourceMap[el.id].load();
                                            });
                                        remainRuntimeDataSourceList = dataSource.list.filter(function (el) {
                                            return el.type !== 'urlParams';
                                        });
                                        // 处理并行
                                        for (
                                            _i = 0, remainRuntimeDataSourceList_1 = remainRuntimeDataSourceList;
                                            _i < remainRuntimeDataSourceList_1.length;
                                            _i++
                                        ) {
                                            ds = remainRuntimeDataSourceList_1[_i];
                                            if (!ds.options) {
                                                continue;
                                            }
                                            if (
                                                // 需要考虑出码直接不传值的情况
                                                isInit(ds) &&
                                                !ds.isSync
                                            ) {
                                                allAsyncLoadings.push(dataSourceMap[ds.id].load());
                                            }
                                        }
                                        (_a = 0), (remainRuntimeDataSourceList_2 = remainRuntimeDataSourceList);
                                        _b.label = 1;
                                    case 1:
                                        if (!(_a < remainRuntimeDataSourceList_2.length)) return [3 /*break*/, 6];
                                        ds = remainRuntimeDataSourceList_2[_a];
                                        if (!ds.options) {
                                            return [3 /*break*/, 5];
                                        }
                                        if (
                                            !(
                                                // 需要考虑出码直接不传值的情况
                                                (isInit(ds) && ds.isSync)
                                            )
                                        )
                                            // 需要考虑出码直接不传值的情况
                                            return [3 /*break*/, 5];
                                        _b.label = 2;
                                    case 2:
                                        _b.trys.push([2, 4, , 5]);
                                        // eslint-disable-next-line no-await-in-loop
                                        return [4 /*yield*/, dataSourceMap[ds.id].load()];
                                    case 3:
                                        // eslint-disable-next-line no-await-in-loop
                                        _b.sent();
                                        return [3 /*break*/, 5];
                                    case 4:
                                        e_1 = _b.sent();
                                        // TODO: 这个错误直接吃掉？
                                        console.error(e_1);
                                        return [3 /*break*/, 5];
                                    case 5:
                                        _a++;
                                        return [3 /*break*/, 1];
                                    case 6:
                                        return [4 /*yield*/, (0, helpers_1.promiseSettled)(allAsyncLoadings)];
                                    case 7:
                                        _b.sent();
                                        // 所有的初始化请求都结束之后，调用钩子函数
                                        if (dataHandler) {
                                            dataHandler(dataSourceMap);
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                };
                exports.reloadDataSourceFactory = reloadDataSourceFactory;
                function isInit(ds) {
                    var _a;
                    return typeof ds.isInit === 'function'
                        ? ds.isInit()
                        : (_a = ds.isInit) !== null && _a !== void 0
                        ? _a
                        : true;
                }

                /***/
            },
            /* 124 */
            /***/ function (module, exports, __webpack_require__) {
                // extracted by mini-css-extract-plugin
                /***/
            },
            /* 125 */
            /***/ function (module, exports, __webpack_require__) {
                // extracted by mini-css-extract-plugin
                /***/
            },
            /* 126 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';
                /** @license React v16.13.1
                 * react-is.production.min.js
                 *
                 * Copyright (c) Facebook, Inc. and its affiliates.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */

                var b = 'function' === typeof Symbol && Symbol.for,
                    c = b ? Symbol.for('react.element') : 60103,
                    d = b ? Symbol.for('react.portal') : 60106,
                    e = b ? Symbol.for('react.fragment') : 60107,
                    f = b ? Symbol.for('react.strict_mode') : 60108,
                    g = b ? Symbol.for('react.profiler') : 60114,
                    h = b ? Symbol.for('react.provider') : 60109,
                    k = b ? Symbol.for('react.context') : 60110,
                    l = b ? Symbol.for('react.async_mode') : 60111,
                    m = b ? Symbol.for('react.concurrent_mode') : 60111,
                    n = b ? Symbol.for('react.forward_ref') : 60112,
                    p = b ? Symbol.for('react.suspense') : 60113,
                    q = b ? Symbol.for('react.suspense_list') : 60120,
                    r = b ? Symbol.for('react.memo') : 60115,
                    t = b ? Symbol.for('react.lazy') : 60116,
                    v = b ? Symbol.for('react.block') : 60121,
                    w = b ? Symbol.for('react.fundamental') : 60117,
                    x = b ? Symbol.for('react.responder') : 60118,
                    y = b ? Symbol.for('react.scope') : 60119;
                function z(a) {
                    if ('object' === typeof a && null !== a) {
                        var u = a.$$typeof;
                        switch (u) {
                            case c:
                                switch (((a = a.type), a)) {
                                    case l:
                                    case m:
                                    case e:
                                    case g:
                                    case f:
                                    case p:
                                        return a;
                                    default:
                                        switch (((a = a && a.$$typeof), a)) {
                                            case k:
                                            case n:
                                            case t:
                                            case r:
                                            case h:
                                                return a;
                                            default:
                                                return u;
                                        }
                                }
                            case d:
                                return u;
                        }
                    }
                }
                function A(a) {
                    return z(a) === m;
                }
                exports.AsyncMode = l;
                exports.ConcurrentMode = m;
                exports.ContextConsumer = k;
                exports.ContextProvider = h;
                exports.Element = c;
                exports.ForwardRef = n;
                exports.Fragment = e;
                exports.Lazy = t;
                exports.Memo = r;
                exports.Portal = d;
                exports.Profiler = g;
                exports.StrictMode = f;
                exports.Suspense = p;
                exports.isAsyncMode = function (a) {
                    return A(a) || z(a) === l;
                };
                exports.isConcurrentMode = A;
                exports.isContextConsumer = function (a) {
                    return z(a) === k;
                };
                exports.isContextProvider = function (a) {
                    return z(a) === h;
                };
                exports.isElement = function (a) {
                    return 'object' === typeof a && null !== a && a.$$typeof === c;
                };
                exports.isForwardRef = function (a) {
                    return z(a) === n;
                };
                exports.isFragment = function (a) {
                    return z(a) === e;
                };
                exports.isLazy = function (a) {
                    return z(a) === t;
                };
                exports.isMemo = function (a) {
                    return z(a) === r;
                };
                exports.isPortal = function (a) {
                    return z(a) === d;
                };
                exports.isProfiler = function (a) {
                    return z(a) === g;
                };
                exports.isStrictMode = function (a) {
                    return z(a) === f;
                };
                exports.isSuspense = function (a) {
                    return z(a) === p;
                };
                exports.isValidElementType = function (a) {
                    return (
                        'string' === typeof a ||
                        'function' === typeof a ||
                        a === e ||
                        a === m ||
                        a === g ||
                        a === f ||
                        a === p ||
                        a === q ||
                        ('object' === typeof a &&
                            null !== a &&
                            (a.$$typeof === t ||
                                a.$$typeof === r ||
                                a.$$typeof === h ||
                                a.$$typeof === k ||
                                a.$$typeof === n ||
                                a.$$typeof === w ||
                                a.$$typeof === x ||
                                a.$$typeof === y ||
                                a.$$typeof === v))
                    );
                };
                exports.typeOf = z;

                /***/
            },
            /* 127 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';
                /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

                /* eslint-disable no-unused-vars */
                var getOwnPropertySymbols = Object.getOwnPropertySymbols;
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var propIsEnumerable = Object.prototype.propertyIsEnumerable;

                function toObject(val) {
                    if (val === null || val === undefined) {
                        throw new TypeError('Object.assign cannot be called with null or undefined');
                    }

                    return Object(val);
                }

                function shouldUseNative() {
                    try {
                        if (!Object.assign) {
                            return false;
                        }

                        // Detect buggy property enumeration order in older V8 versions.

                        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
                        test1[5] = 'de';
                        if (Object.getOwnPropertyNames(test1)[0] === '5') {
                            return false;
                        }

                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                        var test2 = {};
                        for (var i = 0; i < 10; i++) {
                            test2['_' + String.fromCharCode(i)] = i;
                        }
                        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                            return test2[n];
                        });
                        if (order2.join('') !== '0123456789') {
                            return false;
                        }

                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                        var test3 = {};
                        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                            test3[letter] = letter;
                        });
                        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                            return false;
                        }

                        return true;
                    } catch (err) {
                        // We don't expect any of the above to throw, but better to be safe.
                        return false;
                    }
                }

                module.exports = shouldUseNative()
                    ? Object.assign
                    : function (target, source) {
                          var from;
                          var to = toObject(target);
                          var symbols;

                          for (var s = 1; s < arguments.length; s++) {
                              from = Object(arguments[s]);

                              for (var key in from) {
                                  if (hasOwnProperty.call(from, key)) {
                                      to[key] = from[key];
                                  }
                              }

                              if (getOwnPropertySymbols) {
                                  symbols = getOwnPropertySymbols(from);
                                  for (var i = 0; i < symbols.length; i++) {
                                      if (propIsEnumerable.call(from, symbols[i])) {
                                          to[symbols[i]] = from[symbols[i]];
                                      }
                                  }
                              }
                          }

                          return to;
                      };

                /***/
            },
            /* 128 */
            /***/ function (module, exports) {
                module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

                /***/
            },
            /* 129 */
            /***/ function (module, exports, __webpack_require__) {
                'use strict';
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */

                var printWarning = function () {};

                if (false) {
                    var has, loggedTypeFailures, ReactPropTypesSecret;
                }

                /**
                 * Assert that the values match with the type specs.
                 * Error messages are memorized and will only be shown once.
                 *
                 * @param {object} typeSpecs Map of name to a ReactPropType
                 * @param {object} values Runtime values that need to be type-checked
                 * @param {string} location e.g. "prop", "context", "child context"
                 * @param {string} componentName Name of the component for error messages.
                 * @param {?Function} getStack Returns the component stack.
                 * @private
                 */
                function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
                    if (false) {
                        var stack, err, error, typeSpecName;
                    }
                }

                /**
                 * Resets warning cache when testing.
                 *
                 * @private
                 */
                checkPropTypes.resetWarningCache = function () {
                    if (false) {
                    }
                };

                module.exports = checkPropTypes;

                /***/
            },
            /* 130 */
            /***/ function (module, exports, __webpack_require__) {
                // extracted by mini-css-extract-plugin
                /***/
            },
            /* 131 */
            /***/ function (module, __webpack_exports__, __webpack_require__) {
                'use strict';
                /* WEBPACK VAR INJECTION */ (function (global) {
                    /* unused harmony export Headers */
                    /* unused harmony export Request */
                    /* unused harmony export Response */
                    /* unused harmony export DOMException */
                    /* unused harmony export fetch */
                    /* eslint-disable no-prototype-builtins */
                    var g =
                        (typeof globalThis !== 'undefined' && globalThis) ||
                        (typeof self !== 'undefined' && self) ||
                        // eslint-disable-next-line no-undef
                        (typeof global !== 'undefined' && global) ||
                        {};

                    var support = {
                        searchParams: 'URLSearchParams' in g,
                        iterable: 'Symbol' in g && 'iterator' in Symbol,
                        blob:
                            'FileReader' in g &&
                            'Blob' in g &&
                            (function () {
                                try {
                                    new Blob();
                                    return true;
                                } catch (e) {
                                    return false;
                                }
                            })(),
                        formData: 'FormData' in g,
                        arrayBuffer: 'ArrayBuffer' in g,
                    };

                    function isDataView(obj) {
                        return obj && DataView.prototype.isPrototypeOf(obj);
                    }

                    if (support.arrayBuffer) {
                        var viewClasses = [
                            '[object Int8Array]',
                            '[object Uint8Array]',
                            '[object Uint8ClampedArray]',
                            '[object Int16Array]',
                            '[object Uint16Array]',
                            '[object Int32Array]',
                            '[object Uint32Array]',
                            '[object Float32Array]',
                            '[object Float64Array]',
                        ];

                        var isArrayBufferView =
                            ArrayBuffer.isView ||
                            function (obj) {
                                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                            };
                    }

                    function normalizeName(name) {
                        if (typeof name !== 'string') {
                            name = String(name);
                        }
                        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
                            throw new TypeError('Invalid character in header field name: "' + name + '"');
                        }
                        return name.toLowerCase();
                    }

                    function normalizeValue(value) {
                        if (typeof value !== 'string') {
                            value = String(value);
                        }
                        return value;
                    }

                    // Build a destructive iterator for the value list
                    function iteratorFor(items) {
                        var iterator = {
                            next: function () {
                                var value = items.shift();
                                return { done: value === undefined, value: value };
                            },
                        };

                        if (support.iterable) {
                            iterator[Symbol.iterator] = function () {
                                return iterator;
                            };
                        }

                        return iterator;
                    }

                    function Headers(headers) {
                        this.map = {};

                        if (headers instanceof Headers) {
                            headers.forEach(function (value, name) {
                                this.append(name, value);
                            }, this);
                        } else if (Array.isArray(headers)) {
                            headers.forEach(function (header) {
                                if (header.length != 2) {
                                    throw new TypeError(
                                        'Headers constructor: expected name/value pair to be length 2, found' +
                                            header.length,
                                    );
                                }
                                this.append(header[0], header[1]);
                            }, this);
                        } else if (headers) {
                            Object.getOwnPropertyNames(headers).forEach(function (name) {
                                this.append(name, headers[name]);
                            }, this);
                        }
                    }

                    Headers.prototype.append = function (name, value) {
                        name = normalizeName(name);
                        value = normalizeValue(value);
                        var oldValue = this.map[name];
                        this.map[name] = oldValue ? oldValue + ', ' + value : value;
                    };

                    Headers.prototype['delete'] = function (name) {
                        delete this.map[normalizeName(name)];
                    };

                    Headers.prototype.get = function (name) {
                        name = normalizeName(name);
                        return this.has(name) ? this.map[name] : null;
                    };

                    Headers.prototype.has = function (name) {
                        return this.map.hasOwnProperty(normalizeName(name));
                    };

                    Headers.prototype.set = function (name, value) {
                        this.map[normalizeName(name)] = normalizeValue(value);
                    };

                    Headers.prototype.forEach = function (callback, thisArg) {
                        for (var name in this.map) {
                            if (this.map.hasOwnProperty(name)) {
                                callback.call(thisArg, this.map[name], name, this);
                            }
                        }
                    };

                    Headers.prototype.keys = function () {
                        var items = [];
                        this.forEach(function (value, name) {
                            items.push(name);
                        });
                        return iteratorFor(items);
                    };

                    Headers.prototype.values = function () {
                        var items = [];
                        this.forEach(function (value) {
                            items.push(value);
                        });
                        return iteratorFor(items);
                    };

                    Headers.prototype.entries = function () {
                        var items = [];
                        this.forEach(function (value, name) {
                            items.push([name, value]);
                        });
                        return iteratorFor(items);
                    };

                    if (support.iterable) {
                        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
                    }

                    function consumed(body) {
                        if (body._noBody) return;
                        if (body.bodyUsed) {
                            return Promise.reject(new TypeError('Already read'));
                        }
                        body.bodyUsed = true;
                    }

                    function fileReaderReady(reader) {
                        return new Promise(function (resolve, reject) {
                            reader.onload = function () {
                                resolve(reader.result);
                            };
                            reader.onerror = function () {
                                reject(reader.error);
                            };
                        });
                    }

                    function readBlobAsArrayBuffer(blob) {
                        var reader = new FileReader();
                        var promise = fileReaderReady(reader);
                        reader.readAsArrayBuffer(blob);
                        return promise;
                    }

                    function readBlobAsText(blob) {
                        var reader = new FileReader();
                        var promise = fileReaderReady(reader);
                        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
                        var encoding = match ? match[1] : 'utf-8';
                        reader.readAsText(blob, encoding);
                        return promise;
                    }

                    function readArrayBufferAsText(buf) {
                        var view = new Uint8Array(buf);
                        var chars = new Array(view.length);

                        for (var i = 0; i < view.length; i++) {
                            chars[i] = String.fromCharCode(view[i]);
                        }
                        return chars.join('');
                    }

                    function bufferClone(buf) {
                        if (buf.slice) {
                            return buf.slice(0);
                        } else {
                            var view = new Uint8Array(buf.byteLength);
                            view.set(new Uint8Array(buf));
                            return view.buffer;
                        }
                    }

                    function Body() {
                        this.bodyUsed = false;

                        this._initBody = function (body) {
                            /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
                            // eslint-disable-next-line no-self-assign
                            this.bodyUsed = this.bodyUsed;
                            this._bodyInit = body;
                            if (!body) {
                                this._noBody = true;
                                this._bodyText = '';
                            } else if (typeof body === 'string') {
                                this._bodyText = body;
                            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                                this._bodyBlob = body;
                            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                                this._bodyFormData = body;
                            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                                this._bodyText = body.toString();
                            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                                this._bodyArrayBuffer = bufferClone(body.buffer);
                                // IE 10-11 can't handle a DataView body.
                                this._bodyInit = new Blob([this._bodyArrayBuffer]);
                            } else if (
                                support.arrayBuffer &&
                                (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))
                            ) {
                                this._bodyArrayBuffer = bufferClone(body);
                            } else {
                                this._bodyText = body = Object.prototype.toString.call(body);
                            }

                            if (!this.headers.get('content-type')) {
                                if (typeof body === 'string') {
                                    this.headers.set('content-type', 'text/plain;charset=UTF-8');
                                } else if (this._bodyBlob && this._bodyBlob.type) {
                                    this.headers.set('content-type', this._bodyBlob.type);
                                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                                    this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                                }
                            }
                        };

                        if (support.blob) {
                            this.blob = function () {
                                var rejected = consumed(this);
                                if (rejected) {
                                    return rejected;
                                }

                                if (this._bodyBlob) {
                                    return Promise.resolve(this._bodyBlob);
                                } else if (this._bodyArrayBuffer) {
                                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                                } else if (this._bodyFormData) {
                                    throw new Error('could not read FormData body as blob');
                                } else {
                                    return Promise.resolve(new Blob([this._bodyText]));
                                }
                            };
                        }

                        this.arrayBuffer = function () {
                            if (this._bodyArrayBuffer) {
                                var isConsumed = consumed(this);
                                if (isConsumed) {
                                    return isConsumed;
                                } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                                    return Promise.resolve(
                                        this._bodyArrayBuffer.buffer.slice(
                                            this._bodyArrayBuffer.byteOffset,
                                            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength,
                                        ),
                                    );
                                } else {
                                    return Promise.resolve(this._bodyArrayBuffer);
                                }
                            } else if (support.blob) {
                                return this.blob().then(readBlobAsArrayBuffer);
                            } else {
                                throw new Error('could not read as ArrayBuffer');
                            }
                        };

                        this.text = function () {
                            var rejected = consumed(this);
                            if (rejected) {
                                return rejected;
                            }

                            if (this._bodyBlob) {
                                return readBlobAsText(this._bodyBlob);
                            } else if (this._bodyArrayBuffer) {
                                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                            } else if (this._bodyFormData) {
                                throw new Error('could not read FormData body as text');
                            } else {
                                return Promise.resolve(this._bodyText);
                            }
                        };

                        if (support.formData) {
                            this.formData = function () {
                                return this.text().then(decode);
                            };
                        }

                        this.json = function () {
                            return this.text().then(JSON.parse);
                        };

                        return this;
                    }

                    // HTTP methods whose capitalization should be normalized
                    var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

                    function normalizeMethod(method) {
                        var upcased = method.toUpperCase();
                        return methods.indexOf(upcased) > -1 ? upcased : method;
                    }

                    function Request(input, options) {
                        if (!(this instanceof Request)) {
                            throw new TypeError(
                                'Please use the "new" operator, this DOM object constructor cannot be called as a function.',
                            );
                        }

                        options = options || {};
                        var body = options.body;

                        if (input instanceof Request) {
                            if (input.bodyUsed) {
                                throw new TypeError('Already read');
                            }
                            this.url = input.url;
                            this.credentials = input.credentials;
                            if (!options.headers) {
                                this.headers = new Headers(input.headers);
                            }
                            this.method = input.method;
                            this.mode = input.mode;
                            this.signal = input.signal;
                            if (!body && input._bodyInit != null) {
                                body = input._bodyInit;
                                input.bodyUsed = true;
                            }
                        } else {
                            this.url = String(input);
                        }

                        this.credentials = options.credentials || this.credentials || 'same-origin';
                        if (options.headers || !this.headers) {
                            this.headers = new Headers(options.headers);
                        }
                        this.method = normalizeMethod(options.method || this.method || 'GET');
                        this.mode = options.mode || this.mode || null;
                        this.signal =
                            options.signal ||
                            this.signal ||
                            (function () {
                                if ('AbortController' in g) {
                                    var ctrl = new AbortController();
                                    return ctrl.signal;
                                }
                            })();
                        this.referrer = null;

                        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
                            throw new TypeError('Body not allowed for GET or HEAD requests');
                        }
                        this._initBody(body);

                        if (this.method === 'GET' || this.method === 'HEAD') {
                            if (options.cache === 'no-store' || options.cache === 'no-cache') {
                                // Search for a '_' parameter in the query string
                                var reParamSearch = /([?&])_=[^&]*/;
                                if (reParamSearch.test(this.url)) {
                                    // If it already exists then set the value with the current time
                                    this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                                } else {
                                    // Otherwise add a new '_' parameter to the end with the current time
                                    var reQueryString = /\?/;
                                    this.url +=
                                        (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                                }
                            }
                        }
                    }

                    Request.prototype.clone = function () {
                        return new Request(this, { body: this._bodyInit });
                    };

                    function decode(body) {
                        var form = new FormData();
                        body.trim()
                            .split('&')
                            .forEach(function (bytes) {
                                if (bytes) {
                                    var split = bytes.split('=');
                                    var name = split.shift().replace(/\+/g, ' ');
                                    var value = split.join('=').replace(/\+/g, ' ');
                                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                                }
                            });
                        return form;
                    }

                    function parseHeaders(rawHeaders) {
                        var headers = new Headers();
                        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
                        // https://tools.ietf.org/html/rfc7230#section-3.2
                        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
                        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
                        // https://github.com/github/fetch/issues/748
                        // https://github.com/zloirock/core-js/issues/751
                        preProcessedHeaders
                            .split('\r')
                            .map(function (header) {
                                return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
                            })
                            .forEach(function (line) {
                                var parts = line.split(':');
                                var key = parts.shift().trim();
                                if (key) {
                                    var value = parts.join(':').trim();
                                    try {
                                        headers.append(key, value);
                                    } catch (error) {
                                        console.warn('Response ' + error.message);
                                    }
                                }
                            });
                        return headers;
                    }

                    Body.call(Request.prototype);

                    function Response(bodyInit, options) {
                        if (!(this instanceof Response)) {
                            throw new TypeError(
                                'Please use the "new" operator, this DOM object constructor cannot be called as a function.',
                            );
                        }
                        if (!options) {
                            options = {};
                        }

                        this.type = 'default';
                        this.status = options.status === undefined ? 200 : options.status;
                        if (this.status < 200 || this.status > 599) {
                            throw new RangeError(
                                "Failed to construct 'Response': The status provided (0) is outside the range [200, 599].",
                            );
                        }
                        this.ok = this.status >= 200 && this.status < 300;
                        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
                        this.headers = new Headers(options.headers);
                        this.url = options.url || '';
                        this._initBody(bodyInit);
                    }

                    Body.call(Response.prototype);

                    Response.prototype.clone = function () {
                        return new Response(this._bodyInit, {
                            status: this.status,
                            statusText: this.statusText,
                            headers: new Headers(this.headers),
                            url: this.url,
                        });
                    };

                    Response.error = function () {
                        var response = new Response(null, { status: 200, statusText: '' });
                        response.ok = false;
                        response.status = 0;
                        response.type = 'error';
                        return response;
                    };

                    var redirectStatuses = [301, 302, 303, 307, 308];

                    Response.redirect = function (url, status) {
                        if (redirectStatuses.indexOf(status) === -1) {
                            throw new RangeError('Invalid status code');
                        }

                        return new Response(null, { status: status, headers: { location: url } });
                    };

                    var DOMException = g.DOMException;
                    try {
                        new DOMException();
                    } catch (err) {
                        DOMException = function (message, name) {
                            this.message = message;
                            this.name = name;
                            var error = Error(message);
                            this.stack = error.stack;
                        };
                        DOMException.prototype = Object.create(Error.prototype);
                        DOMException.prototype.constructor = DOMException;
                    }

                    function fetch(input, init) {
                        return new Promise(function (resolve, reject) {
                            var request = new Request(input, init);

                            if (request.signal && request.signal.aborted) {
                                return reject(new DOMException('Aborted', 'AbortError'));
                            }

                            var xhr = new XMLHttpRequest();

                            function abortXhr() {
                                xhr.abort();
                            }

                            xhr.onload = function () {
                                var options = {
                                    statusText: xhr.statusText,
                                    headers: parseHeaders(xhr.getAllResponseHeaders() || ''),
                                };
                                // This check if specifically for when a user fetches a file locally from the file system
                                // Only if the status is out of a normal range
                                if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
                                    options.status = 200;
                                } else {
                                    options.status = xhr.status;
                                }
                                options.url =
                                    'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                                setTimeout(function () {
                                    resolve(new Response(body, options));
                                }, 0);
                            };

                            xhr.onerror = function () {
                                setTimeout(function () {
                                    reject(new TypeError('Network request failed'));
                                }, 0);
                            };

                            xhr.ontimeout = function () {
                                setTimeout(function () {
                                    reject(new TypeError('Network request timed out'));
                                }, 0);
                            };

                            xhr.onabort = function () {
                                setTimeout(function () {
                                    reject(new DOMException('Aborted', 'AbortError'));
                                }, 0);
                            };

                            function fixUrl(url) {
                                try {
                                    return url === '' && g.location.href ? g.location.href : url;
                                } catch (e) {
                                    return url;
                                }
                            }

                            xhr.open(request.method, fixUrl(request.url), true);

                            if (request.credentials === 'include') {
                                xhr.withCredentials = true;
                            } else if (request.credentials === 'omit') {
                                xhr.withCredentials = false;
                            }

                            if ('responseType' in xhr) {
                                if (support.blob) {
                                    xhr.responseType = 'blob';
                                } else if (support.arrayBuffer) {
                                    xhr.responseType = 'arraybuffer';
                                }
                            }

                            if (
                                init &&
                                typeof init.headers === 'object' &&
                                !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))
                            ) {
                                var names = [];
                                Object.getOwnPropertyNames(init.headers).forEach(function (name) {
                                    names.push(normalizeName(name));
                                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                                });
                                request.headers.forEach(function (value, name) {
                                    if (names.indexOf(name) === -1) {
                                        xhr.setRequestHeader(name, value);
                                    }
                                });
                            } else {
                                request.headers.forEach(function (value, name) {
                                    xhr.setRequestHeader(name, value);
                                });
                            }

                            if (request.signal) {
                                request.signal.addEventListener('abort', abortXhr);

                                xhr.onreadystatechange = function () {
                                    // DONE (success or failure)
                                    if (xhr.readyState === 4) {
                                        request.signal.removeEventListener('abort', abortXhr);
                                    }
                                };
                            }

                            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
                        });
                    }

                    fetch.polyfill = true;

                    if (!g.fetch) {
                        g.fetch = fetch;
                        g.Headers = Headers;
                        g.Request = Request;
                        g.Response = Response;
                    }

                    /* WEBPACK VAR INJECTION */
                }).call(this, __webpack_require__(15));

                /***/
            },
            /* 132 */
            /***/ function (module, exports) {
                // shim for using process in browser
                var process = (module.exports = {});

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }

                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;

                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }

                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};

                function noop() {}

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;

                process.listeners = function (name) {
                    return [];
                };

                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };

                process.cwd = function () {
                    return '/';
                };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () {
                    return 0;
                };

                /***/
            },
            /* 133 */
            /***/ function (module, exports, __webpack_require__) {
                /**
                 * This is the common logic for both the Node.js and web browser
                 * implementations of `debug()`.
                 */

                function setup(env) {
                    createDebug.debug = createDebug;
                    createDebug.default = createDebug;
                    createDebug.coerce = coerce;
                    createDebug.disable = disable;
                    createDebug.enable = enable;
                    createDebug.enabled = enabled;
                    createDebug.humanize = __webpack_require__(134);
                    createDebug.destroy = destroy;

                    Object.keys(env).forEach((key) => {
                        createDebug[key] = env[key];
                    });

                    /**
                     * The currently active debug mode names, and names to skip.
                     */

                    createDebug.names = [];
                    createDebug.skips = [];

                    /**
                     * Map of special "%n" handling functions, for the debug "format" argument.
                     *
                     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
                     */
                    createDebug.formatters = {};

                    /**
                     * Selects a color for a debug namespace
                     * @param {String} namespace The namespace string for the debug instance to be colored
                     * @return {Number|String} An ANSI color code for the given namespace
                     * @api private
                     */
                    function selectColor(namespace) {
                        let hash = 0;

                        for (let i = 0; i < namespace.length; i++) {
                            hash = (hash << 5) - hash + namespace.charCodeAt(i);
                            hash |= 0; // Convert to 32bit integer
                        }

                        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
                    }
                    createDebug.selectColor = selectColor;

                    /**
                     * Create a debugger with the given `namespace`.
                     *
                     * @param {String} namespace
                     * @return {Function}
                     * @api public
                     */
                    function createDebug(namespace) {
                        let prevTime;
                        let enableOverride = null;
                        let namespacesCache;
                        let enabledCache;

                        function debug(...args) {
                            // Disabled?
                            if (!debug.enabled) {
                                return;
                            }

                            const self = debug;

                            // Set `diff` timestamp
                            const curr = Number(new Date());
                            const ms = curr - (prevTime || curr);
                            self.diff = ms;
                            self.prev = prevTime;
                            self.curr = curr;
                            prevTime = curr;

                            args[0] = createDebug.coerce(args[0]);

                            if (typeof args[0] !== 'string') {
                                // Anything else let's inspect with %O
                                args.unshift('%O');
                            }

                            // Apply any `formatters` transformations
                            let index = 0;
                            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                                // If we encounter an escaped % then don't increase the array index
                                if (match === '%%') {
                                    return '%';
                                }
                                index++;
                                const formatter = createDebug.formatters[format];
                                if (typeof formatter === 'function') {
                                    const val = args[index];
                                    match = formatter.call(self, val);

                                    // Now we need to remove `args[index]` since it's inlined in the `format`
                                    args.splice(index, 1);
                                    index--;
                                }
                                return match;
                            });

                            // Apply env-specific formatting (colors, etc.)
                            createDebug.formatArgs.call(self, args);

                            const logFn = self.log || createDebug.log;
                            logFn.apply(self, args);
                        }

                        debug.namespace = namespace;
                        debug.useColors = createDebug.useColors();
                        debug.color = createDebug.selectColor(namespace);
                        debug.extend = extend;
                        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

                        Object.defineProperty(debug, 'enabled', {
                            enumerable: true,
                            configurable: false,
                            get: () => {
                                if (enableOverride !== null) {
                                    return enableOverride;
                                }
                                if (namespacesCache !== createDebug.namespaces) {
                                    namespacesCache = createDebug.namespaces;
                                    enabledCache = createDebug.enabled(namespace);
                                }

                                return enabledCache;
                            },
                            set: (v) => {
                                enableOverride = v;
                            },
                        });

                        // Env-specific initialization logic for debug instances
                        if (typeof createDebug.init === 'function') {
                            createDebug.init(debug);
                        }

                        return debug;
                    }

                    function extend(namespace, delimiter) {
                        const newDebug = createDebug(
                            this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace,
                        );
                        newDebug.log = this.log;
                        return newDebug;
                    }

                    /**
                     * Enables a debug mode by namespaces. This can include modes
                     * separated by a colon and wildcards.
                     *
                     * @param {String} namespaces
                     * @api public
                     */
                    function enable(namespaces) {
                        createDebug.save(namespaces);
                        createDebug.namespaces = namespaces;

                        createDebug.names = [];
                        createDebug.skips = [];

                        const split = (typeof namespaces === 'string' ? namespaces : '')
                            .trim()
                            .replace(/\s+/g, ',')
                            .split(',')
                            .filter(Boolean);

                        for (const ns of split) {
                            if (ns[0] === '-') {
                                createDebug.skips.push(ns.slice(1));
                            } else {
                                createDebug.names.push(ns);
                            }
                        }
                    }

                    /**
                     * Checks if the given string matches a namespace template, honoring
                     * asterisks as wildcards.
                     *
                     * @param {String} search
                     * @param {String} template
                     * @return {Boolean}
                     */
                    function matchesTemplate(search, template) {
                        let searchIndex = 0;
                        let templateIndex = 0;
                        let starIndex = -1;
                        let matchIndex = 0;

                        while (searchIndex < search.length) {
                            if (
                                templateIndex < template.length &&
                                (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')
                            ) {
                                // Match character or proceed with wildcard
                                if (template[templateIndex] === '*') {
                                    starIndex = templateIndex;
                                    matchIndex = searchIndex;
                                    templateIndex++; // Skip the '*'
                                } else {
                                    searchIndex++;
                                    templateIndex++;
                                }
                            } else if (starIndex !== -1) {
                                // eslint-disable-line no-negated-condition
                                // Backtrack to the last '*' and try to match more characters
                                templateIndex = starIndex + 1;
                                matchIndex++;
                                searchIndex = matchIndex;
                            } else {
                                return false; // No match
                            }
                        }

                        // Handle trailing '*' in template
                        while (templateIndex < template.length && template[templateIndex] === '*') {
                            templateIndex++;
                        }

                        return templateIndex === template.length;
                    }

                    /**
                     * Disable debug output.
                     *
                     * @return {String} namespaces
                     * @api public
                     */
                    function disable() {
                        const namespaces = [
                            ...createDebug.names,
                            ...createDebug.skips.map((namespace) => '-' + namespace),
                        ].join(',');
                        createDebug.enable('');
                        return namespaces;
                    }

                    /**
                     * Returns true if the given mode name is enabled, false otherwise.
                     *
                     * @param {String} name
                     * @return {Boolean}
                     * @api public
                     */
                    function enabled(name) {
                        for (const skip of createDebug.skips) {
                            if (matchesTemplate(name, skip)) {
                                return false;
                            }
                        }

                        for (const ns of createDebug.names) {
                            if (matchesTemplate(name, ns)) {
                                return true;
                            }
                        }

                        return false;
                    }

                    /**
                     * Coerce `val`.
                     *
                     * @param {Mixed} val
                     * @return {Mixed}
                     * @api private
                     */
                    function coerce(val) {
                        if (val instanceof Error) {
                            return val.stack || val.message;
                        }
                        return val;
                    }

                    /**
                     * XXX DO NOT USE. This is a temporary stub function.
                     * XXX It WILL be removed in the next major release.
                     */
                    function destroy() {
                        console.warn(
                            'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.',
                        );
                    }

                    createDebug.enable(createDebug.load());

                    return createDebug;
                }

                module.exports = setup;

                /***/
            },
            /* 134 */
            /***/ function (module, exports) {
                /**
                 * Helpers.
                 */

                var s = 1000;
                var m = s * 60;
                var h = m * 60;
                var d = h * 24;
                var w = d * 7;
                var y = d * 365.25;

                /**
                 * Parse or format the given `val`.
                 *
                 * Options:
                 *
                 *  - `long` verbose formatting [false]
                 *
                 * @param {String|Number} val
                 * @param {Object} [options]
                 * @throws {Error} throw an error if val is not a non-empty string or a number
                 * @return {String|Number}
                 * @api public
                 */

                module.exports = function (val, options) {
                    options = options || {};
                    var type = typeof val;
                    if (type === 'string' && val.length > 0) {
                        return parse(val);
                    } else if (type === 'number' && isFinite(val)) {
                        return options.long ? fmtLong(val) : fmtShort(val);
                    }
                    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
                };

                /**
                 * Parse the given `str` and return milliseconds.
                 *
                 * @param {String} str
                 * @return {Number}
                 * @api private
                 */

                function parse(str) {
                    str = String(str);
                    if (str.length > 100) {
                        return;
                    }
                    var match =
                        /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                            str,
                        );
                    if (!match) {
                        return;
                    }
                    var n = parseFloat(match[1]);
                    var type = (match[2] || 'ms').toLowerCase();
                    switch (type) {
                        case 'years':
                        case 'year':
                        case 'yrs':
                        case 'yr':
                        case 'y':
                            return n * y;
                        case 'weeks':
                        case 'week':
                        case 'w':
                            return n * w;
                        case 'days':
                        case 'day':
                        case 'd':
                            return n * d;
                        case 'hours':
                        case 'hour':
                        case 'hrs':
                        case 'hr':
                        case 'h':
                            return n * h;
                        case 'minutes':
                        case 'minute':
                        case 'mins':
                        case 'min':
                        case 'm':
                            return n * m;
                        case 'seconds':
                        case 'second':
                        case 'secs':
                        case 'sec':
                        case 's':
                            return n * s;
                        case 'milliseconds':
                        case 'millisecond':
                        case 'msecs':
                        case 'msec':
                        case 'ms':
                            return n;
                        default:
                            return undefined;
                    }
                }

                /**
                 * Short format for `ms`.
                 *
                 * @param {Number} ms
                 * @return {String}
                 * @api private
                 */

                function fmtShort(ms) {
                    var msAbs = Math.abs(ms);
                    if (msAbs >= d) {
                        return Math.round(ms / d) + 'd';
                    }
                    if (msAbs >= h) {
                        return Math.round(ms / h) + 'h';
                    }
                    if (msAbs >= m) {
                        return Math.round(ms / m) + 'm';
                    }
                    if (msAbs >= s) {
                        return Math.round(ms / s) + 's';
                    }
                    return ms + 'ms';
                }

                /**
                 * Long format for `ms`.
                 *
                 * @param {Number} ms
                 * @return {String}
                 * @api private
                 */

                function fmtLong(ms) {
                    var msAbs = Math.abs(ms);
                    if (msAbs >= d) {
                        return plural(ms, msAbs, d, 'day');
                    }
                    if (msAbs >= h) {
                        return plural(ms, msAbs, h, 'hour');
                    }
                    if (msAbs >= m) {
                        return plural(ms, msAbs, m, 'minute');
                    }
                    if (msAbs >= s) {
                        return plural(ms, msAbs, s, 'second');
                    }
                    return ms + ' ms';
                }

                /**
                 * Pluralization helper.
                 */

                function plural(ms, msAbs, n, name) {
                    var isPlural = msAbs >= n * 1.5;
                    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
                }

                /***/
            },
            /* 135 */
            /***/ function (module, __webpack_exports__, __webpack_require__) {
                'use strict';
                // ESM COMPAT FLAG
                __webpack_require__.r(__webpack_exports__);

                // EXTERNAL MODULE: external "window.React"
                var external_window_React_ = __webpack_require__(1);
                var external_window_React_default = /*#__PURE__*/ __webpack_require__.n(external_window_React_);

                // EXTERNAL MODULE: external "window.ReactDOM"
                var external_window_ReactDOM_ = __webpack_require__(26);
                var external_window_ReactDOM_default = /*#__PURE__*/ __webpack_require__.n(external_window_ReactDOM_);

                // CONCATENATED MODULE: ../renderer-core/src/adapter/index.ts
                function _typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        _typeof(o)
                    );
                }
                function _classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function _defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, _toPropertyKey(o.key), o);
                    }
                }
                function _createClass(e, r, t) {
                    return (
                        r && _defineProperties(e.prototype, r),
                        t && _defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function _defineProperty(e, r, t) {
                    return (
                        (r = _toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function _toPropertyKey(t) {
                    var i = _toPrimitive(t, 'string');
                    return 'symbol' == _typeof(i) ? i : i + '';
                }
                function _toPrimitive(t, r) {
                    if ('object' != _typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != _typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                var Env;
                (function (Env) {
                    Env['React'] = 'react';
                })(Env || (Env = {}));
                var Adapter = /*#__PURE__*/ (function () {
                    function Adapter() {
                        _classCallCheck(this, Adapter);
                        _defineProperty(this, 'builtinModules', [
                            'Component',
                            'PureComponent',
                            'createElement',
                            'createContext',
                            'forwardRef',
                            'findDOMNode',
                        ]);
                        this.initRuntime();
                    }
                    return _createClass(Adapter, [
                        {
                            key: 'initRuntime',
                            value: function initRuntime() {
                                var Component = /*#__PURE__*/ (function () {
                                    function Component() {
                                        _classCallCheck(this, Component);
                                    }
                                    return _createClass(Component, [
                                        {
                                            key: 'setState',
                                            value: function setState() {},
                                        },
                                        {
                                            key: 'forceUpdate',
                                            value: function forceUpdate() {},
                                        },
                                        {
                                            key: 'render',
                                            value: function render() {},
                                        },
                                    ]);
                                })();
                                var PureComponent = /*#__PURE__*/ (function () {
                                    function PureComponent() {
                                        _classCallCheck(this, PureComponent);
                                    }
                                    return _createClass(PureComponent, [
                                        {
                                            key: 'setState',
                                            value: function setState() {},
                                        },
                                        {
                                            key: 'forceUpdate',
                                            value: function forceUpdate() {},
                                        },
                                        {
                                            key: 'render',
                                            value: function render() {},
                                        },
                                    ]);
                                })();
                                var createElement = function createElement() {};
                                var createContext = function createContext() {};
                                var forwardRef = function forwardRef() {};
                                var findDOMNode = function findDOMNode() {};
                                this.runtime = {
                                    Component: Component,
                                    PureComponent: PureComponent,
                                    createElement: createElement,
                                    createContext: createContext,
                                    forwardRef: forwardRef,
                                    findDOMNode: findDOMNode,
                                };
                            },
                        },
                        {
                            key: 'setRuntime',
                            value: function setRuntime(runtime) {
                                if (this.isValidRuntime(runtime)) {
                                    this.runtime = runtime;
                                }
                            },
                        },
                        {
                            key: 'isValidRuntime',
                            value: function isValidRuntime(runtime) {
                                if (_typeof(runtime) !== 'object' || Array.isArray(runtime)) {
                                    return false;
                                }
                                return this.builtinModules.every(function (m) {
                                    var flag = !!runtime[m];
                                    if (!flag) {
                                        throw new Error("runtime is invalid, module '".concat(m, "' does not exist"));
                                    }
                                    return flag;
                                });
                            },
                        },
                        {
                            key: 'getRuntime',
                            value: function getRuntime() {
                                return this.runtime;
                            },
                        },
                        {
                            key: 'setEnv',
                            value: function setEnv(env) {
                                this.env = env;
                            },
                        },
                        {
                            key: 'isReact',
                            value: function isReact() {
                                return this.env === Env.React;
                            },
                        },
                        {
                            key: 'setRenderers',
                            value: function setRenderers(renderers) {
                                this.renderers = renderers;
                            },
                        },
                        {
                            key: 'getRenderers',
                            value: function getRenderers() {
                                return this.renderers || {};
                            },
                        },
                        {
                            key: 'setConfigProvider',
                            value: function setConfigProvider(Comp) {
                                this.configProvider = Comp;
                            },
                        },
                        {
                            key: 'getConfigProvider',
                            value: function getConfigProvider() {
                                return this.configProvider;
                            },
                        },
                    ]);
                })();
                /* harmony default export */ var adapter = new Adapter();
                // CONCATENATED MODULE: ../renderer-core/src/context/index.ts

                function contextFactory() {
                    var _adapter$getRuntime = adapter.getRuntime(),
                        createContext = _adapter$getRuntime.createContext;
                    var context = window.__appContext;
                    if (!context) {
                        context = createContext({});
                        window.__appContext = context;
                    }
                    return context;
                }
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/classnames/index.js
                var classnames = __webpack_require__(8);
                var classnames_default = /*#__PURE__*/ __webpack_require__.n(classnames);

                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@alilc/lowcode-datasource-engine/interpret.js
                var interpret = __webpack_require__(43);

                // EXTERNAL MODULE: ../types/src/index.ts + 187 modules
                var types_src = __webpack_require__(0);

                // CONCATENATED MODULE: ../utils/src/is-css-url.ts
                function isCSSUrl(url) {
                    return /\.css(\?.*)?$/.test(url);
                }
                // CONCATENATED MODULE: ../utils/src/create-defer.ts
                function createDefer() {
                    var r = {};
                    var promise = new Promise(function (resolve, reject) {
                        r.resolve = resolve;
                        r.reject = reject;
                    });
                    r.promise = function () {
                        return promise;
                    };
                    return r;
                }
                // CONCATENATED MODULE: ../utils/src/is-object.ts
                function is_object_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (is_object_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        is_object_typeof(o)
                    );
                }
                function isObject(value) {
                    return value !== null && is_object_typeof(value) === 'object';
                }
                function isI18NObject(value) {
                    return isObject(value) && value.type === 'i18n';
                }
                // CONCATENATED MODULE: ../utils/src/logger.ts
                function logger_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (logger_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        logger_typeof(o)
                    );
                }
                function ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function _objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? ownKeys(Object(t), !0).forEach(function (r) {
                                  logger_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function logger_defineProperty(e, r, t) {
                    return (
                        (r = logger_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function logger_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function logger_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, logger_toPropertyKey(o.key), o);
                    }
                }
                function logger_createClass(e, r, t) {
                    return (
                        r && logger_defineProperties(e.prototype, r),
                        t && logger_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function logger_toPropertyKey(t) {
                    var i = logger_toPrimitive(t, 'string');
                    return 'symbol' == logger_typeof(i) ? i : i + '';
                }
                function logger_toPrimitive(t, r) {
                    if ('object' != logger_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != logger_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                /* eslint-disable no-console */
                /* eslint-disable no-param-reassign */

                var levels = {
                    debug: -1,
                    log: 0,
                    info: 0,
                    warn: 1,
                    error: 2,
                };
                var bizNameColors = [
                    '#daa569',
                    '#00ffff',
                    '#385e0f',
                    '#7fffd4',
                    '#00c957',
                    '#b0e0e6',
                    '#4169e1',
                    '#6a5acd',
                    '#87ceeb',
                    '#ffff00',
                    '#e3cf57',
                    '#ff9912',
                    '#eb8e55',
                    '#ffe384',
                    '#40e0d0',
                    '#a39480',
                    '#d2691e',
                    '#ff7d40',
                    '#f0e68c',
                    '#bc8f8f',
                    '#c76114',
                    '#734a12',
                    '#5e2612',
                    '#0000ff',
                    '#3d59ab',
                    '#1e90ff',
                    '#03a89e',
                    '#33a1c9',
                    '#a020f0',
                    '#a066d3',
                    '#da70d6',
                    '#dda0dd',
                    '#688e23',
                    '#2e8b57',
                ];
                var bodyColors = {
                    debug: '#fadb14',
                    log: '#8c8c8c',
                    info: '#52c41a',
                    warn: '#fa8c16',
                    error: '#ff4d4f',
                };
                var levelMarks = {
                    debug: 'debug',
                    log: 'log',
                    info: 'info',
                    warn: 'warn',
                    error: 'error',
                };
                var outputFunction = {
                    debug: console.log,
                    log: console.log,
                    info: console.log,
                    warn: console.warn,
                    error: console.error,
                };
                var bizNameColorConfig = {};
                var shouldOutput = function shouldOutput(logLevel) {
                    var targetLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'warn';
                    var bizName = arguments.length > 2 ? arguments[2] : undefined;
                    var targetBizName = arguments.length > 3 ? arguments[3] : undefined;
                    var isLevelFit = levels[targetLevel] <= levels[logLevel];
                    var isBizNameFit = targetBizName === '*' || bizName.indexOf(targetBizName) > -1;
                    return isLevelFit && isBizNameFit;
                };
                var output = function output(logLevel, bizName) {
                    return function () {
                        var _outputFunction$logLe;
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        return (_outputFunction$logLe = outputFunction[logLevel]) === null ||
                            _outputFunction$logLe === void 0
                            ? void 0
                            : _outputFunction$logLe.apply(console, logger_getLogArgs(args, bizName, logLevel));
                    };
                };
                var getColor = function getColor(bizName) {
                    if (!bizNameColorConfig[bizName]) {
                        var color = bizNameColors[Object.keys(bizNameColorConfig).length % bizNameColors.length];
                        bizNameColorConfig[bizName] = color;
                    }
                    return bizNameColorConfig[bizName];
                };
                var logger_getLogArgs = function getLogArgs(args, bizName, logLevel) {
                    var color = getColor(bizName);
                    var bodyColor = bodyColors[logLevel];
                    var argsArray = args[0];
                    var prefix = '%c['.concat(bizName, ']%c[').concat(levelMarks[logLevel], ']:');
                    argsArray.forEach(function (arg) {
                        if (isObject(arg)) {
                            prefix += '%o';
                        } else {
                            prefix += '%s';
                        }
                    });
                    var processedArgs = [prefix, 'color: '.concat(color), 'color: '.concat(bodyColor)];
                    processedArgs = processedArgs.concat(argsArray);
                    return processedArgs;
                };
                var parseLogConf = function parseLogConf(logConf, options) {
                    if (!logConf) {
                        return {
                            level: options.level,
                            bizName: options.bizName,
                        };
                    }
                    if (logConf.indexOf(':') > -1) {
                        var pair = logConf.split(':');
                        return {
                            level: pair[0],
                            bizName: pair[1] || '*',
                        };
                    }
                    return {
                        level: logConf,
                        bizName: '*',
                    };
                };
                var defaultOptions = {
                    level: 'warn',
                    bizName: '*',
                };
                var Logger = /*#__PURE__*/ (function () {
                    function Logger(options) {
                        logger_classCallCheck(this, Logger);
                        options = _objectSpread(_objectSpread({}, defaultOptions), options);
                        var _location = location || {};
                        // __logConf__ 格式为 logLevel[:bizName], bizName is used as: targetBizName like '%bizName%'
                        //   1. __logConf__=log  or __logConf__=warn,  etc.
                        //   2. __logConf__=log:*  or __logConf__=warn:*,  etc.
                        //   2. __logConf__=log:bizName  or __logConf__=warn:partOfBizName,  etc.
                        var logConf = (/__(?:logConf|logLevel)__=([^#/&]*)/.exec(_location.href) || [])[1];
                        var targetOptions = parseLogConf(logConf, options);
                        this.bizName = options.bizName;
                        this.targetBizName = targetOptions.bizName;
                        this.targetLevel = targetOptions.level;
                    }
                    return logger_createClass(Logger, [
                        {
                            key: 'debug',
                            value: function debug() {
                                if (!shouldOutput('debug', this.targetLevel, this.bizName, this.targetBizName)) {
                                    return;
                                }
                                for (
                                    var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
                                    _key2 < _len2;
                                    _key2++
                                ) {
                                    args[_key2] = arguments[_key2];
                                }
                                return output('debug', this.bizName)(args);
                            },
                        },
                        {
                            key: 'log',
                            value: function log() {
                                if (!shouldOutput('log', this.targetLevel, this.bizName, this.targetBizName)) {
                                    return;
                                }
                                for (
                                    var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
                                    _key3 < _len3;
                                    _key3++
                                ) {
                                    args[_key3] = arguments[_key3];
                                }
                                return output('log', this.bizName)(args);
                            },
                        },
                        {
                            key: 'info',
                            value: function info() {
                                if (!shouldOutput('info', this.targetLevel, this.bizName, this.targetBizName)) {
                                    return;
                                }
                                for (
                                    var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
                                    _key4 < _len4;
                                    _key4++
                                ) {
                                    args[_key4] = arguments[_key4];
                                }
                                return output('info', this.bizName)(args);
                            },
                        },
                        {
                            key: 'warn',
                            value: function warn() {
                                if (!shouldOutput('warn', this.targetLevel, this.bizName, this.targetBizName)) {
                                    return;
                                }
                                for (
                                    var _len5 = arguments.length, args = new Array(_len5), _key5 = 0;
                                    _key5 < _len5;
                                    _key5++
                                ) {
                                    args[_key5] = arguments[_key5];
                                }
                                return output('warn', this.bizName)(args);
                            },
                        },
                        {
                            key: 'error',
                            value: function error() {
                                if (!shouldOutput('error', this.targetLevel, this.bizName, this.targetBizName)) {
                                    return;
                                }
                                for (
                                    var _len6 = arguments.length, args = new Array(_len6), _key6 = 0;
                                    _key6 < _len6;
                                    _key6++
                                ) {
                                    args[_key6] = arguments[_key6];
                                }
                                return output('error', this.bizName)(args);
                            },
                        },
                    ]);
                })();

                function getLogger(config) {
                    return new Logger(config);
                }
                // CONCATENATED MODULE: ../utils/src/script.ts

                var logger = new Logger({
                    level: 'warn',
                    bizName: 'utils',
                });
                function evaluate(script, scriptType) {
                    var scriptEl = document.createElement('script');
                    scriptType && (scriptEl.type = scriptType);
                    scriptEl.text = script;
                    document.head.appendChild(scriptEl);
                    document.head.removeChild(scriptEl);
                }
                function script_load(url, scriptType) {
                    var node = document.createElement('script');
                    // node.setAttribute('crossorigin', 'anonymous');
                    node.onload = onload;
                    node.onerror = onload;
                    var i = createDefer();
                    function onload(e) {
                        node.onload = null;
                        node.onerror = null;
                        if (e.type === 'load') {
                            i.resolve();
                        } else {
                            i.reject();
                        }
                        // document.head.removeChild(node);
                        // node = null;
                    }
                    node.src = url;
                    // `async=false` is required to make sure all js resources execute sequentially.
                    node.async = false;
                    scriptType && (node.type = scriptType);
                    document.head.appendChild(node);
                    return i.promise();
                }
                function evaluateExpression(expr) {
                    // eslint-disable-next-line no-new-func
                    var fn = new Function(expr);
                    return fn();
                }
                function newFunction(args, code) {
                    try {
                        // eslint-disable-next-line no-new-func
                        return new Function(args, code);
                    } catch (e) {
                        logger.warn('Caught error, Cant init func');
                        return null;
                    }
                }
                // CONCATENATED MODULE: ../utils/src/asset.ts
                function asset_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (asset_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        asset_typeof(o)
                    );
                }
                function _regenerator() {
                    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
                        t,
                        r = 'function' == typeof Symbol ? Symbol : {},
                        n = r.iterator || '@@iterator',
                        o = r.toStringTag || '@@toStringTag';
                    function i(r, n, o, i) {
                        var c = n && n.prototype instanceof Generator ? n : Generator,
                            u = Object.create(c.prototype);
                        return (
                            _regeneratorDefine2(
                                u,
                                '_invoke',
                                (function (r, n, o) {
                                    var i,
                                        c,
                                        u,
                                        f = 0,
                                        p = o || [],
                                        y = !1,
                                        G = {
                                            p: 0,
                                            n: 0,
                                            v: e,
                                            a: d,
                                            f: d.bind(e, 4),
                                            d: function d(t, r) {
                                                return (i = t), (c = 0), (u = e), (G.n = r), a;
                                            },
                                        };
                                    function d(r, n) {
                                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                                            var o,
                                                i = p[t],
                                                d = G.p,
                                                l = i[2];
                                            r > 3
                                                ? (o = l === n) &&
                                                  ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]), (i[4] = i[5] = e))
                                                : i[0] <= d &&
                                                  ((o = r < 2 && d < i[1])
                                                      ? ((c = 0), (G.v = n), (G.n = i[1]))
                                                      : d < l &&
                                                        (o = r < 3 || i[0] > n || n > l) &&
                                                        ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                                        }
                                        if (o || r > 1) return a;
                                        throw ((y = !0), n);
                                    }
                                    return function (o, p, l) {
                                        if (f > 1) throw TypeError('Generator is already running');
                                        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y; ) {
                                            i || (c ? (c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : (G.n = u)) : (G.v = u));
                                            try {
                                                if (((f = 2), i)) {
                                                    if ((c || (o = 'next'), (t = i[o]))) {
                                                        if (!(t = t.call(i, u)))
                                                            throw TypeError('iterator result is not an object');
                                                        if (!t.done) return t;
                                                        (u = t.value), c < 2 && (c = 0);
                                                    } else
                                                        1 === c && (t = i.return) && t.call(i),
                                                            c < 2 &&
                                                                ((u = TypeError(
                                                                    "The iterator does not provide a '" +
                                                                        o +
                                                                        "' method",
                                                                )),
                                                                (c = 1));
                                                    i = e;
                                                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
                                            } catch (t) {
                                                (i = e), (c = 1), (u = t);
                                            } finally {
                                                f = 1;
                                            }
                                        }
                                        return { value: t, done: y };
                                    };
                                })(r, o, i),
                                !0,
                            ),
                            u
                        );
                    }
                    var a = {};
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}
                    t = Object.getPrototypeOf;
                    var c = [][n]
                            ? t(t([][n]()))
                            : (_regeneratorDefine2((t = {}), n, function () {
                                  return this;
                              }),
                              t),
                        u = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c));
                    function f(e) {
                        return (
                            Object.setPrototypeOf
                                ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                                : ((e.__proto__ = GeneratorFunctionPrototype),
                                  _regeneratorDefine2(e, o, 'GeneratorFunction')),
                            (e.prototype = Object.create(u)),
                            e
                        );
                    }
                    return (
                        (GeneratorFunction.prototype = GeneratorFunctionPrototype),
                        _regeneratorDefine2(u, 'constructor', GeneratorFunctionPrototype),
                        _regeneratorDefine2(GeneratorFunctionPrototype, 'constructor', GeneratorFunction),
                        (GeneratorFunction.displayName = 'GeneratorFunction'),
                        _regeneratorDefine2(GeneratorFunctionPrototype, o, 'GeneratorFunction'),
                        _regeneratorDefine2(u),
                        _regeneratorDefine2(u, o, 'Generator'),
                        _regeneratorDefine2(u, n, function () {
                            return this;
                        }),
                        _regeneratorDefine2(u, 'toString', function () {
                            return '[object Generator]';
                        }),
                        (_regenerator = function _regenerator() {
                            return { w: i, m: f };
                        })()
                    );
                }
                function _regeneratorDefine2(e, r, n, t) {
                    var i = Object.defineProperty;
                    try {
                        i({}, '', {});
                    } catch (e) {
                        i = 0;
                    }
                    (_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
                        function o(r, n) {
                            _regeneratorDefine2(e, r, function (e) {
                                return this._invoke(r, n, e);
                            });
                        }
                        r
                            ? i
                                ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t })
                                : (e[r] = n)
                            : (o('next', 0), o('throw', 1), o('return', 2));
                    }),
                        _regeneratorDefine2(e, r, n, t);
                }
                function asyncGeneratorStep(n, t, e, r, o, a, c) {
                    try {
                        var i = n[a](c),
                            u = i.value;
                    } catch (n) {
                        return void e(n);
                    }
                    i.done ? t(u) : Promise.resolve(u).then(r, o);
                }
                function _asyncToGenerator(n) {
                    return function () {
                        var t = this,
                            e = arguments;
                        return new Promise(function (r, o) {
                            var a = n.apply(t, e);
                            function _next(n) {
                                asyncGeneratorStep(a, r, o, _next, _throw, 'next', n);
                            }
                            function _throw(n) {
                                asyncGeneratorStep(a, r, o, _next, _throw, 'throw', n);
                            }
                            _next(void 0);
                        });
                    };
                }
                function asset_defineProperty(e, r, t) {
                    return (
                        (r = asset_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function _createForOfIteratorHelper(r, e) {
                    var t = ('undefined' != typeof Symbol && r[Symbol.iterator]) || r['@@iterator'];
                    if (!t) {
                        if (
                            Array.isArray(r) ||
                            (t = _unsupportedIterableToArray(r)) ||
                            (e && r && 'number' == typeof r.length)
                        ) {
                            t && (r = t);
                            var _n = 0,
                                F = function F() {};
                            return {
                                s: F,
                                n: function n() {
                                    return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] };
                                },
                                e: function e(r) {
                                    throw r;
                                },
                                f: F,
                            };
                        }
                        throw new TypeError(
                            'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                        );
                    }
                    var o,
                        a = !0,
                        u = !1;
                    return {
                        s: function s() {
                            t = t.call(r);
                        },
                        n: function n() {
                            var r = t.next();
                            return (a = r.done), r;
                        },
                        e: function e(r) {
                            (u = !0), (o = r);
                        },
                        f: function f() {
                            try {
                                a || null == t.return || t.return();
                            } finally {
                                if (u) throw o;
                            }
                        },
                    };
                }
                function asset_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function asset_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, asset_toPropertyKey(o.key), o);
                    }
                }
                function asset_createClass(e, r, t) {
                    return (
                        r && asset_defineProperties(e.prototype, r),
                        t && asset_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function asset_toPropertyKey(t) {
                    var i = asset_toPrimitive(t, 'string');
                    return 'symbol' == asset_typeof(i) ? i : i + '';
                }
                function asset_toPrimitive(t, r) {
                    if ('object' != asset_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != asset_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function _toConsumableArray(r) {
                    return (
                        _arrayWithoutHoles(r) ||
                        _iterableToArray(r) ||
                        _unsupportedIterableToArray(r) ||
                        _nonIterableSpread()
                    );
                }
                function _nonIterableSpread() {
                    throw new TypeError(
                        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                    );
                }
                function _unsupportedIterableToArray(r, a) {
                    if (r) {
                        if ('string' == typeof r) return _arrayLikeToArray(r, a);
                        var t = {}.toString.call(r).slice(8, -1);
                        return (
                            'Object' === t && r.constructor && (t = r.constructor.name),
                            'Map' === t || 'Set' === t
                                ? Array.from(r)
                                : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                                ? _arrayLikeToArray(r, a)
                                : void 0
                        );
                    }
                }
                function _iterableToArray(r) {
                    if (('undefined' != typeof Symbol && null != r[Symbol.iterator]) || null != r['@@iterator'])
                        return Array.from(r);
                }
                function _arrayWithoutHoles(r) {
                    if (Array.isArray(r)) return _arrayLikeToArray(r);
                }
                function _arrayLikeToArray(r, a) {
                    (null == a || a > r.length) && (a = r.length);
                    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                    return n;
                }

                // API 向下兼容

                function isAssetItem(obj) {
                    return obj && obj.type;
                }
                function isAssetBundle(obj) {
                    return obj && obj.type === types_src['AssetType'].Bundle;
                }
                function assetBundle(assets, level) {
                    if (!assets) {
                        return null;
                    }
                    return {
                        type: types_src['AssetType'].Bundle,
                        assets: assets,
                        level: level,
                    };
                }
                /*
urls: "view.js,view2 <device selector>, view3 <device selector>",
urls: [
  "view.js",
  "view.js *",
  "view1.js mobile|pc",
  "view2.js <device selector>"
] */
                function assetItem(type, content, level, id) {
                    if (!content) {
                        return null;
                    }
                    return {
                        type: type,
                        content: content,
                        level: level,
                        id: id,
                    };
                }
                function mergeAssets(assets, incrementalAssets) {
                    if (incrementalAssets.packages) {
                        assets.packages = [].concat(
                            _toConsumableArray(assets.packages || []),
                            _toConsumableArray(incrementalAssets.packages),
                        );
                    }
                    if (incrementalAssets.components) {
                        assets.components = [].concat(
                            _toConsumableArray(assets.components || []),
                            _toConsumableArray(incrementalAssets.components),
                        );
                    }
                    mergeAssetsComponentList(assets, incrementalAssets, 'componentList');
                    mergeAssetsComponentList(assets, incrementalAssets, 'bizComponentList');
                    return assets;
                }
                function mergeAssetsComponentList(assets, incrementalAssets, listName) {
                    if (incrementalAssets[listName]) {
                        if (assets[listName]) {
                            var _incrementalAssets$li;
                            // 根据title进行合并
                            (_incrementalAssets$li = incrementalAssets[listName]) === null ||
                            _incrementalAssets$li === void 0
                                ? void 0
                                : _incrementalAssets$li.map(function (item) {
                                      var _assets$listName, _assets$listName2;
                                      var matchFlag = false;
                                      (_assets$listName = assets[listName]) === null || _assets$listName === void 0
                                          ? void 0
                                          : _assets$listName.map(function (assetItem) {
                                                if (assetItem.title === item.title) {
                                                    assetItem.children = assetItem.children.concat(item.children);
                                                    matchFlag = true;
                                                }
                                                return assetItem;
                                            });
                                      !matchFlag &&
                                          ((_assets$listName2 = assets[listName]) === null ||
                                          _assets$listName2 === void 0
                                              ? void 0
                                              : _assets$listName2.push(item));
                                      return item;
                                  });
                        }
                    }
                }
                var asset_StylePoint = /*#__PURE__*/ (function () {
                    function StylePoint(level, id) {
                        asset_classCallCheck(this, StylePoint);
                        this.level = level;
                        if (id) {
                            this.id = id;
                        }
                        var placeholder;
                        if (id) {
                            placeholder = document.head.querySelector('style[data-id="'.concat(id, '"]'));
                        }
                        if (!placeholder) {
                            placeholder = document.createTextNode('');
                            var meta = document.head.querySelector('meta[level="'.concat(level, '"]'));
                            if (meta) {
                                document.head.insertBefore(placeholder, meta);
                            } else {
                                document.head.appendChild(placeholder);
                            }
                        }
                        this.placeholder = placeholder;
                    }
                    return asset_createClass(StylePoint, [
                        {
                            key: 'applyText',
                            value: function applyText(content) {
                                if (this.lastContent === content) {
                                    return;
                                }
                                this.lastContent = content;
                                this.lastUrl = undefined;
                                var element = document.createElement('style');
                                element.setAttribute('type', 'text/css');
                                if (this.id) {
                                    element.setAttribute('data-id', this.id);
                                }
                                element.appendChild(document.createTextNode(content));
                                document.head.insertBefore(
                                    element,
                                    this.placeholder.parentNode === document.head ? this.placeholder.nextSibling : null,
                                );
                                document.head.removeChild(this.placeholder);
                                this.placeholder = element;
                            },
                        },
                        {
                            key: 'applyUrl',
                            value: function applyUrl(url) {
                                if (this.lastUrl === url) {
                                    return;
                                }
                                this.lastContent = undefined;
                                this.lastUrl = url;
                                var element = document.createElement('link');
                                element.onload = onload;
                                element.onerror = onload;
                                var i = createDefer();
                                function onload(e) {
                                    element.onload = null;
                                    element.onerror = null;
                                    if (e.type === 'load') {
                                        i.resolve();
                                    } else {
                                        i.reject();
                                    }
                                }
                                element.href = url;
                                element.rel = 'stylesheet';
                                if (this.id) {
                                    element.setAttribute('data-id', this.id);
                                }
                                document.head.insertBefore(
                                    element,
                                    this.placeholder.parentNode === document.head ? this.placeholder.nextSibling : null,
                                );
                                document.head.removeChild(this.placeholder);
                                this.placeholder = element;
                                return i.promise();
                            },
                        },
                    ]);
                })();
                function parseAssetList(scripts, styles, assets, level) {
                    var _iterator = _createForOfIteratorHelper(assets),
                        _step;
                    try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                            var asset = _step.value;
                            parseAsset(scripts, styles, asset, level);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally {
                        _iterator.f();
                    }
                }
                function parseAsset(scripts, styles, asset, level) {
                    if (!asset) {
                        return;
                    }
                    if (Array.isArray(asset)) {
                        return parseAssetList(scripts, styles, asset, level);
                    }
                    if (isAssetBundle(asset)) {
                        if (asset.assets) {
                            if (Array.isArray(asset.assets)) {
                                parseAssetList(scripts, styles, asset.assets, asset.level || level);
                            } else {
                                parseAsset(scripts, styles, asset.assets, asset.level || level);
                            }
                            return;
                        }
                        return;
                    }
                    if (!isAssetItem(asset)) {
                        asset = assetItem(
                            isCSSUrl(asset) ? types_src['AssetType'].CSSUrl : types_src['AssetType'].JSUrl,
                            asset,
                            level,
                        );
                    }
                    var lv = asset.level || level;
                    if (!lv || types_src['AssetLevel'][lv] == null) {
                        lv = types_src['AssetLevel'].App;
                    }
                    asset.level = lv;
                    if (asset.type === types_src['AssetType'].CSSUrl || asset.type == types_src['AssetType'].CSSText) {
                        styles[lv].push(asset);
                    } else {
                        scripts[lv].push(asset);
                    }
                }
                var asset_AssetLoader = /*#__PURE__*/ (function () {
                    function AssetLoader() {
                        asset_classCallCheck(this, AssetLoader);
                        asset_defineProperty(this, 'stylePoints', new Map());
                    }
                    return asset_createClass(AssetLoader, [
                        {
                            key: 'load',
                            value: (function () {
                                var _load = _asyncToGenerator(
                                    /*#__PURE__*/ _regenerator().m(function _callee(asset) {
                                        var _this = this;
                                        var styles, scripts, styleQueue, scriptQueue;
                                        return _regenerator().w(function (_context) {
                                            while (1)
                                                switch (_context.n) {
                                                    case 0:
                                                        styles = {};
                                                        scripts = {};
                                                        types_src['AssetLevels'].forEach(function (lv) {
                                                            styles[lv] = [];
                                                            scripts[lv] = [];
                                                        });
                                                        parseAsset(scripts, styles, asset);
                                                        styleQueue = styles[types_src['AssetLevel'].Environment].concat(
                                                            styles[types_src['AssetLevel'].Library],
                                                            styles[types_src['AssetLevel'].Theme],
                                                            styles[types_src['AssetLevel'].Runtime],
                                                            styles[types_src['AssetLevel'].App],
                                                        );
                                                        scriptQueue = scripts[
                                                            types_src['AssetLevel'].Environment
                                                        ].concat(
                                                            scripts[types_src['AssetLevel'].Library],
                                                            scripts[types_src['AssetLevel'].Theme],
                                                            scripts[types_src['AssetLevel'].Runtime],
                                                            scripts[types_src['AssetLevel'].App],
                                                        );
                                                        _context.n = 1;
                                                        return Promise.all(
                                                            styleQueue.map(function (_ref) {
                                                                var content = _ref.content,
                                                                    level = _ref.level,
                                                                    type = _ref.type,
                                                                    id = _ref.id;
                                                                return _this.loadStyle(
                                                                    content,
                                                                    level,
                                                                    type === types_src['AssetType'].CSSUrl,
                                                                    id,
                                                                );
                                                            }),
                                                        );
                                                    case 1:
                                                        _context.n = 2;
                                                        return Promise.all(
                                                            scriptQueue.map(function (_ref2) {
                                                                var content = _ref2.content,
                                                                    type = _ref2.type,
                                                                    scriptType = _ref2.scriptType;
                                                                return _this.loadScript(
                                                                    content,
                                                                    type === types_src['AssetType'].JSUrl,
                                                                    scriptType,
                                                                );
                                                            }),
                                                        );
                                                    case 2:
                                                        return _context.a(2);
                                                }
                                        }, _callee);
                                    }),
                                );
                                function load(_x) {
                                    return _load.apply(this, arguments);
                                }
                                return load;
                            })(),
                        },
                        {
                            key: 'loadStyle',
                            value: function loadStyle(content, level, isUrl, id) {
                                if (!content) {
                                    return;
                                }
                                var point;
                                if (id) {
                                    point = this.stylePoints.get(id);
                                    if (!point) {
                                        point = new asset_StylePoint(level, id);
                                        this.stylePoints.set(id, point);
                                    }
                                } else {
                                    point = new asset_StylePoint(level);
                                }
                                return isUrl ? point.applyUrl(content) : point.applyText(content);
                            },
                        },
                        {
                            key: 'loadScript',
                            value: function loadScript(content, isUrl, scriptType) {
                                if (!content) {
                                    return;
                                }
                                return isUrl ? script_load(content, scriptType) : evaluate(content, scriptType);
                            },
                            // todo 补充类型
                        },
                        {
                            key: 'loadAsyncLibrary',
                            value: (function () {
                                var _loadAsyncLibrary = _asyncToGenerator(
                                    /*#__PURE__*/ _regenerator().m(function _callee2(asyncLibraryMap) {
                                        var promiseList, libraryKeyList, pkgs, key;
                                        return _regenerator().w(function (_context2) {
                                            while (1)
                                                switch (_context2.n) {
                                                    case 0:
                                                        promiseList = [];
                                                        libraryKeyList = [];
                                                        pkgs = [];
                                                        for (key in asyncLibraryMap) {
                                                            // 需要异步加载
                                                            if (asyncLibraryMap[key].async) {
                                                                promiseList.push(window[asyncLibraryMap[key].library]);
                                                                libraryKeyList.push(asyncLibraryMap[key].library);
                                                                pkgs.push(asyncLibraryMap[key]);
                                                            }
                                                        }
                                                        _context2.n = 1;
                                                        return Promise.all(promiseList).then(function (mods) {
                                                            if (mods.length > 0) {
                                                                mods.map(function (item, index) {
                                                                    var _pkgs$index = pkgs[index],
                                                                        exportMode = _pkgs$index.exportMode,
                                                                        exportSourceLibrary =
                                                                            _pkgs$index.exportSourceLibrary,
                                                                        library = _pkgs$index.library;
                                                                    window[libraryKeyList[index]] =
                                                                        exportMode === 'functionCall' &&
                                                                        (exportSourceLibrary == null ||
                                                                            exportSourceLibrary === library)
                                                                            ? item()
                                                                            : item;
                                                                    return item;
                                                                });
                                                            }
                                                        });
                                                    case 1:
                                                        return _context2.a(2);
                                                }
                                        }, _callee2);
                                    }),
                                );
                                function loadAsyncLibrary(_x2) {
                                    return _loadAsyncLibrary.apply(this, arguments);
                                }
                                return loadAsyncLibrary;
                            })(),
                        },
                    ]);
                })();
                // CONCATENATED MODULE: ../utils/src/is-plain-object.ts

                function isPlainObject(value) {
                    if (!isObject(value)) {
                        return false;
                    }
                    var proto = Object.getPrototypeOf(value);
                    return proto === Object.prototype || proto === null || Object.getPrototypeOf(proto) === null;
                }
                // CONCATENATED MODULE: ../utils/src/clone-deep.ts
                function clone_deep_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (clone_deep_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        clone_deep_typeof(o)
                    );
                }

                function cloneDeep(src) {
                    var type = clone_deep_typeof(src);
                    var data;
                    if (src === null || src === undefined) {
                        data = src;
                    } else if (Array.isArray(src)) {
                        data = src.map(function (item) {
                            return cloneDeep(item);
                        });
                    } else if (type === 'object' && isPlainObject(src)) {
                        data = {};
                        for (var key in src) {
                            // eslint-disable-next-line no-prototype-builtins
                            if (src.hasOwnProperty(key)) {
                                data[key] = cloneDeep(src[key]);
                            }
                        }
                    } else {
                        data = src;
                    }
                    return data;
                }
                // CONCATENATED MODULE: ../utils/src/clone-enumerable-property.ts
                var excludePropertyNames = [
                    '$$typeof',
                    'render',
                    'defaultProps',
                    'props',
                    'length',
                    'prototype',
                    'name',
                    'caller',
                    'callee',
                    'arguments',
                ];
                function cloneEnumerableProperty(target, origin) {
                    var excludes =
                        arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : excludePropertyNames;
                    var compExtraPropertyNames = Object.keys(origin).filter(function (d) {
                        return !excludes.includes(d);
                    });
                    compExtraPropertyNames.forEach(function (d) {
                        target[d] = origin[d];
                    });
                    return target;
                }
                // CONCATENATED MODULE: ../utils/src/is-react.ts
                function is_react_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (is_react_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        is_react_typeof(o)
                    );
                }
                var _excluded = ['children'];
                function _objectWithoutProperties(e, t) {
                    if (null == e) return {};
                    var o,
                        r,
                        i = _objectWithoutPropertiesLoose(e, t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(e);
                        for (r = 0; r < n.length; r++)
                            (o = n[r]), -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                    }
                    return i;
                }
                function _objectWithoutPropertiesLoose(r, e) {
                    if (null == r) return {};
                    var t = {};
                    for (var n in r)
                        if ({}.hasOwnProperty.call(r, n)) {
                            if (-1 !== e.indexOf(n)) continue;
                            t[n] = r[n];
                        }
                    return t;
                }
                function is_react_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function is_react_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, is_react_toPropertyKey(o.key), o);
                    }
                }
                function is_react_createClass(e, r, t) {
                    return (
                        r && is_react_defineProperties(e.prototype, r),
                        t && is_react_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function is_react_toPropertyKey(t) {
                    var i = is_react_toPrimitive(t, 'string');
                    return 'symbol' == is_react_typeof(i) ? i : i + '';
                }
                function is_react_toPrimitive(t, r) {
                    if ('object' != is_react_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != is_react_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function _callSuper(t, o, e) {
                    return (
                        (o = _getPrototypeOf(o)),
                        _possibleConstructorReturn(
                            t,
                            _isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function _possibleConstructorReturn(t, e) {
                    if (e && ('object' == is_react_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return _assertThisInitialized(t);
                }
                function _assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function _isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function _getPrototypeOf(t) {
                    return (
                        (_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        _getPrototypeOf(t)
                    );
                }
                function _inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && _setPrototypeOf(t, e);
                }
                function _setPrototypeOf(t, e) {
                    return (
                        (_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        _setPrototypeOf(t, e)
                    );
                }

                var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
                function isReactClass(obj) {
                    if (!obj) {
                        return false;
                    }
                    if (
                        obj.prototype &&
                        (obj.prototype.isReactComponent || obj.prototype instanceof external_window_React_['Component'])
                    ) {
                        return true;
                    }
                    return false;
                }
                function acceptsRef(obj) {
                    var _obj$prototype;
                    if (!obj) {
                        return false;
                    }
                    if (
                        (obj !== null &&
                            obj !== void 0 &&
                            (_obj$prototype = obj.prototype) !== null &&
                            _obj$prototype !== void 0 &&
                            _obj$prototype.isReactComponent) ||
                        isForwardOrMemoForward(obj)
                    ) {
                        return true;
                    }
                    return false;
                }
                function isForwardRefType(obj) {
                    if (!obj || !(obj !== null && obj !== void 0 && obj.$$typeof)) {
                        return false;
                    }
                    return (obj === null || obj === void 0 ? void 0 : obj.$$typeof) === REACT_FORWARD_REF_TYPE;
                }
                function isMemoType(obj) {
                    if (!obj || !(obj !== null && obj !== void 0 && obj.$$typeof)) {
                        return false;
                    }
                    return obj.$$typeof === REACT_MEMO_TYPE;
                }
                function isForwardOrMemoForward(obj) {
                    if (!obj || !(obj !== null && obj !== void 0 && obj.$$typeof)) {
                        return false;
                    }
                    return (
                        // React.forwardRef(..)
                        isForwardRefType(obj) ||
                        // React.memo(React.forwardRef(..))
                        (isMemoType(obj) && isForwardRefType(obj.type))
                    );
                }
                function isReactComponent(obj) {
                    if (!obj) {
                        return false;
                    }
                    return Boolean(
                        isReactClass(obj) || typeof obj === 'function' || isForwardRefType(obj) || isMemoType(obj),
                    );
                }
                function wrapReactClass(view) {
                    var ViewComponentClass = /*#__PURE__*/ (function (_Component) {
                        function ViewComponentClass() {
                            is_react_classCallCheck(this, ViewComponentClass);
                            return _callSuper(this, ViewComponentClass, arguments);
                        }
                        _inherits(ViewComponentClass, _Component);
                        return is_react_createClass(ViewComponentClass, [
                            {
                                key: 'render',
                                value: function render() {
                                    var _this$props = this.props,
                                        children = _this$props.children,
                                        other = _objectWithoutProperties(_this$props, _excluded);
                                    return /*#__PURE__*/ Object(external_window_React_['createElement'])(
                                        view,
                                        other,
                                        children,
                                    );
                                },
                            },
                        ]);
                    })(external_window_React_['Component']);
                    ViewComponentClass = cloneEnumerableProperty(ViewComponentClass, view);
                    ViewComponentClass.displayName = view.displayName;
                    return ViewComponentClass;
                }
                // CONCATENATED MODULE: ../utils/src/create-content.ts

                function createContent(content, props) {
                    if (/*#__PURE__*/ Object(external_window_React_['isValidElement'])(content)) {
                        return props
                            ? /*#__PURE__*/ Object(external_window_React_['cloneElement'])(content, props)
                            : content;
                    }
                    if (isReactComponent(content)) {
                        return /*#__PURE__*/ Object(external_window_React_['createElement'])(content, props);
                    }
                    return content;
                }
                // EXTERNAL MODULE: external "Next"
                var external_Next_ = __webpack_require__(4);

                // CONCATENATED MODULE: ../utils/src/is-es-module.ts
                function isESModule(obj) {
                    return obj && obj.__esModule;
                }
                // CONCATENATED MODULE: ../utils/src/create-icon.tsx
                function create_icon_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (create_icon_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        create_icon_typeof(o)
                    );
                }
                function _extends() {
                    return (
                        (_extends = Object.assign
                            ? Object.assign.bind()
                            : function (n) {
                                  for (var e = 1; e < arguments.length; e++) {
                                      var t = arguments[e];
                                      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
                                  }
                                  return n;
                              }),
                        _extends.apply(null, arguments)
                    );
                }
                function create_icon_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function create_icon_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? create_icon_ownKeys(Object(t), !0).forEach(function (r) {
                                  create_icon_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : create_icon_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function create_icon_defineProperty(e, r, t) {
                    return (
                        (r = create_icon_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function create_icon_toPropertyKey(t) {
                    var i = create_icon_toPrimitive(t, 'string');
                    return 'symbol' == create_icon_typeof(i) ? i : i + '';
                }
                function create_icon_toPrimitive(t, r) {
                    if ('object' != create_icon_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != create_icon_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                var URL_RE = /^(https?:)\/\//i;
                function createIcon(icon, props) {
                    if (!icon) {
                        return null;
                    }
                    if (isESModule(icon)) {
                        icon = icon.default;
                    }
                    if (typeof icon === 'string') {
                        if (URL_RE.test(icon)) {
                            return /*#__PURE__*/ Object(external_window_React_['createElement'])(
                                'img',
                                create_icon_objectSpread(
                                    {
                                        src: icon,
                                        class: props === null || props === void 0 ? void 0 : props.className,
                                    },
                                    props,
                                ),
                            );
                        }
                        return /*#__PURE__*/ React.createElement(
                            external_Next_['Icon'],
                            _extends(
                                {
                                    type: icon,
                                },
                                props,
                            ),
                        );
                    }
                    if (/*#__PURE__*/ Object(external_window_React_['isValidElement'])(icon)) {
                        return /*#__PURE__*/ Object(external_window_React_['cloneElement'])(
                            icon,
                            create_icon_objectSpread({}, props),
                        );
                    }
                    if (isReactComponent(icon)) {
                        return /*#__PURE__*/ Object(external_window_React_['createElement'])(
                            icon,
                            create_icon_objectSpread(
                                {
                                    class: props === null || props === void 0 ? void 0 : props.className,
                                },
                                props,
                            ),
                        );
                    }
                    return /*#__PURE__*/ React.createElement(external_Next_['Icon'], _extends({}, icon, props));
                }
                // EXTERNAL MODULE: ../utils/src/cursor.css
                var cursor = __webpack_require__(124);

                // CONCATENATED MODULE: ../utils/src/cursor.ts
                function cursor_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (cursor_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        cursor_typeof(o)
                    );
                }
                function cursor_createForOfIteratorHelper(r, e) {
                    var t = ('undefined' != typeof Symbol && r[Symbol.iterator]) || r['@@iterator'];
                    if (!t) {
                        if (
                            Array.isArray(r) ||
                            (t = cursor_unsupportedIterableToArray(r)) ||
                            (e && r && 'number' == typeof r.length)
                        ) {
                            t && (r = t);
                            var _n = 0,
                                F = function F() {};
                            return {
                                s: F,
                                n: function n() {
                                    return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] };
                                },
                                e: function e(r) {
                                    throw r;
                                },
                                f: F,
                            };
                        }
                        throw new TypeError(
                            'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                        );
                    }
                    var o,
                        a = !0,
                        u = !1;
                    return {
                        s: function s() {
                            t = t.call(r);
                        },
                        n: function n() {
                            var r = t.next();
                            return (a = r.done), r;
                        },
                        e: function e(r) {
                            (u = !0), (o = r);
                        },
                        f: function f() {
                            try {
                                a || null == t.return || t.return();
                            } finally {
                                if (u) throw o;
                            }
                        },
                    };
                }
                function cursor_unsupportedIterableToArray(r, a) {
                    if (r) {
                        if ('string' == typeof r) return cursor_arrayLikeToArray(r, a);
                        var t = {}.toString.call(r).slice(8, -1);
                        return (
                            'Object' === t && r.constructor && (t = r.constructor.name),
                            'Map' === t || 'Set' === t
                                ? Array.from(r)
                                : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                                ? cursor_arrayLikeToArray(r, a)
                                : void 0
                        );
                    }
                }
                function cursor_arrayLikeToArray(r, a) {
                    (null == a || a > r.length) && (a = r.length);
                    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                    return n;
                }
                function cursor_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function cursor_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, cursor_toPropertyKey(o.key), o);
                    }
                }
                function cursor_createClass(e, r, t) {
                    return (
                        r && cursor_defineProperties(e.prototype, r),
                        t && cursor_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function cursor_defineProperty(e, r, t) {
                    return (
                        (r = cursor_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function cursor_toPropertyKey(t) {
                    var i = cursor_toPrimitive(t, 'string');
                    return 'symbol' == cursor_typeof(i) ? i : i + '';
                }
                function cursor_toPrimitive(t, r) {
                    if ('object' != cursor_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != cursor_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                var Cursor = /*#__PURE__*/ (function () {
                    function Cursor() {
                        cursor_classCallCheck(this, Cursor);
                        cursor_defineProperty(this, 'states', new Set());
                    }
                    return cursor_createClass(Cursor, [
                        {
                            key: 'setDragging',
                            value: function setDragging(flag) {
                                if (flag) {
                                    this.addState('dragging');
                                } else {
                                    this.removeState('dragging');
                                }
                            },
                        },
                        {
                            key: 'setXResizing',
                            value: function setXResizing(flag) {
                                if (flag) {
                                    this.addState('x-resizing');
                                } else {
                                    this.removeState('x-resizing');
                                }
                            },
                        },
                        {
                            key: 'setYResizing',
                            value: function setYResizing(flag) {
                                if (flag) {
                                    this.addState('y-resizing');
                                } else {
                                    this.removeState('y-resizing');
                                }
                            },
                        },
                        {
                            key: 'setCopy',
                            value: function setCopy(flag) {
                                if (flag) {
                                    this.addState('copy');
                                } else {
                                    this.removeState('copy');
                                }
                            },
                        },
                        {
                            key: 'isCopy',
                            value: function isCopy() {
                                return this.states.has('copy');
                            },
                        },
                        {
                            key: 'release',
                            value: function release() {
                                var _iterator = cursor_createForOfIteratorHelper(this.states),
                                    _step;
                                try {
                                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                                        var state = _step.value;
                                        this.removeState(state);
                                    }
                                } catch (err) {
                                    _iterator.e(err);
                                } finally {
                                    _iterator.f();
                                }
                            },
                        },
                        {
                            key: 'addState',
                            value: function addState(state) {
                                if (!this.states.has(state)) {
                                    this.states.add(state);
                                    document.documentElement.classList.add('lc-cursor-'.concat(state));
                                }
                            },
                        },
                        {
                            key: 'removeState',
                            value: function removeState(state) {
                                if (this.states.has(state)) {
                                    this.states.delete(state);
                                    document.documentElement.classList.remove('lc-cursor-'.concat(state));
                                }
                            },
                        },
                    ]);
                })();
                var cursor_cursor = new Cursor();
                // CONCATENATED MODULE: ../utils/src/get-prototype-of.ts
                function getPrototypeOf(target) {
                    if (typeof Object.getPrototypeOf !== 'undefined') {
                        return Object.getPrototypeOf(target);
                    }
                    // eslint-disable-next-line no-proto
                    return target.__proto__;
                }
                // CONCATENATED MODULE: ../utils/src/has-own-property.ts
                var prototypeHasOwnProperty = Object.prototype.hasOwnProperty;
                function has_own_property_hasOwnProperty(obj, key) {
                    return obj && prototypeHasOwnProperty.call(obj, key);
                }
                // CONCATENATED MODULE: ../utils/src/is-element.ts
                function isElement(node) {
                    if (!node) return false;
                    return node.nodeType === Node.ELEMENT_NODE;
                }
                // CONCATENATED MODULE: ../utils/src/is-form-event.ts
                function isFormEvent(e) {
                    var t = e.target;
                    if (!t) {
                        return false;
                    }
                    if (t.form || /^(INPUT|SELECT|TEXTAREA)$/.test(t.tagName)) {
                        return true;
                    }
                    if (
                        t instanceof HTMLElement &&
                        /write/.test(window.getComputedStyle(t).getPropertyValue('-webkit-user-modify'))
                    ) {
                        return true;
                    }
                    return false;
                }
                // CONCATENATED MODULE: ../utils/src/is-function.ts
                function isFunction(fn) {
                    return typeof fn === 'function';
                }
                // CONCATENATED MODULE: ../utils/src/navtive-selection.ts
                var nativeSelectionEnabled = true;
                var preventSelection = function preventSelection(e) {
                    if (nativeSelectionEnabled) {
                        return null;
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                };
                document.addEventListener('selectstart', preventSelection, true);
                document.addEventListener('dragstart', preventSelection, true);
                function setNativeSelection(enableFlag) {
                    nativeSelectionEnabled = enableFlag;
                }
                // CONCATENATED MODULE: ../utils/src/set-prototype-of.ts
                function setPrototypeOf(target, proto) {
                    if (typeof Object.setPrototypeOf !== 'undefined') {
                        Object.setPrototypeOf(target, proto);
                    } else {
                        // eslint-disable-next-line no-proto
                        target.__proto__ = proto;
                    }
                }
                // CONCATENATED MODULE: ../utils/src/shallow-equal.ts
                function shallow_equal_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (shallow_equal_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        shallow_equal_typeof(o)
                    );
                }

                function shallowEqual(objA, objB) {
                    if (objA === objB) {
                        return true;
                    }
                    if (
                        shallow_equal_typeof(objA) !== 'object' ||
                        objA === null ||
                        shallow_equal_typeof(objB) !== 'object' ||
                        objB === null
                    ) {
                        return false;
                    }
                    var keysA = Object.keys(objA);
                    var keysB = Object.keys(objB);
                    if (keysA.length !== keysB.length) {
                        return false;
                    }
                    // Test for A's keys different from B.
                    for (var i = 0; i < keysA.length; i++) {
                        if (!has_own_property_hasOwnProperty(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
                            return false;
                        }
                    }
                    return true;
                }
                // CONCATENATED MODULE: ../utils/src/svg-icon.tsx
                function svg_icon_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (svg_icon_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        svg_icon_typeof(o)
                    );
                }
                var svg_icon_excluded = ['fill', 'size', 'viewBox', 'style', 'children'];
                function svg_icon_extends() {
                    return (
                        (svg_icon_extends = Object.assign
                            ? Object.assign.bind()
                            : function (n) {
                                  for (var e = 1; e < arguments.length; e++) {
                                      var t = arguments[e];
                                      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
                                  }
                                  return n;
                              }),
                        svg_icon_extends.apply(null, arguments)
                    );
                }
                function svg_icon_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function svg_icon_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? svg_icon_ownKeys(Object(t), !0).forEach(function (r) {
                                  svg_icon_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : svg_icon_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function svg_icon_defineProperty(e, r, t) {
                    return (
                        (r = svg_icon_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function svg_icon_toPropertyKey(t) {
                    var i = svg_icon_toPrimitive(t, 'string');
                    return 'symbol' == svg_icon_typeof(i) ? i : i + '';
                }
                function svg_icon_toPrimitive(t, r) {
                    if ('object' != svg_icon_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != svg_icon_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function svg_icon_objectWithoutProperties(e, t) {
                    if (null == e) return {};
                    var o,
                        r,
                        i = svg_icon_objectWithoutPropertiesLoose(e, t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(e);
                        for (r = 0; r < n.length; r++)
                            (o = n[r]), -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                    }
                    return i;
                }
                function svg_icon_objectWithoutPropertiesLoose(r, e) {
                    if (null == r) return {};
                    var t = {};
                    for (var n in r)
                        if ({}.hasOwnProperty.call(r, n)) {
                            if (-1 !== e.indexOf(n)) continue;
                            t[n] = r[n];
                        }
                    return t;
                }

                var SizePresets = {
                    xsmall: 8,
                    small: 12,
                    medium: 16,
                    large: 20,
                    xlarge: 30,
                };
                function SVGIcon(_ref) {
                    var fill = _ref.fill,
                        _ref$size = _ref.size,
                        size = _ref$size === void 0 ? 'medium' : _ref$size,
                        viewBox = _ref.viewBox,
                        style = _ref.style,
                        children = _ref.children,
                        props = svg_icon_objectWithoutProperties(_ref, svg_icon_excluded);
                    // eslint-disable-next-line no-prototype-builtins
                    if (SizePresets.hasOwnProperty(size)) {
                        size = SizePresets[size];
                    }
                    return /*#__PURE__*/ external_window_React_default.a.createElement(
                        'svg',
                        svg_icon_extends(
                            {
                                fill: 'currentColor',
                                preserveAspectRatio: 'xMidYMid meet',
                                width: size,
                                height: size,
                                viewBox: viewBox,
                            },
                            props,
                            {
                                style: svg_icon_objectSpread(
                                    {
                                        color: fill,
                                    },
                                    style,
                                ),
                            },
                        ),
                        children,
                    );
                }
                // CONCATENATED MODULE: ../utils/src/unique-id.ts
                var guid = Date.now();
                function uniqueId() {
                    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                    return ''.concat(prefix).concat((guid++).toString(36).toLowerCase());
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-action-content-object.ts

                function isActionContentObject(obj) {
                    return isObject(obj);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-custom-view.ts

                function isCustomView(obj) {
                    if (!obj) {
                        return false;
                    }
                    return /*#__PURE__*/ Object(external_window_React_['isValidElement'])(obj) || isReactComponent(obj);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-dom-text.ts
                function isDOMText(data) {
                    return typeof data === 'string';
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-dynamic-setter.ts

                function isDynamicSetter(obj) {
                    if (!isFunction(obj)) {
                        return false;
                    }
                    return !isReactClass(obj);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-i18n-data.ts

                function isI18nData(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return obj.type === 'i18n';
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-jsblock.ts

                function isJSBlock(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return data.type === 'JSBlock';
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-jsexpression.ts

                /**
                 * 为了避免把 { type: 'JSExpression', extType: 'function' } 误判为表达式，故增加如下逻辑。
                 *
                 * 引擎中关于函数的表达：
                 *  开源版本：{ type: 'JSFunction', source: '', value: '' }
                 *  内部版本：{ type: 'JSExpression', source: '', value: '', extType: 'function' }
                 *  能力是对标的，不过开源的 react-renderer 只认识第一种，而内部只识别第二种（包括 Java 代码、RE）。
                 * @param data
                 * @returns
                 */
                function isJSExpression(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return data.type === 'JSExpression' && data.extType !== 'function';
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-isfunction.ts

                /**
                 *  内部版本 的 { type: 'JSExpression', source: '', value: '', extType: 'function' } 能力上等同于 JSFunction
                 */
                function isInnerJsFunction(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return data.type === 'JSExpression' && data.extType === 'function';
                }
                function isJSFunction(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return data.type === 'JSFunction' || isInnerJsFunction(data);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-jsslot.ts

                function isJSSlot(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return data.type === 'JSSlot';
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-procode-component-type.ts

                function isProCodeComponentType(desc) {
                    if (!isObject(desc)) {
                        return false;
                    }
                    return 'package' in desc;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-lowcode-component-type.ts

                function isLowCodeComponentType(desc) {
                    return !isProCodeComponentType(desc);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-node-schema.ts

                function isNodeSchema(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return 'componentName' in data && !data.isNode;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-project-schema.ts

                function isProjectSchema(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    return 'componentsTree' in data;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-setter-config.ts

                function isSetterConfig(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return 'componentName' in obj && !isCustomView(obj);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-title-config.ts

                function isTitleConfig(obj) {
                    return isPlainObject(obj) && !isI18nData(obj);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-drag-node-data-object.ts

                function isDragNodeDataObject(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return obj.type === types_src['IPublicEnumDragObjectType'].NodeData;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-drag-node-object.ts

                function isDragNodeObject(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return obj.type === types_src['IPublicEnumDragObjectType'].Node;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-drag-any-object.ts

                function isDragAnyObject(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return (
                        obj.type !== types_src['IPublicEnumDragObjectType'].NodeData &&
                        obj.type !== types_src['IPublicEnumDragObjectType'].Node
                    );
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-location-children-detail.ts

                function isLocationChildrenDetail(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return obj.type === types_src['IPublicTypeLocationDetailType'].Children;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-node.ts

                function isNode(node) {
                    if (!isObject(node)) {
                        return false;
                    }
                    return node.isNode;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-location-data.ts

                function isLocationData(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return 'target' in obj && 'detail' in obj;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-setting-field.ts

                function isSettingField(obj) {
                    if (!isObject(obj)) {
                        return false;
                    }
                    return 'isSettingField' in obj && obj.isSettingField;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-component-schema.ts
                function is_component_schema_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (is_component_schema_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        is_component_schema_typeof(o)
                    );
                }
                function isComponentSchema(schema) {
                    if (is_component_schema_typeof(schema) === 'object') {
                        return schema.componentName === 'Component';
                    }
                    return false;
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-lowcode-project-schema.ts

                function isLowcodeProjectSchema(data) {
                    if (!isObject(data)) {
                        return false;
                    }
                    if (!('componentsTree' in data) || data.componentsTree.length === 0) {
                        return false;
                    }
                    return isComponentSchema(data.componentsTree[0]);
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-basic-prop-type.ts
                function isBasicPropType(propType) {
                    if (!propType) {
                        return false;
                    }
                    return typeof propType === 'string';
                }
                // CONCATENATED MODULE: ../utils/src/check-types/is-required-prop-type.ts
                function is_required_prop_type_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (is_required_prop_type_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        is_required_prop_type_typeof(o)
                    );
                }
                function isRequiredPropType(propType) {
                    if (!propType) {
                        return false;
                    }
                    return (
                        is_required_prop_type_typeof(propType) === 'object' &&
                        propType.type &&
                        ['array', 'bool', 'func', 'number', 'object', 'string', 'node', 'element', 'any'].includes(
                            propType.type,
                        )
                    );
                }
                // CONCATENATED MODULE: ../utils/src/check-types/index.ts
                // 此模块存放 @alilc/lowcode-types 中类型相关判断工具

                // CONCATENATED MODULE: ../utils/src/build-components.ts
                function build_components_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (build_components_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        build_components_typeof(o)
                    );
                }
                function build_components_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function build_components_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? build_components_ownKeys(Object(t), !0).forEach(function (r) {
                                  build_components_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : build_components_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function build_components_defineProperty(e, r, t) {
                    return (
                        (r = build_components_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function build_components_toPropertyKey(t) {
                    var i = build_components_toPrimitive(t, 'string');
                    return 'symbol' == build_components_typeof(i) ? i : i + '';
                }
                function build_components_toPrimitive(t, r) {
                    if ('object' != build_components_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != build_components_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function accessLibrary(library) {
                    if (typeof library !== 'string') {
                        return library;
                    }
                    return window[library] || generateHtmlComp(library);
                }
                function generateHtmlComp(library) {
                    if (['a', 'img', 'div', 'span', 'svg'].includes(library)) {
                        return /*#__PURE__*/ Object(external_window_React_['forwardRef'])(function (props, ref) {
                            return /*#__PURE__*/ Object(external_window_React_['createElement'])(
                                library,
                                build_components_objectSpread(
                                    {
                                        ref: ref,
                                    },
                                    props,
                                ),
                                props.children,
                            );
                        });
                    }
                }
                function getSubComponent(library, paths) {
                    var l = paths.length;
                    if (l < 1 || !library) {
                        return library;
                    }
                    var i = 0;
                    var component;
                    while (i < l) {
                        var key = paths[i];
                        var ex = void 0;
                        try {
                            component = library[key] || component;
                        } catch (e) {
                            ex = e;
                            component = null;
                        }
                        if (i === 0 && component == null && key === 'default') {
                            if (ex) {
                                return l === 1 ? library : null;
                            }
                            component = library;
                        } else if (component == null) {
                            return null;
                        }
                        library = component;
                        i++;
                    }
                    return component;
                }
                function findComponent(libraryMap, componentName, npm) {
                    if (!npm) {
                        return accessLibrary(componentName);
                    }
                    // libraryName the key access to global
                    // export { exportName } from xxx exportName === global.libraryName.exportName
                    // export exportName from xxx   exportName === global.libraryName.default || global.libraryName
                    // export { exportName as componentName } from package
                    // if exportName == null exportName === componentName;
                    // const componentName = exportName.subName, if exportName empty subName donot use
                    var exportName = npm.exportName || npm.componentName || componentName;
                    var libraryName = libraryMap[npm.package] || exportName;
                    var library = accessLibrary(libraryName);
                    var paths = npm.exportName && npm.subName ? npm.subName.split('.') : [];
                    if (npm.destructuring) {
                        paths.unshift(exportName);
                    } else if (isESModule(library)) {
                        paths.unshift('default');
                    }
                    return getSubComponent(library, paths);
                }
                /**
                 * 判断是否是一个混合组件，即 components 是一个对象，对象值是 React 组件
                 * 示例：
                 * {
                 *    Button: ReactNode,
                 *    Text: ReactNode,
                 * }
                 */
                function isMixinComponent(components) {
                    if (!isObject(components)) {
                        return false;
                    }
                    return Object.keys(components).some(function (componentName) {
                        return isReactComponent(components[componentName]);
                    });
                }
                function buildComponents(libraryMap, componentsMap, createComponent) {
                    var components = {};
                    Object.keys(componentsMap).forEach(function (componentName) {
                        var component = componentsMap[componentName];
                        if (component && (isLowcodeProjectSchema(component) || isComponentSchema(component))) {
                            if (isComponentSchema(component)) {
                                components[componentName] = createComponent({
                                    version: '',
                                    componentsMap: [],
                                    componentsTree: [component],
                                });
                            } else {
                                components[componentName] = createComponent(component);
                            }
                        } else if (isReactComponent(component)) {
                            if (!acceptsRef(component)) {
                                component = wrapReactClass(component);
                            }
                            components[componentName] = component;
                        } else if (isMixinComponent(component)) {
                            components[componentName] = component;
                        } else {
                            component = findComponent(libraryMap, componentName, component);
                            if (component) {
                                if (!acceptsRef(component) && isReactComponent(component)) {
                                    component = wrapReactClass(component);
                                }
                                components[componentName] = component;
                            }
                        }
                    });
                    return components;
                }
                function getProjectUtils(librayMap, utilsMetadata) {
                    var projectUtils = {};
                    if (utilsMetadata) {
                        utilsMetadata.forEach(function (meta) {
                            var _meta$npm;
                            if (
                                librayMap[
                                    meta === null || meta === void 0
                                        ? void 0
                                        : (_meta$npm = meta.npm) === null || _meta$npm === void 0
                                        ? void 0
                                        : _meta$npm.package
                                ]
                            ) {
                                var lib = accessLibrary(
                                    librayMap[meta === null || meta === void 0 ? void 0 : meta.npm.package],
                                );
                                if (lib !== null && lib !== void 0 && lib.destructuring) {
                                    Object.keys(lib).forEach(function (name) {
                                        if (name === 'destructuring') return;
                                        projectUtils[name] = lib[name];
                                    });
                                } else if (meta.name) {
                                    projectUtils[meta.name] = lib;
                                }
                            }
                        });
                    }
                    return projectUtils;
                }
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/events/events.js
                var events = __webpack_require__(10);
                var events_default = /*#__PURE__*/ __webpack_require__.n(events);

                // CONCATENATED MODULE: ../utils/src/app-helper.ts
                var _AppHelper;
                function app_helper_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (app_helper_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        app_helper_typeof(o)
                    );
                }
                function app_helper_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function app_helper_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, app_helper_toPropertyKey(o.key), o);
                    }
                }
                function app_helper_createClass(e, r, t) {
                    return (
                        r && app_helper_defineProperties(e.prototype, r),
                        t && app_helper_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function app_helper_callSuper(t, o, e) {
                    return (
                        (o = app_helper_getPrototypeOf(o)),
                        app_helper_possibleConstructorReturn(
                            t,
                            app_helper_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], app_helper_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function app_helper_possibleConstructorReturn(t, e) {
                    if (e && ('object' == app_helper_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return app_helper_assertThisInitialized(t);
                }
                function app_helper_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function app_helper_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (app_helper_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function app_helper_getPrototypeOf(t) {
                    return (
                        (app_helper_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        app_helper_getPrototypeOf(t)
                    );
                }
                function app_helper_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && app_helper_setPrototypeOf(t, e);
                }
                function app_helper_setPrototypeOf(t, e) {
                    return (
                        (app_helper_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        app_helper_setPrototypeOf(t, e)
                    );
                }
                function app_helper_defineProperty(e, r, t) {
                    return (
                        (r = app_helper_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function app_helper_toPropertyKey(t) {
                    var i = app_helper_toPrimitive(t, 'string');
                    return 'symbol' == app_helper_typeof(i) ? i : i + '';
                }
                function app_helper_toPrimitive(t, r) {
                    if ('object' != app_helper_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != app_helper_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                var instance = null;
                events_default.a.defaultMaxListeners = 100;
                var AppHelper = /*#__PURE__*/ (function (_EventEmitter) {
                    function AppHelper(config) {
                        var _this;
                        app_helper_classCallCheck(this, AppHelper);
                        _this = app_helper_callSuper(this, AppHelper);
                        instance = _this;
                        Object.assign(_this, config);
                        return _this;
                    }
                    app_helper_inherits(AppHelper, _EventEmitter);
                    return app_helper_createClass(AppHelper, [
                        {
                            key: 'get',
                            value: function get(key) {
                                return this[key];
                            },
                        },
                        {
                            key: 'set',
                            value: function set(key, val) {
                                var _this2 = this;
                                if (typeof key === 'string') {
                                    this[key] = val;
                                } else if (app_helper_typeof(key) === 'object') {
                                    Object.keys(key).forEach(function (item) {
                                        _this2[item] = key[item];
                                    });
                                }
                            },
                        },
                        {
                            key: 'batchOn',
                            value: function batchOn(events, listener) {
                                var _this3 = this;
                                if (!Array.isArray(events)) return;
                                events.forEach(function (event) {
                                    return _this3.on(event, listener);
                                });
                            },
                        },
                        {
                            key: 'batchOnce',
                            value: function batchOnce(events, listener) {
                                var _this4 = this;
                                if (!Array.isArray(events)) return;
                                events.forEach(function (event) {
                                    return _this4.once(event, listener);
                                });
                            },
                        },
                        {
                            key: 'batchOff',
                            value: function batchOff(events, listener) {
                                var _this5 = this;
                                if (!Array.isArray(events)) return;
                                events.forEach(function (event) {
                                    return _this5.off(event, listener);
                                });
                            },
                        },
                    ]);
                })(events_default.a);
                _AppHelper = AppHelper;
                app_helper_defineProperty(AppHelper, 'getInstance', function () {
                    if (!instance) {
                        instance = new _AppHelper();
                    }
                    return instance;
                });
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/lodash/lodash.js
                var lodash = __webpack_require__(3);

                // CONCATENATED MODULE: ../utils/src/misc.ts
                function misc_defineProperty(e, r, t) {
                    return (
                        (r = misc_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function misc_toPropertyKey(t) {
                    var i = misc_toPrimitive(t, 'string');
                    return 'symbol' == misc_typeof(i) ? i : i + '';
                }
                function misc_toPrimitive(t, r) {
                    if ('object' != misc_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != misc_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function misc_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (misc_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        misc_typeof(o)
                    );
                }

                var misc_logger = new Logger({
                    level: 'warn',
                    bizName: 'utils',
                });
                function isVariable(obj) {
                    if (!obj || misc_typeof(obj) !== 'object') {
                        return false;
                    }
                    return obj.type === 'variable';
                }
                function isUseI18NSetter(prototype, propName) {
                    var _prototype$options;
                    var configure =
                        prototype === null || prototype === void 0
                            ? void 0
                            : (_prototype$options = prototype.options) === null || _prototype$options === void 0
                            ? void 0
                            : _prototype$options.configure;
                    if (Array.isArray(configure)) {
                        return configure.some(function (c) {
                            var _c$setter, _c$setter$type;
                            return (
                                c.name === propName &&
                                (c === null || c === void 0
                                    ? void 0
                                    : (_c$setter = c.setter) === null || _c$setter === void 0
                                    ? void 0
                                    : (_c$setter$type = _c$setter.type) === null || _c$setter$type === void 0
                                    ? void 0
                                    : _c$setter$type.displayName) === 'I18nSetter'
                            );
                        });
                    }
                    return false;
                }
                function convertToI18NObject(v) {
                    var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zh-CN';
                    if (isI18NObject(v)) return v;
                    return misc_defineProperty(
                        {
                            type: 'i18n',
                            use: locale,
                        },
                        locale,
                        v,
                    );
                }
                function isString(v) {
                    return typeof v === 'string';
                }
                function _innerWaitForThing(obj, path) {
                    var timeGap = 200;
                    return new Promise(function (resolve, reject) {
                        setTimeout(function () {
                            var thing = Object(lodash['get'])(obj, path);
                            if (thing) {
                                return resolve(thing);
                            }
                            reject();
                        }, timeGap);
                    }).catch(function () {
                        return _innerWaitForThing(obj, path);
                    });
                }
                function waitForThing(obj, path) {
                    var thing = Object(lodash['get'])(obj, path);
                    if (thing) {
                        return Promise.resolve(thing);
                    }
                    return _innerWaitForThing(obj, path);
                }
                function arrShallowEquals(arr1, arr2) {
                    if (!Array.isArray(arr1) || !Array.isArray(arr2)) return false;
                    if (arr1.length !== arr2.length) return false;
                    return arr1.every(function (item) {
                        return arr2.includes(item);
                    });
                }
                /**
                 * 判断当前 meta 是否从 vc prototype 转换而来
                 * @param meta
                 */
                function isFromVC(meta) {
                    var _meta$getMetadata$con;
                    return !!(
                        meta !== null &&
                        meta !== void 0 &&
                        (_meta$getMetadata$con = meta.getMetadata().configure) !== null &&
                        _meta$getMetadata$con !== void 0 &&
                        _meta$getMetadata$con.advanced
                    );
                }
                function executePendingFn(fn) {
                    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
                    return setTimeout(fn, timeout);
                }
                var stageList = ['render', 'serilize', 'save', 'clone', 'init', 'upgrade'];
                /**
                 * 兼容原来的数字版本的枚举对象
                 * @param stage
                 * @returns
                 */
                function compatStage(stage) {
                    if (typeof stage === 'number') {
                        console.warn(
                            'stage 直接指定为数字的使用方式已经过时，将在下一版本移除，请直接使用 IPublicEnumTransformStage.Render|Serilize|Save|Clone|Init|Upgrade',
                        );
                        return stageList[stage - 1];
                    }
                    return stage;
                }
                function invariant(check, message, thing) {
                    if (!check) {
                        throw new Error(
                            'Invariant failed: '.concat(message).concat(thing ? " in '".concat(thing, "'") : ''),
                        );
                    }
                }
                function deprecate(fail, message, alterative) {
                    if (fail) {
                        misc_logger.warn(
                            'Deprecation: '.concat(message) +
                                (alterative ? ', use '.concat(alterative, ' instead.') : ''),
                        );
                    }
                }
                function isRegExp(obj) {
                    if (!obj || misc_typeof(obj) !== 'object') {
                        return false;
                    }
                    return 'test' in obj && 'exec' in obj && 'compile' in obj;
                }
                /**
                 * The prop supportVariable SHOULD take precedence over default global supportVariable.
                 * @param propSupportVariable prop supportVariable
                 * @param globalSupportVariable global supportVariable
                 * @returns
                 */
                function shouldUseVariableSetter(propSupportVariable, globalSupportVariable) {
                    if (propSupportVariable === false) return false;
                    return propSupportVariable || globalSupportVariable;
                }
                // CONCATENATED MODULE: ../utils/src/schema.ts
                function schema_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function schema_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? schema_ownKeys(Object(t), !0).forEach(function (r) {
                                  schema_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : schema_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function schema_defineProperty(e, r, t) {
                    return (
                        (r = schema_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function schema_toPropertyKey(t) {
                    var i = schema_toPrimitive(t, 'string');
                    return 'symbol' == schema_typeof(i) ? i : i + '';
                }
                function schema_toPrimitive(t, r) {
                    if ('object' != schema_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != schema_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function _slicedToArray(r, e) {
                    return (
                        _arrayWithHoles(r) ||
                        _iterableToArrayLimit(r, e) ||
                        schema_unsupportedIterableToArray(r, e) ||
                        _nonIterableRest()
                    );
                }
                function _nonIterableRest() {
                    throw new TypeError(
                        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                    );
                }
                function _iterableToArrayLimit(r, l) {
                    var t = null == r ? null : ('undefined' != typeof Symbol && r[Symbol.iterator]) || r['@@iterator'];
                    if (null != t) {
                        var e,
                            n,
                            i,
                            u,
                            a = [],
                            f = !0,
                            o = !1;
                        try {
                            if (((i = (t = t.call(r)).next), 0 === l)) {
                                if (Object(t) !== t) return;
                                f = !1;
                            } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
                        } catch (r) {
                            (o = !0), (n = r);
                        } finally {
                            try {
                                if (!f && null != t.return && ((u = t.return()), Object(u) !== u)) return;
                            } finally {
                                if (o) throw n;
                            }
                        }
                        return a;
                    }
                }
                function _arrayWithHoles(r) {
                    if (Array.isArray(r)) return r;
                }
                function schema_createForOfIteratorHelper(r, e) {
                    var t = ('undefined' != typeof Symbol && r[Symbol.iterator]) || r['@@iterator'];
                    if (!t) {
                        if (
                            Array.isArray(r) ||
                            (t = schema_unsupportedIterableToArray(r)) ||
                            (e && r && 'number' == typeof r.length)
                        ) {
                            t && (r = t);
                            var _n = 0,
                                F = function F() {};
                            return {
                                s: F,
                                n: function n() {
                                    return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] };
                                },
                                e: function e(r) {
                                    throw r;
                                },
                                f: F,
                            };
                        }
                        throw new TypeError(
                            'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                        );
                    }
                    var o,
                        a = !0,
                        u = !1;
                    return {
                        s: function s() {
                            t = t.call(r);
                        },
                        n: function n() {
                            var r = t.next();
                            return (a = r.done), r;
                        },
                        e: function e(r) {
                            (u = !0), (o = r);
                        },
                        f: function f() {
                            try {
                                a || null == t.return || t.return();
                            } finally {
                                if (u) throw o;
                            }
                        },
                    };
                }
                function schema_unsupportedIterableToArray(r, a) {
                    if (r) {
                        if ('string' == typeof r) return schema_arrayLikeToArray(r, a);
                        var t = {}.toString.call(r).slice(8, -1);
                        return (
                            'Object' === t && r.constructor && (t = r.constructor.name),
                            'Map' === t || 'Set' === t
                                ? Array.from(r)
                                : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                                ? schema_arrayLikeToArray(r, a)
                                : void 0
                        );
                    }
                }
                function schema_arrayLikeToArray(r, a) {
                    (null == a || a > r.length) && (a = r.length);
                    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                    return n;
                }
                function schema_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (schema_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        schema_typeof(o)
                    );
                }

                function isJsObject(props) {
                    if (schema_typeof(props) === 'object' && props !== null) {
                        return props.type && props.source && props.compiled;
                    }
                }
                function isActionRef(props) {
                    return props.type && props.type === 'actionRef';
                }
                /**
                 * 将「乐高版本」协议升级成 JSExpression / JSSlot 等标准协议的结构
                 * @param props
                 * @returns
                 */
                function compatibleLegaoSchema(props) {
                    if (!props) {
                        return props;
                    }
                    if (Array.isArray(props)) {
                        return props.map(function (k) {
                            return compatibleLegaoSchema(k);
                        });
                    }
                    if (!isPlainObject(props)) {
                        return props;
                    }
                    if (isJSBlock(props)) {
                        if (props.value.componentName === 'Slot') {
                            var _props$value$props, _props$value$props2, _props$value$props3;
                            return {
                                type: 'JSSlot',
                                title:
                                    (_props$value$props = props.value.props) === null || _props$value$props === void 0
                                        ? void 0
                                        : _props$value$props.slotTitle,
                                name:
                                    (_props$value$props2 = props.value.props) === null || _props$value$props2 === void 0
                                        ? void 0
                                        : _props$value$props2.slotName,
                                value: compatibleLegaoSchema(props.value.children),
                                params:
                                    (_props$value$props3 = props.value.props) === null || _props$value$props3 === void 0
                                        ? void 0
                                        : _props$value$props3.slotParams,
                            };
                        } else {
                            return props.value;
                        }
                    }
                    if (isVariable(props)) {
                        return {
                            type: 'JSExpression',
                            value: props.variable,
                            mock: props.value,
                        };
                    }
                    if (isJsObject(props)) {
                        return {
                            type: 'JSExpression',
                            value: props.compiled,
                            extType: 'function',
                        };
                    }
                    if (isActionRef(props)) {
                        return {
                            type: 'JSExpression',
                            value: ''.concat(props.id, '.bind(this)'),
                        };
                    }
                    var newProps = {};
                    Object.keys(props).forEach(function (key) {
                        if (/^__slot__/.test(key) && props[key] === true) {
                            return;
                        }
                        // TODO: 先移除，目前没有业务使用
                        // if (key === 'dataSource') {
                        //   newProps[key] = props[key];
                        //   return;
                        // }
                        newProps[key] = compatibleLegaoSchema(props[key]);
                    });
                    return newProps;
                }
                function getNodeSchemaById(schema, nodeId) {
                    var found;
                    if (schema.id === nodeId) {
                        return schema;
                    }
                    var children = schema.children,
                        props = schema.props;
                    // 查找 children
                    if (Array.isArray(children)) {
                        var _iterator = schema_createForOfIteratorHelper(children),
                            _step;
                        try {
                            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                                var child = _step.value;
                                found = getNodeSchemaById(child, nodeId);
                                if (found) return found;
                            }
                        } catch (err) {
                            _iterator.e(err);
                        } finally {
                            _iterator.f();
                        }
                    }
                    if (isPlainObject(props)) {
                        // 查找 props，主要是 slot 类型
                        found = getNodeSchemaFromPropsById(props, nodeId);
                        if (found) return found;
                    }
                }
                function getNodeSchemaFromPropsById(props, nodeId) {
                    var found;
                    for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {
                        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                            _key = _Object$entries$_i[0],
                            value = _Object$entries$_i[1];
                        if (isJSSlot(value)) {
                            // value 是数组类型 { type: 'JSSlot', value: IPublicTypeNodeSchema[] }
                            if (Array.isArray(value.value)) {
                                var _iterator2 = schema_createForOfIteratorHelper(value.value),
                                    _step2;
                                try {
                                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                                        var child = _step2.value;
                                        found = getNodeSchemaById(child, nodeId);
                                        if (found) return found;
                                    }
                                } catch (err) {
                                    _iterator2.e(err);
                                } finally {
                                    _iterator2.f();
                                }
                            }
                            // value 是对象类型 { type: 'JSSlot', value: IPublicTypeNodeSchema }
                            found = getNodeSchemaById(value.value, nodeId);
                            if (found) return found;
                        } else if (isPlainObject(value)) {
                            found = getNodeSchemaFromPropsById(value, nodeId);
                            if (found) return found;
                        }
                    }
                }
                /**
                 * TODO: not sure if this is used anywhere
                 * @deprecated
                 */
                function applyActivities(pivotSchema, activities) {
                    var schema = schema_objectSpread({}, pivotSchema);
                    if (!Array.isArray(activities)) {
                        activities = [activities];
                    }
                    return activities.reduce(function (accSchema, activity) {
                        if (activity.type === types_src['ActivityType'].MODIFIED) {
                            var found = getNodeSchemaById(accSchema, activity.payload.schema.id);
                            if (!found) return accSchema;
                            Object.assign(found, activity.payload.schema);
                        } else if (activity.type === types_src['ActivityType'].ADDED) {
                            var payload = activity.payload;
                            var location = payload.location,
                                _schema = payload.schema;
                            var parent = location.parent;
                            var _found = getNodeSchemaById(accSchema, parent.nodeId);
                            if (_found) {
                                if (Array.isArray(_found.children)) {
                                    _found.children.splice(parent.index, 0, _schema);
                                } else if (!_found.children) {
                                    _found.children = [_schema];
                                }
                                // TODO: 是 JSExpression / DOMText
                            }
                        } else if (activity.type === types_src['ActivityType'].DELETED) {
                            var _payload = activity.payload;
                            var _location = _payload.location;
                            var _parent = _location.parent;
                            var _found2 = getNodeSchemaById(accSchema, _parent.nodeId);
                            if (_found2 && Array.isArray(_found2.children)) {
                                _found2.children.splice(_parent.index, 1);
                            }
                        }
                        return accSchema;
                    }, schema);
                }
                // CONCATENATED MODULE: ../utils/src/node-helper.ts
                var _getClosestNode = function getClosestNode(node, until) {
                    if (!node) {
                        return undefined;
                    }
                    if (until(node)) {
                        return node;
                    } else {
                        // @ts-ignore
                        return _getClosestNode(node.parent, until);
                    }
                };
                /**
                 * 判断节点是否可被点击
                 * @param {Node} node 节点
                 * @param {unknown} e 点击事件
                 * @returns {boolean} 是否可点击，true表示可点击
                 */

                function canClickNode(node, e) {
                    var _node$componentMeta, _node$componentMeta$a, _node$componentMeta$a2;
                    var onClickHook =
                        (_node$componentMeta = node.componentMeta) === null || _node$componentMeta === void 0
                            ? void 0
                            : (_node$componentMeta$a = _node$componentMeta.advanced) === null ||
                              _node$componentMeta$a === void 0
                            ? void 0
                            : (_node$componentMeta$a2 = _node$componentMeta$a.callbacks) === null ||
                              _node$componentMeta$a2 === void 0
                            ? void 0
                            : _node$componentMeta$a2.onClickHook;
                    var canClick = typeof onClickHook === 'function' ? onClickHook(e, node) : true;
                    return canClick;
                }
                // CONCATENATED MODULE: ../utils/src/is-shaken.ts
                var SHAKE_DISTANCE = 4;
                /**
                 * mouse shake check
                 */
                function isShaken(e1, e2) {
                    if (e1.shaken) {
                        return true;
                    }
                    if (e1.target !== e2.target) {
                        return true;
                    }
                    return Math.pow(e1.clientY - e2.clientY, 2) + Math.pow(e1.clientX - e2.clientX, 2) > SHAKE_DISTANCE;
                }
                // CONCATENATED MODULE: ../utils/src/is-plugin-event-name.ts
                function isPluginEventName(eventName) {
                    if (!eventName) {
                        return false;
                    }
                    var eventSegments = eventName.split(':');
                    return eventSegments.length > 1 && eventSegments[0].length > 0;
                }
                // CONCATENATED MODULE: ../utils/src/css-helper.ts
                /**
                 * just for legao
                 * @author: jiushen
                 */
                // 需要通过 Env 来判断是否需要

                var pseudoMap = ['hover', 'focus', 'active', 'visited'];
                var RE_CAMEL = /[A-Z]/g;
                var RE_HYPHEN = /[-\s]+(.)?/g;
                var PROPS_REG = /([^:]*):\s?(.*)/i;
                // 给 css 分组
                function groupingCss(css) {
                    var stackLength = 0;
                    var startIndex = 0;
                    var group = [];
                    css.split('').forEach(function (_char, index) {
                        if (_char === '{') {
                            stackLength++;
                        }
                        if (_char === '}') {
                            if (stackLength === 1) {
                                group.push(css.substring(startIndex, index + 1));
                                startIndex = index + 1;
                            }
                            stackLength--;
                        }
                    });
                    return group;
                }
                function css_helper_isString(str) {
                    return {}.toString.call(str) === '[object String]';
                }
                function hyphenate(str) {
                    return str
                        .replace(RE_CAMEL, function (w) {
                            return '-'.concat(w);
                        })
                        .toLowerCase();
                }
                function camelize(str) {
                    return str.replace(RE_HYPHEN, function (m, w) {
                        return w ? w.toUpperCase() : '';
                    });
                }
                /**
                 * convert
                 * {background-color: "red"}
                 * to
                 * background-color: red;
                 */
                function runtimeToCss(runtime) {
                    var css = [];
                    Object.keys(runtime).forEach(function (key) {
                        css.push('  '.concat(key, ': ').concat(runtime[key], ';'));
                    });
                    return css.join('\n');
                }
                function toNativeStyle(runtime) {
                    if (!runtime) {
                        return {};
                    }
                    if (runtime.default) {
                        var _normalized = {};
                        Object.keys(runtime).forEach(function (pseudo) {
                            if (pseudo === 'extra') {
                                _normalized[pseudo] = runtime[pseudo];
                                return;
                            }
                            _normalized[pseudo] = toNativeStyle(runtime[pseudo]);
                        });
                        return _normalized;
                    }
                    var normalized = {};
                    Object.keys(runtime).forEach(function (key) {
                        normalized[camelize(key)] = runtime[key];
                    });
                    return normalized;
                }
                function normalizeStyle(style) {
                    if (!style) {
                        return {};
                    }
                    if (style.default) {
                        var _normalized2 = {};
                        Object.keys(style).forEach(function (pseudo) {
                            if (pseudo === 'extra') {
                                _normalized2[pseudo] = style[pseudo];
                                return;
                            }
                            _normalized2[pseudo] = normalizeStyle(style[pseudo]);
                        });
                        return _normalized2;
                    }
                    var normalized = {};
                    Object.keys(style).forEach(function (key) {
                        normalized[hyphenate(key)] = style[key];
                    });
                    return normalized;
                }
                function toCss(runtime) {
                    if (!runtime) {
                        return ':root {\n\n}';
                    }
                    if (runtime.default) {
                        var css = [];
                        Object.keys(runtime).forEach(function (pseudo) {
                            if (pseudo === 'extra') {
                                Array.isArray(runtime.extra) && css.push(runtime.extra.join('\n'));
                                return;
                            }
                            // 只需要对这四种做兼容
                            var prefix = pseudoMap.indexOf(pseudo) > -1 ? ':' : '';
                            css.push(
                                ':root'
                                    .concat(pseudo === 'default' ? '' : ''.concat(prefix).concat(pseudo), ' {\n')
                                    .concat(runtimeToCss(normalizeStyle(runtime[pseudo])), '\n}\n'),
                            );
                        });
                        return css.join('\n');
                    }
                    return ':root {\n'.concat(runtimeToCss(normalizeStyle(runtime)), '\n}\n');
                }
                function cssToRuntime(css) {
                    if (!css) {
                        return {};
                    }
                    var runtime = {};
                    var groups = groupingCss(css);
                    groups.forEach(function (cssItem) {
                        if (!cssItem.startsWith(':root')) {
                            runtime.extra = runtime.extra || [];
                            runtime.extra.push(cssItem.trim());
                        } else {
                            var res = /:root:?(.*)?{(.*)/gi.exec(cssItem.replace(/[\r\n]+/gi, '').trim());
                            if (res) {
                                var pseudo;
                                if (
                                    res[1] &&
                                    res[1].trim() &&
                                    Object(lodash['some'])(pseudoMap, function (pse) {
                                        return res[1].indexOf(pse) === 0;
                                    })
                                ) {
                                    pseudo = res[1].trim();
                                } else if (res[1] && res[1].trim()) {
                                    pseudo = res[1];
                                }
                                var s = {};
                                res[2]
                                    .split(';')
                                    .reduce(function (prev, next) {
                                        if (next.indexOf('base64') > -1) {
                                            prev[prev.length - 1] += ';'.concat(next);
                                        } else {
                                            prev.push(next);
                                        }
                                        return prev;
                                    }, [])
                                    .forEach(function (item) {
                                        if (item) {
                                            if (PROPS_REG.test(item)) {
                                                var props = item.match(PROPS_REG);
                                                var key = props === null || props === void 0 ? void 0 : props[1];
                                                var value = props === null || props === void 0 ? void 0 : props[2];
                                                if (key && value) {
                                                    s[key.trim()] = value.trim();
                                                }
                                            }
                                        }
                                    });
                                runtime[pseudo || 'default'] = s;
                            }
                        }
                    });
                    return runtime;
                }
                function cssToStyle(css) {
                    try {
                        if (css_helper_isString(css)) {
                            return toNativeStyle(cssToRuntime(css).default);
                        }
                        if (css.default) {
                            return toNativeStyle(normalizeStyle(css.default));
                        }
                        return toNativeStyle(normalizeStyle(css));
                    } catch (e) {
                        // do nothing
                    }
                    return {};
                }

                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/mobx/dist/mobx.esm.js
                var mobx_esm = __webpack_require__(44);

                // CONCATENATED MODULE: ../utils/src/transaction-manager.ts
                function transaction_manager_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (transaction_manager_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        transaction_manager_typeof(o)
                    );
                }
                function transaction_manager_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, transaction_manager_toPropertyKey(o.key), o);
                    }
                }
                function transaction_manager_createClass(e, r, t) {
                    return (
                        r && transaction_manager_defineProperties(e.prototype, r),
                        t && transaction_manager_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function transaction_manager_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function transaction_manager_defineProperty(e, r, t) {
                    return (
                        (r = transaction_manager_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function transaction_manager_toPropertyKey(t) {
                    var i = transaction_manager_toPrimitive(t, 'string');
                    return 'symbol' == transaction_manager_typeof(i) ? i : i + '';
                }
                function transaction_manager_toPrimitive(t, r) {
                    if ('object' != transaction_manager_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != transaction_manager_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                var transaction_manager_TransactionManager = /*#__PURE__*/ transaction_manager_createClass(
                    function TransactionManager() {
                        var _this = this;
                        transaction_manager_classCallCheck(this, TransactionManager);
                        transaction_manager_defineProperty(this, 'emitter', new events_default.a());
                        transaction_manager_defineProperty(this, 'executeTransaction', function (fn) {
                            var type =
                                arguments.length > 1 && arguments[1] !== undefined
                                    ? arguments[1]
                                    : types_src['IPublicEnumTransitionType'].REPAINT;
                            _this.emitter.emit('['.concat(type, ']startTransaction'));
                            Object(mobx_esm['a' /* runInAction */])(fn);
                            _this.emitter.emit('['.concat(type, ']endTransaction'));
                        });
                        transaction_manager_defineProperty(this, 'onStartTransaction', function (fn) {
                            var type =
                                arguments.length > 1 && arguments[1] !== undefined
                                    ? arguments[1]
                                    : types_src['IPublicEnumTransitionType'].REPAINT;
                            _this.emitter.on('['.concat(type, ']startTransaction'), fn);
                            return function () {
                                _this.emitter.off('['.concat(type, ']startTransaction'), fn);
                            };
                        });
                        transaction_manager_defineProperty(this, 'onEndTransaction', function (fn) {
                            var type =
                                arguments.length > 1 && arguments[1] !== undefined
                                    ? arguments[1]
                                    : types_src['IPublicEnumTransitionType'].REPAINT;
                            _this.emitter.on('['.concat(type, ']endTransaction'), fn);
                            return function () {
                                _this.emitter.off('['.concat(type, ']endTransaction'), fn);
                            };
                        });
                    },
                );
                var transactionManager = new transaction_manager_TransactionManager();
                // CONCATENATED MODULE: ../utils/src/workspace.tsx
                function workspace_extends() {
                    return (
                        (workspace_extends = Object.assign
                            ? Object.assign.bind()
                            : function (n) {
                                  for (var e = 1; e < arguments.length; e++) {
                                      var t = arguments[e];
                                      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
                                  }
                                  return n;
                              }),
                        workspace_extends.apply(null, arguments)
                    );
                }
                function workspace_slicedToArray(r, e) {
                    return (
                        workspace_arrayWithHoles(r) ||
                        workspace_iterableToArrayLimit(r, e) ||
                        workspace_unsupportedIterableToArray(r, e) ||
                        workspace_nonIterableRest()
                    );
                }
                function workspace_nonIterableRest() {
                    throw new TypeError(
                        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                    );
                }
                function workspace_unsupportedIterableToArray(r, a) {
                    if (r) {
                        if ('string' == typeof r) return workspace_arrayLikeToArray(r, a);
                        var t = {}.toString.call(r).slice(8, -1);
                        return (
                            'Object' === t && r.constructor && (t = r.constructor.name),
                            'Map' === t || 'Set' === t
                                ? Array.from(r)
                                : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                                ? workspace_arrayLikeToArray(r, a)
                                : void 0
                        );
                    }
                }
                function workspace_arrayLikeToArray(r, a) {
                    (null == a || a > r.length) && (a = r.length);
                    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                    return n;
                }
                function workspace_iterableToArrayLimit(r, l) {
                    var t = null == r ? null : ('undefined' != typeof Symbol && r[Symbol.iterator]) || r['@@iterator'];
                    if (null != t) {
                        var e,
                            n,
                            i,
                            u,
                            a = [],
                            f = !0,
                            o = !1;
                        try {
                            if (((i = (t = t.call(r)).next), 0 === l)) {
                                if (Object(t) !== t) return;
                                f = !1;
                            } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
                        } catch (r) {
                            (o = !0), (n = r);
                        } finally {
                            try {
                                if (!f && null != t.return && ((u = t.return()), Object(u) !== u)) return;
                            } finally {
                                if (o) throw n;
                            }
                        }
                        return a;
                    }
                }
                function workspace_arrayWithHoles(r) {
                    if (Array.isArray(r)) return r;
                }

                /**
                 * 高阶组件（HOC）：为组件提供 view 插件上下文。
                 *
                 * @param {React.ComponentType} Component - 需要被封装的组件。
                 * @param {string|string[]} viewName - 视图名称或视图名称数组，用于过滤特定的视图插件上下文。
                 * @returns {React.ComponentType} 返回封装后的组件。
                 *
                 * @example
                 * // 用法示例（函数组件）:
                 * const EnhancedComponent = ProvideViewPluginContext(MyComponent, "viewName");
                 */
                var workspace_ProvideViewPluginContext = function ProvideViewPluginContext(Component, viewName) {
                    // 创建一个新的函数组件，以便在其中使用 Hooks
                    return function WithPluginContext(props) {
                        var _props$pluginContext;
                        var getPluginContextFun = Object(external_window_React_['useCallback'])(function (
                            editorWindow,
                        ) {
                            if (!(editorWindow !== null && editorWindow !== void 0 && editorWindow.currentEditorView)) {
                                return null;
                            }
                            if (viewName) {
                                var items =
                                    editorWindow === null || editorWindow === void 0
                                        ? void 0
                                        : editorWindow.editorViews.filter(function (d) {
                                              return (
                                                  d.viewName === viewName ||
                                                  (Array.isArray(viewName) && viewName.includes(d.viewName))
                                              );
                                          });
                                return items[0];
                            } else {
                                return editorWindow.currentEditorView;
                            }
                        },
                        []);
                        var _ref = props.pluginContext || {},
                            workspace = _ref.workspace;
                        var _useState = Object(external_window_React_['useState'])(
                                getPluginContextFun(
                                    workspace === null || workspace === void 0 ? void 0 : workspace.window,
                                ),
                            ),
                            _useState2 = workspace_slicedToArray(_useState, 2),
                            pluginContext = _useState2[0],
                            setPluginContext = _useState2[1];
                        Object(external_window_React_['useEffect'])(
                            function () {
                                if (workspace !== null && workspace !== void 0 && workspace.window) {
                                    var ctx = getPluginContextFun(workspace.window);
                                    ctx && setPluginContext(ctx);
                                }
                                return workspace === null || workspace === void 0
                                    ? void 0
                                    : workspace.onChangeActiveEditorView(function () {
                                          var ctx = getPluginContextFun(workspace.window);
                                          ctx && setPluginContext(ctx);
                                      });
                            },
                            [workspace, getPluginContextFun],
                        );
                        if (
                            ((_props$pluginContext = props.pluginContext) === null || _props$pluginContext === void 0
                                ? void 0
                                : _props$pluginContext.registerLevel) !==
                                types_src['IPublicEnumPluginRegisterLevel'].Workspace ||
                            !props.pluginContext
                        ) {
                            return /*#__PURE__*/ external_window_React_default.a.createElement(Component, props);
                        }
                        return /*#__PURE__*/ external_window_React_default.a.createElement(
                            Component,
                            workspace_extends({}, props, {
                                pluginContext: pluginContext,
                            }),
                        );
                    };
                };
                // EXTERNAL MODULE: ../utils/src/context-menu.scss
                var context_menu = __webpack_require__(125);

                // CONCATENATED MODULE: ../utils/src/context-menu.tsx
                function context_menu_extends() {
                    return (
                        (context_menu_extends = Object.assign
                            ? Object.assign.bind()
                            : function (n) {
                                  for (var e = 1; e < arguments.length; e++) {
                                      var t = arguments[e];
                                      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
                                  }
                                  return n;
                              }),
                        context_menu_extends.apply(null, arguments)
                    );
                }

                var context_menu_logger = new Logger({
                    level: 'warn',
                    bizName: 'utils',
                });
                var Item = external_Next_['Menu'].Item,
                    Divider = external_Next_['Menu'].Divider,
                    PopupItem = external_Next_['Menu'].PopupItem;
                var MAX_LEVEL = 2;
                var _Tree = function Tree(props) {
                    var _props$options$nodes;
                    var node = props.node;
                    if (!node) {
                        return /*#__PURE__*/ external_window_React_default.a.createElement(
                            'div',
                            {
                                className: 'engine-context-menu-tree-wrap',
                            },
                            props.children,
                        );
                    }
                    var _ref = props.options.pluginContext || {},
                        common = _ref.common;
                    var _ref2 = (common === null || common === void 0 ? void 0 : common.utils) || {},
                        intl = _ref2.intl;
                    var indent = node.zLevel * 8 + 32;
                    var style = {
                        paddingLeft: indent,
                        marginLeft: -indent,
                        marginRight: -10,
                        paddingRight: 10,
                    };
                    return /*#__PURE__*/ external_window_React_default.a.createElement(
                        _Tree,
                        context_menu_extends({}, props, {
                            node: node.parent,
                        }),
                        /*#__PURE__*/ external_window_React_default.a.createElement(
                            'div',
                            {
                                className: 'engine-context-menu-title',
                                onClick: function onClick() {
                                    var _props$options$destro, _props$options;
                                    (_props$options$destro = (_props$options = props.options).destroy) === null ||
                                    _props$options$destro === void 0
                                        ? void 0
                                        : _props$options$destro.call(_props$options);
                                    node.select();
                                },
                                style: style,
                            },
                            ((_props$options$nodes = props.options.nodes) === null || _props$options$nodes === void 0
                                ? void 0
                                : _props$options$nodes[0].id) === node.id
                                ? /*#__PURE__*/ external_window_React_default.a.createElement(external_Next_['Icon'], {
                                      className: 'engine-context-menu-tree-selecte-icon',
                                      size: 'small',
                                      type: 'success',
                                  })
                                : null,
                            intl(node.title),
                        ),
                        /*#__PURE__*/ external_window_React_default.a.createElement(
                            'div',
                            {
                                className: 'engine-context-menu-tree-children',
                            },
                            props.children,
                        ),
                    );
                };
                var destroyFn;
                function parseContextMenuAsReactNode(menus, options) {
                    var _ref3 = options.pluginContext || {},
                        common = _ref3.common,
                        commonUI = _ref3.commonUI;
                    var _ref4 = (common === null || common === void 0 ? void 0 : common.utils) || {},
                        _ref4$intl = _ref4.intl,
                        intl =
                            _ref4$intl === void 0
                                ? function (title) {
                                      return title;
                                  }
                                : _ref4$intl;
                    var _ref5 = commonUI || {},
                        HelpTip = _ref5.HelpTip;
                    var children = [];
                    menus.forEach(function (menu, index) {
                        if (menu.type === types_src['IPublicEnumContextMenuType'].SEPARATOR) {
                            children.push(
                                /*#__PURE__*/ external_window_React_default.a.createElement(Divider, {
                                    key: menu.name || index,
                                }),
                            );
                            return;
                        }
                        if (menu.type === types_src['IPublicEnumContextMenuType'].MENU_ITEM) {
                            if (menu.items && menu.items.length) {
                                children.push(
                                    /*#__PURE__*/ external_window_React_default.a.createElement(
                                        PopupItem,
                                        {
                                            className: classnames_default()('engine-context-menu-item', {
                                                disabled: menu.disabled,
                                            }),
                                            key: menu.name,
                                            label: /*#__PURE__*/ external_window_React_default.a.createElement(
                                                'div',
                                                {
                                                    className: 'engine-context-menu-text',
                                                },
                                                intl(menu.title),
                                            ),
                                        },
                                        /*#__PURE__*/ external_window_React_default.a.createElement(
                                            external_Next_['Menu'],
                                            {
                                                className: 'next-context engine-context-menu',
                                            },
                                            parseContextMenuAsReactNode(menu.items, options),
                                        ),
                                    ),
                                );
                            } else {
                                children.push(
                                    /*#__PURE__*/ external_window_React_default.a.createElement(
                                        Item,
                                        {
                                            className: classnames_default()('engine-context-menu-item', {
                                                disabled: menu.disabled,
                                            }),
                                            disabled: menu.disabled,
                                            onClick: function onClick() {
                                                var _menu$action;
                                                (_menu$action = menu.action) === null || _menu$action === void 0
                                                    ? void 0
                                                    : _menu$action.call(menu);
                                            },
                                            key: menu.name,
                                        },
                                        /*#__PURE__*/ external_window_React_default.a.createElement(
                                            'div',
                                            {
                                                className: 'engine-context-menu-text',
                                            },
                                            menu.title ? intl(menu.title) : null,
                                            menu.help
                                                ? /*#__PURE__*/ external_window_React_default.a.createElement(HelpTip, {
                                                      size: 'xs',
                                                      help: menu.help,
                                                      direction: 'right',
                                                  })
                                                : null,
                                        ),
                                    ),
                                );
                            }
                        }
                        if (menu.type === types_src['IPublicEnumContextMenuType'].NODE_TREE) {
                            var _options$nodes;
                            children.push(
                                /*#__PURE__*/ external_window_React_default.a.createElement(_Tree, {
                                    node:
                                        (_options$nodes = options.nodes) === null || _options$nodes === void 0
                                            ? void 0
                                            : _options$nodes[0],
                                    options: options,
                                }),
                            );
                        }
                    });
                    return children;
                }
                function parseContextMenuProperties(menus, options) {
                    var _destroyFn;
                    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
                    (_destroyFn = destroyFn) === null || _destroyFn === void 0 ? void 0 : _destroyFn();
                    var nodes = options.nodes,
                        destroy = options.destroy;
                    if (level > MAX_LEVEL) {
                        context_menu_logger.warn(
                            'context menu level is too deep, please check your context menu config',
                        );
                        return [];
                    }
                    return menus
                        .filter(function (menu) {
                            return !menu.condition || (menu.condition && menu.condition(nodes || []));
                        })
                        .map(function (menu) {
                            var name = menu.name,
                                title = menu.title,
                                _menu$type = menu.type,
                                type =
                                    _menu$type === void 0
                                        ? types_src['IPublicEnumContextMenuType'].MENU_ITEM
                                        : _menu$type,
                                help = menu.help;
                            var result = {
                                name: name,
                                title: title,
                                type: type,
                                help: help,
                                action: function action() {
                                    var _menu$action2;
                                    destroy === null || destroy === void 0 ? void 0 : destroy();
                                    (_menu$action2 = menu.action) === null || _menu$action2 === void 0
                                        ? void 0
                                        : _menu$action2.call(menu, nodes || [], options.event);
                                },
                                disabled: (menu.disabled && menu.disabled(nodes || [])) || false,
                            };
                            if ('items' in menu && menu.items) {
                                result.items = parseContextMenuProperties(
                                    typeof menu.items === 'function' ? menu.items(nodes || []) : menu.items,
                                    options,
                                    level + 1,
                                );
                            }
                            return result;
                        })
                        .reduce(function (menus, currentMenu) {
                            if (!currentMenu.name) {
                                return menus.concat([currentMenu]);
                            }
                            var index = menus.find(function (item) {
                                return item.name === currentMenu.name;
                            });
                            if (!index) {
                                return menus.concat([currentMenu]);
                            } else {
                                return menus;
                            }
                        }, []);
                }
                var cachedMenuItemHeight;
                function getMenuItemHeight() {
                    if (cachedMenuItemHeight) {
                        return cachedMenuItemHeight;
                    }
                    var root = document.documentElement;
                    var styles = getComputedStyle(root);
                    var menuItemHeight = styles.getPropertyValue('--context-menu-item-height').trim();
                    cachedMenuItemHeight = menuItemHeight;
                    return menuItemHeight;
                }
                function createContextMenu(children, _ref6) {
                    var event = _ref6.event,
                        _ref6$offset = _ref6.offset,
                        offset = _ref6$offset === void 0 ? [0, 0] : _ref6$offset;
                    event.preventDefault();
                    event.stopPropagation();
                    var viewportWidth = window.innerWidth;
                    var viewportHeight = window.innerHeight;
                    var dividerCount = external_window_React_default.a.Children.count(
                        children.filter(function (child) {
                            return (
                                /*#__PURE__*/ external_window_React_default.a.isValidElement(child) &&
                                child.type === Divider
                            );
                        }),
                    );
                    var popupItemCount = external_window_React_default.a.Children.count(
                        children.filter(function (child) {
                            return (
                                /*#__PURE__*/ external_window_React_default.a.isValidElement(child) &&
                                (child.type === PopupItem || child.type === Item)
                            );
                        }),
                    );
                    var menuHeight = popupItemCount * parseInt(getMenuItemHeight(), 10) + dividerCount * 8 + 16;
                    var menuWidthLimit = 200;
                    var x = event.clientX + offset[0];
                    var y = event.clientY + offset[1];
                    if (x + menuWidthLimit > viewportWidth) {
                        x = x - menuWidthLimit;
                    }
                    if (y + menuHeight > viewportHeight) {
                        y = y - menuHeight;
                    }
                    var menuInstance = external_Next_['Menu'].create({
                        target: document.body,
                        offset: [x, y],
                        children: children,
                        className: 'engine-context-menu',
                    });
                    destroyFn = menuInstance.destroy;
                    return destroyFn;
                }
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/react-is/index.js
                var react_is = __webpack_require__(24);

                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/prop-types/lib/ReactPropTypesSecret.js
                var ReactPropTypesSecret = __webpack_require__(25);
                var ReactPropTypesSecret_default = /*#__PURE__*/ __webpack_require__.n(ReactPropTypesSecret);

                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/prop-types/factoryWithTypeCheckers.js
                var factoryWithTypeCheckers = __webpack_require__(45);
                var factoryWithTypeCheckers_default = /*#__PURE__*/ __webpack_require__.n(factoryWithTypeCheckers);

                // CONCATENATED MODULE: ../utils/src/check-prop-types.ts
                function check_prop_types_defineProperty(e, r, t) {
                    return (
                        (r = check_prop_types_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function check_prop_types_toPropertyKey(t) {
                    var i = check_prop_types_toPrimitive(t, 'string');
                    return 'symbol' == check_prop_types_typeof(i) ? i : i + '';
                }
                function check_prop_types_toPrimitive(t, r) {
                    if ('object' != check_prop_types_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != check_prop_types_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function check_prop_types_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (check_prop_types_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        check_prop_types_typeof(o)
                    );
                }

                var PropTypes2 = factoryWithTypeCheckers_default()(react_is['isElement'], true);
                var check_prop_types_logger = new Logger({
                    level: 'warn',
                    bizName: 'utils',
                });
                function transformPropTypesRuleToString(rule) {
                    if (!rule) {
                        return 'PropTypes.any';
                    }
                    if (typeof rule === 'string') {
                        return rule.startsWith('PropTypes.') ? rule : 'PropTypes.'.concat(rule);
                    }
                    if (isRequiredPropType(rule)) {
                        var _type = rule.type,
                            isRequired = rule.isRequired;
                        return 'PropTypes.'.concat(_type).concat(isRequired ? '.isRequired' : '');
                    }
                    var type = rule.type,
                        value = rule.value;
                    switch (type) {
                        case 'oneOf':
                            return 'PropTypes.oneOf(['.concat(
                                value
                                    .map(function (item) {
                                        return '"'.concat(item, '"');
                                    })
                                    .join(','),
                                '])',
                            );
                        case 'oneOfType':
                            return 'PropTypes.oneOfType(['.concat(
                                value
                                    .map(function (item) {
                                        return transformPropTypesRuleToString(item);
                                    })
                                    .join(', '),
                                '])',
                            );
                        case 'arrayOf':
                        case 'objectOf':
                            return 'PropTypes.'.concat(type, '(').concat(transformPropTypesRuleToString(value), ')');
                        case 'shape':
                        case 'exact':
                            return 'PropTypes.'.concat(type, '({').concat(
                                value
                                    .map(function (item) {
                                        return ''
                                            .concat(item.name, ': ')
                                            .concat(transformPropTypesRuleToString(item.propType));
                                    })
                                    .join(','),
                                '})',
                            );
                        default:
                            check_prop_types_logger.error('Unknown prop type: '.concat(type));
                    }
                    return 'PropTypes.any';
                }
                function checkPropTypes(value, name, rule, componentName) {
                    var ruleFunction = rule;
                    if (check_prop_types_typeof(rule) === 'object') {
                        // eslint-disable-next-line no-new-func
                        ruleFunction = new Function(
                            '"use strict"; const PropTypes = arguments[0]; return '.concat(
                                transformPropTypesRuleToString(rule),
                            ),
                        )(PropTypes2);
                    }
                    if (typeof rule === 'string') {
                        // eslint-disable-next-line no-new-func
                        ruleFunction = new Function(
                            '"use strict"; const PropTypes = arguments[0]; return '.concat(
                                transformPropTypesRuleToString(rule),
                            ),
                        )(PropTypes2);
                    }
                    if (!ruleFunction || typeof ruleFunction !== 'function') {
                        check_prop_types_logger.warn('checkPropTypes should have a function type rule argument');
                        return true;
                    }
                    var err = ruleFunction(
                        check_prop_types_defineProperty({}, name, value),
                        name,
                        componentName,
                        'prop',
                        null,
                        ReactPropTypesSecret_default.a,
                    );
                    if (err) {
                        check_prop_types_logger.warn(err);
                    }
                    return !err;
                }
                // CONCATENATED MODULE: ../utils/src/index.ts

                // CONCATENATED MODULE: ../renderer-core/src/components/Div.tsx
                function Div_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (Div_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        Div_typeof(o)
                    );
                }
                function Div_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function Div_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, Div_toPropertyKey(o.key), o);
                    }
                }
                function Div_createClass(e, r, t) {
                    return (
                        r && Div_defineProperties(e.prototype, r),
                        t && Div_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function Div_callSuper(t, o, e) {
                    return (
                        (o = Div_getPrototypeOf(o)),
                        Div_possibleConstructorReturn(
                            t,
                            Div_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], Div_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function Div_possibleConstructorReturn(t, e) {
                    if (e && ('object' == Div_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return Div_assertThisInitialized(t);
                }
                function Div_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function Div_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (Div_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function Div_getPrototypeOf(t) {
                    return (
                        (Div_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        Div_getPrototypeOf(t)
                    );
                }
                function Div_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && Div_setPrototypeOf(t, e);
                }
                function Div_setPrototypeOf(t, e) {
                    return (
                        (Div_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        Div_setPrototypeOf(t, e)
                    );
                }
                function Div_defineProperty(e, r, t) {
                    return (
                        (r = Div_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function Div_toPropertyKey(t) {
                    var i = Div_toPrimitive(t, 'string');
                    return 'symbol' == Div_typeof(i) ? i : i + '';
                }
                function Div_toPrimitive(t, r) {
                    if ('object' != Div_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != Div_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function divFactory() {
                    var _Div;
                    var _adapter$getRuntime = adapter.getRuntime(),
                        PureComponent = _adapter$getRuntime.PureComponent,
                        createElement = _adapter$getRuntime.createElement;
                    return (
                        (_Div = /*#__PURE__*/ (function (_PureComponent) {
                            function Div() {
                                Div_classCallCheck(this, Div);
                                return Div_callSuper(this, Div, arguments);
                            }
                            Div_inherits(Div, _PureComponent);
                            return Div_createClass(Div, [
                                {
                                    key: 'render',
                                    value: function render() {
                                        return createElement('div', this.props);
                                    },
                                },
                            ]);
                        })(PureComponent)),
                        Div_defineProperty(_Div, 'displayName', 'Div'),
                        Div_defineProperty(_Div, 'version', '0.0.0'),
                        _Div
                    );
                }
                // EXTERNAL MODULE: external "window.PropTypes"
                var external_window_PropTypes_ = __webpack_require__(5);
                var external_window_PropTypes_default = /*#__PURE__*/ __webpack_require__.n(external_window_PropTypes_);

                // EXTERNAL MODULE: ../renderer-core/src/components/VisualDom/index.css
                var components_VisualDom = __webpack_require__(130);

                // CONCATENATED MODULE: ../renderer-core/src/components/VisualDom/index.tsx
                function VisualDom_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (VisualDom_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        VisualDom_typeof(o)
                    );
                }
                function VisualDom_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function VisualDom_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, VisualDom_toPropertyKey(o.key), o);
                    }
                }
                function VisualDom_createClass(e, r, t) {
                    return (
                        r && VisualDom_defineProperties(e.prototype, r),
                        t && VisualDom_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function VisualDom_callSuper(t, o, e) {
                    return (
                        (o = VisualDom_getPrototypeOf(o)),
                        VisualDom_possibleConstructorReturn(
                            t,
                            VisualDom_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], VisualDom_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function VisualDom_possibleConstructorReturn(t, e) {
                    if (e && ('object' == VisualDom_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return VisualDom_assertThisInitialized(t);
                }
                function VisualDom_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function VisualDom_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (VisualDom_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function VisualDom_getPrototypeOf(t) {
                    return (
                        (VisualDom_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        VisualDom_getPrototypeOf(t)
                    );
                }
                function VisualDom_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && VisualDom_setPrototypeOf(t, e);
                }
                function VisualDom_setPrototypeOf(t, e) {
                    return (
                        (VisualDom_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        VisualDom_setPrototypeOf(t, e)
                    );
                }
                function VisualDom_defineProperty(e, r, t) {
                    return (
                        (r = VisualDom_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function VisualDom_toPropertyKey(t) {
                    var i = VisualDom_toPrimitive(t, 'string');
                    return 'symbol' == VisualDom_typeof(i) ? i : i + '';
                }
                function VisualDom_toPrimitive(t, r) {
                    if ('object' != VisualDom_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != VisualDom_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function visualDomFactory() {
                    var _VisualDom;
                    var _adapter$getRuntime = adapter.getRuntime(),
                        PureComponent = _adapter$getRuntime.PureComponent,
                        createElement = _adapter$getRuntime.createElement;
                    return (
                        (_VisualDom = /*#__PURE__*/ (function (_PureComponent) {
                            function VisualDom() {
                                VisualDom_classCallCheck(this, VisualDom);
                                return VisualDom_callSuper(this, VisualDom, arguments);
                            }
                            VisualDom_inherits(VisualDom, _PureComponent);
                            return VisualDom_createClass(VisualDom, [
                                {
                                    key: 'render',
                                    value: function render() {
                                        var _this$props = this.props,
                                            children = _this$props.children,
                                            cell = _this$props.cell,
                                            title = _this$props.title,
                                            label = _this$props.label,
                                            text = _this$props.text,
                                            __componentName = _this$props.__componentName;
                                        var mainContent = children;
                                        if (cell && typeof cell === 'function') {
                                            mainContent = cell();
                                        }
                                        return createElement(
                                            'div',
                                            {
                                                className: 'visual-dom',
                                            },
                                            createElement(
                                                'div',
                                                {
                                                    className: 'panel-container',
                                                },
                                                [
                                                    createElement(
                                                        'span',
                                                        {
                                                            className: 'title',
                                                        },
                                                        title || label || text || __componentName,
                                                    ),
                                                    createElement(
                                                        'div',
                                                        {
                                                            className: 'content',
                                                        },
                                                        mainContent,
                                                    ),
                                                ],
                                            ),
                                        );
                                    },
                                },
                            ]);
                        })(PureComponent)),
                        VisualDom_defineProperty(_VisualDom, 'displayName', 'VisualDom'),
                        VisualDom_defineProperty(_VisualDom, 'propTypes', {
                            children: external_window_PropTypes_default.a.oneOfType([
                                external_window_PropTypes_default.a.element,
                                external_window_PropTypes_default.a.arrayOf(
                                    external_window_PropTypes_default.a.element,
                                ),
                            ]),
                        }),
                        VisualDom_defineProperty(_VisualDom, 'defaultProps', {
                            children: null,
                        }),
                        _VisualDom
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/utils/logger.ts

                /* harmony default export */ var utils_logger = new Logger({
                    level: 'warn',
                    bizName: 'renderer',
                });
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/tslib/tslib.es6.js
                var tslib_es6 = __webpack_require__(2);

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/error.js
                var ErrorKind;
                (function (ErrorKind) {
                    /** Argument is unclosed (e.g. `{0`) */
                    ErrorKind[(ErrorKind['EXPECT_ARGUMENT_CLOSING_BRACE'] = 1)] = 'EXPECT_ARGUMENT_CLOSING_BRACE';
                    /** Argument is empty (e.g. `{}`). */
                    ErrorKind[(ErrorKind['EMPTY_ARGUMENT'] = 2)] = 'EMPTY_ARGUMENT';
                    /** Argument is malformed (e.g. `{foo!}``) */
                    ErrorKind[(ErrorKind['MALFORMED_ARGUMENT'] = 3)] = 'MALFORMED_ARGUMENT';
                    /** Expect an argument type (e.g. `{foo,}`) */
                    ErrorKind[(ErrorKind['EXPECT_ARGUMENT_TYPE'] = 4)] = 'EXPECT_ARGUMENT_TYPE';
                    /** Unsupported argument type (e.g. `{foo,foo}`) */
                    ErrorKind[(ErrorKind['INVALID_ARGUMENT_TYPE'] = 5)] = 'INVALID_ARGUMENT_TYPE';
                    /** Expect an argument style (e.g. `{foo, number, }`) */
                    ErrorKind[(ErrorKind['EXPECT_ARGUMENT_STYLE'] = 6)] = 'EXPECT_ARGUMENT_STYLE';
                    /** The number skeleton is invalid. */
                    ErrorKind[(ErrorKind['INVALID_NUMBER_SKELETON'] = 7)] = 'INVALID_NUMBER_SKELETON';
                    /** The date time skeleton is invalid. */
                    ErrorKind[(ErrorKind['INVALID_DATE_TIME_SKELETON'] = 8)] = 'INVALID_DATE_TIME_SKELETON';
                    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */
                    ErrorKind[(ErrorKind['EXPECT_NUMBER_SKELETON'] = 9)] = 'EXPECT_NUMBER_SKELETON';
                    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */
                    ErrorKind[(ErrorKind['EXPECT_DATE_TIME_SKELETON'] = 10)] = 'EXPECT_DATE_TIME_SKELETON';
                    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */
                    ErrorKind[(ErrorKind['UNCLOSED_QUOTE_IN_ARGUMENT_STYLE'] = 11)] =
                        'UNCLOSED_QUOTE_IN_ARGUMENT_STYLE';
                    /** Missing select argument options (e.g. `{foo, select}`) */
                    ErrorKind[(ErrorKind['EXPECT_SELECT_ARGUMENT_OPTIONS'] = 12)] = 'EXPECT_SELECT_ARGUMENT_OPTIONS';
                    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */
                    ErrorKind[(ErrorKind['EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE'] = 13)] =
                        'EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE';
                    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */
                    ErrorKind[(ErrorKind['INVALID_PLURAL_ARGUMENT_OFFSET_VALUE'] = 14)] =
                        'INVALID_PLURAL_ARGUMENT_OFFSET_VALUE';
                    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */
                    ErrorKind[(ErrorKind['EXPECT_SELECT_ARGUMENT_SELECTOR'] = 15)] = 'EXPECT_SELECT_ARGUMENT_SELECTOR';
                    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */
                    ErrorKind[(ErrorKind['EXPECT_PLURAL_ARGUMENT_SELECTOR'] = 16)] = 'EXPECT_PLURAL_ARGUMENT_SELECTOR';
                    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */
                    ErrorKind[(ErrorKind['EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT'] = 17)] =
                        'EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT';
                    /**
                     * Expecting a message fragment after the `plural` or `selectordinal` selector
                     * (e.g. `{foo, plural, one}`)
                     */
                    ErrorKind[(ErrorKind['EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT'] = 18)] =
                        'EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT';
                    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */
                    ErrorKind[(ErrorKind['INVALID_PLURAL_ARGUMENT_SELECTOR'] = 19)] =
                        'INVALID_PLURAL_ARGUMENT_SELECTOR';
                    /**
                     * Duplicate selectors in `plural` or `selectordinal` argument.
                     * (e.g. {foo, plural, one {#} one {#}})
                     */
                    ErrorKind[(ErrorKind['DUPLICATE_PLURAL_ARGUMENT_SELECTOR'] = 20)] =
                        'DUPLICATE_PLURAL_ARGUMENT_SELECTOR';
                    /** Duplicate selectors in `select` argument.
                     * (e.g. {foo, select, apple {apple} apple {apple}})
                     */
                    ErrorKind[(ErrorKind['DUPLICATE_SELECT_ARGUMENT_SELECTOR'] = 21)] =
                        'DUPLICATE_SELECT_ARGUMENT_SELECTOR';
                    /** Plural or select argument option must have `other` clause. */
                    ErrorKind[(ErrorKind['MISSING_OTHER_CLAUSE'] = 22)] = 'MISSING_OTHER_CLAUSE';
                    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */
                    ErrorKind[(ErrorKind['INVALID_TAG'] = 23)] = 'INVALID_TAG';
                    /** The tag name is invalid. (e.g. `<123>foo</123>`) */
                    ErrorKind[(ErrorKind['INVALID_TAG_NAME'] = 25)] = 'INVALID_TAG_NAME';
                    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */
                    ErrorKind[(ErrorKind['UNMATCHED_CLOSING_TAG'] = 26)] = 'UNMATCHED_CLOSING_TAG';
                    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */
                    ErrorKind[(ErrorKind['UNCLOSED_TAG'] = 27)] = 'UNCLOSED_TAG';
                })(ErrorKind || (ErrorKind = {}));

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/types.js
                var TYPE;
                (function (TYPE) {
                    /**
                     * Raw text
                     */
                    TYPE[(TYPE['literal'] = 0)] = 'literal';
                    /**
                     * Variable w/o any format, e.g `var` in `this is a {var}`
                     */
                    TYPE[(TYPE['argument'] = 1)] = 'argument';
                    /**
                     * Variable w/ number format
                     */
                    TYPE[(TYPE['number'] = 2)] = 'number';
                    /**
                     * Variable w/ date format
                     */
                    TYPE[(TYPE['date'] = 3)] = 'date';
                    /**
                     * Variable w/ time format
                     */
                    TYPE[(TYPE['time'] = 4)] = 'time';
                    /**
                     * Variable w/ select format
                     */
                    TYPE[(TYPE['select'] = 5)] = 'select';
                    /**
                     * Variable w/ plural format
                     */
                    TYPE[(TYPE['plural'] = 6)] = 'plural';
                    /**
                     * Only possible within plural argument.
                     * This is the `#` symbol that will be substituted with the count.
                     */
                    TYPE[(TYPE['pound'] = 7)] = 'pound';
                    /**
                     * XML-like tag
                     */
                    TYPE[(TYPE['tag'] = 8)] = 'tag';
                })(TYPE || (TYPE = {}));
                var SKELETON_TYPE;
                (function (SKELETON_TYPE) {
                    SKELETON_TYPE[(SKELETON_TYPE['number'] = 0)] = 'number';
                    SKELETON_TYPE[(SKELETON_TYPE['dateTime'] = 1)] = 'dateTime';
                })(SKELETON_TYPE || (SKELETON_TYPE = {}));
                /**
                 * Type Guards
                 */
                function isLiteralElement(el) {
                    return el.type === TYPE.literal;
                }
                function isArgumentElement(el) {
                    return el.type === TYPE.argument;
                }
                function isNumberElement(el) {
                    return el.type === TYPE.number;
                }
                function isDateElement(el) {
                    return el.type === TYPE.date;
                }
                function isTimeElement(el) {
                    return el.type === TYPE.time;
                }
                function isSelectElement(el) {
                    return el.type === TYPE.select;
                }
                function isPluralElement(el) {
                    return el.type === TYPE.plural;
                }
                function isPoundElement(el) {
                    return el.type === TYPE.pound;
                }
                function isTagElement(el) {
                    return el.type === TYPE.tag;
                }
                function isNumberSkeleton(el) {
                    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
                }
                function isDateTimeSkeleton(el) {
                    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
                }
                function createLiteralElement(value) {
                    return {
                        type: TYPE.literal,
                        value: value,
                    };
                }
                function createNumberElement(value, style) {
                    return {
                        type: TYPE.number,
                        value: value,
                        style: style,
                    };
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
                // @generated from regex-gen.ts
                var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
                var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
                /**
                 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
                 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
                 * with some tweaks
                 */
                var DATE_TIME_REGEX =
                    /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
                /**
                 * Parse Date time skeleton into Intl.DateTimeFormatOptions
                 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
                 * @public
                 * @param skeleton skeleton string
                 */
                function parseDateTimeSkeleton(skeleton) {
                    var result = {};
                    skeleton.replace(DATE_TIME_REGEX, function (match) {
                        var len = match.length;
                        switch (match[0]) {
                            // Era
                            case 'G':
                                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                                break;
                            // Year
                            case 'y':
                                result.year = len === 2 ? '2-digit' : 'numeric';
                                break;
                            case 'Y':
                            case 'u':
                            case 'U':
                            case 'r':
                                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
                            // Quarter
                            case 'q':
                            case 'Q':
                                throw new RangeError('`q/Q` (quarter) patterns are not supported');
                            // Month
                            case 'M':
                            case 'L':
                                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                                break;
                            // Week
                            case 'w':
                            case 'W':
                                throw new RangeError('`w/W` (week) patterns are not supported');
                            case 'd':
                                result.day = ['numeric', '2-digit'][len - 1];
                                break;
                            case 'D':
                            case 'F':
                            case 'g':
                                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
                            // Weekday
                            case 'E':
                                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                                break;
                            case 'e':
                                if (len < 4) {
                                    throw new RangeError('`e..eee` (weekday) patterns are not supported');
                                }
                                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                                break;
                            case 'c':
                                if (len < 4) {
                                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                                }
                                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                                break;
                            // Period
                            case 'a': // AM, PM
                                result.hour12 = true;
                                break;
                            case 'b': // am, pm, noon, midnight
                            case 'B': // flexible day periods
                                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
                            // Hour
                            case 'h':
                                result.hourCycle = 'h12';
                                result.hour = ['numeric', '2-digit'][len - 1];
                                break;
                            case 'H':
                                result.hourCycle = 'h23';
                                result.hour = ['numeric', '2-digit'][len - 1];
                                break;
                            case 'K':
                                result.hourCycle = 'h11';
                                result.hour = ['numeric', '2-digit'][len - 1];
                                break;
                            case 'k':
                                result.hourCycle = 'h24';
                                result.hour = ['numeric', '2-digit'][len - 1];
                                break;
                            case 'j':
                            case 'J':
                            case 'C':
                                throw new RangeError(
                                    '`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead',
                                );
                            // Minute
                            case 'm':
                                result.minute = ['numeric', '2-digit'][len - 1];
                                break;
                            // Second
                            case 's':
                                result.second = ['numeric', '2-digit'][len - 1];
                                break;
                            case 'S':
                            case 'A':
                                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
                            // Zone
                            case 'z': // 1..3, 4: specific non-location format
                                result.timeZoneName = len < 4 ? 'short' : 'long';
                                break;
                            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
                            case 'O': // 1, 4: miliseconds in day short, long
                            case 'v': // 1, 4: generic non-location format
                            case 'V': // 1, 2, 3, 4: time zone ID or city
                            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
                            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                                throw new RangeError(
                                    '`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead',
                                );
                        }
                        return '';
                    });
                    return result;
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
                // @generated from regex-gen.ts
                var regex_generated_WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-skeleton-parser/lib/number.js

                function parseNumberSkeletonFromString(skeleton) {
                    if (skeleton.length === 0) {
                        throw new Error('Number skeleton cannot be empty');
                    }
                    // Parse the skeleton
                    var stringTokens = skeleton.split(regex_generated_WHITE_SPACE_REGEX).filter(function (x) {
                        return x.length > 0;
                    });
                    var tokens = [];
                    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
                        var stringToken = stringTokens_1[_i];
                        var stemAndOptions = stringToken.split('/');
                        if (stemAndOptions.length === 0) {
                            throw new Error('Invalid number skeleton');
                        }
                        var stem = stemAndOptions[0],
                            options = stemAndOptions.slice(1);
                        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
                            var option = options_1[_a];
                            if (option.length === 0) {
                                throw new Error('Invalid number skeleton');
                            }
                        }
                        tokens.push({ stem: stem, options: options });
                    }
                    return tokens;
                }
                function icuUnitToEcma(unit) {
                    return unit.replace(/^(.*?)-/, '');
                }
                var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
                var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
                var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
                var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
                function parseSignificantPrecision(str) {
                    var result = {};
                    if (str[str.length - 1] === 'r') {
                        result.roundingPriority = 'morePrecision';
                    } else if (str[str.length - 1] === 's') {
                        result.roundingPriority = 'lessPrecision';
                    }
                    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
                        // @@@ case
                        if (typeof g2 !== 'string') {
                            result.minimumSignificantDigits = g1.length;
                            result.maximumSignificantDigits = g1.length;
                        }
                        // @@@+ case
                        else if (g2 === '+') {
                            result.minimumSignificantDigits = g1.length;
                        }
                        // .### case
                        else if (g1[0] === '#') {
                            result.maximumSignificantDigits = g1.length;
                        }
                        // .@@## or .@@@ case
                        else {
                            result.minimumSignificantDigits = g1.length;
                            result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
                        }
                        return '';
                    });
                    return result;
                }
                function parseSign(str) {
                    switch (str) {
                        case 'sign-auto':
                            return {
                                signDisplay: 'auto',
                            };
                        case 'sign-accounting':
                        case '()':
                            return {
                                currencySign: 'accounting',
                            };
                        case 'sign-always':
                        case '+!':
                            return {
                                signDisplay: 'always',
                            };
                        case 'sign-accounting-always':
                        case '()!':
                            return {
                                signDisplay: 'always',
                                currencySign: 'accounting',
                            };
                        case 'sign-except-zero':
                        case '+?':
                            return {
                                signDisplay: 'exceptZero',
                            };
                        case 'sign-accounting-except-zero':
                        case '()?':
                            return {
                                signDisplay: 'exceptZero',
                                currencySign: 'accounting',
                            };
                        case 'sign-never':
                        case '+_':
                            return {
                                signDisplay: 'never',
                            };
                    }
                }
                function parseConciseScientificAndEngineeringStem(stem) {
                    // Engineering
                    var result;
                    if (stem[0] === 'E' && stem[1] === 'E') {
                        result = {
                            notation: 'engineering',
                        };
                        stem = stem.slice(2);
                    } else if (stem[0] === 'E') {
                        result = {
                            notation: 'scientific',
                        };
                        stem = stem.slice(1);
                    }
                    if (result) {
                        var signDisplay = stem.slice(0, 2);
                        if (signDisplay === '+!') {
                            result.signDisplay = 'always';
                            stem = stem.slice(2);
                        } else if (signDisplay === '+?') {
                            result.signDisplay = 'exceptZero';
                            stem = stem.slice(2);
                        }
                        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
                            throw new Error('Malformed concise eng/scientific notation');
                        }
                        result.minimumIntegerDigits = stem.length;
                    }
                    return result;
                }
                function parseNotationOptions(opt) {
                    var result = {};
                    var signOpts = parseSign(opt);
                    if (signOpts) {
                        return signOpts;
                    }
                    return result;
                }
                /**
                 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
                 */
                function parseNumberSkeleton(tokens) {
                    var result = {};
                    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
                        var token = tokens_1[_i];
                        switch (token.stem) {
                            case 'percent':
                            case '%':
                                result.style = 'percent';
                                continue;
                            case '%x100':
                                result.style = 'percent';
                                result.scale = 100;
                                continue;
                            case 'currency':
                                result.style = 'currency';
                                result.currency = token.options[0];
                                continue;
                            case 'group-off':
                            case ',_':
                                result.useGrouping = false;
                                continue;
                            case 'precision-integer':
                            case '.':
                                result.maximumFractionDigits = 0;
                                continue;
                            case 'measure-unit':
                            case 'unit':
                                result.style = 'unit';
                                result.unit = icuUnitToEcma(token.options[0]);
                                continue;
                            case 'compact-short':
                            case 'K':
                                result.notation = 'compact';
                                result.compactDisplay = 'short';
                                continue;
                            case 'compact-long':
                            case 'KK':
                                result.notation = 'compact';
                                result.compactDisplay = 'long';
                                continue;
                            case 'scientific':
                                result = Object(tslib_es6['__assign'])(
                                    Object(tslib_es6['__assign'])(Object(tslib_es6['__assign'])({}, result), {
                                        notation: 'scientific',
                                    }),
                                    token.options.reduce(function (all, opt) {
                                        return Object(tslib_es6['__assign'])(
                                            Object(tslib_es6['__assign'])({}, all),
                                            parseNotationOptions(opt),
                                        );
                                    }, {}),
                                );
                                continue;
                            case 'engineering':
                                result = Object(tslib_es6['__assign'])(
                                    Object(tslib_es6['__assign'])(Object(tslib_es6['__assign'])({}, result), {
                                        notation: 'engineering',
                                    }),
                                    token.options.reduce(function (all, opt) {
                                        return Object(tslib_es6['__assign'])(
                                            Object(tslib_es6['__assign'])({}, all),
                                            parseNotationOptions(opt),
                                        );
                                    }, {}),
                                );
                                continue;
                            case 'notation-simple':
                                result.notation = 'standard';
                                continue;
                            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
                            case 'unit-width-narrow':
                                result.currencyDisplay = 'narrowSymbol';
                                result.unitDisplay = 'narrow';
                                continue;
                            case 'unit-width-short':
                                result.currencyDisplay = 'code';
                                result.unitDisplay = 'short';
                                continue;
                            case 'unit-width-full-name':
                                result.currencyDisplay = 'name';
                                result.unitDisplay = 'long';
                                continue;
                            case 'unit-width-iso-code':
                                result.currencyDisplay = 'symbol';
                                continue;
                            case 'scale':
                                result.scale = parseFloat(token.options[0]);
                                continue;
                            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
                            case 'integer-width':
                                if (token.options.length > 1) {
                                    throw new RangeError('integer-width stems only accept a single optional option');
                                }
                                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                                    if (g1) {
                                        result.minimumIntegerDigits = g2.length;
                                    } else if (g3 && g4) {
                                        throw new Error('We currently do not support maximum integer digits');
                                    } else if (g5) {
                                        throw new Error('We currently do not support exact integer digits');
                                    }
                                    return '';
                                });
                                continue;
                        }
                        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
                        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
                            result.minimumIntegerDigits = token.stem.length;
                            continue;
                        }
                        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
                            // Precision
                            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
                            // precision-integer case
                            if (token.options.length > 1) {
                                throw new RangeError('Fraction-precision stems only accept a single optional option');
                            }
                            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                                // .000* case (before ICU67 it was .000+)
                                if (g2 === '*') {
                                    result.minimumFractionDigits = g1.length;
                                }
                                // .### case
                                else if (g3 && g3[0] === '#') {
                                    result.maximumFractionDigits = g3.length;
                                }
                                // .00## case
                                else if (g4 && g5) {
                                    result.minimumFractionDigits = g4.length;
                                    result.maximumFractionDigits = g4.length + g5.length;
                                } else {
                                    result.minimumFractionDigits = g1.length;
                                    result.maximumFractionDigits = g1.length;
                                }
                                return '';
                            });
                            var opt = token.options[0];
                            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
                            if (opt === 'w') {
                                result = Object(tslib_es6['__assign'])(Object(tslib_es6['__assign'])({}, result), {
                                    trailingZeroDisplay: 'stripIfInteger',
                                });
                            } else if (opt) {
                                result = Object(tslib_es6['__assign'])(
                                    Object(tslib_es6['__assign'])({}, result),
                                    parseSignificantPrecision(opt),
                                );
                            }
                            continue;
                        }
                        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
                        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
                            result = Object(tslib_es6['__assign'])(
                                Object(tslib_es6['__assign'])({}, result),
                                parseSignificantPrecision(token.stem),
                            );
                            continue;
                        }
                        var signOpts = parseSign(token.stem);
                        if (signOpts) {
                            result = Object(tslib_es6['__assign'])(Object(tslib_es6['__assign'])({}, result), signOpts);
                        }
                        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
                        if (conciseScientificAndEngineeringOpts) {
                            result = Object(tslib_es6['__assign'])(
                                Object(tslib_es6['__assign'])({}, result),
                                conciseScientificAndEngineeringOpts,
                            );
                        }
                    }
                    return result;
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-skeleton-parser/lib/index.js

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
                // @generated from time-data-gen.ts
                // prettier-ignore
                var timeData = {
    "AX": [
        "H"
    ],
    "BQ": [
        "H"
    ],
    "CP": [
        "H"
    ],
    "CZ": [
        "H"
    ],
    "DK": [
        "H"
    ],
    "FI": [
        "H"
    ],
    "ID": [
        "H"
    ],
    "IS": [
        "H"
    ],
    "ML": [
        "H"
    ],
    "NE": [
        "H"
    ],
    "RU": [
        "H"
    ],
    "SE": [
        "H"
    ],
    "SJ": [
        "H"
    ],
    "SK": [
        "H"
    ],
    "AS": [
        "h",
        "H"
    ],
    "BT": [
        "h",
        "H"
    ],
    "DJ": [
        "h",
        "H"
    ],
    "ER": [
        "h",
        "H"
    ],
    "GH": [
        "h",
        "H"
    ],
    "IN": [
        "h",
        "H"
    ],
    "LS": [
        "h",
        "H"
    ],
    "PG": [
        "h",
        "H"
    ],
    "PW": [
        "h",
        "H"
    ],
    "SO": [
        "h",
        "H"
    ],
    "TO": [
        "h",
        "H"
    ],
    "VU": [
        "h",
        "H"
    ],
    "WS": [
        "h",
        "H"
    ],
    "001": [
        "H",
        "h"
    ],
    "AL": [
        "h",
        "H",
        "hB"
    ],
    "TD": [
        "h",
        "H",
        "hB"
    ],
    "ca-ES": [
        "H",
        "h",
        "hB"
    ],
    "CF": [
        "H",
        "h",
        "hB"
    ],
    "CM": [
        "H",
        "h",
        "hB"
    ],
    "fr-CA": [
        "H",
        "h",
        "hB"
    ],
    "gl-ES": [
        "H",
        "h",
        "hB"
    ],
    "it-CH": [
        "H",
        "h",
        "hB"
    ],
    "it-IT": [
        "H",
        "h",
        "hB"
    ],
    "LU": [
        "H",
        "h",
        "hB"
    ],
    "NP": [
        "H",
        "h",
        "hB"
    ],
    "PF": [
        "H",
        "h",
        "hB"
    ],
    "SC": [
        "H",
        "h",
        "hB"
    ],
    "SM": [
        "H",
        "h",
        "hB"
    ],
    "SN": [
        "H",
        "h",
        "hB"
    ],
    "TF": [
        "H",
        "h",
        "hB"
    ],
    "VA": [
        "H",
        "h",
        "hB"
    ],
    "CY": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "GR": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "CO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "DO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KP": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "NA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "VE": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "AC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "AI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BW": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BZ": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "DG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "FK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GB": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IM": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IO": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "JE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "LT": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MS": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NF": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NR": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NU": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "PN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SH": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "TA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "ZA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "af-ZA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "AR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CL": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CU": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "EA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-BO": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-BR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-EC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-ES": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-GQ": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-PE": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "GT": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "HN": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "IC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KG": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KM": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "LK": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MX": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "NI": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "PY": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "SV": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "UY": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "JP": [
        "H",
        "h",
        "K"
    ],
    "AD": [
        "H",
        "hB"
    ],
    "AM": [
        "H",
        "hB"
    ],
    "AO": [
        "H",
        "hB"
    ],
    "AT": [
        "H",
        "hB"
    ],
    "AW": [
        "H",
        "hB"
    ],
    "BE": [
        "H",
        "hB"
    ],
    "BF": [
        "H",
        "hB"
    ],
    "BJ": [
        "H",
        "hB"
    ],
    "BL": [
        "H",
        "hB"
    ],
    "BR": [
        "H",
        "hB"
    ],
    "CG": [
        "H",
        "hB"
    ],
    "CI": [
        "H",
        "hB"
    ],
    "CV": [
        "H",
        "hB"
    ],
    "DE": [
        "H",
        "hB"
    ],
    "EE": [
        "H",
        "hB"
    ],
    "FR": [
        "H",
        "hB"
    ],
    "GA": [
        "H",
        "hB"
    ],
    "GF": [
        "H",
        "hB"
    ],
    "GN": [
        "H",
        "hB"
    ],
    "GP": [
        "H",
        "hB"
    ],
    "GW": [
        "H",
        "hB"
    ],
    "HR": [
        "H",
        "hB"
    ],
    "IL": [
        "H",
        "hB"
    ],
    "IT": [
        "H",
        "hB"
    ],
    "KZ": [
        "H",
        "hB"
    ],
    "MC": [
        "H",
        "hB"
    ],
    "MD": [
        "H",
        "hB"
    ],
    "MF": [
        "H",
        "hB"
    ],
    "MQ": [
        "H",
        "hB"
    ],
    "MZ": [
        "H",
        "hB"
    ],
    "NC": [
        "H",
        "hB"
    ],
    "NL": [
        "H",
        "hB"
    ],
    "PM": [
        "H",
        "hB"
    ],
    "PT": [
        "H",
        "hB"
    ],
    "RE": [
        "H",
        "hB"
    ],
    "RO": [
        "H",
        "hB"
    ],
    "SI": [
        "H",
        "hB"
    ],
    "SR": [
        "H",
        "hB"
    ],
    "ST": [
        "H",
        "hB"
    ],
    "TG": [
        "H",
        "hB"
    ],
    "TR": [
        "H",
        "hB"
    ],
    "WF": [
        "H",
        "hB"
    ],
    "YT": [
        "H",
        "hB"
    ],
    "BD": [
        "h",
        "hB",
        "H"
    ],
    "PK": [
        "h",
        "hB",
        "H"
    ],
    "AZ": [
        "H",
        "hB",
        "h"
    ],
    "BA": [
        "H",
        "hB",
        "h"
    ],
    "BG": [
        "H",
        "hB",
        "h"
    ],
    "CH": [
        "H",
        "hB",
        "h"
    ],
    "GE": [
        "H",
        "hB",
        "h"
    ],
    "LI": [
        "H",
        "hB",
        "h"
    ],
    "ME": [
        "H",
        "hB",
        "h"
    ],
    "RS": [
        "H",
        "hB",
        "h"
    ],
    "UA": [
        "H",
        "hB",
        "h"
    ],
    "UZ": [
        "H",
        "hB",
        "h"
    ],
    "XK": [
        "H",
        "hB",
        "h"
    ],
    "AG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "AU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "CA": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "DM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "en-001": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FJ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GD": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "JM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KN": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LR": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MH": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MP": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MW": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "NZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SL": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TT": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "UM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "US": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "ZM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BO": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "EC": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "ES": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "GQ": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "PE": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "AE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "ar-001": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "BH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "DZ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EG": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "HK": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "IQ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "JO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "KW": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LB": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MR": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "OM": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PS": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "QA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SD": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "TN": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "YE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "AF": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "LA": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "CN": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "LV": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "TL": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "zu-ZA": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "CD": [
        "hB",
        "H"
    ],
    "IR": [
        "hB",
        "H"
    ],
    "hi-IN": [
        "hB",
        "h",
        "H"
    ],
    "kn-IN": [
        "hB",
        "h",
        "H"
    ],
    "ml-IN": [
        "hB",
        "h",
        "H"
    ],
    "te-IN": [
        "hB",
        "h",
        "H"
    ],
    "KH": [
        "hB",
        "h",
        "H",
        "hb"
    ],
    "ta-IN": [
        "hB",
        "h",
        "hb",
        "H"
    ],
    "BN": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "MY": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "ET": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "gu-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "mr-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "pa-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "TW": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "KE": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "MM": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "TZ": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "UG": [
        "hB",
        "hb",
        "H",
        "h"
    ]
};

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js

                /**
                 * Returns the best matching date time pattern if a date time skeleton
                 * pattern is provided with a locale. Follows the Unicode specification:
                 * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns
                 * @param skeleton date time skeleton pattern that possibly includes j, J or C
                 * @param locale
                 */
                function getBestPattern(skeleton, locale) {
                    var skeletonCopy = '';
                    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
                        var patternChar = skeleton.charAt(patternPos);
                        if (patternChar === 'j') {
                            var extraLength = 0;
                            while (
                                patternPos + 1 < skeleton.length &&
                                skeleton.charAt(patternPos + 1) === patternChar
                            ) {
                                extraLength++;
                                patternPos++;
                            }
                            var hourLen = 1 + (extraLength & 1);
                            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
                            var dayPeriodChar = 'a';
                            var hourChar = getDefaultHourSymbolFromLocale(locale);
                            if (hourChar == 'H' || hourChar == 'k') {
                                dayPeriodLen = 0;
                            }
                            while (dayPeriodLen-- > 0) {
                                skeletonCopy += dayPeriodChar;
                            }
                            while (hourLen-- > 0) {
                                skeletonCopy = hourChar + skeletonCopy;
                            }
                        } else if (patternChar === 'J') {
                            skeletonCopy += 'H';
                        } else {
                            skeletonCopy += patternChar;
                        }
                    }
                    return skeletonCopy;
                }
                /**
                 * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)
                 * of the given `locale` to the corresponding time pattern.
                 * @param locale
                 */
                function getDefaultHourSymbolFromLocale(locale) {
                    var hourCycle = locale.hourCycle;
                    if (
                        hourCycle === undefined &&
                        // @ts-ignore hourCycle(s) is not identified yet
                        locale.hourCycles &&
                        // @ts-ignore
                        locale.hourCycles.length
                    ) {
                        // @ts-ignore
                        hourCycle = locale.hourCycles[0];
                    }
                    if (hourCycle) {
                        switch (hourCycle) {
                            case 'h24':
                                return 'k';
                            case 'h23':
                                return 'H';
                            case 'h12':
                                return 'h';
                            case 'h11':
                                return 'K';
                            default:
                                throw new Error('Invalid hourCycle');
                        }
                    }
                    // TODO: Once hourCycle is fully supported remove the following with data generation
                    var languageTag = locale.language;
                    var regionTag;
                    if (languageTag !== 'root') {
                        regionTag = locale.maximize().region;
                    }
                    var hourCycles =
                        timeData[regionTag || ''] ||
                        timeData[languageTag || ''] ||
                        timeData[''.concat(languageTag, '-001')] ||
                        timeData['001'];
                    return hourCycles[0];
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
                var parser_a;

                var SPACE_SEPARATOR_START_REGEX = new RegExp('^'.concat(SPACE_SEPARATOR_REGEX.source, '*'));
                var SPACE_SEPARATOR_END_REGEX = new RegExp(''.concat(SPACE_SEPARATOR_REGEX.source, '*$'));
                function createLocation(start, end) {
                    return { start: start, end: end };
                }
                // #region Ponyfills
                // Consolidate these variables up top for easier toggling during debugging
                var hasNativeStartsWith = !!String.prototype.startsWith;
                var hasNativeFromCodePoint = !!String.fromCodePoint;
                var hasNativeFromEntries = !!Object.fromEntries;
                var hasNativeCodePointAt = !!String.prototype.codePointAt;
                var hasTrimStart = !!String.prototype.trimStart;
                var hasTrimEnd = !!String.prototype.trimEnd;
                var hasNativeIsSafeInteger = !!Number.isSafeInteger;
                var isSafeInteger = hasNativeIsSafeInteger
                    ? Number.isSafeInteger
                    : function (n) {
                          return (
                              typeof n === 'number' &&
                              isFinite(n) &&
                              Math.floor(n) === n &&
                              Math.abs(n) <= 0x1fffffffffffff
                          );
                      };
                // IE11 does not support y and u.
                var REGEX_SUPPORTS_U_AND_Y = true;
                try {
                    var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
                    /**
                     * legacy Edge or Xbox One browser
                     * Unicode flag support: supported
                     * Pattern_Syntax support: not supported
                     * See https://github.com/formatjs/formatjs/issues/2822
                     */
                    REGEX_SUPPORTS_U_AND_Y =
                        ((parser_a = re.exec('a')) === null || parser_a === void 0 ? void 0 : parser_a[0]) === 'a';
                } catch (_) {
                    REGEX_SUPPORTS_U_AND_Y = false;
                }
                var startsWith = hasNativeStartsWith
                    ? // Native
                      function startsWith(s, search, position) {
                          return s.startsWith(search, position);
                      }
                    : // For IE11
                      function startsWith(s, search, position) {
                          return s.slice(position, position + search.length) === search;
                      };
                var fromCodePoint = hasNativeFromCodePoint
                    ? String.fromCodePoint
                    : // IE11
                      function fromCodePoint() {
                          var codePoints = [];
                          for (var _i = 0; _i < arguments.length; _i++) {
                              codePoints[_i] = arguments[_i];
                          }
                          var elements = '';
                          var length = codePoints.length;
                          var i = 0;
                          var code;
                          while (length > i) {
                              code = codePoints[i++];
                              if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');
                              elements +=
                                  code < 0x10000
                                      ? String.fromCharCode(code)
                                      : String.fromCharCode(
                                            ((code -= 0x10000) >> 10) + 0xd800,
                                            (code % 0x400) + 0xdc00,
                                        );
                          }
                          return elements;
                      };
                var fromEntries =
                    // native
                    hasNativeFromEntries
                        ? Object.fromEntries
                        : // Ponyfill
                          function fromEntries(entries) {
                              var obj = {};
                              for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                                  var _a = entries_1[_i],
                                      k = _a[0],
                                      v = _a[1];
                                  obj[k] = v;
                              }
                              return obj;
                          };
                var codePointAt = hasNativeCodePointAt
                    ? // Native
                      function codePointAt(s, index) {
                          return s.codePointAt(index);
                      }
                    : // IE 11
                      function codePointAt(s, index) {
                          var size = s.length;
                          if (index < 0 || index >= size) {
                              return undefined;
                          }
                          var first = s.charCodeAt(index);
                          var second;
                          return first < 0xd800 ||
                              first > 0xdbff ||
                              index + 1 === size ||
                              (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                              second > 0xdfff
                              ? first
                              : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
                      };
                var trimStart = hasTrimStart
                    ? // Native
                      function trimStart(s) {
                          return s.trimStart();
                      }
                    : // Ponyfill
                      function trimStart(s) {
                          return s.replace(SPACE_SEPARATOR_START_REGEX, '');
                      };
                var trimEnd = hasTrimEnd
                    ? // Native
                      function trimEnd(s) {
                          return s.trimEnd();
                      }
                    : // Ponyfill
                      function trimEnd(s) {
                          return s.replace(SPACE_SEPARATOR_END_REGEX, '');
                      };
                // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
                function RE(s, flag) {
                    return new RegExp(s, flag);
                }
                // #endregion
                var matchIdentifierAtIndex;
                if (REGEX_SUPPORTS_U_AND_Y) {
                    // Native
                    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
                    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
                        var _a;
                        IDENTIFIER_PREFIX_RE_1.lastIndex = index;
                        var match = IDENTIFIER_PREFIX_RE_1.exec(s);
                        return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
                    };
                } else {
                    // IE11
                    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
                        var match = [];
                        while (true) {
                            var c = codePointAt(s, index);
                            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                                break;
                            }
                            match.push(c);
                            index += c >= 0x10000 ? 2 : 1;
                        }
                        return fromCodePoint.apply(void 0, match);
                    };
                }
                var parser_Parser = /** @class */ (function () {
                    function Parser(message, options) {
                        if (options === void 0) {
                            options = {};
                        }
                        this.message = message;
                        this.position = { offset: 0, line: 1, column: 1 };
                        this.ignoreTag = !!options.ignoreTag;
                        this.locale = options.locale;
                        this.requiresOtherClause = !!options.requiresOtherClause;
                        this.shouldParseSkeletons = !!options.shouldParseSkeletons;
                    }
                    Parser.prototype.parse = function () {
                        if (this.offset() !== 0) {
                            throw Error('parser can only be used once');
                        }
                        return this.parseMessage(0, '', false);
                    };
                    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
                        var elements = [];
                        while (!this.isEOF()) {
                            var char = this.char();
                            if (char === 123 /* `{` */) {
                                var result = this.parseArgument(nestingLevel, expectingCloseTag);
                                if (result.err) {
                                    return result;
                                }
                                elements.push(result.val);
                            } else if (char === 125 /* `}` */ && nestingLevel > 0) {
                                break;
                            } else if (
                                char === 35 /* `#` */ &&
                                (parentArgType === 'plural' || parentArgType === 'selectordinal')
                            ) {
                                var position = this.clonePosition();
                                this.bump();
                                elements.push({
                                    type: TYPE.pound,
                                    location: createLocation(position, this.clonePosition()),
                                });
                            } else if (
                                char === 60 /* `<` */ &&
                                !this.ignoreTag &&
                                this.peek() === 47 // char code for '/'
                            ) {
                                if (expectingCloseTag) {
                                    break;
                                } else {
                                    return this.error(
                                        ErrorKind.UNMATCHED_CLOSING_TAG,
                                        createLocation(this.clonePosition(), this.clonePosition()),
                                    );
                                }
                            } else if (char === 60 /* `<` */ && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
                                var result = this.parseTag(nestingLevel, parentArgType);
                                if (result.err) {
                                    return result;
                                }
                                elements.push(result.val);
                            } else {
                                var result = this.parseLiteral(nestingLevel, parentArgType);
                                if (result.err) {
                                    return result;
                                }
                                elements.push(result.val);
                            }
                        }
                        return { val: elements, err: null };
                    };
                    /**
                     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
                     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
                     * are accepted:
                     *
                     * ```
                     * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
                     * tagName ::= [a-z] (PENChar)*
                     * PENChar ::=
                     *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
                     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
                     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
                     * ```
                     *
                     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
                     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
                     * since other tag-based engines like React allow it
                     */
                    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
                        var startPosition = this.clonePosition();
                        this.bump(); // `<`
                        var tagName = this.parseTagName();
                        this.bumpSpace();
                        if (this.bumpIf('/>')) {
                            // Self closing tag
                            return {
                                val: {
                                    type: TYPE.literal,
                                    value: '<'.concat(tagName, '/>'),
                                    location: createLocation(startPosition, this.clonePosition()),
                                },
                                err: null,
                            };
                        } else if (this.bumpIf('>')) {
                            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
                            if (childrenResult.err) {
                                return childrenResult;
                            }
                            var children = childrenResult.val;
                            // Expecting a close tag
                            var endTagStartPosition = this.clonePosition();
                            if (this.bumpIf('</')) {
                                if (this.isEOF() || !_isAlpha(this.char())) {
                                    return this.error(
                                        ErrorKind.INVALID_TAG,
                                        createLocation(endTagStartPosition, this.clonePosition()),
                                    );
                                }
                                var closingTagNameStartPosition = this.clonePosition();
                                var closingTagName = this.parseTagName();
                                if (tagName !== closingTagName) {
                                    return this.error(
                                        ErrorKind.UNMATCHED_CLOSING_TAG,
                                        createLocation(closingTagNameStartPosition, this.clonePosition()),
                                    );
                                }
                                this.bumpSpace();
                                if (!this.bumpIf('>')) {
                                    return this.error(
                                        ErrorKind.INVALID_TAG,
                                        createLocation(endTagStartPosition, this.clonePosition()),
                                    );
                                }
                                return {
                                    val: {
                                        type: TYPE.tag,
                                        value: tagName,
                                        children: children,
                                        location: createLocation(startPosition, this.clonePosition()),
                                    },
                                    err: null,
                                };
                            } else {
                                return this.error(
                                    ErrorKind.UNCLOSED_TAG,
                                    createLocation(startPosition, this.clonePosition()),
                                );
                            }
                        } else {
                            return this.error(
                                ErrorKind.INVALID_TAG,
                                createLocation(startPosition, this.clonePosition()),
                            );
                        }
                    };
                    /**
                     * This method assumes that the caller has peeked ahead for the first tag character.
                     */
                    Parser.prototype.parseTagName = function () {
                        var startOffset = this.offset();
                        this.bump(); // the first tag name character
                        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
                            this.bump();
                        }
                        return this.message.slice(startOffset, this.offset());
                    };
                    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
                        var start = this.clonePosition();
                        var value = '';
                        while (true) {
                            var parseQuoteResult = this.tryParseQuote(parentArgType);
                            if (parseQuoteResult) {
                                value += parseQuoteResult;
                                continue;
                            }
                            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
                            if (parseUnquotedResult) {
                                value += parseUnquotedResult;
                                continue;
                            }
                            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
                            if (parseLeftAngleResult) {
                                value += parseLeftAngleResult;
                                continue;
                            }
                            break;
                        }
                        var location = createLocation(start, this.clonePosition());
                        return {
                            val: { type: TYPE.literal, value: value, location: location },
                            err: null,
                        };
                    };
                    Parser.prototype.tryParseLeftAngleBracket = function () {
                        if (
                            !this.isEOF() &&
                            this.char() === 60 /* `<` */ &&
                            (this.ignoreTag ||
                                // If at the opening tag or closing tag position, bail.
                                !_isAlphaOrSlash(this.peek() || 0))
                        ) {
                            this.bump(); // `<`
                            return '<';
                        }
                        return null;
                    };
                    /**
                     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
                     * a character that requires quoting (that is, "only where needed"), and works the same in
                     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
                     */
                    Parser.prototype.tryParseQuote = function (parentArgType) {
                        if (this.isEOF() || this.char() !== 39 /* `'` */) {
                            return null;
                        }
                        // Parse escaped char following the apostrophe, or early return if there is no escaped char.
                        // Check if is valid escaped character
                        switch (this.peek()) {
                            case 39 /* `'` */:
                                // double quote, should return as a single quote.
                                this.bump();
                                this.bump();
                                return "'";
                            // '{', '<', '>', '}'
                            case 123:
                            case 60:
                            case 62:
                            case 125:
                                break;
                            case 35: // '#'
                                if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
                                    break;
                                }
                                return null;
                            default:
                                return null;
                        }
                        this.bump(); // apostrophe
                        var codePoints = [this.char()]; // escaped char
                        this.bump();
                        // read chars until the optional closing apostrophe is found
                        while (!this.isEOF()) {
                            var ch = this.char();
                            if (ch === 39 /* `'` */) {
                                if (this.peek() === 39 /* `'` */) {
                                    codePoints.push(39);
                                    // Bump one more time because we need to skip 2 characters.
                                    this.bump();
                                } else {
                                    // Optional closing apostrophe.
                                    this.bump();
                                    break;
                                }
                            } else {
                                codePoints.push(ch);
                            }
                            this.bump();
                        }
                        return fromCodePoint.apply(void 0, codePoints);
                    };
                    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
                        if (this.isEOF()) {
                            return null;
                        }
                        var ch = this.char();
                        if (
                            ch === 60 /* `<` */ ||
                            ch === 123 /* `{` */ ||
                            (ch === 35 /* `#` */ &&
                                (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||
                            (ch === 125 /* `}` */ && nestingLevel > 0)
                        ) {
                            return null;
                        } else {
                            this.bump();
                            return fromCodePoint(ch);
                        }
                    };
                    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
                        var openingBracePosition = this.clonePosition();
                        this.bump(); // `{`
                        this.bumpSpace();
                        if (this.isEOF()) {
                            return this.error(
                                ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE,
                                createLocation(openingBracePosition, this.clonePosition()),
                            );
                        }
                        if (this.char() === 125 /* `}` */) {
                            this.bump();
                            return this.error(
                                ErrorKind.EMPTY_ARGUMENT,
                                createLocation(openingBracePosition, this.clonePosition()),
                            );
                        }
                        // argument name
                        var value = this.parseIdentifierIfPossible().value;
                        if (!value) {
                            return this.error(
                                ErrorKind.MALFORMED_ARGUMENT,
                                createLocation(openingBracePosition, this.clonePosition()),
                            );
                        }
                        this.bumpSpace();
                        if (this.isEOF()) {
                            return this.error(
                                ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE,
                                createLocation(openingBracePosition, this.clonePosition()),
                            );
                        }
                        switch (this.char()) {
                            // Simple argument: `{name}`
                            case 125 /* `}` */: {
                                this.bump(); // `}`
                                return {
                                    val: {
                                        type: TYPE.argument,
                                        // value does not include the opening and closing braces.
                                        value: value,
                                        location: createLocation(openingBracePosition, this.clonePosition()),
                                    },
                                    err: null,
                                };
                            }
                            // Argument with options: `{name, format, ...}`
                            case 44 /* `,` */: {
                                this.bump(); // `,`
                                this.bumpSpace();
                                if (this.isEOF()) {
                                    return this.error(
                                        ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE,
                                        createLocation(openingBracePosition, this.clonePosition()),
                                    );
                                }
                                return this.parseArgumentOptions(
                                    nestingLevel,
                                    expectingCloseTag,
                                    value,
                                    openingBracePosition,
                                );
                            }
                            default:
                                return this.error(
                                    ErrorKind.MALFORMED_ARGUMENT,
                                    createLocation(openingBracePosition, this.clonePosition()),
                                );
                        }
                    };
                    /**
                     * Advance the parser until the end of the identifier, if it is currently on
                     * an identifier character. Return an empty string otherwise.
                     */
                    Parser.prototype.parseIdentifierIfPossible = function () {
                        var startingPosition = this.clonePosition();
                        var startOffset = this.offset();
                        var value = matchIdentifierAtIndex(this.message, startOffset);
                        var endOffset = startOffset + value.length;
                        this.bumpTo(endOffset);
                        var endPosition = this.clonePosition();
                        var location = createLocation(startingPosition, endPosition);
                        return { value: value, location: location };
                    };
                    Parser.prototype.parseArgumentOptions = function (
                        nestingLevel,
                        expectingCloseTag,
                        value,
                        openingBracePosition,
                    ) {
                        var _a;
                        // Parse this range:
                        // {name, type, style}
                        //        ^---^
                        var typeStartPosition = this.clonePosition();
                        var argType = this.parseIdentifierIfPossible().value;
                        var typeEndPosition = this.clonePosition();
                        switch (argType) {
                            case '':
                                // Expecting a style string number, date, time, plural, selectordinal, or select.
                                return this.error(
                                    ErrorKind.EXPECT_ARGUMENT_TYPE,
                                    createLocation(typeStartPosition, typeEndPosition),
                                );
                            case 'number':
                            case 'date':
                            case 'time': {
                                // Parse this range:
                                // {name, number, style}
                                //              ^-------^
                                this.bumpSpace();
                                var styleAndLocation = null;
                                if (this.bumpIf(',')) {
                                    this.bumpSpace();
                                    var styleStartPosition = this.clonePosition();
                                    var result = this.parseSimpleArgStyleIfPossible();
                                    if (result.err) {
                                        return result;
                                    }
                                    var style = trimEnd(result.val);
                                    if (style.length === 0) {
                                        return this.error(
                                            ErrorKind.EXPECT_ARGUMENT_STYLE,
                                            createLocation(this.clonePosition(), this.clonePosition()),
                                        );
                                    }
                                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                                    styleAndLocation = { style: style, styleLocation: styleLocation };
                                }
                                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                                if (argCloseResult.err) {
                                    return argCloseResult;
                                }
                                var location_1 = createLocation(openingBracePosition, this.clonePosition());
                                // Extract style or skeleton
                                if (
                                    styleAndLocation &&
                                    startsWith(
                                        styleAndLocation === null || styleAndLocation === void 0
                                            ? void 0
                                            : styleAndLocation.style,
                                        '::',
                                        0,
                                    )
                                ) {
                                    // Skeleton starts with `::`.
                                    var skeleton = trimStart(styleAndLocation.style.slice(2));
                                    if (argType === 'number') {
                                        var result = this.parseNumberSkeletonFromString(
                                            skeleton,
                                            styleAndLocation.styleLocation,
                                        );
                                        if (result.err) {
                                            return result;
                                        }
                                        return {
                                            val: {
                                                type: TYPE.number,
                                                value: value,
                                                location: location_1,
                                                style: result.val,
                                            },
                                            err: null,
                                        };
                                    } else {
                                        if (skeleton.length === 0) {
                                            return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                                        }
                                        var dateTimePattern = skeleton;
                                        // Get "best match" pattern only if locale is passed, if not, let it
                                        // pass as-is where `parseDateTimeSkeleton()` will throw an error
                                        // for unsupported patterns.
                                        if (this.locale) {
                                            dateTimePattern = getBestPattern(skeleton, this.locale);
                                        }
                                        var style = {
                                            type: SKELETON_TYPE.dateTime,
                                            pattern: dateTimePattern,
                                            location: styleAndLocation.styleLocation,
                                            parsedOptions: this.shouldParseSkeletons
                                                ? parseDateTimeSkeleton(dateTimePattern)
                                                : {},
                                        };
                                        var type = argType === 'date' ? TYPE.date : TYPE.time;
                                        return {
                                            val: { type: type, value: value, location: location_1, style: style },
                                            err: null,
                                        };
                                    }
                                }
                                // Regular style or no style.
                                return {
                                    val: {
                                        type:
                                            argType === 'number'
                                                ? TYPE.number
                                                : argType === 'date'
                                                ? TYPE.date
                                                : TYPE.time,
                                        value: value,
                                        location: location_1,
                                        style:
                                            (_a =
                                                styleAndLocation === null || styleAndLocation === void 0
                                                    ? void 0
                                                    : styleAndLocation.style) !== null && _a !== void 0
                                                ? _a
                                                : null,
                                    },
                                    err: null,
                                };
                            }
                            case 'plural':
                            case 'selectordinal':
                            case 'select': {
                                // Parse this range:
                                // {name, plural, options}
                                //              ^---------^
                                var typeEndPosition_1 = this.clonePosition();
                                this.bumpSpace();
                                if (!this.bumpIf(',')) {
                                    return this.error(
                                        ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS,
                                        createLocation(
                                            typeEndPosition_1,
                                            Object(tslib_es6['__assign'])({}, typeEndPosition_1),
                                        ),
                                    );
                                }
                                this.bumpSpace();
                                // Parse offset:
                                // {name, plural, offset:1, options}
                                //                ^-----^
                                //
                                // or the first option:
                                //
                                // {name, plural, one {...} other {...}}
                                //                ^--^
                                var identifierAndLocation = this.parseIdentifierIfPossible();
                                var pluralOffset = 0;
                                if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                                    if (!this.bumpIf(':')) {
                                        return this.error(
                                            ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,
                                            createLocation(this.clonePosition(), this.clonePosition()),
                                        );
                                    }
                                    this.bumpSpace();
                                    var result = this.tryParseDecimalInteger(
                                        ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,
                                        ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE,
                                    );
                                    if (result.err) {
                                        return result;
                                    }
                                    // Parse another identifier for option parsing
                                    this.bumpSpace();
                                    identifierAndLocation = this.parseIdentifierIfPossible();
                                    pluralOffset = result.val;
                                }
                                var optionsResult = this.tryParsePluralOrSelectOptions(
                                    nestingLevel,
                                    argType,
                                    expectingCloseTag,
                                    identifierAndLocation,
                                );
                                if (optionsResult.err) {
                                    return optionsResult;
                                }
                                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                                if (argCloseResult.err) {
                                    return argCloseResult;
                                }
                                var location_2 = createLocation(openingBracePosition, this.clonePosition());
                                if (argType === 'select') {
                                    return {
                                        val: {
                                            type: TYPE.select,
                                            value: value,
                                            options: fromEntries(optionsResult.val),
                                            location: location_2,
                                        },
                                        err: null,
                                    };
                                } else {
                                    return {
                                        val: {
                                            type: TYPE.plural,
                                            value: value,
                                            options: fromEntries(optionsResult.val),
                                            offset: pluralOffset,
                                            pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                                            location: location_2,
                                        },
                                        err: null,
                                    };
                                }
                            }
                            default:
                                return this.error(
                                    ErrorKind.INVALID_ARGUMENT_TYPE,
                                    createLocation(typeStartPosition, typeEndPosition),
                                );
                        }
                    };
                    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
                        // Parse: {value, number, ::currency/GBP }
                        //
                        if (this.isEOF() || this.char() !== 125 /* `}` */) {
                            return this.error(
                                ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE,
                                createLocation(openingBracePosition, this.clonePosition()),
                            );
                        }
                        this.bump(); // `}`
                        return { val: true, err: null };
                    };
                    /**
                     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
                     */
                    Parser.prototype.parseSimpleArgStyleIfPossible = function () {
                        var nestedBraces = 0;
                        var startPosition = this.clonePosition();
                        while (!this.isEOF()) {
                            var ch = this.char();
                            switch (ch) {
                                case 39 /* `'` */: {
                                    // Treat apostrophe as quoting but include it in the style part.
                                    // Find the end of the quoted literal text.
                                    this.bump();
                                    var apostrophePosition = this.clonePosition();
                                    if (!this.bumpUntil("'")) {
                                        return this.error(
                                            ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,
                                            createLocation(apostrophePosition, this.clonePosition()),
                                        );
                                    }
                                    this.bump();
                                    break;
                                }
                                case 123 /* `{` */: {
                                    nestedBraces += 1;
                                    this.bump();
                                    break;
                                }
                                case 125 /* `}` */: {
                                    if (nestedBraces > 0) {
                                        nestedBraces -= 1;
                                    } else {
                                        return {
                                            val: this.message.slice(startPosition.offset, this.offset()),
                                            err: null,
                                        };
                                    }
                                    break;
                                }
                                default:
                                    this.bump();
                                    break;
                            }
                        }
                        return {
                            val: this.message.slice(startPosition.offset, this.offset()),
                            err: null,
                        };
                    };
                    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
                        var tokens = [];
                        try {
                            tokens = parseNumberSkeletonFromString(skeleton);
                        } catch (e) {
                            return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);
                        }
                        return {
                            val: {
                                type: SKELETON_TYPE.number,
                                tokens: tokens,
                                location: location,
                                parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {},
                            },
                            err: null,
                        };
                    };
                    /**
                     * @param nesting_level The current nesting level of messages.
                     *     This can be positive when parsing message fragment in select or plural argument options.
                     * @param parent_arg_type The parent argument's type.
                     * @param parsed_first_identifier If provided, this is the first identifier-like selector of
                     *     the argument. It is a by-product of a previous parsing attempt.
                     * @param expecting_close_tag If true, this message is directly or indirectly nested inside
                     *     between a pair of opening and closing tags. The nested message will not parse beyond
                     *     the closing tag boundary.
                     */
                    Parser.prototype.tryParsePluralOrSelectOptions = function (
                        nestingLevel,
                        parentArgType,
                        expectCloseTag,
                        parsedFirstIdentifier,
                    ) {
                        var _a;
                        var hasOtherClause = false;
                        var options = [];
                        var parsedSelectors = new Set();
                        var selector = parsedFirstIdentifier.value,
                            selectorLocation = parsedFirstIdentifier.location;
                        // Parse:
                        // one {one apple}
                        // ^--^
                        while (true) {
                            if (selector.length === 0) {
                                var startPosition = this.clonePosition();
                                if (parentArgType !== 'select' && this.bumpIf('=')) {
                                    // Try parse `={number}` selector
                                    var result = this.tryParseDecimalInteger(
                                        ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR,
                                        ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR,
                                    );
                                    if (result.err) {
                                        return result;
                                    }
                                    selectorLocation = createLocation(startPosition, this.clonePosition());
                                    selector = this.message.slice(startPosition.offset, this.offset());
                                } else {
                                    break;
                                }
                            }
                            // Duplicate selector clauses
                            if (parsedSelectors.has(selector)) {
                                return this.error(
                                    parentArgType === 'select'
                                        ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR
                                        : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,
                                    selectorLocation,
                                );
                            }
                            if (selector === 'other') {
                                hasOtherClause = true;
                            }
                            // Parse:
                            // one {one apple}
                            //     ^----------^
                            this.bumpSpace();
                            var openingBracePosition = this.clonePosition();
                            if (!this.bumpIf('{')) {
                                return this.error(
                                    parentArgType === 'select'
                                        ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                                        : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,
                                    createLocation(this.clonePosition(), this.clonePosition()),
                                );
                            }
                            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
                            if (fragmentResult.err) {
                                return fragmentResult;
                            }
                            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                            if (argCloseResult.err) {
                                return argCloseResult;
                            }
                            options.push([
                                selector,
                                {
                                    value: fragmentResult.val,
                                    location: createLocation(openingBracePosition, this.clonePosition()),
                                },
                            ]);
                            // Keep track of the existing selectors
                            parsedSelectors.add(selector);
                            // Prep next selector clause.
                            this.bumpSpace();
                            (_a = this.parseIdentifierIfPossible()),
                                (selector = _a.value),
                                (selectorLocation = _a.location);
                        }
                        if (options.length === 0) {
                            return this.error(
                                parentArgType === 'select'
                                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR
                                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR,
                                createLocation(this.clonePosition(), this.clonePosition()),
                            );
                        }
                        if (this.requiresOtherClause && !hasOtherClause) {
                            return this.error(
                                ErrorKind.MISSING_OTHER_CLAUSE,
                                createLocation(this.clonePosition(), this.clonePosition()),
                            );
                        }
                        return { val: options, err: null };
                    };
                    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
                        var sign = 1;
                        var startingPosition = this.clonePosition();
                        if (this.bumpIf('+')) {
                        } else if (this.bumpIf('-')) {
                            sign = -1;
                        }
                        var hasDigits = false;
                        var decimal = 0;
                        while (!this.isEOF()) {
                            var ch = this.char();
                            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                                hasDigits = true;
                                decimal = decimal * 10 + (ch - 48);
                                this.bump();
                            } else {
                                break;
                            }
                        }
                        var location = createLocation(startingPosition, this.clonePosition());
                        if (!hasDigits) {
                            return this.error(expectNumberError, location);
                        }
                        decimal *= sign;
                        if (!isSafeInteger(decimal)) {
                            return this.error(invalidNumberError, location);
                        }
                        return { val: decimal, err: null };
                    };
                    Parser.prototype.offset = function () {
                        return this.position.offset;
                    };
                    Parser.prototype.isEOF = function () {
                        return this.offset() === this.message.length;
                    };
                    Parser.prototype.clonePosition = function () {
                        // This is much faster than `Object.assign` or spread.
                        return {
                            offset: this.position.offset,
                            line: this.position.line,
                            column: this.position.column,
                        };
                    };
                    /**
                     * Return the code point at the current position of the parser.
                     * Throws if the index is out of bound.
                     */
                    Parser.prototype.char = function () {
                        var offset = this.position.offset;
                        if (offset >= this.message.length) {
                            throw Error('out of bound');
                        }
                        var code = codePointAt(this.message, offset);
                        if (code === undefined) {
                            throw Error('Offset '.concat(offset, ' is at invalid UTF-16 code unit boundary'));
                        }
                        return code;
                    };
                    Parser.prototype.error = function (kind, location) {
                        return {
                            val: null,
                            err: {
                                kind: kind,
                                message: this.message,
                                location: location,
                            },
                        };
                    };
                    /** Bump the parser to the next UTF-16 code unit. */
                    Parser.prototype.bump = function () {
                        if (this.isEOF()) {
                            return;
                        }
                        var code = this.char();
                        if (code === 10 /* '\n' */) {
                            this.position.line += 1;
                            this.position.column = 1;
                            this.position.offset += 1;
                        } else {
                            this.position.column += 1;
                            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
                            this.position.offset += code < 0x10000 ? 1 : 2;
                        }
                    };
                    /**
                     * If the substring starting at the current position of the parser has
                     * the given prefix, then bump the parser to the character immediately
                     * following the prefix and return true. Otherwise, don't bump the parser
                     * and return false.
                     */
                    Parser.prototype.bumpIf = function (prefix) {
                        if (startsWith(this.message, prefix, this.offset())) {
                            for (var i = 0; i < prefix.length; i++) {
                                this.bump();
                            }
                            return true;
                        }
                        return false;
                    };
                    /**
                     * Bump the parser until the pattern character is found and return `true`.
                     * Otherwise bump to the end of the file and return `false`.
                     */
                    Parser.prototype.bumpUntil = function (pattern) {
                        var currentOffset = this.offset();
                        var index = this.message.indexOf(pattern, currentOffset);
                        if (index >= 0) {
                            this.bumpTo(index);
                            return true;
                        } else {
                            this.bumpTo(this.message.length);
                            return false;
                        }
                    };
                    /**
                     * Bump the parser to the target offset.
                     * If target offset is beyond the end of the input, bump the parser to the end of the input.
                     */
                    Parser.prototype.bumpTo = function (targetOffset) {
                        if (this.offset() > targetOffset) {
                            throw Error(
                                'targetOffset '
                                    .concat(targetOffset, ' must be greater than or equal to the current offset ')
                                    .concat(this.offset()),
                            );
                        }
                        targetOffset = Math.min(targetOffset, this.message.length);
                        while (true) {
                            var offset = this.offset();
                            if (offset === targetOffset) {
                                break;
                            }
                            if (offset > targetOffset) {
                                throw Error(
                                    'targetOffset '.concat(targetOffset, ' is at invalid UTF-16 code unit boundary'),
                                );
                            }
                            this.bump();
                            if (this.isEOF()) {
                                break;
                            }
                        }
                    };
                    /** advance the parser through all whitespace to the next non-whitespace code unit. */
                    Parser.prototype.bumpSpace = function () {
                        while (!this.isEOF() && _isWhiteSpace(this.char())) {
                            this.bump();
                        }
                    };
                    /**
                     * Peek at the *next* Unicode codepoint in the input without advancing the parser.
                     * If the input has been exhausted, then this returns null.
                     */
                    Parser.prototype.peek = function () {
                        if (this.isEOF()) {
                            return null;
                        }
                        var code = this.char();
                        var offset = this.offset();
                        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
                        return nextCode !== null && nextCode !== void 0 ? nextCode : null;
                    };
                    return Parser;
                })();

                /**
                 * This check if codepoint is alphabet (lower & uppercase)
                 * @param codepoint
                 * @returns
                 */
                function _isAlpha(codepoint) {
                    return (codepoint >= 97 && codepoint <= 122) || (codepoint >= 65 && codepoint <= 90);
                }
                function _isAlphaOrSlash(codepoint) {
                    return _isAlpha(codepoint) || codepoint === 47; /* '/' */
                }
                /** See `parseTag` function docs. */
                function _isPotentialElementNameChar(c) {
                    return (
                        c === 45 /* '-' */ ||
                        c === 46 /* '.' */ ||
                        (c >= 48 && c <= 57) /* 0..9 */ ||
                        c === 95 /* '_' */ ||
                        (c >= 97 && c <= 122) /** a..z */ ||
                        (c >= 65 && c <= 90) /* A..Z */ ||
                        c == 0xb7 ||
                        (c >= 0xc0 && c <= 0xd6) ||
                        (c >= 0xd8 && c <= 0xf6) ||
                        (c >= 0xf8 && c <= 0x37d) ||
                        (c >= 0x37f && c <= 0x1fff) ||
                        (c >= 0x200c && c <= 0x200d) ||
                        (c >= 0x203f && c <= 0x2040) ||
                        (c >= 0x2070 && c <= 0x218f) ||
                        (c >= 0x2c00 && c <= 0x2fef) ||
                        (c >= 0x3001 && c <= 0xd7ff) ||
                        (c >= 0xf900 && c <= 0xfdcf) ||
                        (c >= 0xfdf0 && c <= 0xfffd) ||
                        (c >= 0x10000 && c <= 0xeffff)
                    );
                }
                /**
                 * Code point equivalent of regex `\p{White_Space}`.
                 * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
                 */
                function _isWhiteSpace(c) {
                    return (
                        (c >= 0x0009 && c <= 0x000d) ||
                        c === 0x0020 ||
                        c === 0x0085 ||
                        (c >= 0x200e && c <= 0x200f) ||
                        c === 0x2028 ||
                        c === 0x2029
                    );
                }
                /**
                 * Code point equivalent of regex `\p{Pattern_Syntax}`.
                 * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
                 */
                function _isPatternSyntax(c) {
                    return (
                        (c >= 0x0021 && c <= 0x0023) ||
                        c === 0x0024 ||
                        (c >= 0x0025 && c <= 0x0027) ||
                        c === 0x0028 ||
                        c === 0x0029 ||
                        c === 0x002a ||
                        c === 0x002b ||
                        c === 0x002c ||
                        c === 0x002d ||
                        (c >= 0x002e && c <= 0x002f) ||
                        (c >= 0x003a && c <= 0x003b) ||
                        (c >= 0x003c && c <= 0x003e) ||
                        (c >= 0x003f && c <= 0x0040) ||
                        c === 0x005b ||
                        c === 0x005c ||
                        c === 0x005d ||
                        c === 0x005e ||
                        c === 0x0060 ||
                        c === 0x007b ||
                        c === 0x007c ||
                        c === 0x007d ||
                        c === 0x007e ||
                        c === 0x00a1 ||
                        (c >= 0x00a2 && c <= 0x00a5) ||
                        c === 0x00a6 ||
                        c === 0x00a7 ||
                        c === 0x00a9 ||
                        c === 0x00ab ||
                        c === 0x00ac ||
                        c === 0x00ae ||
                        c === 0x00b0 ||
                        c === 0x00b1 ||
                        c === 0x00b6 ||
                        c === 0x00bb ||
                        c === 0x00bf ||
                        c === 0x00d7 ||
                        c === 0x00f7 ||
                        (c >= 0x2010 && c <= 0x2015) ||
                        (c >= 0x2016 && c <= 0x2017) ||
                        c === 0x2018 ||
                        c === 0x2019 ||
                        c === 0x201a ||
                        (c >= 0x201b && c <= 0x201c) ||
                        c === 0x201d ||
                        c === 0x201e ||
                        c === 0x201f ||
                        (c >= 0x2020 && c <= 0x2027) ||
                        (c >= 0x2030 && c <= 0x2038) ||
                        c === 0x2039 ||
                        c === 0x203a ||
                        (c >= 0x203b && c <= 0x203e) ||
                        (c >= 0x2041 && c <= 0x2043) ||
                        c === 0x2044 ||
                        c === 0x2045 ||
                        c === 0x2046 ||
                        (c >= 0x2047 && c <= 0x2051) ||
                        c === 0x2052 ||
                        c === 0x2053 ||
                        (c >= 0x2055 && c <= 0x205e) ||
                        (c >= 0x2190 && c <= 0x2194) ||
                        (c >= 0x2195 && c <= 0x2199) ||
                        (c >= 0x219a && c <= 0x219b) ||
                        (c >= 0x219c && c <= 0x219f) ||
                        c === 0x21a0 ||
                        (c >= 0x21a1 && c <= 0x21a2) ||
                        c === 0x21a3 ||
                        (c >= 0x21a4 && c <= 0x21a5) ||
                        c === 0x21a6 ||
                        (c >= 0x21a7 && c <= 0x21ad) ||
                        c === 0x21ae ||
                        (c >= 0x21af && c <= 0x21cd) ||
                        (c >= 0x21ce && c <= 0x21cf) ||
                        (c >= 0x21d0 && c <= 0x21d1) ||
                        c === 0x21d2 ||
                        c === 0x21d3 ||
                        c === 0x21d4 ||
                        (c >= 0x21d5 && c <= 0x21f3) ||
                        (c >= 0x21f4 && c <= 0x22ff) ||
                        (c >= 0x2300 && c <= 0x2307) ||
                        c === 0x2308 ||
                        c === 0x2309 ||
                        c === 0x230a ||
                        c === 0x230b ||
                        (c >= 0x230c && c <= 0x231f) ||
                        (c >= 0x2320 && c <= 0x2321) ||
                        (c >= 0x2322 && c <= 0x2328) ||
                        c === 0x2329 ||
                        c === 0x232a ||
                        (c >= 0x232b && c <= 0x237b) ||
                        c === 0x237c ||
                        (c >= 0x237d && c <= 0x239a) ||
                        (c >= 0x239b && c <= 0x23b3) ||
                        (c >= 0x23b4 && c <= 0x23db) ||
                        (c >= 0x23dc && c <= 0x23e1) ||
                        (c >= 0x23e2 && c <= 0x2426) ||
                        (c >= 0x2427 && c <= 0x243f) ||
                        (c >= 0x2440 && c <= 0x244a) ||
                        (c >= 0x244b && c <= 0x245f) ||
                        (c >= 0x2500 && c <= 0x25b6) ||
                        c === 0x25b7 ||
                        (c >= 0x25b8 && c <= 0x25c0) ||
                        c === 0x25c1 ||
                        (c >= 0x25c2 && c <= 0x25f7) ||
                        (c >= 0x25f8 && c <= 0x25ff) ||
                        (c >= 0x2600 && c <= 0x266e) ||
                        c === 0x266f ||
                        (c >= 0x2670 && c <= 0x2767) ||
                        c === 0x2768 ||
                        c === 0x2769 ||
                        c === 0x276a ||
                        c === 0x276b ||
                        c === 0x276c ||
                        c === 0x276d ||
                        c === 0x276e ||
                        c === 0x276f ||
                        c === 0x2770 ||
                        c === 0x2771 ||
                        c === 0x2772 ||
                        c === 0x2773 ||
                        c === 0x2774 ||
                        c === 0x2775 ||
                        (c >= 0x2794 && c <= 0x27bf) ||
                        (c >= 0x27c0 && c <= 0x27c4) ||
                        c === 0x27c5 ||
                        c === 0x27c6 ||
                        (c >= 0x27c7 && c <= 0x27e5) ||
                        c === 0x27e6 ||
                        c === 0x27e7 ||
                        c === 0x27e8 ||
                        c === 0x27e9 ||
                        c === 0x27ea ||
                        c === 0x27eb ||
                        c === 0x27ec ||
                        c === 0x27ed ||
                        c === 0x27ee ||
                        c === 0x27ef ||
                        (c >= 0x27f0 && c <= 0x27ff) ||
                        (c >= 0x2800 && c <= 0x28ff) ||
                        (c >= 0x2900 && c <= 0x2982) ||
                        c === 0x2983 ||
                        c === 0x2984 ||
                        c === 0x2985 ||
                        c === 0x2986 ||
                        c === 0x2987 ||
                        c === 0x2988 ||
                        c === 0x2989 ||
                        c === 0x298a ||
                        c === 0x298b ||
                        c === 0x298c ||
                        c === 0x298d ||
                        c === 0x298e ||
                        c === 0x298f ||
                        c === 0x2990 ||
                        c === 0x2991 ||
                        c === 0x2992 ||
                        c === 0x2993 ||
                        c === 0x2994 ||
                        c === 0x2995 ||
                        c === 0x2996 ||
                        c === 0x2997 ||
                        c === 0x2998 ||
                        (c >= 0x2999 && c <= 0x29d7) ||
                        c === 0x29d8 ||
                        c === 0x29d9 ||
                        c === 0x29da ||
                        c === 0x29db ||
                        (c >= 0x29dc && c <= 0x29fb) ||
                        c === 0x29fc ||
                        c === 0x29fd ||
                        (c >= 0x29fe && c <= 0x2aff) ||
                        (c >= 0x2b00 && c <= 0x2b2f) ||
                        (c >= 0x2b30 && c <= 0x2b44) ||
                        (c >= 0x2b45 && c <= 0x2b46) ||
                        (c >= 0x2b47 && c <= 0x2b4c) ||
                        (c >= 0x2b4d && c <= 0x2b73) ||
                        (c >= 0x2b74 && c <= 0x2b75) ||
                        (c >= 0x2b76 && c <= 0x2b95) ||
                        c === 0x2b96 ||
                        (c >= 0x2b97 && c <= 0x2bff) ||
                        (c >= 0x2e00 && c <= 0x2e01) ||
                        c === 0x2e02 ||
                        c === 0x2e03 ||
                        c === 0x2e04 ||
                        c === 0x2e05 ||
                        (c >= 0x2e06 && c <= 0x2e08) ||
                        c === 0x2e09 ||
                        c === 0x2e0a ||
                        c === 0x2e0b ||
                        c === 0x2e0c ||
                        c === 0x2e0d ||
                        (c >= 0x2e0e && c <= 0x2e16) ||
                        c === 0x2e17 ||
                        (c >= 0x2e18 && c <= 0x2e19) ||
                        c === 0x2e1a ||
                        c === 0x2e1b ||
                        c === 0x2e1c ||
                        c === 0x2e1d ||
                        (c >= 0x2e1e && c <= 0x2e1f) ||
                        c === 0x2e20 ||
                        c === 0x2e21 ||
                        c === 0x2e22 ||
                        c === 0x2e23 ||
                        c === 0x2e24 ||
                        c === 0x2e25 ||
                        c === 0x2e26 ||
                        c === 0x2e27 ||
                        c === 0x2e28 ||
                        c === 0x2e29 ||
                        (c >= 0x2e2a && c <= 0x2e2e) ||
                        c === 0x2e2f ||
                        (c >= 0x2e30 && c <= 0x2e39) ||
                        (c >= 0x2e3a && c <= 0x2e3b) ||
                        (c >= 0x2e3c && c <= 0x2e3f) ||
                        c === 0x2e40 ||
                        c === 0x2e41 ||
                        c === 0x2e42 ||
                        (c >= 0x2e43 && c <= 0x2e4f) ||
                        (c >= 0x2e50 && c <= 0x2e51) ||
                        c === 0x2e52 ||
                        (c >= 0x2e53 && c <= 0x2e7f) ||
                        (c >= 0x3001 && c <= 0x3003) ||
                        c === 0x3008 ||
                        c === 0x3009 ||
                        c === 0x300a ||
                        c === 0x300b ||
                        c === 0x300c ||
                        c === 0x300d ||
                        c === 0x300e ||
                        c === 0x300f ||
                        c === 0x3010 ||
                        c === 0x3011 ||
                        (c >= 0x3012 && c <= 0x3013) ||
                        c === 0x3014 ||
                        c === 0x3015 ||
                        c === 0x3016 ||
                        c === 0x3017 ||
                        c === 0x3018 ||
                        c === 0x3019 ||
                        c === 0x301a ||
                        c === 0x301b ||
                        c === 0x301c ||
                        c === 0x301d ||
                        (c >= 0x301e && c <= 0x301f) ||
                        c === 0x3020 ||
                        c === 0x3030 ||
                        c === 0xfd3e ||
                        c === 0xfd3f ||
                        (c >= 0xfe45 && c <= 0xfe46)
                    );
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/icu-messageformat-parser/lib/index.js

                function pruneLocation(els) {
                    els.forEach(function (el) {
                        delete el.location;
                        if (isSelectElement(el) || isPluralElement(el)) {
                            for (var k in el.options) {
                                delete el.options[k].location;
                                pruneLocation(el.options[k].value);
                            }
                        } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
                            delete el.style.location;
                        } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
                            delete el.style.location;
                        } else if (isTagElement(el)) {
                            pruneLocation(el.children);
                        }
                    });
                }
                function parse(message, opts) {
                    if (opts === void 0) {
                        opts = {};
                    }
                    opts = Object(tslib_es6['__assign'])(
                        { shouldParseSkeletons: true, requiresOtherClause: true },
                        opts,
                    );
                    var result = new parser_Parser(message, opts).parse();
                    if (result.err) {
                        var error = SyntaxError(ErrorKind[result.err.kind]);
                        // @ts-expect-error Assign to error object
                        error.location = result.err.location;
                        // @ts-expect-error Assign to error object
                        error.originalMessage = result.err.message;
                        throw error;
                    }
                    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
                        pruneLocation(result.val);
                    }
                    return result.val;
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/@formatjs/fast-memoize/lib/index.js
                //
                // Main
                //
                function memoize(fn, options) {
                    var cache = options && options.cache ? options.cache : cacheDefault;
                    var serializer = options && options.serializer ? options.serializer : serializerDefault;
                    var strategy = options && options.strategy ? options.strategy : strategyDefault;
                    return strategy(fn, {
                        cache: cache,
                        serializer: serializer,
                    });
                }
                //
                // Strategy
                //
                function isPrimitive(value) {
                    return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === "string" 'unsafe' primitive for our needs
                }
                function monadic(fn, cache, serializer, arg) {
                    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
                    var computedValue = cache.get(cacheKey);
                    if (typeof computedValue === 'undefined') {
                        computedValue = fn.call(this, arg);
                        cache.set(cacheKey, computedValue);
                    }
                    return computedValue;
                }
                function variadic(fn, cache, serializer) {
                    var args = Array.prototype.slice.call(arguments, 3);
                    var cacheKey = serializer(args);
                    var computedValue = cache.get(cacheKey);
                    if (typeof computedValue === 'undefined') {
                        computedValue = fn.apply(this, args);
                        cache.set(cacheKey, computedValue);
                    }
                    return computedValue;
                }
                function assemble(fn, context, strategy, cache, serialize) {
                    return strategy.bind(context, fn, cache, serialize);
                }
                function strategyDefault(fn, options) {
                    var strategy = fn.length === 1 ? monadic : variadic;
                    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
                }
                function strategyVariadic(fn, options) {
                    return assemble(fn, this, variadic, options.cache.create(), options.serializer);
                }
                function strategyMonadic(fn, options) {
                    return assemble(fn, this, monadic, options.cache.create(), options.serializer);
                }
                //
                // Serializer
                //
                var serializerDefault = function () {
                    return JSON.stringify(arguments);
                };
                //
                // Cache
                //
                function ObjectWithoutPrototypeCache() {
                    this.cache = Object.create(null);
                }
                ObjectWithoutPrototypeCache.prototype.get = function (key) {
                    return this.cache[key];
                };
                ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
                    this.cache[key] = value;
                };
                var cacheDefault = {
                    create: function create() {
                        // @ts-ignore
                        return new ObjectWithoutPrototypeCache();
                    },
                };
                var strategies = {
                    variadic: strategyVariadic,
                    monadic: strategyMonadic,
                };

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/intl-messageformat/lib/src/error.js

                var ErrorCode;
                (function (ErrorCode) {
                    // When we have a placeholder but no value to format
                    ErrorCode['MISSING_VALUE'] = 'MISSING_VALUE';
                    // When value supplied is invalid
                    ErrorCode['INVALID_VALUE'] = 'INVALID_VALUE';
                    // When we need specific Intl API but it's not available
                    ErrorCode['MISSING_INTL_API'] = 'MISSING_INTL_API';
                })(ErrorCode || (ErrorCode = {}));
                var error_FormatError = /** @class */ (function (_super) {
                    Object(tslib_es6['__extends'])(FormatError, _super);
                    function FormatError(msg, code, originalMessage) {
                        var _this = _super.call(this, msg) || this;
                        _this.code = code;
                        _this.originalMessage = originalMessage;
                        return _this;
                    }
                    FormatError.prototype.toString = function () {
                        return '[formatjs Error: '.concat(this.code, '] ').concat(this.message);
                    };
                    return FormatError;
                })(Error);

                var error_InvalidValueError = /** @class */ (function (_super) {
                    Object(tslib_es6['__extends'])(InvalidValueError, _super);
                    function InvalidValueError(variableId, value, options, originalMessage) {
                        return (
                            _super.call(
                                this,
                                'Invalid values for "'
                                    .concat(variableId, '": "')
                                    .concat(value, '". Options are "')
                                    .concat(Object.keys(options).join('", "'), '"'),
                                ErrorCode.INVALID_VALUE,
                                originalMessage,
                            ) || this
                        );
                    }
                    return InvalidValueError;
                })(error_FormatError);

                var error_InvalidValueTypeError = /** @class */ (function (_super) {
                    Object(tslib_es6['__extends'])(InvalidValueTypeError, _super);
                    function InvalidValueTypeError(value, type, originalMessage) {
                        return (
                            _super.call(
                                this,
                                'Value for "'.concat(value, '" must be of type ').concat(type),
                                ErrorCode.INVALID_VALUE,
                                originalMessage,
                            ) || this
                        );
                    }
                    return InvalidValueTypeError;
                })(error_FormatError);

                var error_MissingValueError = /** @class */ (function (_super) {
                    Object(tslib_es6['__extends'])(MissingValueError, _super);
                    function MissingValueError(variableId, originalMessage) {
                        return (
                            _super.call(
                                this,
                                'The intl string context variable "'
                                    .concat(variableId, '" was not provided to the string "')
                                    .concat(originalMessage, '"'),
                                ErrorCode.MISSING_VALUE,
                                originalMessage,
                            ) || this
                        );
                    }
                    return MissingValueError;
                })(error_FormatError);

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/intl-messageformat/lib/src/formatters.js

                var PART_TYPE;
                (function (PART_TYPE) {
                    PART_TYPE[(PART_TYPE['literal'] = 0)] = 'literal';
                    PART_TYPE[(PART_TYPE['object'] = 1)] = 'object';
                })(PART_TYPE || (PART_TYPE = {}));
                function mergeLiteral(parts) {
                    if (parts.length < 2) {
                        return parts;
                    }
                    return parts.reduce(function (all, part) {
                        var lastPart = all[all.length - 1];
                        if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
                            all.push(part);
                        } else {
                            lastPart.value += part.value;
                        }
                        return all;
                    }, []);
                }
                function isFormatXMLElementFn(el) {
                    return typeof el === 'function';
                }
                // TODO(skeleton): add skeleton support
                function formatToParts(
                    els,
                    locales,
                    formatters,
                    formats,
                    values,
                    currentPluralValue,
                    // For debugging
                    originalMessage,
                ) {
                    // Hot path for straight simple msg translations
                    if (els.length === 1 && isLiteralElement(els[0])) {
                        return [
                            {
                                type: PART_TYPE.literal,
                                value: els[0].value,
                            },
                        ];
                    }
                    var result = [];
                    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
                        var el = els_1[_i];
                        // Exit early for string parts.
                        if (isLiteralElement(el)) {
                            result.push({
                                type: PART_TYPE.literal,
                                value: el.value,
                            });
                            continue;
                        }
                        // TODO: should this part be literal type?
                        // Replace `#` in plural rules with the actual numeric value.
                        if (isPoundElement(el)) {
                            if (typeof currentPluralValue === 'number') {
                                result.push({
                                    type: PART_TYPE.literal,
                                    value: formatters.getNumberFormat(locales).format(currentPluralValue),
                                });
                            }
                            continue;
                        }
                        var varName = el.value;
                        // Enforce that all required values are provided by the caller.
                        if (!(values && varName in values)) {
                            throw new error_MissingValueError(varName, originalMessage);
                        }
                        var value = values[varName];
                        if (isArgumentElement(el)) {
                            if (!value || typeof value === 'string' || typeof value === 'number') {
                                value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';
                            }
                            result.push({
                                type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                                value: value,
                            });
                            continue;
                        }
                        // Recursively format plural and select parts' option — which can be a
                        // nested pattern structure. The choosing of the option to use is
                        // abstracted-by and delegated-to the part helper object.
                        if (isDateElement(el)) {
                            var style =
                                typeof el.style === 'string'
                                    ? formats.date[el.style]
                                    : isDateTimeSkeleton(el.style)
                                    ? el.style.parsedOptions
                                    : undefined;
                            result.push({
                                type: PART_TYPE.literal,
                                value: formatters.getDateTimeFormat(locales, style).format(value),
                            });
                            continue;
                        }
                        if (isTimeElement(el)) {
                            var style =
                                typeof el.style === 'string'
                                    ? formats.time[el.style]
                                    : isDateTimeSkeleton(el.style)
                                    ? el.style.parsedOptions
                                    : formats.time.medium;
                            result.push({
                                type: PART_TYPE.literal,
                                value: formatters.getDateTimeFormat(locales, style).format(value),
                            });
                            continue;
                        }
                        if (isNumberElement(el)) {
                            var style =
                                typeof el.style === 'string'
                                    ? formats.number[el.style]
                                    : isNumberSkeleton(el.style)
                                    ? el.style.parsedOptions
                                    : undefined;
                            if (style && style.scale) {
                                value = value * (style.scale || 1);
                            }
                            result.push({
                                type: PART_TYPE.literal,
                                value: formatters.getNumberFormat(locales, style).format(value),
                            });
                            continue;
                        }
                        if (isTagElement(el)) {
                            var children = el.children,
                                value_1 = el.value;
                            var formatFn = values[value_1];
                            if (!isFormatXMLElementFn(formatFn)) {
                                throw new error_InvalidValueTypeError(value_1, 'function', originalMessage);
                            }
                            var parts = formatToParts(
                                children,
                                locales,
                                formatters,
                                formats,
                                values,
                                currentPluralValue,
                            );
                            var chunks = formatFn(
                                parts.map(function (p) {
                                    return p.value;
                                }),
                            );
                            if (!Array.isArray(chunks)) {
                                chunks = [chunks];
                            }
                            result.push.apply(
                                result,
                                chunks.map(function (c) {
                                    return {
                                        type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                                        value: c,
                                    };
                                }),
                            );
                        }
                        if (isSelectElement(el)) {
                            var opt = el.options[value] || el.options.other;
                            if (!opt) {
                                throw new error_InvalidValueError(
                                    el.value,
                                    value,
                                    Object.keys(el.options),
                                    originalMessage,
                                );
                            }
                            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
                            continue;
                        }
                        if (isPluralElement(el)) {
                            var opt = el.options['='.concat(value)];
                            if (!opt) {
                                if (!Intl.PluralRules) {
                                    throw new error_FormatError(
                                        'Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',
                                        ErrorCode.MISSING_INTL_API,
                                        originalMessage,
                                    );
                                }
                                var rule = formatters
                                    .getPluralRules(locales, { type: el.pluralType })
                                    .select(value - (el.offset || 0));
                                opt = el.options[rule] || el.options.other;
                            }
                            if (!opt) {
                                throw new error_InvalidValueError(
                                    el.value,
                                    value,
                                    Object.keys(el.options),
                                    originalMessage,
                                );
                            }
                            result.push.apply(
                                result,
                                formatToParts(
                                    opt.value,
                                    locales,
                                    formatters,
                                    formats,
                                    values,
                                    value - (el.offset || 0),
                                ),
                            );
                            continue;
                        }
                    }
                    return mergeLiteral(result);
                }

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/intl-messageformat/lib/src/core.js
                /*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

                // -- MessageFormat --------------------------------------------------------
                function mergeConfig(c1, c2) {
                    if (!c2) {
                        return c1;
                    }
                    return Object(tslib_es6['__assign'])(
                        Object(tslib_es6['__assign'])(Object(tslib_es6['__assign'])({}, c1 || {}), c2 || {}),
                        Object.keys(c1).reduce(function (all, k) {
                            all[k] = Object(tslib_es6['__assign'])(
                                Object(tslib_es6['__assign'])({}, c1[k]),
                                c2[k] || {},
                            );
                            return all;
                        }, {}),
                    );
                }
                function mergeConfigs(defaultConfig, configs) {
                    if (!configs) {
                        return defaultConfig;
                    }
                    return Object.keys(defaultConfig).reduce(function (all, k) {
                        all[k] = mergeConfig(defaultConfig[k], configs[k]);
                        return all;
                    }, Object(tslib_es6['__assign'])({}, defaultConfig));
                }
                function createFastMemoizeCache(store) {
                    return {
                        create: function () {
                            return {
                                get: function (key) {
                                    return store[key];
                                },
                                set: function (key, value) {
                                    store[key] = value;
                                },
                            };
                        },
                    };
                }
                function createDefaultFormatters(cache) {
                    if (cache === void 0) {
                        cache = {
                            number: {},
                            dateTime: {},
                            pluralRules: {},
                        };
                    }
                    return {
                        getNumberFormat: memoize(
                            function () {
                                var _a;
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return new ((_a = Intl.NumberFormat).bind.apply(
                                    _a,
                                    Object(tslib_es6['__spreadArray'])([void 0], args, false),
                                ))();
                            },
                            {
                                cache: createFastMemoizeCache(cache.number),
                                strategy: strategies.variadic,
                            },
                        ),
                        getDateTimeFormat: memoize(
                            function () {
                                var _a;
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return new ((_a = Intl.DateTimeFormat).bind.apply(
                                    _a,
                                    Object(tslib_es6['__spreadArray'])([void 0], args, false),
                                ))();
                            },
                            {
                                cache: createFastMemoizeCache(cache.dateTime),
                                strategy: strategies.variadic,
                            },
                        ),
                        getPluralRules: memoize(
                            function () {
                                var _a;
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return new ((_a = Intl.PluralRules).bind.apply(
                                    _a,
                                    Object(tslib_es6['__spreadArray'])([void 0], args, false),
                                ))();
                            },
                            {
                                cache: createFastMemoizeCache(cache.pluralRules),
                                strategy: strategies.variadic,
                            },
                        ),
                    };
                }
                var core_IntlMessageFormat = /** @class */ (function () {
                    function IntlMessageFormat(message, locales, overrideFormats, opts) {
                        var _this = this;
                        if (locales === void 0) {
                            locales = IntlMessageFormat.defaultLocale;
                        }
                        this.formatterCache = {
                            number: {},
                            dateTime: {},
                            pluralRules: {},
                        };
                        this.format = function (values) {
                            var parts = _this.formatToParts(values);
                            // Hot path for straight simple msg translations
                            if (parts.length === 1) {
                                return parts[0].value;
                            }
                            var result = parts.reduce(function (all, part) {
                                if (
                                    !all.length ||
                                    part.type !== PART_TYPE.literal ||
                                    typeof all[all.length - 1] !== 'string'
                                ) {
                                    all.push(part.value);
                                } else {
                                    all[all.length - 1] += part.value;
                                }
                                return all;
                            }, []);
                            if (result.length <= 1) {
                                return result[0] || '';
                            }
                            return result;
                        };
                        this.formatToParts = function (values) {
                            return formatToParts(
                                _this.ast,
                                _this.locales,
                                _this.formatters,
                                _this.formats,
                                values,
                                undefined,
                                _this.message,
                            );
                        };
                        this.resolvedOptions = function () {
                            return {
                                locale: _this.resolvedLocale.toString(),
                            };
                        };
                        this.getAst = function () {
                            return _this.ast;
                        };
                        // Defined first because it's used to build the format pattern.
                        this.locales = locales;
                        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);
                        if (typeof message === 'string') {
                            this.message = message;
                            if (!IntlMessageFormat.__parse) {
                                throw new TypeError(
                                    'IntlMessageFormat.__parse must be set to process `message` of type `string`',
                                );
                            }
                            // Parse string messages into an AST.
                            this.ast = IntlMessageFormat.__parse(message, {
                                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
                                locale: this.resolvedLocale,
                            });
                        } else {
                            this.ast = message;
                        }
                        if (!Array.isArray(this.ast)) {
                            throw new TypeError('A message must be provided as a String or AST.');
                        }
                        // Creates a new object with the specified `formats` merged with the default
                        // formats.
                        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
                        this.formatters = (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
                    }
                    Object.defineProperty(IntlMessageFormat, 'defaultLocale', {
                        get: function () {
                            if (!IntlMessageFormat.memoizedDefaultLocale) {
                                IntlMessageFormat.memoizedDefaultLocale =
                                    new Intl.NumberFormat().resolvedOptions().locale;
                            }
                            return IntlMessageFormat.memoizedDefaultLocale;
                        },
                        enumerable: false,
                        configurable: true,
                    });
                    IntlMessageFormat.memoizedDefaultLocale = null;
                    IntlMessageFormat.resolveLocale = function (locales) {
                        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
                        if (supportedLocales.length > 0) {
                            return new Intl.Locale(supportedLocales[0]);
                        }
                        return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);
                    };
                    IntlMessageFormat.__parse = parse;
                    // Default format options used as the prototype of the `formats` provided to the
                    // constructor. These are used when constructing the internal Intl.NumberFormat
                    // and Intl.DateTimeFormat instances.
                    IntlMessageFormat.formats = {
                        number: {
                            integer: {
                                maximumFractionDigits: 0,
                            },
                            currency: {
                                style: 'currency',
                            },
                            percent: {
                                style: 'percent',
                            },
                        },
                        date: {
                            short: {
                                month: 'numeric',
                                day: 'numeric',
                                year: '2-digit',
                            },
                            medium: {
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric',
                            },
                            long: {
                                month: 'long',
                                day: 'numeric',
                                year: 'numeric',
                            },
                            full: {
                                weekday: 'long',
                                month: 'long',
                                day: 'numeric',
                                year: 'numeric',
                            },
                        },
                        time: {
                            short: {
                                hour: 'numeric',
                                minute: 'numeric',
                            },
                            medium: {
                                hour: 'numeric',
                                minute: 'numeric',
                                second: 'numeric',
                            },
                            long: {
                                hour: 'numeric',
                                minute: 'numeric',
                                second: 'numeric',
                                timeZoneName: 'short',
                            },
                            full: {
                                hour: 'numeric',
                                minute: 'numeric',
                                second: 'numeric',
                                timeZoneName: 'short',
                            },
                        },
                    };
                    return IntlMessageFormat;
                })();

                // CONCATENATED MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/intl-messageformat/lib/index.js
                /*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

                /* harmony default export */ var lib = core_IntlMessageFormat;

                // EXTERNAL MODULE: ../renderer-core/package.json
                var renderer_core_package = __webpack_require__(46);

                // CONCATENATED MODULE: ../renderer-core/src/utils/common.ts
                function common_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (common_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        common_typeof(o)
                    );
                }
                /* eslint-disable no-console */
                /* eslint-disable no-new-func */

                window.sdkVersion = renderer_core_package.version;

                var EXPRESSION_TYPE = {
                    JSEXPRESSION: 'JSExpression',
                    JSFUNCTION: 'JSFunction',
                    JSSLOT: 'JSSlot',
                    JSBLOCK: 'JSBlock',
                    I18N: 'i18n',
                };
                /**
                 * check if schema passed in is a valid schema
                 * @name isSchema
                 * @returns boolean
                 */
                function isSchema(schema) {
                    if (Object(lodash['isEmpty'])(schema)) {
                        return false;
                    }
                    // Leaf and Slot should be valid
                    if (schema.componentName === 'Leaf' || schema.componentName === 'Slot') {
                        return true;
                    }
                    if (Array.isArray(schema)) {
                        return schema.every(function (item) {
                            return isSchema(item);
                        });
                    }
                    // check if props is valid
                    var isValidProps = function isValidProps(props) {
                        if (!props) {
                            return false;
                        }
                        if (isJSExpression(props)) {
                            return true;
                        }
                        return common_typeof(schema.props) === 'object' && !Array.isArray(props);
                    };
                    return !!(schema.componentName && isValidProps(schema.props));
                }
                /**
                 * check if schema passed in is a container type, including : Component Block Page
                 * @param schema
                 * @returns boolean
                 */
                function isFileSchema(schema) {
                    if (!isSchema(schema)) {
                        return false;
                    }
                    return ['Page', 'Block', 'Component'].includes(schema.componentName);
                }
                /**
                 * check if current page is nested within another page with same host
                 * @returns boolean
                 */
                function inSameDomain() {
                    try {
                        return window.parent !== window && window.parent.location.host === window.location.host;
                    } catch (e) {
                        return false;
                    }
                }
                /**
                 * get css styled name from schema`s fileName
                 * FileName -> lce-file-name
                 * @returns string
                 */
                function getFileCssName(fileName) {
                    if (!fileName) {
                        return;
                    }
                    var name = fileName.replace(/([A-Z])/g, '-$1').toLowerCase();
                    return 'lce-'
                        .concat(name)
                        .split('-')
                        .filter(function (p) {
                            return !!p;
                        })
                        .join('-');
                }
                /**
                 * check if a object is type of JSSlot
                 * @returns string
                 */
                function common_isJSSlot(obj) {
                    if (!obj) {
                        return false;
                    }
                    if (common_typeof(obj) !== 'object' || Array.isArray(obj)) {
                        return false;
                    }
                    // Compatible with the old protocol JSBlock
                    return [EXPRESSION_TYPE.JSSLOT, EXPRESSION_TYPE.JSBLOCK].includes(obj.type);
                }
                /**
                 * get value from an object
                 * @returns string
                 */
                function getValue(obj, path) {
                    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    // array is not valid type, return default value
                    if (Array.isArray(obj)) {
                        return defaultValue;
                    }
                    if (Object(lodash['isEmpty'])(obj) || common_typeof(obj) !== 'object') {
                        return defaultValue;
                    }
                    var res = path.split('.').reduce(function (pre, cur) {
                        return pre && pre[cur];
                    }, obj);
                    if (res === undefined) {
                        return defaultValue;
                    }
                    return res;
                }
                /**
                 * 用于处理国际化字符串
                 * @param {*} key 语料标识
                 * @param {*} values 字符串模版变量
                 * @param {*} locale 国际化标识，例如 zh-CN、en-US
                 * @param {*} messages 国际化语言包
                 */
                function getI18n(key) {
                    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'zh-CN';
                    var messages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                    if (!messages || !messages[locale] || !messages[locale][key]) {
                        return '';
                    }
                    var formater = new lib(messages[locale][key], locale);
                    return formater.format(values);
                }
                /**
                 * 判断当前组件是否能够设置ref
                 * @param {*} Comp 需要判断的组件
                 */
                function canAcceptsRef(Comp) {
                    var _Comp$prototype, _Comp$prototype2;
                    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                    // eslint-disable-next-line max-len
                    return (
                        (Comp === null || Comp === void 0 ? void 0 : Comp.$$typeof) === REACT_FORWARD_REF_TYPE ||
                        (Comp === null || Comp === void 0
                            ? void 0
                            : (_Comp$prototype = Comp.prototype) === null || _Comp$prototype === void 0
                            ? void 0
                            : _Comp$prototype.isReactComponent) ||
                        (Comp === null || Comp === void 0
                            ? void 0
                            : (_Comp$prototype2 = Comp.prototype) === null || _Comp$prototype2 === void 0
                            ? void 0
                            : _Comp$prototype2.setState) ||
                        Comp._forwardRef
                    );
                }
                /**
                 * transform array to a object
                 * @param arr array to be transformed
                 * @param key key of array item, which`s value will be used as key in result map
                 * @param overwrite overwrite existing item in result or not
                 * @returns object result map
                 */
                function transformArrayToMap(arr, key) {
                    var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                    if (Object(lodash['isEmpty'])(arr) || !Array.isArray(arr)) {
                        return {};
                    }
                    var res = {};
                    arr.forEach(function (item) {
                        var curKey = item[key];
                        if (item[key] === undefined) {
                            return;
                        }
                        if (res[curKey] && !overwrite) {
                            return;
                        }
                        res[curKey] = item;
                    });
                    return res;
                }
                /**
                 * transform string to a function
                 * @param str function in string form
                 * @returns funtion
                 */
                function transformStringToFunction(str) {
                    if (typeof str !== 'string') {
                        return str;
                    }
                    if (inSameDomain() && window.parent.__newFunc) {
                        return window.parent.__newFunc('"use strict"; return '.concat(str))();
                    } else {
                        return new Function('"use strict"; return '.concat(str))();
                    }
                }
                function parseExpression(a, b) {
                    var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                    var str;
                    var self;
                    var thisRequired;
                    var logScope;
                    if (common_typeof(a) === 'object' && b === undefined) {
                        str = a.str;
                        self = a.self;
                        thisRequired = a.thisRequired;
                        logScope = a.logScope;
                    } else {
                        str = a;
                        self = b;
                        thisRequired = c;
                    }
                    try {
                        var contextArr = ['"use strict";', 'var __self = arguments[0];'];
                        contextArr.push('return ');
                        var tarStr;
                        tarStr = (str.value || '').trim();
                        // NOTE: use __self replace 'this' in the original function str
                        // may be wrong in extreme case which contains '__self' already
                        tarStr = tarStr.replace(/this(\W|$)/g, function (_a, b) {
                            return '__self'.concat(b);
                        });
                        tarStr = contextArr.join('\n') + tarStr;
                        // 默认调用顶层窗口的parseObj, 保障new Function的window对象是顶层的window对象
                        if (inSameDomain() && window.parent.__newFunc) {
                            return window.parent.__newFunc(tarStr)(self);
                        }
                        var code = 'with('.concat(thisRequired ? '{}' : '$scope || {}', ') { ').concat(tarStr, ' }');
                        return new Function('$scope', code)(self);
                    } catch (err) {
                        var _self$__self, _self;
                        utils_logger.error(
                            ''.concat(logScope || '', ' parseExpression.error'),
                            err,
                            str,
                            (_self$__self = (_self = self) === null || _self === void 0 ? void 0 : _self.__self) !==
                                null && _self$__self !== void 0
                                ? _self$__self
                                : self,
                        );
                        return undefined;
                    }
                }

                function parseThisRequiredExpression(str, self) {
                    return parseExpression(str, self, true);
                }
                /**
                 * capitalize first letter
                 * @param word string to be proccessed
                 * @returns string capitalized string
                 */
                function capitalizeFirstLetter(word) {
                    if (!word || !common_isString(word) || word.length === 0) {
                        return word;
                    }
                    return word[0].toUpperCase() + word.slice(1);
                }
                /**
                 * check str passed in is a string type of not
                 * @param str obj to be checked
                 * @returns boolean
                 */
                function common_isString(str) {
                    return {}.toString.call(str) === '[object String]';
                }
                /**
                 * check if obj is type of variable structure
                 * @param obj object to be checked
                 * @returns boolean
                 */
                function common_isVariable(obj) {
                    if (!obj || Array.isArray(obj)) {
                        return false;
                    }
                    return (
                        common_typeof(obj) === 'object' &&
                        (obj === null || obj === void 0 ? void 0 : obj.type) === 'variable'
                    );
                }
                /**
                 * 将 i18n 结构，降级解释为对 i18n 接口的调用
                 * @param i18nInfo object
                 * @param self context
                 */
                function parseI18n(i18nInfo, self) {
                    return parseExpression(
                        {
                            type: EXPRESSION_TYPE.JSEXPRESSION,
                            value: "this.i18n('".concat(i18nInfo.key, "')"),
                        },
                        self,
                    );
                }
                /**
                 * for each key in targetObj, run fn with the value of the value, and the context paased in.
                 * @param targetObj object that keys will be for each
                 * @param fn function that process each item
                 * @param context
                 */
                function forEach(targetObj, fn, context) {
                    if (
                        !targetObj ||
                        Array.isArray(targetObj) ||
                        common_isString(targetObj) ||
                        common_typeof(targetObj) !== 'object'
                    ) {
                        return;
                    }
                    Object.keys(targetObj).forEach(function (key) {
                        return fn.call(context, targetObj[key], key);
                    });
                }
                function parseData(schema, self) {
                    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    if (isJSExpression(schema)) {
                        return parseExpression({
                            str: schema,
                            self: self,
                            thisRequired: options.thisRequiredInJSE,
                            logScope: options.logScope,
                        });
                    } else if (isI18nData(schema)) {
                        return parseI18n(schema, self);
                    } else if (typeof schema === 'string') {
                        return schema.trim();
                    } else if (Array.isArray(schema)) {
                        return schema.map(function (item) {
                            return parseData(item, self, options);
                        });
                    } else if (typeof schema === 'function') {
                        return schema.bind(self);
                    } else if (common_typeof(schema) === 'object') {
                        // 对于undefined及null直接返回
                        if (!schema) {
                            return schema;
                        }
                        var res = {};
                        forEach(schema, function (val, key) {
                            if (key.startsWith('__')) {
                                return;
                            }
                            res[key] = parseData(val, self, options);
                        });
                        return res;
                    }
                    return schema;
                }
                /**
                 * process params for using in a url query
                 * @param obj params to be processed
                 * @returns string
                 */
                function serializeParams(obj) {
                    var result = [];
                    forEach(obj, function (val, key) {
                        if (val === null || val === undefined || val === '') {
                            return;
                        }
                        if (common_typeof(val) === 'object') {
                            result.push(''.concat(key, '=').concat(encodeURIComponent(JSON.stringify(val))));
                        } else {
                            result.push(''.concat(key, '=').concat(encodeURIComponent(val)));
                        }
                    });
                    return result.join('&');
                }
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/whatwg-fetch/fetch.js
                var whatwg_fetch_fetch = __webpack_require__(131);

                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/fetch-jsonp/build/fetch-jsonp.js
                var fetch_jsonp = __webpack_require__(47);
                var fetch_jsonp_default = /*#__PURE__*/ __webpack_require__.n(fetch_jsonp);

                // CONCATENATED MODULE: ../renderer-core/src/utils/request.ts
                function request_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (request_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        request_typeof(o)
                    );
                }
                function request_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function request_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? request_ownKeys(Object(t), !0).forEach(function (r) {
                                  request_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : request_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function request_defineProperty(e, r, t) {
                    return (
                        (r = request_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function request_toPropertyKey(t) {
                    var i = request_toPrimitive(t, 'string');
                    return 'symbol' == request_typeof(i) ? i : i + '';
                }
                function request_toPrimitive(t, r) {
                    if ('object' != request_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != request_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                /**
                 * this is a private method, export for testing purposes only.
                 *
                 * @export
                 * @param {*} dataAPI
                 * @param {*} params
                 * @returns
                 */
                function buildUrl(dataAPI, params) {
                    var paramStr = serializeParams(params);
                    if (paramStr) {
                        return dataAPI.indexOf('?') > 0
                            ? ''.concat(dataAPI, '&').concat(paramStr)
                            : ''.concat(dataAPI, '?').concat(paramStr);
                    }
                    return dataAPI;
                }
                /**
                 * do Get request
                 *
                 * @export
                 * @param {*} dataAPI
                 * @param {*} [params={}]
                 * @param {*} [headers={}]
                 * @param {*} [otherProps={}]
                 * @returns
                 */
                function request_get(dataAPI) {
                    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    var otherProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                    var processedHeaders = request_objectSpread(
                        {
                            Accept: 'application/json',
                        },
                        headers,
                    );
                    var url = buildUrl(dataAPI, params);
                    return request(url, 'GET', null, processedHeaders, otherProps);
                }
                /**
                 * do Post request
                 *
                 * @export
                 * @param {*} dataAPI
                 * @param {*} [params={}]
                 * @param {*} [headers={}]
                 * @param {*} [otherProps={}]
                 * @returns
                 */
                function post(dataAPI) {
                    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    var otherProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                    var processedHeaders = request_objectSpread(
                        {
                            Accept: 'application/json',
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        headers,
                    );
                    var body =
                        processedHeaders['Content-Type'].indexOf('application/json') > -1 || Array.isArray(params)
                            ? JSON.stringify(params)
                            : serializeParams(params);
                    return request(dataAPI, 'POST', body, processedHeaders, otherProps);
                }
                /**
                 * do request
                 *
                 * @export
                 * @param {*} dataAPI
                 * @param {string} [method='GET']
                 * @param {*} data
                 * @param {*} [headers={}]
                 * @param {*} [otherProps={}]
                 * @returns
                 */
                function request(dataAPI) {
                    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
                    var data = arguments.length > 2 ? arguments[2] : undefined;
                    var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                    var otherProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
                    var processedHeaders = headers || {};
                    var payload = data;
                    if (method === 'PUT' || method === 'DELETE') {
                        processedHeaders = request_objectSpread(
                            {
                                Accept: 'application/json',
                                'Content-Type': 'application/json',
                            },
                            processedHeaders,
                        );
                        payload = JSON.stringify(payload || {});
                    }
                    return new Promise(function (resolve, reject) {
                        if (otherProps.timeout) {
                            setTimeout(function () {
                                reject(new Error('timeout'));
                            }, otherProps.timeout);
                        }
                        fetch(
                            dataAPI,
                            request_objectSpread(
                                {
                                    method: method,
                                    credentials: 'include',
                                    headers: processedHeaders,
                                    body: payload,
                                },
                                otherProps,
                            ),
                        )
                            .then(function (response) {
                                switch (response.status) {
                                    case 200:
                                    case 201:
                                    case 202:
                                        return response.json();
                                    case 204:
                                        if (method === 'DELETE') {
                                            return {
                                                success: true,
                                            };
                                        } else {
                                            return {
                                                __success: false,
                                                code: response.status,
                                            };
                                        }
                                    case 400:
                                    case 401:
                                    case 403:
                                    case 404:
                                    case 406:
                                    case 410:
                                    case 422:
                                    case 500:
                                        return response
                                            .json()
                                            .then(function (res) {
                                                return {
                                                    __success: false,
                                                    code: response.status,
                                                    data: res,
                                                };
                                            })
                                            .catch(function () {
                                                return {
                                                    __success: false,
                                                    code: response.status,
                                                };
                                            });
                                    default:
                                }
                                return null;
                            })
                            .then(function (json) {
                                if (!json) {
                                    reject(json);
                                    return;
                                }
                                if (json.__success !== false) {
                                    resolve(json);
                                } else {
                                    // eslint-disable-next-line no-param-reassign
                                    delete json.__success;
                                    reject(json);
                                }
                            })
                            .catch(function (err) {
                                reject(err);
                            });
                    });
                }
                /**
                 * do jsonp request
                 *
                 * @export
                 * @param {*} dataAPI
                 * @param {*} [params={}]
                 * @param {*} [otherProps={}]
                 * @returns
                 */
                function jsonp(dataAPI) {
                    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var otherProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    return new Promise(function (resolve, reject) {
                        var processedOtherProps = request_objectSpread(
                            {
                                timeout: 5000,
                            },
                            otherProps,
                        );
                        var url = buildUrl(dataAPI, params);
                        fetch_jsonp_default()(url, processedOtherProps)
                            .then(function (response) {
                                response.json();
                            })
                            .then(function (json) {
                                if (json) {
                                    resolve(json);
                                } else {
                                    reject();
                                }
                            })
                            .catch(function (err) {
                                reject(err);
                            });
                    });
                }
                // CONCATENATED MODULE: ../renderer-core/src/utils/data-helper.ts
                function data_helper_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (data_helper_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        data_helper_typeof(o)
                    );
                }
                var data_helper_excluded = ['uri', 'url', 'method', 'headers', 'params'],
                    _excluded2 = ['headers'];
                function data_helper_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function data_helper_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? data_helper_ownKeys(Object(t), !0).forEach(function (r) {
                                  data_helper_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : data_helper_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function data_helper_defineProperty(e, r, t) {
                    return (
                        (r = data_helper_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function data_helper_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function data_helper_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, data_helper_toPropertyKey(o.key), o);
                    }
                }
                function data_helper_createClass(e, r, t) {
                    return (
                        r && data_helper_defineProperties(e.prototype, r),
                        t && data_helper_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function data_helper_toPropertyKey(t) {
                    var i = data_helper_toPrimitive(t, 'string');
                    return 'symbol' == data_helper_typeof(i) ? i : i + '';
                }
                function data_helper_toPrimitive(t, r) {
                    if ('object' != data_helper_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != data_helper_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function data_helper_objectWithoutProperties(e, t) {
                    if (null == e) return {};
                    var o,
                        r,
                        i = data_helper_objectWithoutPropertiesLoose(e, t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(e);
                        for (r = 0; r < n.length; r++)
                            (o = n[r]), -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                    }
                    return i;
                }
                function data_helper_objectWithoutPropertiesLoose(r, e) {
                    if (null == r) return {};
                    var t = {};
                    for (var n in r)
                        if ({}.hasOwnProperty.call(r, n)) {
                            if (-1 !== e.indexOf(n)) continue;
                            t[n] = r[n];
                        }
                    return t;
                }
                /* eslint-disable no-console */
                /* eslint-disable max-len */
                /* eslint-disable object-curly-newline */

                var DS_STATUS = {
                    INIT: 'init',
                    LOADING: 'loading',
                    LOADED: 'loaded',
                    ERROR: 'error',
                };
                /**
                 * do request for standard DataSourceType
                 * @param {DataSourceType} type type of DataSourceItem
                 * @param {any} options
                 */
                function doRequest(type, options) {
                    // eslint-disable-next-line prefer-const
                    var uri = options.uri,
                        url = options.url,
                        _options$method = options.method,
                        method = _options$method === void 0 ? 'GET' : _options$method,
                        headers = options.headers,
                        params = options.params,
                        otherProps = data_helper_objectWithoutProperties(options, data_helper_excluded);
                    otherProps = otherProps || {};
                    if (type === 'jsonp') {
                        return jsonp(uri, params, otherProps);
                    }
                    if (type === 'fetch') {
                        switch (method.toUpperCase()) {
                            case 'GET':
                                return request_get(uri, params, headers, otherProps);
                            case 'POST':
                                return post(uri, params, headers, otherProps);
                            default:
                                return request(uri, method, params, headers, otherProps);
                        }
                    }
                    utils_logger.log(
                        'Engine default dataSource does not support type:['.concat(type, '] dataSource request!'),
                        options,
                    );
                }
                // TODO: according to protocol, we should implement errorHandler/shouldFetch/willFetch/requestHandler and isSync controll.
                var data_helper_DataHelper = /*#__PURE__*/ (function () {
                    /**
                     * host object that will be "this" object when excuting dataHandler
                     *
                     * @type {*}
                     * @memberof DataHelper
                     */

                    /**
                     * data source config
                     *
                     * @type {DataSource}
                     * @memberof DataHelper
                     */

                    /**
                     * a parser function which will be called to process config data
                     * which eventually will call common/utils.processData() to process data
                     * (originalConfig) => parsedConfig
                     * @type {*}
                     * @memberof DataHelper
                     */

                    /**
                     * config.list
                     *
                     * @type {any[]}
                     * @memberof DataHelper
                     */

                    function DataHelper(comp, config, appHelper, parser) {
                        data_helper_classCallCheck(this, DataHelper);
                        this.host = comp;
                        this.config = config || {};
                        this.parser = parser;
                        this.ajaxList = (config === null || config === void 0 ? void 0 : config.list) || [];
                        this.ajaxMap = transformArrayToMap(this.ajaxList, 'id');
                        this.dataSourceMap = this.generateDataSourceMap();
                        this.appHelper = appHelper;
                    }
                    // 更新config，只会更新配置，状态保存；
                    return data_helper_createClass(DataHelper, [
                        {
                            key: 'updateConfig',
                            value: function updateConfig() {
                                var _this = this;
                                var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                                this.config = config;
                                this.ajaxList = (config === null || config === void 0 ? void 0 : config.list) || [];
                                var ajaxMap = transformArrayToMap(this.ajaxList, 'id');
                                // 删除已经移除的接口
                                Object.keys(this.ajaxMap).forEach(function (key) {
                                    if (!ajaxMap[key]) {
                                        delete _this.dataSourceMap[key];
                                    }
                                });
                                this.ajaxMap = ajaxMap;
                                // 添加未加入到dataSourceMap中的接口
                                this.ajaxList.forEach(function (item) {
                                    if (!_this.dataSourceMap[item.id]) {
                                        _this.dataSourceMap[item.id] = {
                                            status: DS_STATUS.INIT,
                                            load: function load() {
                                                for (
                                                    var _len = arguments.length, args = new Array(_len), _key = 0;
                                                    _key < _len;
                                                    _key++
                                                ) {
                                                    args[_key] = arguments[_key];
                                                }
                                                // @ts-ignore
                                                return _this.getDataSource.apply(_this, [item.id].concat(args));
                                            },
                                        };
                                    }
                                });
                                return this.dataSourceMap;
                            },
                        },
                        {
                            key: 'generateDataSourceMap',
                            value: function generateDataSourceMap() {
                                var _this2 = this;
                                var res = {};
                                this.ajaxList.forEach(function (item) {
                                    res[item.id] = {
                                        status: DS_STATUS.INIT,
                                        load: function load() {
                                            for (
                                                var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
                                                _key2 < _len2;
                                                _key2++
                                            ) {
                                                args[_key2] = arguments[_key2];
                                            }
                                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                            // @ts-ignore
                                            return _this2.getDataSource.apply(_this2, [item.id].concat(args));
                                        },
                                    };
                                });
                                return res;
                            },
                        },
                        {
                            key: 'updateDataSourceMap',
                            value: function updateDataSourceMap(id, data, error) {
                                this.dataSourceMap[id].error = error || undefined;
                                this.dataSourceMap[id].data = data;
                                this.dataSourceMap[id].status = error ? DS_STATUS.ERROR : DS_STATUS.LOADED;
                            },
                            /**
                             * get all dataSourceItems which marked as isInit === true
                             * @private
                             * @returns
                             * @memberof DataHelper
                             */
                        },
                        {
                            key: 'getInitDataSourseConfigs',
                            value: function getInitDataSourseConfigs() {
                                var _this3 = this;
                                var initConfigs = this.parser(this.ajaxList).filter(function (item) {
                                    // according to [spec](https://lowcode-engine.cn/lowcode), isInit should be boolean true to be working
                                    if (item.isInit === true) {
                                        _this3.dataSourceMap[item.id].status = DS_STATUS.LOADING;
                                        return true;
                                    }
                                    return false;
                                });
                                return initConfigs;
                            },
                            /**
                             * process all dataSourceItems which marked as isInit === true, and get dataSource request results.
                             * @public
                             * @returns
                             * @memberof DataHelper
                             */
                        },
                        {
                            key: 'getInitData',
                            value: function getInitData() {
                                var _this4 = this;
                                var initSyncData = this.getInitDataSourseConfigs();
                                // 所有 datasource 的 datahandler
                                return this.asyncDataHandler(initSyncData).then(function (res) {
                                    var dataHandler = _this4.config.dataHandler;
                                    return _this4.handleData(null, dataHandler, res, null);
                                });
                            },
                        },
                        {
                            key: 'getDataSource',
                            value: function getDataSource(id, params, otherOptions, callback) {
                                var req = this.parser(this.ajaxMap[id]);
                                var options = req.options || {};
                                var callbackFn = callback;
                                var otherOptionsObj = otherOptions;
                                if (typeof otherOptions === 'function') {
                                    callbackFn = otherOptions;
                                    otherOptionsObj = {};
                                }
                                var _ref = otherOptionsObj || {},
                                    headers = _ref.headers,
                                    otherProps = data_helper_objectWithoutProperties(_ref, _excluded2);
                                if (!req) {
                                    utils_logger.warn('getDataSource API named '.concat(id, ' not exist'));
                                    return;
                                }
                                return this.asyncDataHandler([
                                    data_helper_objectSpread(
                                        data_helper_objectSpread({}, req),
                                        {},
                                        {
                                            options: data_helper_objectSpread(
                                                data_helper_objectSpread({}, options),
                                                {},
                                                {
                                                    // 支持参数为array的情况，当参数为array时，不做参数合并
                                                    params:
                                                        Array.isArray(options.params) || Array.isArray(params)
                                                            ? params || options.params
                                                            : data_helper_objectSpread(
                                                                  data_helper_objectSpread({}, options.params),
                                                                  params,
                                                              ),
                                                    headers: data_helper_objectSpread(
                                                        data_helper_objectSpread({}, options.headers),
                                                        headers,
                                                    ),
                                                },
                                                otherProps,
                                            ),
                                        },
                                    ),
                                ])
                                    .then(function (res) {
                                        try {
                                            callbackFn && callbackFn(res && res[id]);
                                        } catch (e) {
                                            utils_logger.error('load请求回调函数报错', e);
                                        }
                                        return res && res[id];
                                    })
                                    .catch(function (err) {
                                        try {
                                            callbackFn && callbackFn(null, err);
                                        } catch (e) {
                                            utils_logger.error('load请求回调函数报错', e);
                                        }
                                        return err;
                                    });
                            },
                        },
                        {
                            key: 'asyncDataHandler',
                            value: function asyncDataHandler(asyncDataList) {
                                var _this5 = this;
                                return new Promise(function (resolve, reject) {
                                    var allReq = [];
                                    asyncDataList.forEach(function (req) {
                                        var id = req.id,
                                            type = req.type;
                                        // TODO: need refactoring to remove 'legao' related logic
                                        if (!id || !type || type === 'legao') {
                                            return;
                                        }
                                        allReq.push(req);
                                    });
                                    if (allReq.length === 0) {
                                        resolve({});
                                    }
                                    var res = {};
                                    Promise.all(
                                        allReq.map(function (item) {
                                            return new Promise(function (innerResolve) {
                                                var type = item.type,
                                                    id = item.id,
                                                    dataHandler = item.dataHandler,
                                                    options = item.options;
                                                var fetchHandler = function fetchHandler(data, error) {
                                                    res[id] = _this5.handleData(id, dataHandler, data, error);
                                                    _this5.updateDataSourceMap(id, res[id], error);
                                                    innerResolve({});
                                                };
                                                var doFetch = function doFetch(innerType, innerOptions) {
                                                    var _doRequest;
                                                    (_doRequest = doRequest(innerType, innerOptions)) === null ||
                                                    _doRequest === void 0
                                                        ? void 0
                                                        : _doRequest
                                                              .then(function (data) {
                                                                  fetchHandler(data, undefined);
                                                              })
                                                              .catch(function (err) {
                                                                  fetchHandler(undefined, err);
                                                              });
                                                };
                                                _this5.dataSourceMap[id].status = DS_STATUS.LOADING;
                                                doFetch(type, options);
                                            });
                                        }),
                                    )
                                        .then(function () {
                                            resolve(res);
                                        })
                                        .catch(function (e) {
                                            reject(e);
                                        });
                                });
                            },
                            /**
                             * process data using dataHandler
                             *
                             * @param {(string | null)} id request id, will be used in error message, can be null
                             * @param {*} dataHandler
                             * @param {*} data
                             * @param {*} error
                             * @returns
                             * @memberof DataHelper
                             */
                        },
                        {
                            key: 'handleData',
                            value: function handleData(id, dataHandler, data, error) {
                                var dataHandlerFun = dataHandler;
                                if (isJSFunction(dataHandler)) {
                                    dataHandlerFun = transformStringToFunction(dataHandler.value);
                                }
                                if (!dataHandlerFun || typeof dataHandlerFun !== 'function') {
                                    return data;
                                }
                                try {
                                    return dataHandlerFun.call(this.host, data, error);
                                } catch (e) {
                                    if (id) {
                                        utils_logger.error(
                                            '['.concat(
                                                id,
                                                ']\u5355\u4E2A\u8BF7\u6C42\u6570\u636E\u5904\u7406\u51FD\u6570\u8FD0\u884C\u51FA\u9519',
                                            ),
                                            e,
                                        );
                                    } else {
                                        utils_logger.error('请求数据处理函数运行出错', e);
                                    }
                                }
                            },
                        },
                    ]);
                })();
                // CONCATENATED MODULE: ../renderer-core/src/utils/index.ts

                // CONCATENATED MODULE: ../renderer-core/src/hoc/index.tsx
                function hoc_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (hoc_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        hoc_typeof(o)
                    );
                }
                function hoc_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function hoc_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, hoc_toPropertyKey(o.key), o);
                    }
                }
                function hoc_createClass(e, r, t) {
                    return (
                        r && hoc_defineProperties(e.prototype, r),
                        t && hoc_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function hoc_callSuper(t, o, e) {
                    return (
                        (o = hoc_getPrototypeOf(o)),
                        hoc_possibleConstructorReturn(
                            t,
                            hoc_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], hoc_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function hoc_possibleConstructorReturn(t, e) {
                    if (e && ('object' == hoc_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return hoc_assertThisInitialized(t);
                }
                function hoc_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function hoc_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (hoc_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function hoc_getPrototypeOf(t) {
                    return (
                        (hoc_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        hoc_getPrototypeOf(t)
                    );
                }
                function hoc_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && hoc_setPrototypeOf(t, e);
                }
                function hoc_setPrototypeOf(t, e) {
                    return (
                        (hoc_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        hoc_setPrototypeOf(t, e)
                    );
                }
                function hoc_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function hoc_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? hoc_ownKeys(Object(t), !0).forEach(function (r) {
                                  hoc_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : hoc_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function hoc_defineProperty(e, r, t) {
                    return (
                        (r = hoc_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function hoc_toPropertyKey(t) {
                    var i = hoc_toPrimitive(t, 'string');
                    return 'symbol' == hoc_typeof(i) ? i : i + '';
                }
                function hoc_toPrimitive(t, r) {
                    if ('object' != hoc_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != hoc_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function patchDidCatch(Comp, _ref) {
                    var baseRenderer = _ref.baseRenderer;
                    if (Comp.patchedCatch) {
                        return;
                    }
                    Comp.patchedCatch = true;
                    var _adapter$getRuntime = adapter.getRuntime(),
                        PureComponent = _adapter$getRuntime.PureComponent;
                    // Rax 的 getDerivedStateFromError 有 BUG，这里先用 componentDidCatch 来替代
                    // @see https://github.com/alibaba/rax/issues/2211
                    var originalDidCatch = Comp.prototype.componentDidCatch;
                    Comp.prototype.componentDidCatch = function didCatch(error, errorInfo) {
                        this.setState({
                            engineRenderError: true,
                            error: error,
                        });
                        if (originalDidCatch && typeof originalDidCatch === 'function') {
                            originalDidCatch.call(this, error, errorInfo);
                        }
                    };
                    var engine = baseRenderer.context.engine;
                    var originRender = Comp.prototype.render;
                    Comp.prototype.render = function () {
                        if (this.state && this.state.engineRenderError) {
                            this.state.engineRenderError = false;
                            return engine.createElement(
                                engine.getFaultComponent(),
                                hoc_objectSpread(
                                    hoc_objectSpread({}, this.props),
                                    {},
                                    {
                                        error: this.state.error,
                                        componentName: this.props._componentName,
                                    },
                                ),
                            );
                        }
                        return originRender.call(this);
                    };
                    if (!(Comp.prototype instanceof PureComponent)) {
                        var originShouldComponentUpdate = Comp.prototype.shouldComponentUpdate;
                        Comp.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                            if (nextState && nextState.engineRenderError) {
                                return true;
                            }
                            return originShouldComponentUpdate
                                ? originShouldComponentUpdate.call(this, nextProps, nextState)
                                : true;
                        };
                    }
                }
                var hoc_cache = new Map();
                function compWrapper(Comp, options) {
                    var _Comp$prototype, _Comp$prototype2, _cache$get;
                    var _adapter$getRuntime2 = adapter.getRuntime(),
                        createElement = _adapter$getRuntime2.createElement,
                        Component = _adapter$getRuntime2.Component,
                        forwardRef = _adapter$getRuntime2.forwardRef;
                    if (
                        (Comp !== null &&
                            Comp !== void 0 &&
                            (_Comp$prototype = Comp.prototype) !== null &&
                            _Comp$prototype !== void 0 &&
                            _Comp$prototype.isReactComponent) || // react
                        (Comp !== null &&
                            Comp !== void 0 &&
                            (_Comp$prototype2 = Comp.prototype) !== null &&
                            _Comp$prototype2 !== void 0 &&
                            _Comp$prototype2.setState) ||
                        // rax
                        (Comp === null || Comp === void 0 ? void 0 : Comp.prototype) instanceof Component
                    ) {
                        patchDidCatch(Comp, options);
                        return Comp;
                    }
                    if (
                        hoc_cache.has(options.schema.id) &&
                        ((_cache$get = hoc_cache.get(options.schema.id)) === null || _cache$get === void 0
                            ? void 0
                            : _cache$get.Comp) === Comp
                    ) {
                        var _cache$get2;
                        return (_cache$get2 = hoc_cache.get(options.schema.id)) === null || _cache$get2 === void 0
                            ? void 0
                            : _cache$get2.WrapperComponent;
                    }
                    var Wrapper = /*#__PURE__*/ (function (_Component) {
                        function Wrapper() {
                            hoc_classCallCheck(this, Wrapper);
                            return hoc_callSuper(this, Wrapper, arguments);
                        }
                        hoc_inherits(Wrapper, _Component);
                        return hoc_createClass(Wrapper, [
                            {
                                key: 'render',
                                value: function render() {
                                    return createElement(
                                        Comp,
                                        hoc_objectSpread(
                                            hoc_objectSpread({}, this.props),
                                            {},
                                            {
                                                ref: this.props.forwardRef,
                                            },
                                        ),
                                    );
                                },
                            },
                        ]);
                    })(Component);
                    Wrapper.displayName = Comp.displayName;
                    patchDidCatch(Wrapper, options);
                    var WrapperComponent = cloneEnumerableProperty(
                        forwardRef(function (props, ref) {
                            return createElement(
                                Wrapper,
                                hoc_objectSpread(
                                    hoc_objectSpread({}, props),
                                    {},
                                    {
                                        forwardRef: ref,
                                    },
                                ),
                            );
                        }),
                        Comp,
                    );
                    hoc_cache.set(options.schema.id, {
                        WrapperComponent: WrapperComponent,
                        Comp: Comp,
                    });
                    return WrapperComponent;
                }
                // CONCATENATED MODULE: ../renderer-core/src/hoc/leaf.tsx
                var leaf_excluded = ['visible'],
                    leaf_excluded2 = ['forwardedRef'];
                function leaf_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (leaf_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        leaf_typeof(o)
                    );
                }
                function leaf_objectWithoutProperties(e, t) {
                    if (null == e) return {};
                    var o,
                        r,
                        i = leaf_objectWithoutPropertiesLoose(e, t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(e);
                        for (r = 0; r < n.length; r++)
                            (o = n[r]), -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                    }
                    return i;
                }
                function leaf_objectWithoutPropertiesLoose(r, e) {
                    if (null == r) return {};
                    var t = {};
                    for (var n in r)
                        if ({}.hasOwnProperty.call(r, n)) {
                            if (-1 !== e.indexOf(n)) continue;
                            t[n] = r[n];
                        }
                    return t;
                }
                function leaf_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function leaf_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? leaf_ownKeys(Object(t), !0).forEach(function (r) {
                                  leaf_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : leaf_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function leaf_callSuper(t, o, e) {
                    return (
                        (o = leaf_getPrototypeOf(o)),
                        leaf_possibleConstructorReturn(
                            t,
                            leaf_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], leaf_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function leaf_possibleConstructorReturn(t, e) {
                    if (e && ('object' == leaf_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return leaf_assertThisInitialized(t);
                }
                function leaf_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function leaf_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (leaf_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function _superPropGet(t, o, e, r) {
                    var p = _get(leaf_getPrototypeOf(1 & r ? t.prototype : t), o, e);
                    return 2 & r && 'function' == typeof p
                        ? function (t) {
                              return p.apply(e, t);
                          }
                        : p;
                }
                function _get() {
                    return (
                        (_get =
                            'undefined' != typeof Reflect && Reflect.get
                                ? Reflect.get.bind()
                                : function (e, t, r) {
                                      var p = _superPropBase(e, t);
                                      if (p) {
                                          var n = Object.getOwnPropertyDescriptor(p, t);
                                          return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
                                      }
                                  }),
                        _get.apply(null, arguments)
                    );
                }
                function _superPropBase(t, o) {
                    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = leaf_getPrototypeOf(t)); );
                    return t;
                }
                function leaf_getPrototypeOf(t) {
                    return (
                        (leaf_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        leaf_getPrototypeOf(t)
                    );
                }
                function leaf_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && leaf_setPrototypeOf(t, e);
                }
                function leaf_setPrototypeOf(t, e) {
                    return (
                        (leaf_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        leaf_setPrototypeOf(t, e)
                    );
                }
                function leaf_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, leaf_toPropertyKey(o.key), o);
                    }
                }
                function leaf_createClass(e, r, t) {
                    return (
                        r && leaf_defineProperties(e.prototype, r),
                        t && leaf_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function leaf_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function leaf_defineProperty(e, r, t) {
                    return (
                        (r = leaf_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function leaf_toPropertyKey(t) {
                    var i = leaf_toPrimitive(t, 'string');
                    return 'symbol' == leaf_typeof(i) ? i : i + '';
                }
                function leaf_toPrimitive(t, r) {
                    if ('object' != leaf_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != leaf_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                var RerenderType;
                (function (RerenderType) {
                    RerenderType['All'] = 'All';
                    RerenderType['ChildChanged'] = 'ChildChanged';
                    RerenderType['PropsChanged'] = 'PropsChanged';
                    RerenderType['VisibleChanged'] = 'VisibleChanged';
                    RerenderType['MinimalRenderUnit'] = 'MinimalRenderUnit';
                })(RerenderType || (RerenderType = {}));
                // 缓存 Leaf 层组件，防止重新渲染问题
                var LeafCache = /*#__PURE__*/ leaf_createClass(function LeafCache(documentId, device) {
                    leaf_classCallCheck(this, LeafCache);
                    /** 组件缓存 */
                    leaf_defineProperty(this, 'component', new Map());
                    /**
                     * 状态缓存，场景：属性变化后，改组件被销毁，state 为空，没有展示修改后的属性
                     */
                    leaf_defineProperty(this, 'state', new Map());
                    /**
                     * 订阅事件缓存，导致 rerender 的订阅事件
                     */
                    leaf_defineProperty(this, 'event', new Map());
                    leaf_defineProperty(this, 'ref', new Map());
                    this.documentId = documentId;
                    this.device = device;
                });
                var leaf_cache;
                /** 部分没有渲染的 node 节点进行兜底处理 or 渲染方式没有渲染 LeafWrapper */
                function initRerenderEvent(_ref) {
                    var _cache$event$get,
                        _cache$event$get2,
                        _leaf$onPropChange,
                        _leaf$onChildrenChang,
                        _leaf$onVisibleChange;
                    var schema = _ref.schema,
                        __debug = _ref.__debug,
                        container = _ref.container,
                        getNode = _ref.getNode;
                    var leaf = getNode === null || getNode === void 0 ? void 0 : getNode(schema.id);
                    if (
                        !leaf ||
                        ((_cache$event$get = leaf_cache.event.get(schema.id)) !== null &&
                            _cache$event$get !== void 0 &&
                            _cache$event$get.clear) ||
                        leaf === leaf_cache.event.get(schema.id)
                    ) {
                        return;
                    }
                    (_cache$event$get2 = leaf_cache.event.get(schema.id)) === null || _cache$event$get2 === void 0
                        ? void 0
                        : _cache$event$get2.dispose.forEach(function (disposeFn) {
                              return disposeFn && disposeFn();
                          });
                    var debounceRerender = Object(lodash['debounce'])(function () {
                        container.rerender();
                    }, 20);
                    leaf_cache.event.set(schema.id, {
                        clear: false,
                        leaf: leaf,
                        dispose: [
                            leaf === null || leaf === void 0
                                ? void 0
                                : (_leaf$onPropChange = leaf.onPropChange) === null || _leaf$onPropChange === void 0
                                ? void 0
                                : _leaf$onPropChange.call(leaf, function () {
                                      if (!container.autoRepaintNode) {
                                          return;
                                      }
                                      __debug(
                                          ''
                                              .concat(schema.componentName, '[')
                                              .concat(
                                                  schema.id,
                                                  '] leaf not render in SimulatorRendererView, leaf onPropsChange make rerender',
                                              ),
                                      );
                                      debounceRerender();
                                  }),
                            leaf === null || leaf === void 0
                                ? void 0
                                : (_leaf$onChildrenChang = leaf.onChildrenChange) === null ||
                                  _leaf$onChildrenChang === void 0
                                ? void 0
                                : _leaf$onChildrenChang.call(leaf, function () {
                                      if (!container.autoRepaintNode) {
                                          return;
                                      }
                                      __debug(
                                          ''
                                              .concat(schema.componentName, '[')
                                              .concat(
                                                  schema.id,
                                                  '] leaf not render in SimulatorRendererView, leaf onChildrenChange make rerender',
                                              ),
                                      );
                                      debounceRerender();
                                  }),
                            leaf === null || leaf === void 0
                                ? void 0
                                : (_leaf$onVisibleChange = leaf.onVisibleChange) === null ||
                                  _leaf$onVisibleChange === void 0
                                ? void 0
                                : _leaf$onVisibleChange.call(leaf, function () {
                                      if (!container.autoRepaintNode) {
                                          return;
                                      }
                                      __debug(
                                          ''
                                              .concat(schema.componentName, '[')
                                              .concat(
                                                  schema.id,
                                                  '] leaf not render in SimulatorRendererView, leaf onVisibleChange make rerender',
                                              ),
                                      );
                                      debounceRerender();
                                  }),
                        ],
                    });
                }
                /** 渲染的 node 节点全局注册事件清除 */
                function clearRerenderEvent(id) {
                    var _cache$event$get3, _cache$event$get4, _cache$event$get4$dis;
                    if (
                        (_cache$event$get3 = leaf_cache.event.get(id)) !== null &&
                        _cache$event$get3 !== void 0 &&
                        _cache$event$get3.clear
                    ) {
                        return;
                    }
                    (_cache$event$get4 = leaf_cache.event.get(id)) === null || _cache$event$get4 === void 0
                        ? void 0
                        : (_cache$event$get4$dis = _cache$event$get4.dispose) === null ||
                          _cache$event$get4$dis === void 0
                        ? void 0
                        : _cache$event$get4$dis.forEach(function (disposeFn) {
                              return disposeFn && disposeFn();
                          });
                    leaf_cache.event.set(id, {
                        clear: true,
                        dispose: [],
                    });
                }
                // 给每个组件包裹一个 HOC Leaf，支持组件内部属性变化，自响应渲染
                function leafWrapper(Comp, _ref2) {
                    var _baseRenderer$props,
                        _baseRenderer$props$d,
                        _baseRenderer$props2,
                        _baseRenderer$props$d2,
                        _baseRenderer$props3,
                        _baseRenderer$props4,
                        _baseRenderer$props5,
                        _baseRenderer$props6,
                        _host$designer;
                    var schema = _ref2.schema,
                        baseRenderer = _ref2.baseRenderer,
                        componentInfo = _ref2.componentInfo,
                        scope = _ref2.scope;
                    var __debug = baseRenderer.__debug,
                        getProps = baseRenderer.__getComponentProps,
                        getChildren = baseRenderer.__getSchemaChildrenVirtualDom,
                        __parseData = baseRenderer.__parseData;
                    var engine = baseRenderer.context.engine;
                    var host =
                        (_baseRenderer$props = baseRenderer.props) === null || _baseRenderer$props === void 0
                            ? void 0
                            : _baseRenderer$props.__host;
                    var curDocumentId =
                        (_baseRenderer$props$d =
                            (_baseRenderer$props2 = baseRenderer.props) === null || _baseRenderer$props2 === void 0
                                ? void 0
                                : _baseRenderer$props2.documentId) !== null && _baseRenderer$props$d !== void 0
                            ? _baseRenderer$props$d
                            : '';
                    var curDevice =
                        (_baseRenderer$props$d2 =
                            (_baseRenderer$props3 = baseRenderer.props) === null || _baseRenderer$props3 === void 0
                                ? void 0
                                : _baseRenderer$props3.device) !== null && _baseRenderer$props$d2 !== void 0
                            ? _baseRenderer$props$d2
                            : '';
                    var getNode =
                        (_baseRenderer$props4 = baseRenderer.props) === null || _baseRenderer$props4 === void 0
                            ? void 0
                            : _baseRenderer$props4.getNode;
                    var container =
                        (_baseRenderer$props5 = baseRenderer.props) === null || _baseRenderer$props5 === void 0
                            ? void 0
                            : _baseRenderer$props5.__container;
                    var setSchemaChangedSymbol =
                        (_baseRenderer$props6 = baseRenderer.props) === null || _baseRenderer$props6 === void 0
                            ? void 0
                            : _baseRenderer$props6.setSchemaChangedSymbol;
                    var editor =
                        host === null || host === void 0
                            ? void 0
                            : (_host$designer = host.designer) === null || _host$designer === void 0
                            ? void 0
                            : _host$designer.editor;
                    var runtime = adapter.getRuntime();
                    var forwardRef = runtime.forwardRef,
                        createElement = runtime.createElement;
                    var Component = runtime.Component;
                    var componentCacheId = schema.id;
                    if (
                        !leaf_cache ||
                        (curDocumentId && curDocumentId !== leaf_cache.documentId) ||
                        (curDevice && curDevice !== leaf_cache.device)
                    ) {
                        var _cache;
                        (_cache = leaf_cache) === null || _cache === void 0
                            ? void 0
                            : _cache.event.forEach(function (event) {
                                  var _event$dispose;
                                  (_event$dispose = event.dispose) === null || _event$dispose === void 0
                                      ? void 0
                                      : _event$dispose.forEach(function (disposeFn) {
                                            return disposeFn && disposeFn();
                                        });
                              });
                        leaf_cache = new LeafCache(curDocumentId, curDevice);
                    }
                    if (!isReactComponent(Comp)) {
                        utils_logger.error(''.concat(schema.componentName, ' component may be has errors: '), Comp);
                    }
                    initRerenderEvent({
                        schema: schema,
                        __debug: __debug,
                        container: container,
                        getNode: getNode,
                    });
                    if (
                        curDocumentId &&
                        leaf_cache.component.has(componentCacheId) &&
                        leaf_cache.component.get(componentCacheId).Comp === Comp
                    ) {
                        return leaf_cache.component.get(componentCacheId).LeafWrapper;
                    }
                    var LeafHoc = /*#__PURE__*/ (function (_Component) {
                        function LeafHoc(props, context) {
                            var _this;
                            leaf_classCallCheck(this, LeafHoc);
                            _this = leaf_callSuper(this, LeafHoc, [props, context]);
                            // 监听以下事件，当变化时更新自己
                            leaf_defineProperty(_this, 'recordInfo', {});
                            leaf_defineProperty(_this, 'disposeFunctions', []);
                            leaf_defineProperty(_this, '__component_tag', 'leafWrapper');
                            // 最小渲染单元做防抖处理
                            leaf_defineProperty(
                                _this,
                                'makeUnitRenderDebounced',
                                Object(lodash['debounce'])(function () {
                                    var _this$leaf, _this$leaf$export, _this$leaf2;
                                    _this.beforeRender(RerenderType.MinimalRenderUnit);
                                    var schema =
                                        (_this$leaf = _this.leaf) === null || _this$leaf === void 0
                                            ? void 0
                                            : (_this$leaf$export = _this$leaf.export) === null ||
                                              _this$leaf$export === void 0
                                            ? void 0
                                            : _this$leaf$export.call(
                                                  _this$leaf,
                                                  types_src['IPublicEnumTransformStage'].Render,
                                              );
                                    if (!schema) {
                                        return;
                                    }
                                    var nextProps = getProps(schema, scope, Comp, componentInfo);
                                    var children = getChildren(schema, scope, Comp);
                                    var nextState = {
                                        nodeProps: nextProps,
                                        nodeChildren: children,
                                        childrenInState: true,
                                    };
                                    if ('children' in nextProps) {
                                        nextState.nodeChildren = nextProps.children;
                                    }
                                    __debug(
                                        ''
                                            .concat(
                                                (_this$leaf2 = _this.leaf) === null || _this$leaf2 === void 0
                                                    ? void 0
                                                    : _this$leaf2.componentName,
                                                '(',
                                            )
                                            .concat(_this.props.componentId, ') MinimalRenderUnit Render!'),
                                    );
                                    _this.setState(nextState);
                                }, 20),
                            );
                            leaf_defineProperty(_this, 'recordTime', function () {
                                var _host$designer2,
                                    _host$designer2$curre,
                                    _host$designer2$curre2,
                                    _this$recordInfo$node,
                                    _this$leaf3;
                                if (!_this.recordInfo.startTime) {
                                    return;
                                }
                                var endTime = Date.now();
                                var nodeCount =
                                    host === null || host === void 0
                                        ? void 0
                                        : (_host$designer2 = host.designer) === null || _host$designer2 === void 0
                                        ? void 0
                                        : (_host$designer2$curre = _host$designer2.currentDocument) === null ||
                                          _host$designer2$curre === void 0
                                        ? void 0
                                        : (_host$designer2$curre2 = _host$designer2$curre.getNodeCount) === null ||
                                          _host$designer2$curre2 === void 0
                                        ? void 0
                                        : _host$designer2$curre2.call(_host$designer2$curre);
                                var componentName =
                                    ((_this$recordInfo$node = _this.recordInfo.node) === null ||
                                    _this$recordInfo$node === void 0
                                        ? void 0
                                        : _this$recordInfo$node.componentName) ||
                                    ((_this$leaf3 = _this.leaf) === null || _this$leaf3 === void 0
                                        ? void 0
                                        : _this$leaf3.componentName) ||
                                    'UnknownComponent';
                                editor === null || editor === void 0
                                    ? void 0
                                    : editor.eventBus.emit(types_src['GlobalEvent'].Node.Rerender, {
                                          componentName: componentName,
                                          time: endTime - _this.recordInfo.startTime,
                                          type: _this.recordInfo.type,
                                          nodeCount: nodeCount,
                                      });
                                _this.recordInfo.startTime = null;
                            });
                            leaf_defineProperty(_this, 'makeUnitRender', function () {
                                _this.makeUnitRenderDebounced();
                            });
                            __debug(
                                ''
                                    .concat(schema.componentName, '[')
                                    .concat(_this.props.componentId, '] leaf render in SimulatorRendererView'),
                            );
                            clearRerenderEvent(componentCacheId);
                            _this.curEventLeaf = _this.leaf;
                            leaf_cache.ref.set(componentCacheId, {
                                makeUnitRender: _this.makeUnitRender,
                            });
                            var cacheState = leaf_cache.state.get(componentCacheId);
                            if (!cacheState || cacheState.__tag !== props.__tag) {
                                cacheState = _this.getDefaultState(props);
                            }
                            _this.state = cacheState;
                            return _this;
                        }
                        leaf_inherits(LeafHoc, _Component);
                        return leaf_createClass(LeafHoc, [
                            {
                                key: 'autoRepaintNode',
                                get: function get() {
                                    return container === null || container === void 0
                                        ? void 0
                                        : container.autoRepaintNode;
                                },
                            },
                            {
                                key: 'componentDidUpdate',
                                value: function componentDidUpdate() {
                                    this.recordTime();
                                },
                            },
                            {
                                key: 'componentDidMount',
                                value: function componentDidMount() {
                                    var _leaf = this.leaf;
                                    this.initOnPropsChangeEvent(_leaf);
                                    this.initOnChildrenChangeEvent(_leaf);
                                    this.initOnVisibleChangeEvent(_leaf);
                                    this.recordTime();
                                },
                            },
                            {
                                key: 'getDefaultState',
                                value: function getDefaultState(nextProps) {
                                    var _this$leaf4, _this$leaf4$export;
                                    var _ref3 =
                                            nextProps.__inner__ ||
                                            ((_this$leaf4 = this.leaf) === null || _this$leaf4 === void 0
                                                ? void 0
                                                : (_this$leaf4$export = _this$leaf4.export) === null ||
                                                  _this$leaf4$export === void 0
                                                ? void 0
                                                : _this$leaf4$export.call(
                                                      _this$leaf4,
                                                      types_src['IPublicEnumTransformStage'].Render,
                                                  )) ||
                                            {},
                                        _ref3$hidden = _ref3.hidden,
                                        hidden = _ref3$hidden === void 0 ? false : _ref3$hidden,
                                        _ref3$condition = _ref3.condition,
                                        condition = _ref3$condition === void 0 ? true : _ref3$condition;
                                    return {
                                        nodeChildren: null,
                                        childrenInState: false,
                                        visible: !hidden,
                                        condition:
                                            __parseData === null || __parseData === void 0
                                                ? void 0
                                                : __parseData(condition, scope),
                                        nodeCacheProps: {},
                                        nodeProps: {},
                                    };
                                },
                            },
                            {
                                key: 'setState',
                                value: function setState(state) {
                                    leaf_cache.state.set(
                                        componentCacheId,
                                        leaf_objectSpread(
                                            leaf_objectSpread(leaf_objectSpread({}, this.state), state),
                                            {},
                                            {
                                                __tag: this.props.__tag,
                                            },
                                        ),
                                    );
                                    _superPropGet(LeafHoc, 'setState', this, 3)([state]);
                                },
                                /** 由于内部属性变化，在触发渲染前，会执行该函数 */
                            },
                            {
                                key: 'beforeRender',
                                value: function beforeRender(type, node) {
                                    this.recordInfo.startTime = Date.now();
                                    this.recordInfo.type = type;
                                    this.recordInfo.node = node;
                                    setSchemaChangedSymbol === null || setSchemaChangedSymbol === void 0
                                        ? void 0
                                        : setSchemaChangedSymbol(true);
                                },
                            },
                            {
                                key: 'judgeMiniUnitRender',
                                value: function judgeMiniUnitRender() {
                                    var _this$leaf5;
                                    if (!this.renderUnitInfo) {
                                        this.getRenderUnitInfo();
                                    }
                                    var renderUnitInfo = this.renderUnitInfo || {
                                        singleRender: true,
                                    };
                                    if (renderUnitInfo.singleRender) {
                                        return;
                                    }
                                    var ref = leaf_cache.ref.get(renderUnitInfo.minimalUnitId);
                                    if (!ref) {
                                        __debug('Cant find minimalRenderUnit ref! This make rerender!');
                                        container === null || container === void 0 ? void 0 : container.rerender();
                                        return;
                                    }
                                    __debug(
                                        ''
                                            .concat(
                                                (_this$leaf5 = this.leaf) === null || _this$leaf5 === void 0
                                                    ? void 0
                                                    : _this$leaf5.componentName,
                                                '(',
                                            )
                                            .concat(
                                                this.props.componentId,
                                                ') need render, make its minimalRenderUnit ',
                                            )
                                            .concat(renderUnitInfo.minimalUnitName, '(')
                                            .concat(renderUnitInfo.minimalUnitId, ')'),
                                    );
                                    ref.makeUnitRender();
                                },
                            },
                            {
                                key: 'getRenderUnitInfo',
                                value: function getRenderUnitInfo() {
                                    var leaf =
                                        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.leaf;
                                    // leaf 在低代码组件中存在 mock 的情况，退出最小渲染单元判断
                                    if (!leaf || typeof leaf.isRoot !== 'function') {
                                        return;
                                    }
                                    if (leaf.isRootNode) {
                                        this.renderUnitInfo = leaf_objectSpread(
                                            {
                                                singleRender: true,
                                            },
                                            this.renderUnitInfo || {},
                                        );
                                    }
                                    if (leaf.componentMeta.isMinimalRenderUnit) {
                                        this.renderUnitInfo = {
                                            minimalUnitId: leaf.id,
                                            minimalUnitName: leaf.componentName,
                                            singleRender: false,
                                        };
                                    }
                                    if (leaf.hasLoop()) {
                                        var _leaf$parent, _leaf$parent2;
                                        // 含有循环配置的元素，父元素是最小渲染单元
                                        this.renderUnitInfo = {
                                            minimalUnitId:
                                                leaf === null || leaf === void 0
                                                    ? void 0
                                                    : (_leaf$parent = leaf.parent) === null || _leaf$parent === void 0
                                                    ? void 0
                                                    : _leaf$parent.id,
                                            minimalUnitName:
                                                leaf === null || leaf === void 0
                                                    ? void 0
                                                    : (_leaf$parent2 = leaf.parent) === null || _leaf$parent2 === void 0
                                                    ? void 0
                                                    : _leaf$parent2.componentName,
                                            singleRender: false,
                                        };
                                    }
                                    if (leaf.parent) {
                                        this.getRenderUnitInfo(leaf.parent);
                                    }
                                },
                            },
                            {
                                key: 'componentWillReceiveProps',
                                value: function componentWillReceiveProps(nextProps) {
                                    var componentId = nextProps.componentId;
                                    if (nextProps.__tag === this.props.__tag) {
                                        return null;
                                    }
                                    var _leaf = getNode === null || getNode === void 0 ? void 0 : getNode(componentId);
                                    if (_leaf && this.curEventLeaf && _leaf !== this.curEventLeaf) {
                                        this.disposeFunctions.forEach(function (fn) {
                                            return fn();
                                        });
                                        this.disposeFunctions = [];
                                        this.initOnChildrenChangeEvent(_leaf);
                                        this.initOnPropsChangeEvent(_leaf);
                                        this.initOnVisibleChangeEvent(_leaf);
                                        this.curEventLeaf = _leaf;
                                    }
                                    var _this$getDefaultState = this.getDefaultState(nextProps),
                                        visible = _this$getDefaultState.visible,
                                        resetState = leaf_objectWithoutProperties(_this$getDefaultState, leaf_excluded);
                                    this.setState(resetState);
                                },
                                /** 监听参数变化 */
                            },
                            {
                                key: 'initOnPropsChangeEvent',
                                value: function initOnPropsChangeEvent() {
                                    var _this2 = this,
                                        _leaf$onPropChange2;
                                    var leaf =
                                        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.leaf;
                                    var handlePropsChange = Object(lodash['debounce'])(function (propChangeInfo) {
                                        var _node$export;
                                        var key = propChangeInfo.key,
                                            _propChangeInfo$newVa = propChangeInfo.newValue,
                                            newValue = _propChangeInfo$newVa === void 0 ? null : _propChangeInfo$newVa;
                                        var node = leaf;
                                        if (key === '___condition___') {
                                            var _this2$leaf;
                                            var _ref4 =
                                                    ((_this2$leaf = _this2.leaf) === null || _this2$leaf === void 0
                                                        ? void 0
                                                        : _this2$leaf.export(
                                                              types_src['IPublicEnumTransformStage'].Render,
                                                          )) || {},
                                                _ref4$condition = _ref4.condition,
                                                condition = _ref4$condition === void 0 ? true : _ref4$condition;
                                            var conditionValue =
                                                __parseData === null || __parseData === void 0
                                                    ? void 0
                                                    : __parseData(condition, scope);
                                            __debug(
                                                'key is ___condition___, change condition value to ['.concat(
                                                    condition,
                                                    ']',
                                                ),
                                            );
                                            // 条件表达式改变
                                            _this2.setState({
                                                condition: conditionValue,
                                            });
                                            return;
                                        }
                                        // 如果循坏条件变化，从根节点重新渲染
                                        // 目前多层循坏无法判断需要从哪一层开始渲染，故先粗暴解决
                                        if (key === '___loop___') {
                                            __debug('key is ___loop___, render a page!');
                                            container === null || container === void 0 ? void 0 : container.rerender();
                                            // 由于 scope 变化，需要清空缓存，使用新的 scope
                                            leaf_cache.component.delete(componentCacheId);
                                            return;
                                        }
                                        _this2.beforeRender(RerenderType.PropsChanged);
                                        var state = _this2.state;
                                        var nodeCacheProps = state.nodeCacheProps;
                                        var nodeProps = getProps(
                                            node === null || node === void 0
                                                ? void 0
                                                : (_node$export = node.export) === null || _node$export === void 0
                                                ? void 0
                                                : _node$export.call(
                                                      node,
                                                      types_src['IPublicEnumTransformStage'].Render,
                                                  ),
                                            scope,
                                            Comp,
                                            componentInfo,
                                        );
                                        if (key && !(key in nodeProps) && key in _this2.props) {
                                            // 当 key 在 this.props 中时，且不存在在计算值中，需要用 newValue 覆盖掉 this.props 的取值
                                            nodeCacheProps[key] = newValue;
                                        }
                                        __debug(
                                            ''
                                                .concat(
                                                    leaf === null || leaf === void 0 ? void 0 : leaf.componentName,
                                                    '[',
                                                )
                                                .concat(_this2.props.componentId, '] component trigger onPropsChange!'),
                                            nodeProps,
                                            nodeCacheProps,
                                            key,
                                            newValue,
                                        );
                                        _this2.setState(
                                            'children' in nodeProps
                                                ? {
                                                      nodeChildren: nodeProps.children,
                                                      nodeProps: nodeProps,
                                                      childrenInState: true,
                                                      nodeCacheProps: nodeCacheProps,
                                                  }
                                                : {
                                                      nodeProps: nodeProps,
                                                      nodeCacheProps: nodeCacheProps,
                                                  },
                                        );
                                        _this2.judgeMiniUnitRender();
                                    });
                                    var dispose =
                                        leaf === null || leaf === void 0
                                            ? void 0
                                            : (_leaf$onPropChange2 = leaf.onPropChange) === null ||
                                              _leaf$onPropChange2 === void 0
                                            ? void 0
                                            : _leaf$onPropChange2.call(leaf, function (propChangeInfo) {
                                                  if (!_this2.autoRepaintNode) {
                                                      return;
                                                  }
                                                  handlePropsChange(propChangeInfo);
                                              });
                                    dispose && this.disposeFunctions.push(dispose);
                                },
                                /**
                                 * 监听显隐变化
                                 */
                            },
                            {
                                key: 'initOnVisibleChangeEvent',
                                value: function initOnVisibleChangeEvent() {
                                    var _leaf$onVisibleChange2,
                                        _this3 = this;
                                    var leaf =
                                        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.leaf;
                                    var dispose =
                                        leaf === null || leaf === void 0
                                            ? void 0
                                            : (_leaf$onVisibleChange2 = leaf.onVisibleChange) === null ||
                                              _leaf$onVisibleChange2 === void 0
                                            ? void 0
                                            : _leaf$onVisibleChange2.call(leaf, function (flag) {
                                                  if (!_this3.autoRepaintNode) {
                                                      return;
                                                  }
                                                  if (_this3.state.visible === flag) {
                                                      return;
                                                  }
                                                  __debug(
                                                      ''
                                                          .concat(
                                                              leaf === null || leaf === void 0
                                                                  ? void 0
                                                                  : leaf.componentName,
                                                              '[',
                                                          )
                                                          .concat(
                                                              _this3.props.componentId,
                                                              '] component trigger onVisibleChange(',
                                                          )
                                                          .concat(flag, ') event'),
                                                  );
                                                  _this3.beforeRender(RerenderType.VisibleChanged);
                                                  _this3.setState({
                                                      visible: flag,
                                                  });
                                                  _this3.judgeMiniUnitRender();
                                              });
                                    dispose && this.disposeFunctions.push(dispose);
                                },
                                /**
                                 * 监听子元素变化（拖拽，删除...）
                                 */
                            },
                            {
                                key: 'initOnChildrenChangeEvent',
                                value: function initOnChildrenChangeEvent() {
                                    var _leaf$onChildrenChang2,
                                        _this4 = this;
                                    var leaf =
                                        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.leaf;
                                    var dispose =
                                        leaf === null || leaf === void 0
                                            ? void 0
                                            : (_leaf$onChildrenChang2 = leaf.onChildrenChange) === null ||
                                              _leaf$onChildrenChang2 === void 0
                                            ? void 0
                                            : _leaf$onChildrenChang2.call(leaf, function (param) {
                                                  var _leaf$export;
                                                  if (!_this4.autoRepaintNode) {
                                                      return;
                                                  }
                                                  var _ref5 = param || {},
                                                      type = _ref5.type,
                                                      node = _ref5.node;
                                                  _this4.beforeRender(
                                                      ''.concat(RerenderType.ChildChanged, '-').concat(type),
                                                      node,
                                                  );
                                                  // TODO: 缓存同级其他元素的 children。
                                                  // 缓存二级 children Next 查询筛选组件有问题
                                                  // 缓存一级 children Next Tab 组件有问题
                                                  var nextChild = getChildren(
                                                      leaf === null || leaf === void 0
                                                          ? void 0
                                                          : (_leaf$export = leaf.export) === null ||
                                                            _leaf$export === void 0
                                                          ? void 0
                                                          : _leaf$export.call(
                                                                leaf,
                                                                types_src['IPublicEnumTransformStage'].Render,
                                                            ),
                                                      scope,
                                                      Comp,
                                                  );
                                                  __debug(
                                                      ''
                                                          .concat(schema.componentName, '[')
                                                          .concat(
                                                              _this4.props.componentId,
                                                              '] component trigger onChildrenChange event',
                                                          ),
                                                      nextChild,
                                                  );
                                                  _this4.setState({
                                                      nodeChildren: nextChild,
                                                      childrenInState: true,
                                                  });
                                                  _this4.judgeMiniUnitRender();
                                              });
                                    dispose && this.disposeFunctions.push(dispose);
                                },
                            },
                            {
                                key: 'componentWillUnmount',
                                value: function componentWillUnmount() {
                                    this.disposeFunctions.forEach(function (fn) {
                                        return fn();
                                    });
                                },
                            },
                            {
                                key: 'hasChildren',
                                get: function get() {
                                    if (!this.state.childrenInState) {
                                        return 'children' in this.props;
                                    }
                                    return true;
                                },
                            },
                            {
                                key: 'children',
                                get: function get() {
                                    if (this.state.childrenInState) {
                                        return this.state.nodeChildren;
                                    }
                                    if (this.props.children && !Array.isArray(this.props.children)) {
                                        return [this.props.children];
                                    }
                                    if (this.props.children && this.props.children.length) {
                                        return this.props.children;
                                    }
                                    return this.props.children;
                                },
                            },
                            {
                                key: 'leaf',
                                get: function get() {
                                    var _this$props$_leaf;
                                    if (
                                        (_this$props$_leaf = this.props._leaf) !== null &&
                                        _this$props$_leaf !== void 0 &&
                                        _this$props$_leaf.isMock
                                    ) {
                                        // 低代码组件作为一个整体更新，其内部的组件不需要监听相关事件
                                        return undefined;
                                    }
                                    return getNode === null || getNode === void 0 ? void 0 : getNode(componentCacheId);
                                },
                            },
                            {
                                key: 'render',
                                value: function render() {
                                    if (!this.state.visible || !this.state.condition) {
                                        return null;
                                    }
                                    var _this$props = this.props,
                                        forwardedRef = _this$props.forwardedRef,
                                        rest = leaf_objectWithoutProperties(_this$props, leaf_excluded2);
                                    var compProps = leaf_objectSpread(
                                        leaf_objectSpread(
                                            leaf_objectSpread(
                                                leaf_objectSpread({}, rest),
                                                this.state.nodeCacheProps || {},
                                            ),
                                            this.state.nodeProps || {},
                                        ),
                                        {},
                                        {
                                            children: [],
                                            __id: this.props.componentId,
                                            ref: forwardedRef,
                                        },
                                    );
                                    delete compProps.__inner__;
                                    if (this.hasChildren) {
                                        return engine.createElement(Comp, compProps, this.children);
                                    }
                                    return engine.createElement(Comp, compProps);
                                },
                            },
                        ]);
                    })(Component);
                    leaf_defineProperty(LeafHoc, 'displayName', schema.componentName);
                    var LeafWrapper = forwardRef(function (props, ref) {
                        return createElement(
                            LeafHoc,
                            leaf_objectSpread(
                                leaf_objectSpread({}, props),
                                {},
                                {
                                    forwardedRef: ref,
                                },
                            ),
                        );
                    });
                    LeafWrapper = cloneEnumerableProperty(LeafWrapper, Comp);
                    LeafWrapper.displayName = Comp.displayName;
                    leaf_cache.component.set(componentCacheId, {
                        LeafWrapper: LeafWrapper,
                        Comp: Comp,
                    });
                    return LeafWrapper;
                }
                // CONCATENATED MODULE: ../renderer-core/src/utils/is-use-loop.ts

                // 1.渲染模式下，loop 是数组，则按照数组长度渲染组件
                // 2.设计模式下，loop 需要长度大于 0，按照循环模式渲染，防止无法设计的情况
                function isUseLoop(loop, isDesignMode) {
                    if (isJSExpression(loop)) {
                        return true;
                    }
                    if (!isDesignMode) {
                        return true;
                    }
                    if (!Array.isArray(loop)) {
                        return false;
                    }
                    return loop.length > 0;
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/base.tsx
                var base_excluded = ['ref'];
                function base_regenerator() {
                    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
                        t,
                        r = 'function' == typeof Symbol ? Symbol : {},
                        n = r.iterator || '@@iterator',
                        o = r.toStringTag || '@@toStringTag';
                    function i(r, n, o, i) {
                        var c = n && n.prototype instanceof Generator ? n : Generator,
                            u = Object.create(c.prototype);
                        return (
                            base_regeneratorDefine2(
                                u,
                                '_invoke',
                                (function (r, n, o) {
                                    var i,
                                        c,
                                        u,
                                        f = 0,
                                        p = o || [],
                                        y = !1,
                                        G = {
                                            p: 0,
                                            n: 0,
                                            v: e,
                                            a: d,
                                            f: d.bind(e, 4),
                                            d: function d(t, r) {
                                                return (i = t), (c = 0), (u = e), (G.n = r), a;
                                            },
                                        };
                                    function d(r, n) {
                                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                                            var o,
                                                i = p[t],
                                                d = G.p,
                                                l = i[2];
                                            r > 3
                                                ? (o = l === n) &&
                                                  ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]), (i[4] = i[5] = e))
                                                : i[0] <= d &&
                                                  ((o = r < 2 && d < i[1])
                                                      ? ((c = 0), (G.v = n), (G.n = i[1]))
                                                      : d < l &&
                                                        (o = r < 3 || i[0] > n || n > l) &&
                                                        ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                                        }
                                        if (o || r > 1) return a;
                                        throw ((y = !0), n);
                                    }
                                    return function (o, p, l) {
                                        if (f > 1) throw TypeError('Generator is already running');
                                        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y; ) {
                                            i || (c ? (c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : (G.n = u)) : (G.v = u));
                                            try {
                                                if (((f = 2), i)) {
                                                    if ((c || (o = 'next'), (t = i[o]))) {
                                                        if (!(t = t.call(i, u)))
                                                            throw TypeError('iterator result is not an object');
                                                        if (!t.done) return t;
                                                        (u = t.value), c < 2 && (c = 0);
                                                    } else
                                                        1 === c && (t = i.return) && t.call(i),
                                                            c < 2 &&
                                                                ((u = TypeError(
                                                                    "The iterator does not provide a '" +
                                                                        o +
                                                                        "' method",
                                                                )),
                                                                (c = 1));
                                                    i = e;
                                                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
                                            } catch (t) {
                                                (i = e), (c = 1), (u = t);
                                            } finally {
                                                f = 1;
                                            }
                                        }
                                        return { value: t, done: y };
                                    };
                                })(r, o, i),
                                !0,
                            ),
                            u
                        );
                    }
                    var a = {};
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}
                    t = Object.getPrototypeOf;
                    var c = [][n]
                            ? t(t([][n]()))
                            : (base_regeneratorDefine2((t = {}), n, function () {
                                  return this;
                              }),
                              t),
                        u = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c));
                    function f(e) {
                        return (
                            Object.setPrototypeOf
                                ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                                : ((e.__proto__ = GeneratorFunctionPrototype),
                                  base_regeneratorDefine2(e, o, 'GeneratorFunction')),
                            (e.prototype = Object.create(u)),
                            e
                        );
                    }
                    return (
                        (GeneratorFunction.prototype = GeneratorFunctionPrototype),
                        base_regeneratorDefine2(u, 'constructor', GeneratorFunctionPrototype),
                        base_regeneratorDefine2(GeneratorFunctionPrototype, 'constructor', GeneratorFunction),
                        (GeneratorFunction.displayName = 'GeneratorFunction'),
                        base_regeneratorDefine2(GeneratorFunctionPrototype, o, 'GeneratorFunction'),
                        base_regeneratorDefine2(u),
                        base_regeneratorDefine2(u, o, 'Generator'),
                        base_regeneratorDefine2(u, n, function () {
                            return this;
                        }),
                        base_regeneratorDefine2(u, 'toString', function () {
                            return '[object Generator]';
                        }),
                        (base_regenerator = function _regenerator() {
                            return { w: i, m: f };
                        })()
                    );
                }
                function base_regeneratorDefine2(e, r, n, t) {
                    var i = Object.defineProperty;
                    try {
                        i({}, '', {});
                    } catch (e) {
                        i = 0;
                    }
                    (base_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
                        function o(r, n) {
                            base_regeneratorDefine2(e, r, function (e) {
                                return this._invoke(r, n, e);
                            });
                        }
                        r
                            ? i
                                ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t })
                                : (e[r] = n)
                            : (o('next', 0), o('throw', 1), o('return', 2));
                    }),
                        base_regeneratorDefine2(e, r, n, t);
                }
                function base_asyncGeneratorStep(n, t, e, r, o, a, c) {
                    try {
                        var i = n[a](c),
                            u = i.value;
                    } catch (n) {
                        return void e(n);
                    }
                    i.done ? t(u) : Promise.resolve(u).then(r, o);
                }
                function base_asyncToGenerator(n) {
                    return function () {
                        var t = this,
                            e = arguments;
                        return new Promise(function (r, o) {
                            var a = n.apply(t, e);
                            function _next(n) {
                                base_asyncGeneratorStep(a, r, o, _next, _throw, 'next', n);
                            }
                            function _throw(n) {
                                base_asyncGeneratorStep(a, r, o, _next, _throw, 'throw', n);
                            }
                            _next(void 0);
                        });
                    };
                }
                function base_toConsumableArray(r) {
                    return (
                        base_arrayWithoutHoles(r) ||
                        base_iterableToArray(r) ||
                        base_unsupportedIterableToArray(r) ||
                        base_nonIterableSpread()
                    );
                }
                function base_nonIterableSpread() {
                    throw new TypeError(
                        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                    );
                }
                function base_unsupportedIterableToArray(r, a) {
                    if (r) {
                        if ('string' == typeof r) return base_arrayLikeToArray(r, a);
                        var t = {}.toString.call(r).slice(8, -1);
                        return (
                            'Object' === t && r.constructor && (t = r.constructor.name),
                            'Map' === t || 'Set' === t
                                ? Array.from(r)
                                : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                                ? base_arrayLikeToArray(r, a)
                                : void 0
                        );
                    }
                }
                function base_iterableToArray(r) {
                    if (('undefined' != typeof Symbol && null != r[Symbol.iterator]) || null != r['@@iterator'])
                        return Array.from(r);
                }
                function base_arrayWithoutHoles(r) {
                    if (Array.isArray(r)) return base_arrayLikeToArray(r);
                }
                function base_arrayLikeToArray(r, a) {
                    (null == a || a > r.length) && (a = r.length);
                    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
                    return n;
                }
                function base_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (base_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        base_typeof(o)
                    );
                }
                function base_objectWithoutProperties(e, t) {
                    if (null == e) return {};
                    var o,
                        r,
                        i = base_objectWithoutPropertiesLoose(e, t);
                    if (Object.getOwnPropertySymbols) {
                        var n = Object.getOwnPropertySymbols(e);
                        for (r = 0; r < n.length; r++)
                            (o = n[r]), -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
                    }
                    return i;
                }
                function base_objectWithoutPropertiesLoose(r, e) {
                    if (null == r) return {};
                    var t = {};
                    for (var n in r)
                        if ({}.hasOwnProperty.call(r, n)) {
                            if (-1 !== e.indexOf(n)) continue;
                            t[n] = r[n];
                        }
                    return t;
                }
                function base_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function base_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? base_ownKeys(Object(t), !0).forEach(function (r) {
                                  base_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : base_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function base_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function base_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, base_toPropertyKey(o.key), o);
                    }
                }
                function base_createClass(e, r, t) {
                    return (
                        r && base_defineProperties(e.prototype, r),
                        t && base_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function base_callSuper(t, o, e) {
                    return (
                        (o = base_getPrototypeOf(o)),
                        base_possibleConstructorReturn(
                            t,
                            base_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], base_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function base_possibleConstructorReturn(t, e) {
                    if (e && ('object' == base_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return base_assertThisInitialized(t);
                }
                function base_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function base_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (base_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function base_superPropGet(t, o, e, r) {
                    var p = base_get(base_getPrototypeOf(1 & r ? t.prototype : t), o, e);
                    return 2 & r && 'function' == typeof p
                        ? function (t) {
                              return p.apply(e, t);
                          }
                        : p;
                }
                function base_get() {
                    return (
                        (base_get =
                            'undefined' != typeof Reflect && Reflect.get
                                ? Reflect.get.bind()
                                : function (e, t, r) {
                                      var p = base_superPropBase(e, t);
                                      if (p) {
                                          var n = Object.getOwnPropertyDescriptor(p, t);
                                          return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
                                      }
                                  }),
                        base_get.apply(null, arguments)
                    );
                }
                function base_superPropBase(t, o) {
                    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = base_getPrototypeOf(t)); );
                    return t;
                }
                function base_getPrototypeOf(t) {
                    return (
                        (base_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        base_getPrototypeOf(t)
                    );
                }
                function base_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && base_setPrototypeOf(t, e);
                }
                function base_setPrototypeOf(t, e) {
                    return (
                        (base_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        base_setPrototypeOf(t, e)
                    );
                }
                function base_defineProperty(e, r, t) {
                    return (
                        (r = base_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function base_toPropertyKey(t) {
                    var i = base_toPrimitive(t, 'string');
                    return 'symbol' == base_typeof(i) ? i : i + '';
                }
                function base_toPrimitive(t, r) {
                    if ('object' != base_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != base_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                /* eslint-disable no-console */
                /* eslint-disable max-len */
                /* eslint-disable react/prop-types */

                /**
                 * execute method in schema.lifeCycles with context
                 * @PRIVATE
                 */
                function executeLifeCycleMethod(context, schema, method, args, thisRequiredInJSE) {
                    if (!context || !isSchema(schema) || !method) {
                        return;
                    }
                    var lifeCycleMethods = getValue(schema, 'lifeCycles', {});
                    var fn = lifeCycleMethods[method];
                    if (!fn) {
                        return;
                    }
                    // TODO: cache
                    if (isJSExpression(fn) || isJSFunction(fn)) {
                        fn = thisRequiredInJSE
                            ? parseThisRequiredExpression(fn, context)
                            : parseExpression(fn, context);
                    }
                    if (typeof fn !== 'function') {
                        utils_logger.error('\u751F\u547D\u5468\u671F'.concat(method, '\u7C7B\u578B\u4E0D\u7B26'), fn);
                        return;
                    }
                    try {
                        return fn.apply(context, args);
                    } catch (e) {
                        utils_logger.error(
                            '['
                                .concat(schema.componentName, ']\u751F\u547D\u5468\u671F')
                                .concat(method, '\u51FA\u9519'),
                            e,
                        );
                    }
                }
                /**
                 * get children from a node schema
                 * @PRIVATE
                 */
                function getSchemaChildren(schema) {
                    if (!schema) {
                        return;
                    }
                    if (!schema.props) {
                        return schema.children;
                    }
                    if (!schema.children) {
                        return schema.props.children;
                    }
                    if (!schema.props.children) {
                        return schema.children;
                    }
                    var result = [].concat(schema.children);
                    if (Array.isArray(schema.props.children)) {
                        result = result.concat(schema.props.children);
                    } else {
                        result.push(schema.props.children);
                    }
                    return result;
                }
                function baseRendererFactory() {
                    var _BaseRenderer;
                    var _adapter$getRenderers = adapter.getRenderers(),
                        customBaseRenderer = _adapter$getRenderers.BaseRenderer;
                    if (customBaseRenderer) {
                        return customBaseRenderer;
                    }
                    var _adapter$getRuntime = adapter.getRuntime(),
                        Component = _adapter$getRuntime.Component,
                        createElement = _adapter$getRuntime.createElement;
                    var Div = divFactory();
                    var VisualDom = visualDomFactory();
                    var AppContext = contextFactory();
                    var DESIGN_MODE = {
                        EXTEND: 'extend',
                        BORDER: 'border',
                        PREVIEW: 'preview',
                    };
                    var OVERLAY_LIST = ['Dialog', 'Overlay', 'Animate', 'ConfigProvider'];
                    var DEFAULT_LOOP_ARG_ITEM = 'item';
                    var DEFAULT_LOOP_ARG_INDEX = 'index';
                    var scopeIdx = 0;
                    return (
                        (_BaseRenderer = /*#__PURE__*/ (function (_Component) {
                            /**
                             * reference of style element contains schema.css
                             *
                             * @type {any}
                             */

                            function BaseRenderer(_props2, context) {
                                var _props2$__schema;
                                var _this;
                                base_classCallCheck(this, BaseRenderer);
                                _this = base_callSuper(this, BaseRenderer, [_props2, context]);
                                base_defineProperty(_this, 'dataSourceMap', {});
                                base_defineProperty(_this, '__namespace', 'base');
                                base_defineProperty(_this, '__compScopes', {});
                                base_defineProperty(_this, '__instanceMap', {});
                                /**
                                 * keep track of customMethods added to this context
                                 *
                                 * @type {any}
                                 */
                                base_defineProperty(_this, '__customMethodsList', []);
                                base_defineProperty(_this, 'reloadDataSource', function () {
                                    return new Promise(function (resolve, reject) {
                                        _this.__debug('reload data source');
                                        if (!_this.__dataHelper) {
                                            return resolve({});
                                        }
                                        _this.__dataHelper
                                            .getInitData()
                                            .then(function (res) {
                                                if (Object(lodash['isEmpty'])(res)) {
                                                    _this.forceUpdate();
                                                    return resolve({});
                                                }
                                                _this.setState(res, resolve);
                                            })
                                            .catch(function (err) {
                                                reject(err);
                                            });
                                    });
                                });
                                /**
                                 * execute method in schema.lifeCycles
                                 * @PRIVATE
                                 */
                                base_defineProperty(_this, '__executeLifeCycleMethod', function (method, args) {
                                    executeLifeCycleMethod(
                                        _this,
                                        _this.props.__schema,
                                        method,
                                        args,
                                        _this.props.thisRequiredInJSE,
                                    );
                                });
                                /**
                                 * this method is for legacy purpose only, which used _ prefix instead of __ as private for some historical reasons
                                 * @LEGACY
                                 */
                                base_defineProperty(_this, '_getComponentView', function (componentName) {
                                    var __components = _this.props.__components;
                                    if (!__components) {
                                        return;
                                    }
                                    return __components[componentName];
                                });
                                base_defineProperty(_this, '__bindCustomMethods', function (props) {
                                    var __schema = props.__schema;
                                    var customMethodsList = Object.keys(__schema.methods || {}) || [];
                                    (_this.__customMethodsList || []).forEach(function (item) {
                                        if (!customMethodsList.includes(item)) {
                                            delete _this[item];
                                        }
                                    });
                                    _this.__customMethodsList = customMethodsList;
                                    forEach(__schema.methods, function (val, key) {
                                        var value = val;
                                        if (isJSExpression(value) || isJSFunction(value)) {
                                            value = _this.__parseExpression(value, _this);
                                        }
                                        if (typeof value !== 'function') {
                                            utils_logger.error(
                                                'custom method '.concat(key, ' can not be parsed to a valid function'),
                                                value,
                                            );
                                            return;
                                        }
                                        _this[key] = value.bind(_this);
                                    });
                                });
                                base_defineProperty(_this, '__generateCtx', function (ctx) {
                                    var _this$context = _this.context,
                                        pageContext = _this$context.pageContext,
                                        compContext = _this$context.compContext;
                                    var obj = base_objectSpread(
                                        {
                                            page: pageContext,
                                            component: compContext,
                                        },
                                        ctx,
                                    );
                                    forEach(obj, function (val, key) {
                                        _this[key] = val;
                                    });
                                });
                                base_defineProperty(_this, '__parseData', function (data, ctx) {
                                    var _this$props = _this.props,
                                        __ctx = _this$props.__ctx,
                                        thisRequiredInJSE = _this$props.thisRequiredInJSE,
                                        componentName = _this$props.componentName;
                                    return parseData(data, ctx || __ctx || _this, {
                                        thisRequiredInJSE: thisRequiredInJSE,
                                        logScope: componentName,
                                    });
                                });
                                base_defineProperty(_this, '__initDataSource', function (props) {
                                    var _props$__appHelper;
                                    if (!props) {
                                        return;
                                    }
                                    var schema = props.__schema || {};
                                    var defaultDataSource = {
                                        list: [],
                                    };
                                    var dataSource = schema.dataSource || defaultDataSource;
                                    // requestHandlersMap 存在才走数据源引擎方案
                                    // TODO: 下面if else 抽成独立函数
                                    var useDataSourceEngine = !!(
                                        (_props$__appHelper = props.__appHelper) !== null &&
                                        _props$__appHelper !== void 0 &&
                                        _props$__appHelper.requestHandlersMap
                                    );
                                    if (useDataSourceEngine) {
                                        _this.__dataHelper = {
                                            updateConfig: function updateConfig(updateDataSource) {
                                                var _createDataSourceEngi = Object(interpret['create'])(
                                                        updateDataSource !== null && updateDataSource !== void 0
                                                            ? updateDataSource
                                                            : {},
                                                        _this,
                                                        props.__appHelper.requestHandlersMap
                                                            ? {
                                                                  requestHandlersMap:
                                                                      props.__appHelper.requestHandlersMap,
                                                              }
                                                            : undefined,
                                                    ),
                                                    dataSourceMap = _createDataSourceEngi.dataSourceMap,
                                                    reloadDataSource = _createDataSourceEngi.reloadDataSource;
                                                _this.reloadDataSource = function () {
                                                    return new Promise(function (resolve) {
                                                        _this.__debug('reload data source');
                                                        reloadDataSource().then(function () {
                                                            resolve({});
                                                        });
                                                    });
                                                };
                                                return dataSourceMap;
                                            },
                                        };
                                        _this.dataSourceMap = _this.__dataHelper.updateConfig(dataSource);
                                    } else {
                                        var appHelper = props.__appHelper;
                                        _this.__dataHelper = new data_helper_DataHelper(
                                            _this,
                                            dataSource,
                                            appHelper,
                                            function (config) {
                                                return _this.__parseData(config);
                                            },
                                        );
                                        _this.dataSourceMap = _this.__dataHelper.dataSourceMap;
                                        _this.reloadDataSource = function () {
                                            return new Promise(function (resolve, reject) {
                                                _this.__debug('reload data source');
                                                if (!_this.__dataHelper) {
                                                    return resolve({});
                                                }
                                                _this.__dataHelper
                                                    .getInitData()
                                                    .then(function (res) {
                                                        if (Object(lodash['isEmpty'])(res)) {
                                                            return resolve({});
                                                        }
                                                        _this.setState(res, resolve);
                                                    })
                                                    .catch(function (err) {
                                                        reject(err);
                                                    });
                                            });
                                        };
                                    }
                                });
                                /**
                                 * init i18n apis
                                 * @PRIVATE
                                 */
                                base_defineProperty(_this, '__initI18nAPIs', function () {
                                    _this.i18n = function (key) {
                                        var values =
                                            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                                        var _this$props2 = _this.props,
                                            locale = _this$props2.locale,
                                            messages = _this$props2.messages;
                                        return getI18n(key, values, locale, messages);
                                    };
                                    _this.getLocale = function () {
                                        return _this.props.locale;
                                    };
                                    _this.setLocale = function (loc) {
                                        var _this$appHelper, _this$appHelper$utils, _this$appHelper$utils2;
                                        var setLocaleFn =
                                            (_this$appHelper = _this.appHelper) === null || _this$appHelper === void 0
                                                ? void 0
                                                : (_this$appHelper$utils = _this$appHelper.utils) === null ||
                                                  _this$appHelper$utils === void 0
                                                ? void 0
                                                : (_this$appHelper$utils2 = _this$appHelper$utils.i18n) === null ||
                                                  _this$appHelper$utils2 === void 0
                                                ? void 0
                                                : _this$appHelper$utils2.setLocale;
                                        if (!setLocaleFn || typeof setLocaleFn !== 'function') {
                                            utils_logger.warn(
                                                'initI18nAPIs Failed, i18n only works when appHelper.utils.i18n.setLocale() exists',
                                            );
                                            return undefined;
                                        }
                                        return setLocaleFn(loc);
                                    };
                                });
                                /**
                                 * write props.__schema.css to document as a style element,
                                 * which will be added once and only once.
                                 * @PRIVATE
                                 */
                                base_defineProperty(_this, '__writeCss', function (props) {
                                    var css = getValue(props.__schema, 'css', '');
                                    _this.__debug('create this.styleElement with css', css);
                                    var style = _this.__styleElement;
                                    if (!_this.__styleElement) {
                                        style = document.createElement('style');
                                        style.type = 'text/css';
                                        style.setAttribute('from', 'style-sheet');
                                        var head = document.head || document.getElementsByTagName('head')[0];
                                        head.appendChild(style);
                                        _this.__styleElement = style;
                                        _this.__debug('this.styleElement is created', _this.__styleElement);
                                    }
                                    if (style.innerHTML === css) {
                                        return;
                                    }
                                    style.innerHTML = css;
                                });
                                base_defineProperty(_this, '__render', function () {
                                    var schema = _this.props.__schema;
                                    _this.__executeLifeCycleMethod('render');
                                    _this.__writeCss(_this.props);
                                    var engine = _this.context.engine;
                                    if (engine) {
                                        engine.props.onCompGetCtx(schema, _this);
                                        // 画布场景才需要每次渲染bind自定义方法
                                        if (_this.__designModeIsDesign) {
                                            var _this$__dataHelper;
                                            _this.__bindCustomMethods(_this.props);
                                            _this.dataSourceMap =
                                                (_this$__dataHelper = _this.__dataHelper) === null ||
                                                _this$__dataHelper === void 0
                                                    ? void 0
                                                    : _this$__dataHelper.updateConfig(schema.dataSource);
                                        }
                                    }
                                });
                                base_defineProperty(_this, '__getRef', function (ref) {
                                    var _engine$props;
                                    var engine = _this.context.engine;
                                    var __schema = _this.props.__schema;
                                    ref &&
                                        (engine === null || engine === void 0
                                            ? void 0
                                            : (_engine$props = engine.props) === null || _engine$props === void 0
                                            ? void 0
                                            : _engine$props.onCompGetRef(__schema, ref));
                                    _this.__ref = ref;
                                });
                                base_defineProperty(_this, '__createDom', function () {
                                    var _this$props3 = _this.props,
                                        __schema = _this$props3.__schema,
                                        __ctx = _this$props3.__ctx,
                                        _this$props3$__compon = _this$props3.__components,
                                        __components = _this$props3$__compon === void 0 ? {} : _this$props3$__compon;
                                    // merge defaultProps
                                    var scopeProps = base_objectSpread(
                                        base_objectSpread({}, __schema.defaultProps),
                                        _this.props,
                                    );
                                    var scope = {
                                        props: scopeProps,
                                    };
                                    scope.__proto__ = __ctx || _this;
                                    var _children = getSchemaChildren(__schema);
                                    var Comp = __components[__schema.componentName];
                                    if (!Comp) {
                                        _this.__debug(''.concat(__schema.componentName, ' is invalid!'));
                                    }
                                    var parentNodeInfo = {
                                        schema: __schema,
                                        Comp: _this.__getHOCWrappedComponent(Comp, __schema, scope),
                                    };
                                    return _this.__createVirtualDom(_children, scope, parentNodeInfo);
                                });
                                /**
                                 * 将模型结构转换成react Element
                                 * @param originalSchema schema
                                 * @param originalScope scope
                                 * @param parentInfo 父组件的信息，包含schema和Comp
                                 * @param idx 为循环渲染的循环Index
                                 */
                                base_defineProperty(
                                    _this,
                                    '__createVirtualDom',
                                    function (originalSchema, originalScope, parentInfo) {
                                        var idx =
                                            arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
                                        if (originalSchema === null || originalSchema === undefined) {
                                            return null;
                                        }
                                        var scope = originalScope;
                                        var schema = originalSchema;
                                        var _ref = _this.context || {},
                                            engine = _ref.engine;
                                        if (!engine) {
                                            _this.__debug('this.context.engine is invalid!');
                                            return null;
                                        }
                                        try {
                                            var _schema$props,
                                                _this$props$__contain,
                                                _this$props$__contain2,
                                                _engine$props3,
                                                _schema,
                                                _schema$__ctx;
                                            var _ref2 = _this.props || {},
                                                appHelper = _ref2.__appHelper,
                                                _ref2$__components = _ref2.__components,
                                                components = _ref2$__components === void 0 ? {} : _ref2$__components;
                                            if (isJSExpression(schema)) {
                                                return _this.__parseExpression(schema, scope);
                                            }
                                            if (isI18nData(schema)) {
                                                return parseI18n(schema, scope);
                                            }
                                            if (common_isJSSlot(schema)) {
                                                return _this.__createVirtualDom(schema.value, scope, parentInfo);
                                            }
                                            if (typeof schema === 'string') {
                                                return schema;
                                            }
                                            if (typeof schema === 'number' || typeof schema === 'boolean') {
                                                return String(schema);
                                            }
                                            if (Array.isArray(schema)) {
                                                if (schema.length === 1) {
                                                    return _this.__createVirtualDom(schema[0], scope, parentInfo);
                                                }
                                                return schema.map(function (item, idy) {
                                                    var _item$__ctx;
                                                    return _this.__createVirtualDom(
                                                        item,
                                                        scope,
                                                        parentInfo,
                                                        item !== null &&
                                                            item !== void 0 &&
                                                            (_item$__ctx = item.__ctx) !== null &&
                                                            _item$__ctx !== void 0 &&
                                                            _item$__ctx.lceKey
                                                            ? ''
                                                            : String(idy),
                                                    );
                                                });
                                            }
                                            // @ts-expect-error 如果直接转换好了，可以返回
                                            if (schema.$$typeof) {
                                                return schema;
                                            }
                                            var _children = getSchemaChildren(schema);
                                            if (!schema.componentName) {
                                                utils_logger.error(
                                                    'The componentName in the schema is invalid, please check the schema: ',
                                                    schema,
                                                );
                                                return;
                                            }
                                            // 解析占位组件
                                            if (schema.componentName === 'Fragment' && _children) {
                                                var tarChildren = isJSExpression(_children)
                                                    ? _this.__parseExpression(_children, scope)
                                                    : _children;
                                                return _this.__createVirtualDom(tarChildren, scope, parentInfo);
                                            }
                                            if (
                                                schema.componentName === 'Text' &&
                                                typeof ((_schema$props = schema.props) === null ||
                                                _schema$props === void 0
                                                    ? void 0
                                                    : _schema$props.text) === 'string'
                                            ) {
                                                var _schema$props2;
                                                var text =
                                                    (_schema$props2 = schema.props) === null ||
                                                    _schema$props2 === void 0
                                                        ? void 0
                                                        : _schema$props2.text;
                                                schema = base_objectSpread({}, schema);
                                                schema.children = [text];
                                            }
                                            if (!isSchema(schema)) {
                                                return null;
                                            }
                                            var Comp =
                                                components[schema.componentName] ||
                                                ((_this$props$__contain = _this.props.__container) === null ||
                                                _this$props$__contain === void 0
                                                    ? void 0
                                                    : (_this$props$__contain2 = _this$props$__contain.components) ===
                                                          null || _this$props$__contain2 === void 0
                                                    ? void 0
                                                    : _this$props$__contain2[schema.componentName]);
                                            // 容器类组件的上下文通过props传递，避免context传递带来的嵌套问题
                                            var otherProps = isFileSchema(schema)
                                                ? {
                                                      __schema: schema,
                                                      __appHelper: appHelper,
                                                      __components: components,
                                                  }
                                                : {};
                                            if (!Comp) {
                                                var _this$props$__contain3;
                                                utils_logger.error(
                                                    ''.concat(
                                                        schema.componentName,
                                                        ' component is not found in components list! component list is:',
                                                    ),
                                                    components ||
                                                        ((_this$props$__contain3 = _this.props.__container) === null ||
                                                        _this$props$__contain3 === void 0
                                                            ? void 0
                                                            : _this$props$__contain3.components),
                                                );
                                                return engine.createElement(
                                                    engine.getNotFoundComponent(),
                                                    {
                                                        componentName: schema.componentName,
                                                        componentId: schema.id,
                                                        enableStrictNotFoundMode: engine.props.enableStrictNotFoundMode,
                                                        ref: function ref(_ref3) {
                                                            var _engine$props2;
                                                            _ref3 &&
                                                                ((_engine$props2 = engine.props) === null ||
                                                                _engine$props2 === void 0
                                                                    ? void 0
                                                                    : _engine$props2.onCompGetRef(schema, _ref3));
                                                        },
                                                    },
                                                    _this.__getSchemaChildrenVirtualDom(schema, scope, Comp),
                                                );
                                            }
                                            if (schema.loop != null) {
                                                var loop = _this.__parseData(schema.loop, scope);
                                                if (Array.isArray(loop) && loop.length === 0) return null;
                                                var useLoop = isUseLoop(loop, _this.__designModeIsDesign);
                                                if (useLoop) {
                                                    return _this.__createLoopVirtualDom(
                                                        base_objectSpread(
                                                            base_objectSpread({}, schema),
                                                            {},
                                                            {
                                                                loop: loop,
                                                            },
                                                        ),
                                                        scope,
                                                        parentInfo,
                                                        idx,
                                                    );
                                                }
                                            }
                                            var condition =
                                                schema.condition == null
                                                    ? true
                                                    : _this.__parseData(schema.condition, scope);
                                            // DesignMode 为 design 情况下，需要进入 leaf Hoc，进行相关事件注册
                                            var displayInHook = _this.__designModeIsDesign;
                                            if (!condition && !displayInHook) {
                                                return null;
                                            }
                                            var scopeKey = '';
                                            // 判断组件是否需要生成scope，且只生成一次，挂在this.__compScopes上
                                            if (Comp.generateScope) {
                                                var _schema$props3;
                                                var key = _this.__parseExpression(
                                                    (_schema$props3 = schema.props) === null ||
                                                        _schema$props3 === void 0
                                                        ? void 0
                                                        : _schema$props3.key,
                                                    scope,
                                                );
                                                if (key) {
                                                    // 如果组件自己设置key则使用组件自己的key
                                                    scopeKey = key;
                                                } else if (!schema.__ctx) {
                                                    // 在生产环境schema没有__ctx上下文，需要手动生成一个lceKey
                                                    schema.__ctx = {
                                                        lceKey: 'lce'.concat(++scopeIdx),
                                                    };
                                                    scopeKey = schema.__ctx.lceKey;
                                                } else {
                                                    // 需要判断循环的情况
                                                    scopeKey =
                                                        schema.__ctx.lceKey +
                                                        (idx !== undefined ? '_'.concat(idx) : '');
                                                }
                                                if (!_this.__compScopes[scopeKey]) {
                                                    _this.__compScopes[scopeKey] = Comp.generateScope(_this, schema);
                                                }
                                            }
                                            // 如果组件有设置scope，需要为组件生成一个新的scope上下文
                                            if (scopeKey && _this.__compScopes[scopeKey]) {
                                                var compSelf = base_objectSpread({}, _this.__compScopes[scopeKey]);
                                                compSelf.__proto__ = scope;
                                                scope = compSelf;
                                            }
                                            if (
                                                (_engine$props3 = engine.props) !== null &&
                                                _engine$props3 !== void 0 &&
                                                _engine$props3.designMode
                                            ) {
                                                otherProps.__designMode = engine.props.designMode;
                                            }
                                            if (_this.__designModeIsDesign) {
                                                otherProps.__tag = Math.random();
                                            }
                                            var componentInfo = {};
                                            var props =
                                                _this.__getComponentProps(
                                                    schema,
                                                    scope,
                                                    Comp,
                                                    base_objectSpread(
                                                        base_objectSpread({}, componentInfo),
                                                        {},
                                                        {
                                                            props: transformArrayToMap(componentInfo.props, 'name'),
                                                        },
                                                    ),
                                                ) || {};
                                            _this.__componentHOCs.forEach(function (ComponentConstruct) {
                                                Comp = ComponentConstruct(Comp, {
                                                    schema: schema,
                                                    componentInfo: componentInfo,
                                                    baseRenderer: _this,
                                                    scope: scope,
                                                });
                                            });
                                            otherProps.ref = function (ref) {
                                                var _engine$props4;
                                                _this.$(props.fieldId || props.ref, ref); // 收集ref
                                                var refProps = props.ref;
                                                if (refProps && typeof refProps === 'string') {
                                                    _this[refProps] = ref;
                                                }
                                                ref &&
                                                    ((_engine$props4 = engine.props) === null ||
                                                    _engine$props4 === void 0
                                                        ? void 0
                                                        : _engine$props4.onCompGetRef(schema, ref));
                                            };
                                            // scope需要传入到组件上
                                            if (scopeKey && _this.__compScopes[scopeKey]) {
                                                props.__scope = _this.__compScopes[scopeKey];
                                            }
                                            if (
                                                (_schema = schema) !== null &&
                                                _schema !== void 0 &&
                                                (_schema$__ctx = _schema.__ctx) !== null &&
                                                _schema$__ctx !== void 0 &&
                                                _schema$__ctx.lceKey
                                            ) {
                                                if (!isFileSchema(schema)) {
                                                    var _engine$props5;
                                                    (_engine$props5 = engine.props) === null ||
                                                    _engine$props5 === void 0
                                                        ? void 0
                                                        : _engine$props5.onCompGetCtx(schema, scope);
                                                }
                                                props.key =
                                                    props.key ||
                                                    ''
                                                        .concat(schema.__ctx.lceKey, '_')
                                                        .concat(schema.__ctx.idx || 0, '_')
                                                        .concat(idx !== undefined ? idx : '');
                                            } else if (
                                                (typeof idx === 'number' || typeof idx === 'string') &&
                                                !props.key
                                            ) {
                                                // 仅当循环场景走这里
                                                props.key = idx;
                                            }
                                            props.__id = schema.id;
                                            if (!props.key) {
                                                props.key = props.__id;
                                            }
                                            var child = _this.__getSchemaChildrenVirtualDom(
                                                schema,
                                                scope,
                                                Comp,
                                                condition,
                                            );
                                            var renderComp = function renderComp(innerProps) {
                                                return engine.createElement(Comp, innerProps, child);
                                            };
                                            // 设计模式下的特殊处理
                                            if (
                                                engine &&
                                                [DESIGN_MODE.EXTEND, DESIGN_MODE.BORDER].includes(
                                                    engine.props.designMode,
                                                )
                                            ) {
                                                // 对于overlay,dialog等组件为了使其在设计模式下显示，外层需要增加一个div容器
                                                if (OVERLAY_LIST.includes(schema.componentName)) {
                                                    var ref = otherProps.ref,
                                                        overlayProps = base_objectWithoutProperties(
                                                            otherProps,
                                                            base_excluded,
                                                        );
                                                    return createElement(
                                                        Div,
                                                        {
                                                            ref: ref,
                                                            __designMode: engine.props.designMode,
                                                        },
                                                        renderComp(
                                                            base_objectSpread(
                                                                base_objectSpread({}, props),
                                                                overlayProps,
                                                            ),
                                                        ),
                                                    );
                                                }
                                                // 虚拟dom显示
                                                if (
                                                    componentInfo !== null &&
                                                    componentInfo !== void 0 &&
                                                    componentInfo.parentRule
                                                ) {
                                                    var parentList = componentInfo.parentRule.split(',');
                                                    var _parentInfo$schema = parentInfo.schema,
                                                        parentSchema =
                                                            _parentInfo$schema === void 0
                                                                ? {
                                                                      componentName: '',
                                                                  }
                                                                : _parentInfo$schema,
                                                        parentComp = parentInfo.Comp;
                                                    if (
                                                        !parentList.includes(parentSchema.componentName) ||
                                                        parentComp !== components[parentSchema.componentName]
                                                    ) {
                                                        props.__componentName = schema.componentName;
                                                        Comp = VisualDom;
                                                    } else {
                                                        // 若虚拟dom在正常的渲染上下文中，就不显示设计模式了
                                                        props.__disableDesignMode = true;
                                                    }
                                                }
                                            }
                                            return renderComp(
                                                base_objectSpread(
                                                    base_objectSpread(base_objectSpread({}, props), otherProps),
                                                    {},
                                                    {
                                                        __inner__: {
                                                            hidden: schema.hidden,
                                                            condition: condition,
                                                        },
                                                    },
                                                ),
                                            );
                                        } catch (e) {
                                            return engine.createElement(engine.getFaultComponent(), {
                                                error: e,
                                                schema: schema,
                                                self: scope,
                                                parentInfo: parentInfo,
                                                idx: idx,
                                            });
                                        }
                                    },
                                );
                                base_defineProperty(
                                    _this,
                                    '__getSchemaChildrenVirtualDom',
                                    function (schema, scope, Comp) {
                                        var condition =
                                            arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
                                        var children = condition ? getSchemaChildren(schema) : null;
                                        // @todo 补完这里的 Element 定义 @承虎
                                        var result = [];
                                        if (children) {
                                            if (!Array.isArray(children)) {
                                                children = [children];
                                            }
                                            children.forEach(function (child) {
                                                var childVirtualDom = _this.__createVirtualDom(
                                                    isJSExpression(child)
                                                        ? _this.__parseExpression(child, scope)
                                                        : child,
                                                    scope,
                                                    {
                                                        schema: schema,
                                                        Comp: Comp,
                                                    },
                                                );
                                                result.push(childVirtualDom);
                                            });
                                        }
                                        if (result && result.length > 0) {
                                            return result;
                                        }
                                        return null;
                                    },
                                );
                                base_defineProperty(
                                    _this,
                                    '__getComponentProps',
                                    function (schema, scope, Comp, componentInfo) {
                                        if (!schema) {
                                            return {};
                                        }
                                        return (
                                            _this.__parseProps(
                                                schema === null || schema === void 0 ? void 0 : schema.props,
                                                scope,
                                                '',
                                                {
                                                    schema: schema,
                                                    Comp: Comp,
                                                    componentInfo: base_objectSpread(
                                                        base_objectSpread({}, componentInfo || {}),
                                                        {},
                                                        {
                                                            props: transformArrayToMap(
                                                                (componentInfo || {}).props,
                                                                'name',
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ) || {}
                                        );
                                    },
                                );
                                base_defineProperty(
                                    _this,
                                    '__createLoopVirtualDom',
                                    function (schema, scope, parentInfo, idx) {
                                        if (isFileSchema(schema)) {
                                            utils_logger.warn('file type not support Loop');
                                            return null;
                                        }
                                        if (!Array.isArray(schema.loop)) {
                                            return null;
                                        }
                                        var itemArg = (schema.loopArgs && schema.loopArgs[0]) || DEFAULT_LOOP_ARG_ITEM;
                                        var indexArg =
                                            (schema.loopArgs && schema.loopArgs[1]) || DEFAULT_LOOP_ARG_INDEX;
                                        var loop = schema.loop;
                                        return loop.map(function (item, i) {
                                            var _schema$props4, _schema$props5;
                                            var loopSelf = base_defineProperty(
                                                base_defineProperty({}, itemArg, item),
                                                indexArg,
                                                i,
                                            );
                                            loopSelf.__proto__ = scope;
                                            return _this.__createVirtualDom(
                                                base_objectSpread(
                                                    base_objectSpread({}, schema),
                                                    {},
                                                    {
                                                        loop: undefined,
                                                        props: base_objectSpread(
                                                            base_objectSpread({}, schema.props),
                                                            {},
                                                            {
                                                                // 循环下 key 不能为常量，这样会造成 key 值重复，渲染异常
                                                                key: isJSExpression(
                                                                    (_schema$props4 = schema.props) === null ||
                                                                        _schema$props4 === void 0
                                                                        ? void 0
                                                                        : _schema$props4.key,
                                                                )
                                                                    ? (_schema$props5 = schema.props) === null ||
                                                                      _schema$props5 === void 0
                                                                        ? void 0
                                                                        : _schema$props5.key
                                                                    : null,
                                                            },
                                                        ),
                                                    },
                                                ),
                                                loopSelf,
                                                parentInfo,
                                                idx ? ''.concat(idx, '_').concat(i) : i,
                                            );
                                        });
                                    },
                                );
                                base_defineProperty(_this, '__parseProps', function (originalProps, scope, path, info) {
                                    var _propInfo$extra;
                                    var props = originalProps;
                                    var schema = info.schema,
                                        Comp = info.Comp,
                                        _info$componentInfo = info.componentInfo,
                                        componentInfo = _info$componentInfo === void 0 ? {} : _info$componentInfo;
                                    var propInfo = getValue(componentInfo.props, path);
                                    // FIXME: 将这行逻辑外置，解耦，线上环境不要验证参数，调试环境可以有，通过传参自定义
                                    var propType =
                                        propInfo === null || propInfo === void 0
                                            ? void 0
                                            : (_propInfo$extra = propInfo.extra) === null || _propInfo$extra === void 0
                                            ? void 0
                                            : _propInfo$extra.propType;
                                    var checkProps = function checkProps(value) {
                                        if (!propType) {
                                            return value;
                                        }
                                        return checkPropTypes(value, path, propType, componentInfo.name)
                                            ? value
                                            : undefined;
                                    };
                                    var parseReactNode = function parseReactNode(data, params) {
                                        if (Object(lodash['isEmpty'])(params)) {
                                            var virtualDom = _this.__createVirtualDom(data, scope, {
                                                schema: schema,
                                                Comp: Comp,
                                            });
                                            return checkProps(virtualDom);
                                        }
                                        return checkProps(function () {
                                            for (
                                                var _len = arguments.length, argValues = new Array(_len), _key = 0;
                                                _key < _len;
                                                _key++
                                            ) {
                                                argValues[_key] = arguments[_key];
                                            }
                                            var args = {};
                                            if (Array.isArray(params) && params.length) {
                                                params.forEach(function (item, idx) {
                                                    if (typeof item === 'string') {
                                                        args[item] = argValues[idx];
                                                    } else if (item && base_typeof(item) === 'object') {
                                                        args[item.name] = argValues[idx];
                                                    }
                                                });
                                            }
                                            args.__proto__ = scope;
                                            return scope.__createVirtualDom(data, args, {
                                                schema: schema,
                                                Comp: Comp,
                                            });
                                        });
                                    };
                                    if (isJSExpression(props)) {
                                        props = _this.__parseExpression(props, scope);
                                        // 只有当变量解析出来为模型结构的时候才会继续解析
                                        if (!isSchema(props) && !common_isJSSlot(props)) {
                                            return checkProps(props);
                                        }
                                    }
                                    var handleI18nData = function handleI18nData(innerProps) {
                                        return innerProps[
                                            innerProps.use || (_this.getLocale && _this.getLocale()) || 'zh-CN'
                                        ];
                                    };
                                    // @LEGACY 兼容老平台设计态 i18n 数据
                                    if (isI18nData(props)) {
                                        var i18nProp = handleI18nData(props);
                                        if (i18nProp) {
                                            props = i18nProp;
                                        } else {
                                            return parseI18n(props, scope);
                                        }
                                    }
                                    // @LEGACY 兼容老平台设计态的变量绑定
                                    if (common_isVariable(props)) {
                                        props = props.value;
                                        if (isI18nData(props)) {
                                            props = handleI18nData(props);
                                        }
                                    }
                                    if (isJSFunction(props)) {
                                        props = transformStringToFunction(props.value);
                                    }
                                    if (common_isJSSlot(props)) {
                                        var _props3 = props,
                                            params = _props3.params,
                                            value = _props3.value;
                                        if (!isSchema(value) || Object(lodash['isEmpty'])(value)) {
                                            return undefined;
                                        }
                                        return parseReactNode(value, params);
                                    }
                                    // 兼容通过componentInfo判断的情况
                                    if (isSchema(props)) {
                                        var _propInfo$props,
                                            _propInfo$props2,
                                            _propInfo$props2$type,
                                            _propInfo$props3,
                                            _propInfo$props3$reac;
                                        var isReactNodeFunction = !!(
                                            (propInfo === null || propInfo === void 0 ? void 0 : propInfo.type) ===
                                                'ReactNode' &&
                                            (propInfo === null || propInfo === void 0
                                                ? void 0
                                                : (_propInfo$props = propInfo.props) === null ||
                                                  _propInfo$props === void 0
                                                ? void 0
                                                : _propInfo$props.type) === 'function'
                                        );
                                        var isMixinReactNodeFunction = !!(
                                            (propInfo === null || propInfo === void 0 ? void 0 : propInfo.type) ===
                                                'Mixin' &&
                                            (propInfo === null || propInfo === void 0
                                                ? void 0
                                                : (_propInfo$props2 = propInfo.props) === null ||
                                                  _propInfo$props2 === void 0
                                                ? void 0
                                                : (_propInfo$props2$type = _propInfo$props2.types) === null ||
                                                  _propInfo$props2$type === void 0
                                                ? void 0
                                                : _propInfo$props2$type.indexOf('ReactNode')) > -1 &&
                                            (propInfo === null || propInfo === void 0
                                                ? void 0
                                                : (_propInfo$props3 = propInfo.props) === null ||
                                                  _propInfo$props3 === void 0
                                                ? void 0
                                                : (_propInfo$props3$reac = _propInfo$props3.reactNodeProps) === null ||
                                                  _propInfo$props3$reac === void 0
                                                ? void 0
                                                : _propInfo$props3$reac.type) === 'function'
                                        );
                                        var _params = null;
                                        if (isReactNodeFunction) {
                                            var _propInfo$props4;
                                            _params =
                                                propInfo === null || propInfo === void 0
                                                    ? void 0
                                                    : (_propInfo$props4 = propInfo.props) === null ||
                                                      _propInfo$props4 === void 0
                                                    ? void 0
                                                    : _propInfo$props4.params;
                                        } else if (isMixinReactNodeFunction) {
                                            var _propInfo$props5, _propInfo$props5$reac;
                                            _params =
                                                propInfo === null || propInfo === void 0
                                                    ? void 0
                                                    : (_propInfo$props5 = propInfo.props) === null ||
                                                      _propInfo$props5 === void 0
                                                    ? void 0
                                                    : (_propInfo$props5$reac = _propInfo$props5.reactNodeProps) ===
                                                          null || _propInfo$props5$reac === void 0
                                                    ? void 0
                                                    : _propInfo$props5$reac.params;
                                        }
                                        return parseReactNode(props, _params);
                                    }
                                    if (Array.isArray(props)) {
                                        return checkProps(
                                            props.map(function (item, idx) {
                                                return _this.__parseProps(
                                                    item,
                                                    scope,
                                                    path ? ''.concat(path, '.').concat(idx) : ''.concat(idx),
                                                    info,
                                                );
                                            }),
                                        );
                                    }
                                    if (typeof props === 'function') {
                                        return checkProps(props.bind(scope));
                                    }
                                    if (props && base_typeof(props) === 'object') {
                                        if (props.$$typeof) {
                                            return checkProps(props);
                                        }
                                        var res = {};
                                        forEach(props, function (val, key) {
                                            if (key.startsWith('__')) {
                                                res[key] = val;
                                                return;
                                            }
                                            res[key] = _this.__parseProps(
                                                val,
                                                scope,
                                                path ? ''.concat(path, '.').concat(key) : key,
                                                info,
                                            );
                                        });
                                        return checkProps(res);
                                    }
                                    return checkProps(props);
                                });
                                base_defineProperty(_this, '__debug', function () {
                                    utils_logger.debug.apply(utils_logger, arguments);
                                });
                                base_defineProperty(_this, '__renderContextProvider', function (customProps, children) {
                                    return createElement(AppContext.Provider, {
                                        value: base_objectSpread(
                                            base_objectSpread({}, _this.context),
                                            {},
                                            {
                                                blockContext: _this,
                                            },
                                            customProps || {},
                                        ),
                                        children: children || _this.__createDom(),
                                    });
                                });
                                base_defineProperty(_this, '__renderContextConsumer', function (children) {
                                    return createElement(AppContext.Consumer, {}, children);
                                });
                                base_defineProperty(_this, '__checkSchema', function (schema) {
                                    var _schema$componentName;
                                    var originalExtraComponents =
                                        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                                    var extraComponents = originalExtraComponents;
                                    if (typeof extraComponents === 'string') {
                                        extraComponents = [extraComponents];
                                    }
                                    var builtin = capitalizeFirstLetter(_this.__namespace);
                                    var componentNames = [builtin].concat(base_toConsumableArray(extraComponents));
                                    return (
                                        !isSchema(schema) ||
                                        !componentNames.includes(
                                            (_schema$componentName =
                                                schema === null || schema === void 0
                                                    ? void 0
                                                    : schema.componentName) !== null && _schema$componentName !== void 0
                                                ? _schema$componentName
                                                : '',
                                        )
                                    );
                                });
                                _this.context = context;
                                _this.__parseExpression = function (str, self) {
                                    return parseExpression({
                                        str: str,
                                        self: self,
                                        thisRequired:
                                            _props2 === null || _props2 === void 0 ? void 0 : _props2.thisRequiredInJSE,
                                        logScope: _props2.componentName,
                                    });
                                };
                                _this.__beforeInit(_props2);
                                _this.__init(_props2);
                                _this.__afterInit(_props2);
                                _this.__debug(
                                    'constructor - '.concat(
                                        _props2 === null || _props2 === void 0
                                            ? void 0
                                            : (_props2$__schema = _props2.__schema) === null ||
                                              _props2$__schema === void 0
                                            ? void 0
                                            : _props2$__schema.fileName,
                                    ),
                                );
                                return _this;
                            }
                            // eslint-disable-next-line @typescript-eslint/no-unused-vars
                            base_inherits(BaseRenderer, _Component);
                            return base_createClass(
                                BaseRenderer,
                                [
                                    {
                                        key: '__beforeInit',
                                        value: function __beforeInit(_props) {},
                                    },
                                    {
                                        key: '__init',
                                        value: function __init(props) {
                                            this.__compScopes = {};
                                            this.__instanceMap = {};
                                            this.__bindCustomMethods(props);
                                            this.__initI18nAPIs();
                                        },
                                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                                    },
                                    {
                                        key: '__afterInit',
                                        value: function __afterInit(_props) {},
                                    },
                                    {
                                        key: 'getSnapshotBeforeUpdate',
                                        value: (function () {
                                            var _getSnapshotBeforeUpdate = base_asyncToGenerator(
                                                /*#__PURE__*/ base_regenerator().m(function _callee() {
                                                    var _this$props4, _this$props4$__schema;
                                                    var _len2,
                                                        args,
                                                        _key2,
                                                        _args = arguments;
                                                    return base_regenerator().w(
                                                        function (_context) {
                                                            while (1)
                                                                switch (_context.n) {
                                                                    case 0:
                                                                        for (
                                                                            _len2 = _args.length,
                                                                                args = new Array(_len2),
                                                                                _key2 = 0;
                                                                            _key2 < _len2;
                                                                            _key2++
                                                                        ) {
                                                                            args[_key2] = _args[_key2];
                                                                        }
                                                                        this.__executeLifeCycleMethod(
                                                                            'getSnapshotBeforeUpdate',
                                                                            args,
                                                                        );
                                                                        this.__debug(
                                                                            'getSnapshotBeforeUpdate - '.concat(
                                                                                (_this$props4 = this.props) === null ||
                                                                                    _this$props4 === void 0
                                                                                    ? void 0
                                                                                    : (_this$props4$__schema =
                                                                                          _this$props4.__schema) ===
                                                                                          null ||
                                                                                      _this$props4$__schema === void 0
                                                                                    ? void 0
                                                                                    : _this$props4$__schema.fileName,
                                                                            ),
                                                                        );
                                                                    case 1:
                                                                        return _context.a(2);
                                                                }
                                                        },
                                                        _callee,
                                                        this,
                                                    );
                                                }),
                                            );
                                            function getSnapshotBeforeUpdate() {
                                                return _getSnapshotBeforeUpdate.apply(this, arguments);
                                            }
                                            return getSnapshotBeforeUpdate;
                                        })(),
                                    },
                                    {
                                        key: 'componentDidMount',
                                        value: (function () {
                                            var _componentDidMount = base_asyncToGenerator(
                                                /*#__PURE__*/ base_regenerator().m(function _callee2() {
                                                    var _this$props5, _this$props5$__schema;
                                                    var _len3,
                                                        args,
                                                        _key3,
                                                        _args2 = arguments;
                                                    return base_regenerator().w(
                                                        function (_context2) {
                                                            while (1)
                                                                switch (_context2.n) {
                                                                    case 0:
                                                                        this.reloadDataSource();
                                                                        for (
                                                                            _len3 = _args2.length,
                                                                                args = new Array(_len3),
                                                                                _key3 = 0;
                                                                            _key3 < _len3;
                                                                            _key3++
                                                                        ) {
                                                                            args[_key3] = _args2[_key3];
                                                                        }
                                                                        this.__executeLifeCycleMethod(
                                                                            'componentDidMount',
                                                                            args,
                                                                        );
                                                                        this.__debug(
                                                                            'componentDidMount - '.concat(
                                                                                (_this$props5 = this.props) === null ||
                                                                                    _this$props5 === void 0
                                                                                    ? void 0
                                                                                    : (_this$props5$__schema =
                                                                                          _this$props5.__schema) ===
                                                                                          null ||
                                                                                      _this$props5$__schema === void 0
                                                                                    ? void 0
                                                                                    : _this$props5$__schema.fileName,
                                                                            ),
                                                                        );
                                                                    case 1:
                                                                        return _context2.a(2);
                                                                }
                                                        },
                                                        _callee2,
                                                        this,
                                                    );
                                                }),
                                            );
                                            function componentDidMount() {
                                                return _componentDidMount.apply(this, arguments);
                                            }
                                            return componentDidMount;
                                        })(),
                                    },
                                    {
                                        key: 'componentDidUpdate',
                                        value: (function () {
                                            var _componentDidUpdate = base_asyncToGenerator(
                                                /*#__PURE__*/ base_regenerator().m(function _callee3() {
                                                    var _len4,
                                                        args,
                                                        _key4,
                                                        _args3 = arguments;
                                                    return base_regenerator().w(
                                                        function (_context3) {
                                                            while (1)
                                                                switch (_context3.n) {
                                                                    case 0:
                                                                        for (
                                                                            _len4 = _args3.length,
                                                                                args = new Array(_len4),
                                                                                _key4 = 0;
                                                                            _key4 < _len4;
                                                                            _key4++
                                                                        ) {
                                                                            args[_key4] = _args3[_key4];
                                                                        }
                                                                        this.__executeLifeCycleMethod(
                                                                            'componentDidUpdate',
                                                                            args,
                                                                        );
                                                                        this.__debug(
                                                                            'componentDidUpdate - '.concat(
                                                                                this.props.__schema.fileName,
                                                                            ),
                                                                        );
                                                                    case 1:
                                                                        return _context3.a(2);
                                                                }
                                                        },
                                                        _callee3,
                                                        this,
                                                    );
                                                }),
                                            );
                                            function componentDidUpdate() {
                                                return _componentDidUpdate.apply(this, arguments);
                                            }
                                            return componentDidUpdate;
                                        })(),
                                    },
                                    {
                                        key: 'componentWillUnmount',
                                        value: (function () {
                                            var _componentWillUnmount = base_asyncToGenerator(
                                                /*#__PURE__*/ base_regenerator().m(function _callee4() {
                                                    var _this$props6, _this$props6$__schema;
                                                    var _len5,
                                                        args,
                                                        _key5,
                                                        _args4 = arguments;
                                                    return base_regenerator().w(
                                                        function (_context4) {
                                                            while (1)
                                                                switch (_context4.n) {
                                                                    case 0:
                                                                        for (
                                                                            _len5 = _args4.length,
                                                                                args = new Array(_len5),
                                                                                _key5 = 0;
                                                                            _key5 < _len5;
                                                                            _key5++
                                                                        ) {
                                                                            args[_key5] = _args4[_key5];
                                                                        }
                                                                        this.__executeLifeCycleMethod(
                                                                            'componentWillUnmount',
                                                                            args,
                                                                        );
                                                                        this.__debug(
                                                                            'componentWillUnmount - '.concat(
                                                                                (_this$props6 = this.props) === null ||
                                                                                    _this$props6 === void 0
                                                                                    ? void 0
                                                                                    : (_this$props6$__schema =
                                                                                          _this$props6.__schema) ===
                                                                                          null ||
                                                                                      _this$props6$__schema === void 0
                                                                                    ? void 0
                                                                                    : _this$props6$__schema.fileName,
                                                                            ),
                                                                        );
                                                                    case 1:
                                                                        return _context4.a(2);
                                                                }
                                                        },
                                                        _callee4,
                                                        this,
                                                    );
                                                }),
                                            );
                                            function componentWillUnmount() {
                                                return _componentWillUnmount.apply(this, arguments);
                                            }
                                            return componentWillUnmount;
                                        })(),
                                    },
                                    {
                                        key: 'componentDidCatch',
                                        value: (function () {
                                            var _componentDidCatch = base_asyncToGenerator(
                                                /*#__PURE__*/ base_regenerator().m(function _callee5() {
                                                    var _len6,
                                                        args,
                                                        _key6,
                                                        _args5 = arguments;
                                                    return base_regenerator().w(
                                                        function (_context5) {
                                                            while (1)
                                                                switch (_context5.n) {
                                                                    case 0:
                                                                        for (
                                                                            _len6 = _args5.length,
                                                                                args = new Array(_len6),
                                                                                _key6 = 0;
                                                                            _key6 < _len6;
                                                                            _key6++
                                                                        ) {
                                                                            args[_key6] = _args5[_key6];
                                                                        }
                                                                        this.__executeLifeCycleMethod(
                                                                            'componentDidCatch',
                                                                            args,
                                                                        );
                                                                        utils_logger.warn(args);
                                                                    case 1:
                                                                        return _context5.a(2);
                                                                }
                                                        },
                                                        _callee5,
                                                        this,
                                                    );
                                                }),
                                            );
                                            function componentDidCatch() {
                                                return _componentDidCatch.apply(this, arguments);
                                            }
                                            return componentDidCatch;
                                        })(),
                                    },
                                    {
                                        key: 'shouldComponentUpdate',
                                        value: function shouldComponentUpdate() {
                                            var _this$props$getSchema, _this$props7, _this$props$__contain4;
                                            if (
                                                (_this$props$getSchema = (_this$props7 = this.props)
                                                    .getSchemaChangedSymbol) !== null &&
                                                _this$props$getSchema !== void 0 &&
                                                _this$props$getSchema.call(_this$props7) &&
                                                (_this$props$__contain4 = this.props.__container) !== null &&
                                                _this$props$__contain4 !== void 0 &&
                                                _this$props$__contain4.rerender
                                            ) {
                                                var _this$props$__contain5;
                                                (_this$props$__contain5 = this.props.__container) === null ||
                                                _this$props$__contain5 === void 0
                                                    ? void 0
                                                    : _this$props$__contain5.rerender();
                                                return false;
                                            }
                                            return true;
                                        },
                                    },
                                    {
                                        key: 'forceUpdate',
                                        value: function forceUpdate() {
                                            if (this.shouldComponentUpdate()) {
                                                base_superPropGet(BaseRenderer, 'forceUpdate', this, 3)([]);
                                            }
                                        },
                                    },
                                    {
                                        key: '__componentHOCs',
                                        get:
                                            /**
                                             * get Component HOCs
                                             *
                                             * @readonly
                                             * @type {IComponentConstruct[]}
                                             */
                                            function get() {
                                                if (this.__designModeIsDesign) {
                                                    return [leafWrapper, compWrapper];
                                                }
                                                return [compWrapper];
                                            },
                                    },
                                    {
                                        key: '__designModeIsDesign',
                                        get: function get() {
                                            var _engine$props6;
                                            var _ref4 = this.context || {},
                                                engine = _ref4.engine;
                                            return (
                                                (engine === null || engine === void 0
                                                    ? void 0
                                                    : (_engine$props6 = engine.props) === null ||
                                                      _engine$props6 === void 0
                                                    ? void 0
                                                    : _engine$props6.designMode) === 'design'
                                            );
                                        },
                                    },
                                    {
                                        key: '$',
                                        value: function $(filedId, instance) {
                                            this.__instanceMap = this.__instanceMap || {};
                                            if (!filedId || typeof filedId !== 'string') {
                                                return this.__instanceMap;
                                            }
                                            if (instance) {
                                                this.__instanceMap[filedId] = instance;
                                            }
                                            return this.__instanceMap[filedId];
                                        },
                                    },
                                    {
                                        key: '__getHOCWrappedComponent',
                                        value: function __getHOCWrappedComponent(OriginalComp, schema, scope) {
                                            var _this2 = this;
                                            var Comp = OriginalComp;
                                            this.__componentHOCs.forEach(function (ComponentConstruct) {
                                                Comp = ComponentConstruct(Comp || Div, {
                                                    schema: schema,
                                                    componentInfo: {},
                                                    baseRenderer: _this2,
                                                    scope: scope,
                                                });
                                            });
                                            return Comp;
                                        },
                                    },
                                    {
                                        key: '__renderComp',
                                        value: function __renderComp(OriginalComp, ctxProps) {
                                            var Comp = OriginalComp;
                                            var _this$props8 = this.props,
                                                __schema = _this$props8.__schema,
                                                __ctx = _this$props8.__ctx;
                                            var scope = {};
                                            scope.__proto__ = __ctx || this;
                                            Comp = this.__getHOCWrappedComponent(Comp, __schema, scope);
                                            var data = this.__parseProps(
                                                __schema === null || __schema === void 0 ? void 0 : __schema.props,
                                                scope,
                                                '',
                                                {
                                                    schema: __schema,
                                                    Comp: Comp,
                                                    componentInfo: {},
                                                },
                                            );
                                            var className = data.className;
                                            var otherProps = {};
                                            var _ref5 = this.context || {},
                                                engine = _ref5.engine;
                                            if (!engine) {
                                                return null;
                                            }
                                            if (this.__designModeIsDesign) {
                                                otherProps.__tag = Math.random();
                                            }
                                            var child = engine.createElement(
                                                Comp,
                                                base_objectSpread(
                                                    base_objectSpread(base_objectSpread({}, data), this.props),
                                                    {},
                                                    {
                                                        ref: this.__getRef,
                                                        className: classnames_default()(
                                                            getFileCssName(
                                                                __schema === null || __schema === void 0
                                                                    ? void 0
                                                                    : __schema.fileName,
                                                            ),
                                                            className,
                                                            this.props.className,
                                                        ),
                                                        __id:
                                                            __schema === null || __schema === void 0
                                                                ? void 0
                                                                : __schema.id,
                                                    },
                                                    otherProps,
                                                ),
                                                this.__createDom(),
                                            );
                                            return this.__renderContextProvider(ctxProps, child);
                                        },
                                    },
                                    {
                                        key: '__renderContent',
                                        value: function __renderContent(children) {
                                            var __schema = this.props.__schema;
                                            var parsedProps = this.__parseData(__schema.props);
                                            var className = classnames_default()(
                                                'lce-'.concat(this.__namespace),
                                                getFileCssName(__schema.fileName),
                                                parsedProps.className,
                                                this.props.className,
                                            );
                                            var style = base_objectSpread(
                                                base_objectSpread({}, parsedProps.style || {}),
                                                base_typeof(this.props.style) === 'object' ? this.props.style : {},
                                            );
                                            var id = this.props.id || parsedProps.id;
                                            return createElement(
                                                'div',
                                                {
                                                    ref: this.__getRef,
                                                    className: className,
                                                    id: id,
                                                    style: style,
                                                },
                                                children,
                                            );
                                        },
                                    },
                                    {
                                        key: 'appHelper',
                                        get: function get() {
                                            return this.props.__appHelper;
                                        },
                                    },
                                    {
                                        key: 'requestHandlersMap',
                                        get: function get() {
                                            var _this$appHelper2;
                                            return (_this$appHelper2 = this.appHelper) === null ||
                                                _this$appHelper2 === void 0
                                                ? void 0
                                                : _this$appHelper2.requestHandlersMap;
                                        },
                                    },
                                    {
                                        key: 'utils',
                                        get: function get() {
                                            var _this$appHelper3;
                                            return (_this$appHelper3 = this.appHelper) === null ||
                                                _this$appHelper3 === void 0
                                                ? void 0
                                                : _this$appHelper3.utils;
                                        },
                                    },
                                    {
                                        key: 'constants',
                                        get: function get() {
                                            var _this$appHelper4;
                                            return (_this$appHelper4 = this.appHelper) === null ||
                                                _this$appHelper4 === void 0
                                                ? void 0
                                                : _this$appHelper4.constants;
                                        },
                                    },
                                    {
                                        key: 'history',
                                        get: function get() {
                                            var _this$appHelper5;
                                            return (_this$appHelper5 = this.appHelper) === null ||
                                                _this$appHelper5 === void 0
                                                ? void 0
                                                : _this$appHelper5.history;
                                        },
                                    },
                                    {
                                        key: 'location',
                                        get: function get() {
                                            var _this$appHelper6;
                                            return (_this$appHelper6 = this.appHelper) === null ||
                                                _this$appHelper6 === void 0
                                                ? void 0
                                                : _this$appHelper6.location;
                                        },
                                    },
                                    {
                                        key: 'match',
                                        get: function get() {
                                            var _this$appHelper7;
                                            return (_this$appHelper7 = this.appHelper) === null ||
                                                _this$appHelper7 === void 0
                                                ? void 0
                                                : _this$appHelper7.match;
                                        },
                                    },
                                    {
                                        key: 'render',
                                        value: function render() {
                                            return null;
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: 'getDerivedStateFromProps',
                                        value: function getDerivedStateFromProps(props, state) {
                                            var result = executeLifeCycleMethod(
                                                this,
                                                props === null || props === void 0 ? void 0 : props.__schema,
                                                'getDerivedStateFromProps',
                                                [props, state],
                                                props.thisRequiredInJSE,
                                            );
                                            return result === undefined ? null : result;
                                        },
                                    },
                                ],
                            );
                        })(Component)),
                        base_defineProperty(_BaseRenderer, 'displayName', 'BaseRenderer'),
                        base_defineProperty(_BaseRenderer, 'defaultProps', {
                            __schema: {},
                        }),
                        base_defineProperty(_BaseRenderer, 'contextType', AppContext),
                        _BaseRenderer
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/page.tsx
                function page_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (page_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        page_typeof(o)
                    );
                }
                function page_regenerator() {
                    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
                        t,
                        r = 'function' == typeof Symbol ? Symbol : {},
                        n = r.iterator || '@@iterator',
                        o = r.toStringTag || '@@toStringTag';
                    function i(r, n, o, i) {
                        var c = n && n.prototype instanceof Generator ? n : Generator,
                            u = Object.create(c.prototype);
                        return (
                            page_regeneratorDefine2(
                                u,
                                '_invoke',
                                (function (r, n, o) {
                                    var i,
                                        c,
                                        u,
                                        f = 0,
                                        p = o || [],
                                        y = !1,
                                        G = {
                                            p: 0,
                                            n: 0,
                                            v: e,
                                            a: d,
                                            f: d.bind(e, 4),
                                            d: function d(t, r) {
                                                return (i = t), (c = 0), (u = e), (G.n = r), a;
                                            },
                                        };
                                    function d(r, n) {
                                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                                            var o,
                                                i = p[t],
                                                d = G.p,
                                                l = i[2];
                                            r > 3
                                                ? (o = l === n) &&
                                                  ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]), (i[4] = i[5] = e))
                                                : i[0] <= d &&
                                                  ((o = r < 2 && d < i[1])
                                                      ? ((c = 0), (G.v = n), (G.n = i[1]))
                                                      : d < l &&
                                                        (o = r < 3 || i[0] > n || n > l) &&
                                                        ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                                        }
                                        if (o || r > 1) return a;
                                        throw ((y = !0), n);
                                    }
                                    return function (o, p, l) {
                                        if (f > 1) throw TypeError('Generator is already running');
                                        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y; ) {
                                            i || (c ? (c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : (G.n = u)) : (G.v = u));
                                            try {
                                                if (((f = 2), i)) {
                                                    if ((c || (o = 'next'), (t = i[o]))) {
                                                        if (!(t = t.call(i, u)))
                                                            throw TypeError('iterator result is not an object');
                                                        if (!t.done) return t;
                                                        (u = t.value), c < 2 && (c = 0);
                                                    } else
                                                        1 === c && (t = i.return) && t.call(i),
                                                            c < 2 &&
                                                                ((u = TypeError(
                                                                    "The iterator does not provide a '" +
                                                                        o +
                                                                        "' method",
                                                                )),
                                                                (c = 1));
                                                    i = e;
                                                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
                                            } catch (t) {
                                                (i = e), (c = 1), (u = t);
                                            } finally {
                                                f = 1;
                                            }
                                        }
                                        return { value: t, done: y };
                                    };
                                })(r, o, i),
                                !0,
                            ),
                            u
                        );
                    }
                    var a = {};
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}
                    t = Object.getPrototypeOf;
                    var c = [][n]
                            ? t(t([][n]()))
                            : (page_regeneratorDefine2((t = {}), n, function () {
                                  return this;
                              }),
                              t),
                        u = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c));
                    function f(e) {
                        return (
                            Object.setPrototypeOf
                                ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                                : ((e.__proto__ = GeneratorFunctionPrototype),
                                  page_regeneratorDefine2(e, o, 'GeneratorFunction')),
                            (e.prototype = Object.create(u)),
                            e
                        );
                    }
                    return (
                        (GeneratorFunction.prototype = GeneratorFunctionPrototype),
                        page_regeneratorDefine2(u, 'constructor', GeneratorFunctionPrototype),
                        page_regeneratorDefine2(GeneratorFunctionPrototype, 'constructor', GeneratorFunction),
                        (GeneratorFunction.displayName = 'GeneratorFunction'),
                        page_regeneratorDefine2(GeneratorFunctionPrototype, o, 'GeneratorFunction'),
                        page_regeneratorDefine2(u),
                        page_regeneratorDefine2(u, o, 'Generator'),
                        page_regeneratorDefine2(u, n, function () {
                            return this;
                        }),
                        page_regeneratorDefine2(u, 'toString', function () {
                            return '[object Generator]';
                        }),
                        (page_regenerator = function _regenerator() {
                            return { w: i, m: f };
                        })()
                    );
                }
                function page_regeneratorDefine2(e, r, n, t) {
                    var i = Object.defineProperty;
                    try {
                        i({}, '', {});
                    } catch (e) {
                        i = 0;
                    }
                    (page_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
                        function o(r, n) {
                            page_regeneratorDefine2(e, r, function (e) {
                                return this._invoke(r, n, e);
                            });
                        }
                        r
                            ? i
                                ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t })
                                : (e[r] = n)
                            : (o('next', 0), o('throw', 1), o('return', 2));
                    }),
                        page_regeneratorDefine2(e, r, n, t);
                }
                function page_asyncGeneratorStep(n, t, e, r, o, a, c) {
                    try {
                        var i = n[a](c),
                            u = i.value;
                    } catch (n) {
                        return void e(n);
                    }
                    i.done ? t(u) : Promise.resolve(u).then(r, o);
                }
                function page_asyncToGenerator(n) {
                    return function () {
                        var t = this,
                            e = arguments;
                        return new Promise(function (r, o) {
                            var a = n.apply(t, e);
                            function _next(n) {
                                page_asyncGeneratorStep(a, r, o, _next, _throw, 'next', n);
                            }
                            function _throw(n) {
                                page_asyncGeneratorStep(a, r, o, _next, _throw, 'throw', n);
                            }
                            _next(void 0);
                        });
                    };
                }
                function page_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function page_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, page_toPropertyKey(o.key), o);
                    }
                }
                function page_createClass(e, r, t) {
                    return (
                        r && page_defineProperties(e.prototype, r),
                        t && page_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function page_callSuper(t, o, e) {
                    return (
                        (o = page_getPrototypeOf(o)),
                        page_possibleConstructorReturn(
                            t,
                            page_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], page_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function page_possibleConstructorReturn(t, e) {
                    if (e && ('object' == page_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return page_assertThisInitialized(t);
                }
                function page_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function page_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (page_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function page_superPropGet(t, o, e, r) {
                    var p = page_get(page_getPrototypeOf(1 & r ? t.prototype : t), o, e);
                    return 2 & r && 'function' == typeof p
                        ? function (t) {
                              return p.apply(e, t);
                          }
                        : p;
                }
                function page_get() {
                    return (
                        (page_get =
                            'undefined' != typeof Reflect && Reflect.get
                                ? Reflect.get.bind()
                                : function (e, t, r) {
                                      var p = page_superPropBase(e, t);
                                      if (p) {
                                          var n = Object.getOwnPropertyDescriptor(p, t);
                                          return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
                                      }
                                  }),
                        page_get.apply(null, arguments)
                    );
                }
                function page_superPropBase(t, o) {
                    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = page_getPrototypeOf(t)); );
                    return t;
                }
                function page_getPrototypeOf(t) {
                    return (
                        (page_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        page_getPrototypeOf(t)
                    );
                }
                function page_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && page_setPrototypeOf(t, e);
                }
                function page_setPrototypeOf(t, e) {
                    return (
                        (page_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        page_setPrototypeOf(t, e)
                    );
                }
                function page_defineProperty(e, r, t) {
                    return (
                        (r = page_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function page_toPropertyKey(t) {
                    var i = page_toPrimitive(t, 'string');
                    return 'symbol' == page_typeof(i) ? i : i + '';
                }
                function page_toPrimitive(t, r) {
                    if ('object' != page_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != page_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                var page_logger = getLogger({
                    level: 'warn',
                    bizName: 'renderer-core:page',
                });
                function pageRendererFactory() {
                    var _PageRenderer;
                    var BaseRenderer = baseRendererFactory();
                    return (
                        (_PageRenderer = /*#__PURE__*/ (function (_BaseRenderer) {
                            function PageRenderer() {
                                var _this;
                                page_classCallCheck(this, PageRenderer);
                                for (
                                    var _len = arguments.length, args = new Array(_len), _key = 0;
                                    _key < _len;
                                    _key++
                                ) {
                                    args[_key] = arguments[_key];
                                }
                                _this = page_callSuper(this, PageRenderer, [].concat(args));
                                page_defineProperty(_this, '__namespace', 'page');
                                return _this;
                            }
                            page_inherits(PageRenderer, _BaseRenderer);
                            return page_createClass(PageRenderer, [
                                {
                                    key: '__afterInit',
                                    value: function __afterInit(props) {
                                        this.__generateCtx({
                                            page: this,
                                        });
                                        var schema = props.__schema || {};
                                        this.state = this.__parseData(schema.state || {});
                                        this.__initDataSource(props);
                                        for (
                                            var _len2 = arguments.length,
                                                rest = new Array(_len2 > 1 ? _len2 - 1 : 0),
                                                _key2 = 1;
                                            _key2 < _len2;
                                            _key2++
                                        ) {
                                            rest[_key2 - 1] = arguments[_key2];
                                        }
                                        this.__executeLifeCycleMethod('constructor', [props].concat(rest));
                                    },
                                },
                                {
                                    key: 'componentDidUpdate',
                                    value: (function () {
                                        var _componentDidUpdate = page_asyncToGenerator(
                                            /*#__PURE__*/ page_regenerator().m(function _callee(
                                                prevProps,
                                                _prevState,
                                                snapshot,
                                            ) {
                                                var _superPropGet2;
                                                var __ctx, newState;
                                                return page_regenerator().w(
                                                    function (_context) {
                                                        while (1)
                                                            switch (_context.n) {
                                                                case 0:
                                                                    __ctx = this.props.__ctx; // 当编排的时候修改 schema.state 值，需要将最新 schema.state 值 setState
                                                                    if (
                                                                        JSON.stringify(prevProps.__schema.state) !=
                                                                        JSON.stringify(this.props.__schema.state)
                                                                    ) {
                                                                        newState = this.__parseData(
                                                                            this.props.__schema.state,
                                                                            __ctx,
                                                                        );
                                                                        this.setState(newState);
                                                                    }
                                                                    (_superPropGet2 = page_superPropGet(
                                                                        PageRenderer,
                                                                        'componentDidUpdate',
                                                                        this,
                                                                        3,
                                                                    )) === null || _superPropGet2 === void 0
                                                                        ? void 0
                                                                        : _superPropGet2([
                                                                              prevProps,
                                                                              _prevState,
                                                                              snapshot,
                                                                          ]);
                                                                case 1:
                                                                    return _context.a(2);
                                                            }
                                                    },
                                                    _callee,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentDidUpdate(_x, _x2, _x3) {
                                            return _componentDidUpdate.apply(this, arguments);
                                        }
                                        return componentDidUpdate;
                                    })(),
                                },
                                {
                                    key: 'setState',
                                    value: function setState(state, callback) {
                                        page_logger.info('page set state', state);
                                        page_superPropGet(PageRenderer, 'setState', this, 3)([state, callback]);
                                    },
                                },
                                {
                                    key: 'render',
                                    value: function render() {
                                        var _this$props = this.props,
                                            __schema = _this$props.__schema,
                                            __components = _this$props.__components;
                                        if (this.__checkSchema(__schema)) {
                                            return '页面schema结构异常！';
                                        }
                                        this.__debug(
                                            ''.concat(PageRenderer.displayName, ' render - ').concat(__schema.fileName),
                                        );
                                        this.__bindCustomMethods(this.props);
                                        this.__initDataSource(this.props);
                                        this.__generateCtx({
                                            page: this,
                                        });
                                        this.__render();
                                        var Page = __components.Page;
                                        if (Page) {
                                            return this.__renderComp(Page, {
                                                pageContext: this,
                                            });
                                        }
                                        return this.__renderContent(
                                            this.__renderContextProvider({
                                                pageContext: this,
                                            }),
                                        );
                                    },
                                },
                            ]);
                        })(BaseRenderer)),
                        page_defineProperty(_PageRenderer, 'displayName', 'PageRenderer'),
                        _PageRenderer
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/component.tsx
                function component_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (component_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        component_typeof(o)
                    );
                }
                function component_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function component_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, component_toPropertyKey(o.key), o);
                    }
                }
                function component_createClass(e, r, t) {
                    return (
                        r && component_defineProperties(e.prototype, r),
                        t && component_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function component_callSuper(t, o, e) {
                    return (
                        (o = component_getPrototypeOf(o)),
                        component_possibleConstructorReturn(
                            t,
                            component_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], component_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function component_possibleConstructorReturn(t, e) {
                    if (e && ('object' == component_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return component_assertThisInitialized(t);
                }
                function component_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function component_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (component_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function component_getPrototypeOf(t) {
                    return (
                        (component_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        component_getPrototypeOf(t)
                    );
                }
                function component_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && component_setPrototypeOf(t, e);
                }
                function component_setPrototypeOf(t, e) {
                    return (
                        (component_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        component_setPrototypeOf(t, e)
                    );
                }
                function component_defineProperty(e, r, t) {
                    return (
                        (r = component_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function component_toPropertyKey(t) {
                    var i = component_toPrimitive(t, 'string');
                    return 'symbol' == component_typeof(i) ? i : i + '';
                }
                function component_toPrimitive(t, r) {
                    if ('object' != component_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != component_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function componentRendererFactory() {
                    var _CompRenderer;
                    var BaseRenderer = baseRendererFactory();
                    return (
                        (_CompRenderer = /*#__PURE__*/ (function (_BaseRenderer) {
                            function CompRenderer() {
                                var _this;
                                component_classCallCheck(this, CompRenderer);
                                for (
                                    var _len = arguments.length, args = new Array(_len), _key = 0;
                                    _key < _len;
                                    _key++
                                ) {
                                    args[_key] = arguments[_key];
                                }
                                _this = component_callSuper(this, CompRenderer, [].concat(args));
                                component_defineProperty(_this, '__namespace', 'component');
                                return _this;
                            }
                            component_inherits(CompRenderer, _BaseRenderer);
                            return component_createClass(CompRenderer, [
                                {
                                    key: '__afterInit',
                                    value: function __afterInit(props) {
                                        this.__generateCtx({
                                            component: this,
                                        });
                                        var schema = props.__schema || {};
                                        this.state = this.__parseData(schema.state || {});
                                        this.__initDataSource(props);
                                        this.__executeLifeCycleMethod('constructor', arguments);
                                    },
                                },
                                {
                                    key: 'render',
                                    value: function render() {
                                        var _schema$props;
                                        var _this$props = this.props,
                                            __schema = _this$props.__schema,
                                            __components = _this$props.__components;
                                        if (this.__checkSchema(__schema)) {
                                            return '自定义组件 schema 结构异常！';
                                        }
                                        this.__debug(
                                            ''.concat(CompRenderer.displayName, ' render - ').concat(__schema.fileName),
                                        );
                                        this.__generateCtx({
                                            component: this,
                                        });
                                        this.__render();
                                        var noContainer = this.__parseData(
                                            (_schema$props = __schema.props) === null || _schema$props === void 0
                                                ? void 0
                                                : _schema$props.noContainer,
                                        );
                                        this.__bindCustomMethods(this.props);
                                        if (noContainer) {
                                            return this.__renderContextProvider({
                                                compContext: this,
                                            });
                                        }
                                        var Component =
                                            __components === null || __components === void 0
                                                ? void 0
                                                : __components[
                                                      __schema === null || __schema === void 0
                                                          ? void 0
                                                          : __schema.componentName
                                                  ];
                                        if (!Component) {
                                            return this.__renderContent(
                                                this.__renderContextProvider({
                                                    compContext: this,
                                                }),
                                            );
                                        }
                                        return this.__renderComp(
                                            Component,
                                            this.__renderContextProvider({
                                                compContext: this,
                                            }),
                                        );
                                    },
                                },
                            ]);
                        })(BaseRenderer)),
                        component_defineProperty(_CompRenderer, 'displayName', 'CompRenderer'),
                        _CompRenderer
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/block.tsx
                function block_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (block_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        block_typeof(o)
                    );
                }
                function block_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function block_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, block_toPropertyKey(o.key), o);
                    }
                }
                function block_createClass(e, r, t) {
                    return (
                        r && block_defineProperties(e.prototype, r),
                        t && block_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function block_callSuper(t, o, e) {
                    return (
                        (o = block_getPrototypeOf(o)),
                        block_possibleConstructorReturn(
                            t,
                            block_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], block_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function block_possibleConstructorReturn(t, e) {
                    if (e && ('object' == block_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return block_assertThisInitialized(t);
                }
                function block_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function block_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (block_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function block_getPrototypeOf(t) {
                    return (
                        (block_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        block_getPrototypeOf(t)
                    );
                }
                function block_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && block_setPrototypeOf(t, e);
                }
                function block_setPrototypeOf(t, e) {
                    return (
                        (block_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        block_setPrototypeOf(t, e)
                    );
                }
                function block_defineProperty(e, r, t) {
                    return (
                        (r = block_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function block_toPropertyKey(t) {
                    var i = block_toPrimitive(t, 'string');
                    return 'symbol' == block_typeof(i) ? i : i + '';
                }
                function block_toPrimitive(t, r) {
                    if ('object' != block_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != block_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function blockRendererFactory() {
                    var _BlockRenderer;
                    var BaseRenderer = baseRendererFactory();
                    return (
                        (_BlockRenderer = /*#__PURE__*/ (function (_BaseRenderer) {
                            function BlockRenderer() {
                                var _this;
                                block_classCallCheck(this, BlockRenderer);
                                for (
                                    var _len = arguments.length, args = new Array(_len), _key = 0;
                                    _key < _len;
                                    _key++
                                ) {
                                    args[_key] = arguments[_key];
                                }
                                _this = block_callSuper(this, BlockRenderer, [].concat(args));
                                block_defineProperty(_this, '__namespace', 'block');
                                return _this;
                            }
                            block_inherits(BlockRenderer, _BaseRenderer);
                            return block_createClass(BlockRenderer, [
                                {
                                    key: '__afterInit',
                                    value: function __afterInit(props) {
                                        this.__generateCtx({});
                                        var schema = props.__schema || {};
                                        this.state = this.__parseData(schema.state || {});
                                        this.__initDataSource(props);
                                        this.__executeLifeCycleMethod(
                                            'constructor',
                                            Array.prototype.slice.call(arguments),
                                        );
                                    },
                                },
                                {
                                    key: 'render',
                                    value: function render() {
                                        var _this$props = this.props,
                                            __schema = _this$props.__schema,
                                            __components = _this$props.__components;
                                        if (this.__checkSchema(__schema, 'Div')) {
                                            return '区块 schema 结构异常！';
                                        }
                                        this.__debug(
                                            ''
                                                .concat(BlockRenderer.displayName, ' render - ')
                                                .concat(
                                                    __schema === null || __schema === void 0
                                                        ? void 0
                                                        : __schema.fileName,
                                                ),
                                        );
                                        this.__generateCtx({});
                                        this.__render();
                                        var Block = __components.Block;
                                        if (Block) {
                                            return this.__renderComp(Block, {});
                                        }
                                        return this.__renderContent(this.__renderContextProvider());
                                    },
                                },
                            ]);
                        })(BaseRenderer)),
                        block_defineProperty(_BlockRenderer, 'displayName', 'BlockRenderer'),
                        _BlockRenderer
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/addon.tsx
                function addon_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (addon_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        addon_typeof(o)
                    );
                }
                function addon_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function addon_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? addon_ownKeys(Object(t), !0).forEach(function (r) {
                                  addon_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : addon_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function addon_regenerator() {
                    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
                        t,
                        r = 'function' == typeof Symbol ? Symbol : {},
                        n = r.iterator || '@@iterator',
                        o = r.toStringTag || '@@toStringTag';
                    function i(r, n, o, i) {
                        var c = n && n.prototype instanceof Generator ? n : Generator,
                            u = Object.create(c.prototype);
                        return (
                            addon_regeneratorDefine2(
                                u,
                                '_invoke',
                                (function (r, n, o) {
                                    var i,
                                        c,
                                        u,
                                        f = 0,
                                        p = o || [],
                                        y = !1,
                                        G = {
                                            p: 0,
                                            n: 0,
                                            v: e,
                                            a: d,
                                            f: d.bind(e, 4),
                                            d: function d(t, r) {
                                                return (i = t), (c = 0), (u = e), (G.n = r), a;
                                            },
                                        };
                                    function d(r, n) {
                                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                                            var o,
                                                i = p[t],
                                                d = G.p,
                                                l = i[2];
                                            r > 3
                                                ? (o = l === n) &&
                                                  ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]), (i[4] = i[5] = e))
                                                : i[0] <= d &&
                                                  ((o = r < 2 && d < i[1])
                                                      ? ((c = 0), (G.v = n), (G.n = i[1]))
                                                      : d < l &&
                                                        (o = r < 3 || i[0] > n || n > l) &&
                                                        ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                                        }
                                        if (o || r > 1) return a;
                                        throw ((y = !0), n);
                                    }
                                    return function (o, p, l) {
                                        if (f > 1) throw TypeError('Generator is already running');
                                        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y; ) {
                                            i || (c ? (c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : (G.n = u)) : (G.v = u));
                                            try {
                                                if (((f = 2), i)) {
                                                    if ((c || (o = 'next'), (t = i[o]))) {
                                                        if (!(t = t.call(i, u)))
                                                            throw TypeError('iterator result is not an object');
                                                        if (!t.done) return t;
                                                        (u = t.value), c < 2 && (c = 0);
                                                    } else
                                                        1 === c && (t = i.return) && t.call(i),
                                                            c < 2 &&
                                                                ((u = TypeError(
                                                                    "The iterator does not provide a '" +
                                                                        o +
                                                                        "' method",
                                                                )),
                                                                (c = 1));
                                                    i = e;
                                                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
                                            } catch (t) {
                                                (i = e), (c = 1), (u = t);
                                            } finally {
                                                f = 1;
                                            }
                                        }
                                        return { value: t, done: y };
                                    };
                                })(r, o, i),
                                !0,
                            ),
                            u
                        );
                    }
                    var a = {};
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}
                    t = Object.getPrototypeOf;
                    var c = [][n]
                            ? t(t([][n]()))
                            : (addon_regeneratorDefine2((t = {}), n, function () {
                                  return this;
                              }),
                              t),
                        u = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c));
                    function f(e) {
                        return (
                            Object.setPrototypeOf
                                ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                                : ((e.__proto__ = GeneratorFunctionPrototype),
                                  addon_regeneratorDefine2(e, o, 'GeneratorFunction')),
                            (e.prototype = Object.create(u)),
                            e
                        );
                    }
                    return (
                        (GeneratorFunction.prototype = GeneratorFunctionPrototype),
                        addon_regeneratorDefine2(u, 'constructor', GeneratorFunctionPrototype),
                        addon_regeneratorDefine2(GeneratorFunctionPrototype, 'constructor', GeneratorFunction),
                        (GeneratorFunction.displayName = 'GeneratorFunction'),
                        addon_regeneratorDefine2(GeneratorFunctionPrototype, o, 'GeneratorFunction'),
                        addon_regeneratorDefine2(u),
                        addon_regeneratorDefine2(u, o, 'Generator'),
                        addon_regeneratorDefine2(u, n, function () {
                            return this;
                        }),
                        addon_regeneratorDefine2(u, 'toString', function () {
                            return '[object Generator]';
                        }),
                        (addon_regenerator = function _regenerator() {
                            return { w: i, m: f };
                        })()
                    );
                }
                function addon_regeneratorDefine2(e, r, n, t) {
                    var i = Object.defineProperty;
                    try {
                        i({}, '', {});
                    } catch (e) {
                        i = 0;
                    }
                    (addon_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
                        function o(r, n) {
                            addon_regeneratorDefine2(e, r, function (e) {
                                return this._invoke(r, n, e);
                            });
                        }
                        r
                            ? i
                                ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t })
                                : (e[r] = n)
                            : (o('next', 0), o('throw', 1), o('return', 2));
                    }),
                        addon_regeneratorDefine2(e, r, n, t);
                }
                function addon_asyncGeneratorStep(n, t, e, r, o, a, c) {
                    try {
                        var i = n[a](c),
                            u = i.value;
                    } catch (n) {
                        return void e(n);
                    }
                    i.done ? t(u) : Promise.resolve(u).then(r, o);
                }
                function addon_asyncToGenerator(n) {
                    return function () {
                        var t = this,
                            e = arguments;
                        return new Promise(function (r, o) {
                            var a = n.apply(t, e);
                            function _next(n) {
                                addon_asyncGeneratorStep(a, r, o, _next, _throw, 'next', n);
                            }
                            function _throw(n) {
                                addon_asyncGeneratorStep(a, r, o, _next, _throw, 'throw', n);
                            }
                            _next(void 0);
                        });
                    };
                }
                function addon_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function addon_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, addon_toPropertyKey(o.key), o);
                    }
                }
                function addon_createClass(e, r, t) {
                    return (
                        r && addon_defineProperties(e.prototype, r),
                        t && addon_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function addon_callSuper(t, o, e) {
                    return (
                        (o = addon_getPrototypeOf(o)),
                        addon_possibleConstructorReturn(
                            t,
                            addon_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], addon_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function addon_possibleConstructorReturn(t, e) {
                    if (e && ('object' == addon_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return addon_assertThisInitialized(t);
                }
                function addon_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function addon_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (addon_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function addon_superPropGet(t, o, e, r) {
                    var p = addon_get(addon_getPrototypeOf(1 & r ? t.prototype : t), o, e);
                    return 2 & r && 'function' == typeof p
                        ? function (t) {
                              return p.apply(e, t);
                          }
                        : p;
                }
                function addon_get() {
                    return (
                        (addon_get =
                            'undefined' != typeof Reflect && Reflect.get
                                ? Reflect.get.bind()
                                : function (e, t, r) {
                                      var p = addon_superPropBase(e, t);
                                      if (p) {
                                          var n = Object.getOwnPropertyDescriptor(p, t);
                                          return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
                                      }
                                  }),
                        addon_get.apply(null, arguments)
                    );
                }
                function addon_superPropBase(t, o) {
                    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = addon_getPrototypeOf(t)); );
                    return t;
                }
                function addon_getPrototypeOf(t) {
                    return (
                        (addon_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        addon_getPrototypeOf(t)
                    );
                }
                function addon_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && addon_setPrototypeOf(t, e);
                }
                function addon_setPrototypeOf(t, e) {
                    return (
                        (addon_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        addon_setPrototypeOf(t, e)
                    );
                }
                function addon_defineProperty(e, r, t) {
                    return (
                        (r = addon_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function addon_toPropertyKey(t) {
                    var i = addon_toPrimitive(t, 'string');
                    return 'symbol' == addon_typeof(i) ? i : i + '';
                }
                function addon_toPrimitive(t, r) {
                    if ('object' != addon_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != addon_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function addonRendererFactory() {
                    var _AddonRenderer;
                    var BaseRenderer = baseRendererFactory();
                    return (
                        (_AddonRenderer = /*#__PURE__*/ (function (_BaseRenderer) {
                            function AddonRenderer() {
                                var _this;
                                addon_classCallCheck(this, AddonRenderer);
                                for (
                                    var _len = arguments.length, args = new Array(_len), _key = 0;
                                    _key < _len;
                                    _key++
                                ) {
                                    args[_key] = arguments[_key];
                                }
                                _this = addon_callSuper(this, AddonRenderer, [].concat(args));
                                addon_defineProperty(_this, '__namespace', 'addon');
                                return _this;
                            }
                            addon_inherits(AddonRenderer, _BaseRenderer);
                            return addon_createClass(AddonRenderer, [
                                {
                                    key: '__afterInit',
                                    value: function __afterInit(props) {
                                        var _props$config;
                                        this.__generateCtx({
                                            component: this,
                                        });
                                        var schema = props.__schema || {};
                                        this.state = this.__parseData(schema.state || {});
                                        if (
                                            Object(lodash['isEmpty'])(props.config) ||
                                            !(
                                                (_props$config = props.config) !== null &&
                                                _props$config !== void 0 &&
                                                _props$config.addonKey
                                            )
                                        ) {
                                            utils_logger.warn('lce addon has wrong config');
                                            this.setState({
                                                __hasError: true,
                                            });
                                            return;
                                        }
                                        // 注册插件
                                        this.addonKey = props.config.addonKey;
                                        this.appHelper.addons = this.appHelper.addons || {};
                                        this.appHelper.addons[this.addonKey] = this;
                                        this.__initDataSource(props);
                                        this.open = this.open || function () {};
                                        this.close = this.close || function () {};
                                        this.__executeLifeCycleMethod(
                                            'constructor',
                                            Array.prototype.slice.call(arguments),
                                        );
                                    },
                                },
                                {
                                    key: 'componentWillUnmount',
                                    value: (function () {
                                        var _componentWillUnmount = addon_asyncToGenerator(
                                            /*#__PURE__*/ addon_regenerator().m(function _callee() {
                                                var _superPropGet2;
                                                var config,
                                                    _args = arguments;
                                                return addon_regenerator().w(
                                                    function (_context) {
                                                        while (1)
                                                            switch (_context.n) {
                                                                case 0:
                                                                    (_superPropGet2 = addon_superPropGet(
                                                                        AddonRenderer,
                                                                        'componentWillUnmount',
                                                                        this,
                                                                        1,
                                                                    )) === null || _superPropGet2 === void 0
                                                                        ? void 0
                                                                        : _superPropGet2.apply(
                                                                              this,
                                                                              Array.prototype.slice.call(_args),
                                                                          );
                                                                    // 注销插件
                                                                    config = this.props.config || {};
                                                                    if (config && this.appHelper.addons) {
                                                                        delete this.appHelper.addons[config.addonKey];
                                                                    }
                                                                case 1:
                                                                    return _context.a(2);
                                                            }
                                                    },
                                                    _callee,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentWillUnmount() {
                                            return _componentWillUnmount.apply(this, arguments);
                                        }
                                        return componentWillUnmount;
                                    })(),
                                },
                                {
                                    key: 'utils',
                                    get: function get() {
                                        var _ref = this.context.config || {},
                                            _ref$utils = _ref.utils,
                                            utils = _ref$utils === void 0 ? {} : _ref$utils;
                                        return addon_objectSpread(addon_objectSpread({}, this.appHelper.utils), utils);
                                    },
                                },
                                {
                                    key: 'render',
                                    value: function render() {
                                        var __schema = this.props.__schema;
                                        if (this.__checkSchema(__schema)) {
                                            return '插件 schema 结构异常！';
                                        }
                                        this.__debug(
                                            ''
                                                .concat(AddonRenderer.displayName, ' render - ')
                                                .concat(__schema.fileName),
                                        );
                                        this.__generateCtx({
                                            component: this,
                                        });
                                        this.__render();
                                        return this.__renderContent(
                                            this.__renderContextProvider({
                                                compContext: this,
                                            }),
                                        );
                                    },
                                },
                            ]);
                        })(BaseRenderer)),
                        addon_defineProperty(_AddonRenderer, 'displayName', 'AddonRenderer'),
                        addon_defineProperty(_AddonRenderer, 'propTypes', {
                            config: external_window_PropTypes_default.a.object,
                            __schema: external_window_PropTypes_default.a.object,
                        }),
                        addon_defineProperty(_AddonRenderer, 'defaultProps', {
                            config: {},
                            __schema: {},
                        }),
                        _AddonRenderer
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/temp.tsx
                function temp_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (temp_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        temp_typeof(o)
                    );
                }
                function temp_regenerator() {
                    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
                        t,
                        r = 'function' == typeof Symbol ? Symbol : {},
                        n = r.iterator || '@@iterator',
                        o = r.toStringTag || '@@toStringTag';
                    function i(r, n, o, i) {
                        var c = n && n.prototype instanceof Generator ? n : Generator,
                            u = Object.create(c.prototype);
                        return (
                            temp_regeneratorDefine2(
                                u,
                                '_invoke',
                                (function (r, n, o) {
                                    var i,
                                        c,
                                        u,
                                        f = 0,
                                        p = o || [],
                                        y = !1,
                                        G = {
                                            p: 0,
                                            n: 0,
                                            v: e,
                                            a: d,
                                            f: d.bind(e, 4),
                                            d: function d(t, r) {
                                                return (i = t), (c = 0), (u = e), (G.n = r), a;
                                            },
                                        };
                                    function d(r, n) {
                                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                                            var o,
                                                i = p[t],
                                                d = G.p,
                                                l = i[2];
                                            r > 3
                                                ? (o = l === n) &&
                                                  ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]), (i[4] = i[5] = e))
                                                : i[0] <= d &&
                                                  ((o = r < 2 && d < i[1])
                                                      ? ((c = 0), (G.v = n), (G.n = i[1]))
                                                      : d < l &&
                                                        (o = r < 3 || i[0] > n || n > l) &&
                                                        ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                                        }
                                        if (o || r > 1) return a;
                                        throw ((y = !0), n);
                                    }
                                    return function (o, p, l) {
                                        if (f > 1) throw TypeError('Generator is already running');
                                        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y; ) {
                                            i || (c ? (c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : (G.n = u)) : (G.v = u));
                                            try {
                                                if (((f = 2), i)) {
                                                    if ((c || (o = 'next'), (t = i[o]))) {
                                                        if (!(t = t.call(i, u)))
                                                            throw TypeError('iterator result is not an object');
                                                        if (!t.done) return t;
                                                        (u = t.value), c < 2 && (c = 0);
                                                    } else
                                                        1 === c && (t = i.return) && t.call(i),
                                                            c < 2 &&
                                                                ((u = TypeError(
                                                                    "The iterator does not provide a '" +
                                                                        o +
                                                                        "' method",
                                                                )),
                                                                (c = 1));
                                                    i = e;
                                                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
                                            } catch (t) {
                                                (i = e), (c = 1), (u = t);
                                            } finally {
                                                f = 1;
                                            }
                                        }
                                        return { value: t, done: y };
                                    };
                                })(r, o, i),
                                !0,
                            ),
                            u
                        );
                    }
                    var a = {};
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}
                    t = Object.getPrototypeOf;
                    var c = [][n]
                            ? t(t([][n]()))
                            : (temp_regeneratorDefine2((t = {}), n, function () {
                                  return this;
                              }),
                              t),
                        u = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c));
                    function f(e) {
                        return (
                            Object.setPrototypeOf
                                ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                                : ((e.__proto__ = GeneratorFunctionPrototype),
                                  temp_regeneratorDefine2(e, o, 'GeneratorFunction')),
                            (e.prototype = Object.create(u)),
                            e
                        );
                    }
                    return (
                        (GeneratorFunction.prototype = GeneratorFunctionPrototype),
                        temp_regeneratorDefine2(u, 'constructor', GeneratorFunctionPrototype),
                        temp_regeneratorDefine2(GeneratorFunctionPrototype, 'constructor', GeneratorFunction),
                        (GeneratorFunction.displayName = 'GeneratorFunction'),
                        temp_regeneratorDefine2(GeneratorFunctionPrototype, o, 'GeneratorFunction'),
                        temp_regeneratorDefine2(u),
                        temp_regeneratorDefine2(u, o, 'Generator'),
                        temp_regeneratorDefine2(u, n, function () {
                            return this;
                        }),
                        temp_regeneratorDefine2(u, 'toString', function () {
                            return '[object Generator]';
                        }),
                        (temp_regenerator = function _regenerator() {
                            return { w: i, m: f };
                        })()
                    );
                }
                function temp_regeneratorDefine2(e, r, n, t) {
                    var i = Object.defineProperty;
                    try {
                        i({}, '', {});
                    } catch (e) {
                        i = 0;
                    }
                    (temp_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
                        function o(r, n) {
                            temp_regeneratorDefine2(e, r, function (e) {
                                return this._invoke(r, n, e);
                            });
                        }
                        r
                            ? i
                                ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t })
                                : (e[r] = n)
                            : (o('next', 0), o('throw', 1), o('return', 2));
                    }),
                        temp_regeneratorDefine2(e, r, n, t);
                }
                function temp_asyncGeneratorStep(n, t, e, r, o, a, c) {
                    try {
                        var i = n[a](c),
                            u = i.value;
                    } catch (n) {
                        return void e(n);
                    }
                    i.done ? t(u) : Promise.resolve(u).then(r, o);
                }
                function temp_asyncToGenerator(n) {
                    return function () {
                        var t = this,
                            e = arguments;
                        return new Promise(function (r, o) {
                            var a = n.apply(t, e);
                            function _next(n) {
                                temp_asyncGeneratorStep(a, r, o, _next, _throw, 'next', n);
                            }
                            function _throw(n) {
                                temp_asyncGeneratorStep(a, r, o, _next, _throw, 'throw', n);
                            }
                            _next(void 0);
                        });
                    };
                }
                function temp_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function temp_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, temp_toPropertyKey(o.key), o);
                    }
                }
                function temp_createClass(e, r, t) {
                    return (
                        r && temp_defineProperties(e.prototype, r),
                        t && temp_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function temp_callSuper(t, o, e) {
                    return (
                        (o = temp_getPrototypeOf(o)),
                        temp_possibleConstructorReturn(
                            t,
                            temp_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], temp_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function temp_possibleConstructorReturn(t, e) {
                    if (e && ('object' == temp_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return temp_assertThisInitialized(t);
                }
                function temp_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function temp_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (temp_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function temp_getPrototypeOf(t) {
                    return (
                        (temp_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        temp_getPrototypeOf(t)
                    );
                }
                function temp_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && temp_setPrototypeOf(t, e);
                }
                function temp_setPrototypeOf(t, e) {
                    return (
                        (temp_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        temp_setPrototypeOf(t, e)
                    );
                }
                function temp_defineProperty(e, r, t) {
                    return (
                        (r = temp_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function temp_toPropertyKey(t) {
                    var i = temp_toPrimitive(t, 'string');
                    return 'symbol' == temp_typeof(i) ? i : i + '';
                }
                function temp_toPrimitive(t, r) {
                    if ('object' != temp_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != temp_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }

                function tempRendererFactory() {
                    var _TempRenderer;
                    var BaseRenderer = baseRendererFactory();
                    return (
                        (_TempRenderer = /*#__PURE__*/ (function (_BaseRenderer) {
                            function TempRenderer() {
                                var _this;
                                temp_classCallCheck(this, TempRenderer);
                                for (
                                    var _len = arguments.length, args = new Array(_len), _key = 0;
                                    _key < _len;
                                    _key++
                                ) {
                                    args[_key] = arguments[_key];
                                }
                                _this = temp_callSuper(this, TempRenderer, [].concat(args));
                                temp_defineProperty(_this, '__namespace', 'temp');
                                return _this;
                            }
                            temp_inherits(TempRenderer, _BaseRenderer);
                            return temp_createClass(TempRenderer, [
                                {
                                    key: '__init',
                                    value: function __init() {
                                        this.state = {};
                                        this.cacheSetState = {};
                                    },
                                },
                                {
                                    key: 'componentDidMount',
                                    value: (function () {
                                        var _componentDidMount = temp_asyncToGenerator(
                                            /*#__PURE__*/ temp_regenerator().m(function _callee() {
                                                var _this2 = this;
                                                var ctx, setState;
                                                return temp_regenerator().w(
                                                    function (_context) {
                                                        while (1)
                                                            switch (_context.n) {
                                                                case 0:
                                                                    ctx = this.props.__ctx;
                                                                    if (ctx) {
                                                                        _context.n = 1;
                                                                        break;
                                                                    }
                                                                    return _context.a(2);
                                                                case 1:
                                                                    setState = ctx.setState;
                                                                    this.cacheSetState = setState;
                                                                    ctx.setState = function () {
                                                                        for (
                                                                            var _len2 = arguments.length,
                                                                                args = new Array(_len2),
                                                                                _key2 = 0;
                                                                            _key2 < _len2;
                                                                            _key2++
                                                                        ) {
                                                                            args[_key2] = arguments[_key2];
                                                                        }
                                                                        setState.call.apply(
                                                                            setState,
                                                                            [ctx].concat(args),
                                                                        );
                                                                        setTimeout(function () {
                                                                            return _this2.forceUpdate();
                                                                        }, 0);
                                                                    };
                                                                    this.__debug(
                                                                        'componentDidMount - '.concat(
                                                                            this.props.__schema.fileName,
                                                                        ),
                                                                    );
                                                                case 2:
                                                                    return _context.a(2);
                                                            }
                                                    },
                                                    _callee,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentDidMount() {
                                            return _componentDidMount.apply(this, arguments);
                                        }
                                        return componentDidMount;
                                    })(),
                                },
                                {
                                    key: 'componentDidUpdate',
                                    value: (function () {
                                        var _componentDidUpdate = temp_asyncToGenerator(
                                            /*#__PURE__*/ temp_regenerator().m(function _callee2() {
                                                return temp_regenerator().w(
                                                    function (_context2) {
                                                        while (1)
                                                            switch (_context2.n) {
                                                                case 0:
                                                                    this.__debug(
                                                                        'componentDidUpdate - '.concat(
                                                                            this.props.__schema.fileName,
                                                                        ),
                                                                    );
                                                                case 1:
                                                                    return _context2.a(2);
                                                            }
                                                    },
                                                    _callee2,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentDidUpdate() {
                                            return _componentDidUpdate.apply(this, arguments);
                                        }
                                        return componentDidUpdate;
                                    })(),
                                },
                                {
                                    key: 'componentWillUnmount',
                                    value: (function () {
                                        var _componentWillUnmount = temp_asyncToGenerator(
                                            /*#__PURE__*/ temp_regenerator().m(function _callee3() {
                                                var ctx;
                                                return temp_regenerator().w(
                                                    function (_context3) {
                                                        while (1)
                                                            switch (_context3.n) {
                                                                case 0:
                                                                    ctx = this.props.__ctx;
                                                                    if (!(!ctx || !this.cacheSetState)) {
                                                                        _context3.n = 1;
                                                                        break;
                                                                    }
                                                                    return _context3.a(2);
                                                                case 1:
                                                                    ctx.setState = this.cacheSetState;
                                                                    delete this.cacheSetState;
                                                                    this.__debug(
                                                                        'componentWillUnmount - '.concat(
                                                                            this.props.__schema.fileName,
                                                                        ),
                                                                    );
                                                                case 2:
                                                                    return _context3.a(2);
                                                            }
                                                    },
                                                    _callee3,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentWillUnmount() {
                                            return _componentWillUnmount.apply(this, arguments);
                                        }
                                        return componentWillUnmount;
                                    })(),
                                },
                                {
                                    key: 'componentDidCatch',
                                    value: (function () {
                                        var _componentDidCatch = temp_asyncToGenerator(
                                            /*#__PURE__*/ temp_regenerator().m(function _callee4(e) {
                                                return temp_regenerator().w(
                                                    function (_context4) {
                                                        while (1)
                                                            switch (_context4.n) {
                                                                case 0:
                                                                    utils_logger.warn(e);
                                                                    this.__debug(
                                                                        'componentDidCatch - '.concat(
                                                                            this.props.__schema.fileName,
                                                                        ),
                                                                    );
                                                                case 1:
                                                                    return _context4.a(2);
                                                            }
                                                    },
                                                    _callee4,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentDidCatch(_x) {
                                            return _componentDidCatch.apply(this, arguments);
                                        }
                                        return componentDidCatch;
                                    })(),
                                },
                                {
                                    key: 'render',
                                    value: function render() {
                                        var _this$props = this.props,
                                            __schema = _this$props.__schema,
                                            __ctx = _this$props.__ctx;
                                        if (this.__checkSchema(__schema)) {
                                            return '下钻编辑 schema 结构异常！';
                                        }
                                        this.__debug(
                                            ''
                                                .concat(TempRenderer.displayName, ' render - ')
                                                .concat(
                                                    __schema === null || __schema === void 0
                                                        ? void 0
                                                        : __schema.fileName,
                                                ),
                                        );
                                        return this.__renderContent(
                                            this.__renderContextProvider({
                                                __ctx: __ctx,
                                            }),
                                        );
                                    },
                                },
                            ]);
                        })(BaseRenderer)),
                        temp_defineProperty(_TempRenderer, 'displayName', 'TempRenderer'),
                        _TempRenderer
                    );
                }
                // EXTERNAL MODULE: /Users/bjhl/Documents/WorkProject/lowcode-engine/node_modules/debug/src/browser.js
                var browser = __webpack_require__(48);
                var browser_default = /*#__PURE__*/ __webpack_require__.n(browser);

                // CONCATENATED MODULE: ../renderer-core/src/renderer/renderer.tsx
                function renderer_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (renderer_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        renderer_typeof(o)
                    );
                }
                function renderer_ownKeys(e, r) {
                    var t = Object.keys(e);
                    if (Object.getOwnPropertySymbols) {
                        var o = Object.getOwnPropertySymbols(e);
                        r &&
                            (o = o.filter(function (r) {
                                return Object.getOwnPropertyDescriptor(e, r).enumerable;
                            })),
                            t.push.apply(t, o);
                    }
                    return t;
                }
                function renderer_objectSpread(e) {
                    for (var r = 1; r < arguments.length; r++) {
                        var t = null != arguments[r] ? arguments[r] : {};
                        r % 2
                            ? renderer_ownKeys(Object(t), !0).forEach(function (r) {
                                  renderer_defineProperty(e, r, t[r]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
                            : renderer_ownKeys(Object(t)).forEach(function (r) {
                                  Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
                              });
                    }
                    return e;
                }
                function renderer_regenerator() {
                    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
                        t,
                        r = 'function' == typeof Symbol ? Symbol : {},
                        n = r.iterator || '@@iterator',
                        o = r.toStringTag || '@@toStringTag';
                    function i(r, n, o, i) {
                        var c = n && n.prototype instanceof Generator ? n : Generator,
                            u = Object.create(c.prototype);
                        return (
                            renderer_regeneratorDefine2(
                                u,
                                '_invoke',
                                (function (r, n, o) {
                                    var i,
                                        c,
                                        u,
                                        f = 0,
                                        p = o || [],
                                        y = !1,
                                        G = {
                                            p: 0,
                                            n: 0,
                                            v: e,
                                            a: d,
                                            f: d.bind(e, 4),
                                            d: function d(t, r) {
                                                return (i = t), (c = 0), (u = e), (G.n = r), a;
                                            },
                                        };
                                    function d(r, n) {
                                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                                            var o,
                                                i = p[t],
                                                d = G.p,
                                                l = i[2];
                                            r > 3
                                                ? (o = l === n) &&
                                                  ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]), (i[4] = i[5] = e))
                                                : i[0] <= d &&
                                                  ((o = r < 2 && d < i[1])
                                                      ? ((c = 0), (G.v = n), (G.n = i[1]))
                                                      : d < l &&
                                                        (o = r < 3 || i[0] > n || n > l) &&
                                                        ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                                        }
                                        if (o || r > 1) return a;
                                        throw ((y = !0), n);
                                    }
                                    return function (o, p, l) {
                                        if (f > 1) throw TypeError('Generator is already running');
                                        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y; ) {
                                            i || (c ? (c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : (G.n = u)) : (G.v = u));
                                            try {
                                                if (((f = 2), i)) {
                                                    if ((c || (o = 'next'), (t = i[o]))) {
                                                        if (!(t = t.call(i, u)))
                                                            throw TypeError('iterator result is not an object');
                                                        if (!t.done) return t;
                                                        (u = t.value), c < 2 && (c = 0);
                                                    } else
                                                        1 === c && (t = i.return) && t.call(i),
                                                            c < 2 &&
                                                                ((u = TypeError(
                                                                    "The iterator does not provide a '" +
                                                                        o +
                                                                        "' method",
                                                                )),
                                                                (c = 1));
                                                    i = e;
                                                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
                                            } catch (t) {
                                                (i = e), (c = 1), (u = t);
                                            } finally {
                                                f = 1;
                                            }
                                        }
                                        return { value: t, done: y };
                                    };
                                })(r, o, i),
                                !0,
                            ),
                            u
                        );
                    }
                    var a = {};
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}
                    t = Object.getPrototypeOf;
                    var c = [][n]
                            ? t(t([][n]()))
                            : (renderer_regeneratorDefine2((t = {}), n, function () {
                                  return this;
                              }),
                              t),
                        u = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c));
                    function f(e) {
                        return (
                            Object.setPrototypeOf
                                ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                                : ((e.__proto__ = GeneratorFunctionPrototype),
                                  renderer_regeneratorDefine2(e, o, 'GeneratorFunction')),
                            (e.prototype = Object.create(u)),
                            e
                        );
                    }
                    return (
                        (GeneratorFunction.prototype = GeneratorFunctionPrototype),
                        renderer_regeneratorDefine2(u, 'constructor', GeneratorFunctionPrototype),
                        renderer_regeneratorDefine2(GeneratorFunctionPrototype, 'constructor', GeneratorFunction),
                        (GeneratorFunction.displayName = 'GeneratorFunction'),
                        renderer_regeneratorDefine2(GeneratorFunctionPrototype, o, 'GeneratorFunction'),
                        renderer_regeneratorDefine2(u),
                        renderer_regeneratorDefine2(u, o, 'Generator'),
                        renderer_regeneratorDefine2(u, n, function () {
                            return this;
                        }),
                        renderer_regeneratorDefine2(u, 'toString', function () {
                            return '[object Generator]';
                        }),
                        (renderer_regenerator = function _regenerator() {
                            return { w: i, m: f };
                        })()
                    );
                }
                function renderer_regeneratorDefine2(e, r, n, t) {
                    var i = Object.defineProperty;
                    try {
                        i({}, '', {});
                    } catch (e) {
                        i = 0;
                    }
                    (renderer_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
                        function o(r, n) {
                            renderer_regeneratorDefine2(e, r, function (e) {
                                return this._invoke(r, n, e);
                            });
                        }
                        r
                            ? i
                                ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t })
                                : (e[r] = n)
                            : (o('next', 0), o('throw', 1), o('return', 2));
                    }),
                        renderer_regeneratorDefine2(e, r, n, t);
                }
                function renderer_asyncGeneratorStep(n, t, e, r, o, a, c) {
                    try {
                        var i = n[a](c),
                            u = i.value;
                    } catch (n) {
                        return void e(n);
                    }
                    i.done ? t(u) : Promise.resolve(u).then(r, o);
                }
                function renderer_asyncToGenerator(n) {
                    return function () {
                        var t = this,
                            e = arguments;
                        return new Promise(function (r, o) {
                            var a = n.apply(t, e);
                            function _next(n) {
                                renderer_asyncGeneratorStep(a, r, o, _next, _throw, 'next', n);
                            }
                            function _throw(n) {
                                renderer_asyncGeneratorStep(a, r, o, _next, _throw, 'throw', n);
                            }
                            _next(void 0);
                        });
                    };
                }
                function renderer_defineProperty(e, r, t) {
                    return (
                        (r = renderer_toPropertyKey(r)) in e
                            ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 })
                            : (e[r] = t),
                        e
                    );
                }
                function renderer_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function renderer_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, renderer_toPropertyKey(o.key), o);
                    }
                }
                function renderer_createClass(e, r, t) {
                    return (
                        r && renderer_defineProperties(e.prototype, r),
                        t && renderer_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function renderer_toPropertyKey(t) {
                    var i = renderer_toPrimitive(t, 'string');
                    return 'symbol' == renderer_typeof(i) ? i : i + '';
                }
                function renderer_toPrimitive(t, r) {
                    if ('object' != renderer_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != renderer_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function renderer_callSuper(t, o, e) {
                    return (
                        (o = renderer_getPrototypeOf(o)),
                        renderer_possibleConstructorReturn(
                            t,
                            renderer_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], renderer_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function renderer_possibleConstructorReturn(t, e) {
                    if (e && ('object' == renderer_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return renderer_assertThisInitialized(t);
                }
                function renderer_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function renderer_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (renderer_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function renderer_getPrototypeOf(t) {
                    return (
                        (renderer_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        renderer_getPrototypeOf(t)
                    );
                }
                function renderer_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && renderer_setPrototypeOf(t, e);
                }
                function renderer_setPrototypeOf(t, e) {
                    return (
                        (renderer_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        renderer_setPrototypeOf(t, e)
                    );
                }

                function rendererFactory() {
                    var _Renderer;
                    var _adapter$getRuntime = adapter.getRuntime(),
                        PureComponent = _adapter$getRuntime.PureComponent,
                        Component = _adapter$getRuntime.Component,
                        _createElement = _adapter$getRuntime.createElement,
                        findDOMNode = _adapter$getRuntime.findDOMNode;
                    var RENDERER_COMPS = adapter.getRenderers();
                    var BaseRenderer = baseRendererFactory();
                    var AppContext = contextFactory();
                    var Div = divFactory();
                    var ConfigProvider = adapter.getConfigProvider() || Div;
                    var debug = browser_default()('renderer:entry');
                    var FaultComponent = /*#__PURE__*/ (function (_PureComponent) {
                        function FaultComponent() {
                            renderer_classCallCheck(this, FaultComponent);
                            return renderer_callSuper(this, FaultComponent, arguments);
                        }
                        renderer_inherits(FaultComponent, _PureComponent);
                        return renderer_createClass(FaultComponent, [
                            {
                                key: 'render',
                                value: function render() {
                                    var _this$props$error;
                                    utils_logger.error(
                                        '%c'
                                            .concat(
                                                this.props.componentName || '',
                                                ' \u7EC4\u4EF6\u6E32\u67D3\u5F02\u5E38, \u5F02\u5E38\u539F\u56E0: ',
                                            )
                                            .concat(
                                                ((_this$props$error = this.props.error) === null ||
                                                _this$props$error === void 0
                                                    ? void 0
                                                    : _this$props$error.message) ||
                                                    this.props.error ||
                                                    '未知',
                                            ),
                                        'color: #ff0000;',
                                    );
                                    return _createElement(
                                        Div,
                                        {
                                            style: {
                                                width: '100%',
                                                height: '50px',
                                                lineHeight: '50px',
                                                textAlign: 'center',
                                                fontSize: '15px',
                                                color: '#ff0000',
                                                border: '2px solid #ff0000',
                                            },
                                        },
                                        ''.concat(
                                            this.props.componentName || '',
                                            ' \u7EC4\u4EF6\u6E32\u67D3\u5F02\u5E38\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u65E5\u5FD7',
                                        ),
                                    );
                                },
                            },
                        ]);
                    })(PureComponent);
                    var NotFoundComponent = /*#__PURE__*/ (function (_PureComponent2) {
                        function NotFoundComponent() {
                            renderer_classCallCheck(this, NotFoundComponent);
                            return renderer_callSuper(this, NotFoundComponent, arguments);
                        }
                        renderer_inherits(NotFoundComponent, _PureComponent2);
                        return renderer_createClass(NotFoundComponent, [
                            {
                                key: 'render',
                                value: function render() {
                                    if (this.props.enableStrictNotFoundMode) {
                                        return ''.concat(this.props.componentName || '', ' Component Not Found');
                                    }
                                    return _createElement(
                                        Div,
                                        this.props,
                                        this.props.children ||
                                            ''.concat(this.props.componentName || '', ' Component Not Found'),
                                    );
                                },
                            },
                        ]);
                    })(PureComponent);
                    return (
                        (_Renderer = /*#__PURE__*/ (function (_Component) {
                            function Renderer(props, context) {
                                var _props$schema;
                                var _this;
                                renderer_classCallCheck(this, Renderer);
                                _this = renderer_callSuper(this, Renderer, [props, context]);
                                renderer_defineProperty(_this, 'state', {});
                                renderer_defineProperty(_this, '__getRef', function (ref) {
                                    _this.__ref = ref;
                                    if (ref) {
                                        var _this$props$onCompGet, _this$props;
                                        (_this$props$onCompGet = (_this$props = _this.props).onCompGetRef) === null ||
                                        _this$props$onCompGet === void 0
                                            ? void 0
                                            : _this$props$onCompGet.call(_this$props, _this.props.schema, ref);
                                    }
                                });
                                _this.state = {};
                                debug(
                                    'entry.constructor - '.concat(
                                        props === null || props === void 0
                                            ? void 0
                                            : (_props$schema = props.schema) === null || _props$schema === void 0
                                            ? void 0
                                            : _props$schema.componentName,
                                    ),
                                );
                                return _this;
                            }
                            renderer_inherits(Renderer, _Component);
                            return renderer_createClass(Renderer, [
                                {
                                    key: 'componentDidMount',
                                    value: (function () {
                                        var _componentDidMount = renderer_asyncToGenerator(
                                            /*#__PURE__*/ renderer_regenerator().m(function _callee() {
                                                return renderer_regenerator().w(
                                                    function (_context) {
                                                        while (1)
                                                            switch (_context.n) {
                                                                case 0:
                                                                    debug(
                                                                        'entry.componentDidMount - '.concat(
                                                                            this.props.schema &&
                                                                                this.props.schema.componentName,
                                                                        ),
                                                                    );
                                                                case 1:
                                                                    return _context.a(2);
                                                            }
                                                    },
                                                    _callee,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentDidMount() {
                                            return _componentDidMount.apply(this, arguments);
                                        }
                                        return componentDidMount;
                                    })(),
                                },
                                {
                                    key: 'componentDidUpdate',
                                    value: (function () {
                                        var _componentDidUpdate = renderer_asyncToGenerator(
                                            /*#__PURE__*/ renderer_regenerator().m(function _callee2() {
                                                var _this$props2, _this$props2$schema;
                                                return renderer_regenerator().w(
                                                    function (_context2) {
                                                        while (1)
                                                            switch (_context2.n) {
                                                                case 0:
                                                                    debug(
                                                                        'entry.componentDidUpdate - '.concat(
                                                                            (_this$props2 = this.props) === null ||
                                                                                _this$props2 === void 0
                                                                                ? void 0
                                                                                : (_this$props2$schema =
                                                                                      _this$props2.schema) === null ||
                                                                                  _this$props2$schema === void 0
                                                                                ? void 0
                                                                                : _this$props2$schema.componentName,
                                                                        ),
                                                                    );
                                                                case 1:
                                                                    return _context2.a(2);
                                                            }
                                                    },
                                                    _callee2,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentDidUpdate() {
                                            return _componentDidUpdate.apply(this, arguments);
                                        }
                                        return componentDidUpdate;
                                    })(),
                                },
                                {
                                    key: 'componentWillUnmount',
                                    value: (function () {
                                        var _componentWillUnmount = renderer_asyncToGenerator(
                                            /*#__PURE__*/ renderer_regenerator().m(function _callee3() {
                                                var _this$props3, _this$props3$schema;
                                                return renderer_regenerator().w(
                                                    function (_context3) {
                                                        while (1)
                                                            switch (_context3.n) {
                                                                case 0:
                                                                    debug(
                                                                        'entry.componentWillUnmount - '.concat(
                                                                            (_this$props3 = this.props) === null ||
                                                                                _this$props3 === void 0
                                                                                ? void 0
                                                                                : (_this$props3$schema =
                                                                                      _this$props3.schema) === null ||
                                                                                  _this$props3$schema === void 0
                                                                                ? void 0
                                                                                : _this$props3$schema.componentName,
                                                                        ),
                                                                    );
                                                                case 1:
                                                                    return _context3.a(2);
                                                            }
                                                    },
                                                    _callee3,
                                                    this,
                                                );
                                            }),
                                        );
                                        function componentWillUnmount() {
                                            return _componentWillUnmount.apply(this, arguments);
                                        }
                                        return componentWillUnmount;
                                    })(),
                                },
                                {
                                    key: 'componentDidCatch',
                                    value: function componentDidCatch(error) {
                                        this.state.engineRenderError = true;
                                        this.state.error = error;
                                    },
                                },
                                {
                                    key: 'shouldComponentUpdate',
                                    value: function shouldComponentUpdate(nextProps) {
                                        return !nextProps.suspended;
                                    },
                                },
                                {
                                    key: 'isValidComponent',
                                    value: function isValidComponent(SetComponent) {
                                        return SetComponent;
                                    },
                                },
                                {
                                    key: 'createElement',
                                    value: function createElement(SetComponent, props, children) {
                                        return (this.props.customCreateElement || _createElement)(
                                            SetComponent,
                                            props,
                                            children,
                                        );
                                    },
                                },
                                {
                                    key: 'getNotFoundComponent',
                                    value: function getNotFoundComponent() {
                                        return this.props.notFoundComponent || NotFoundComponent;
                                    },
                                },
                                {
                                    key: 'getFaultComponent',
                                    value: function getFaultComponent() {
                                        var _this$props4 = this.props,
                                            faultComponent = _this$props4.faultComponent,
                                            faultComponentMap = _this$props4.faultComponentMap,
                                            schema = _this$props4.schema;
                                        if (faultComponentMap) {
                                            var componentName = schema.componentName;
                                            return faultComponentMap[componentName] || faultComponent || FaultComponent;
                                        }
                                        return faultComponent || FaultComponent;
                                    },
                                },
                                {
                                    key: 'getComp',
                                    value: function getComp() {
                                        var _this$props5 = this.props,
                                            schema = _this$props5.schema,
                                            components = _this$props5.components;
                                        var componentName = schema.componentName;
                                        var allComponents = renderer_objectSpread(
                                            renderer_objectSpread({}, RENDERER_COMPS),
                                            components,
                                        );
                                        var Comp =
                                            allComponents[componentName] ||
                                            RENDERER_COMPS[''.concat(componentName, 'Renderer')];
                                        if (Comp && Comp.prototype) {
                                            if (!(Comp.prototype instanceof BaseRenderer)) {
                                                Comp = RENDERER_COMPS[''.concat(componentName, 'Renderer')];
                                            }
                                        }
                                        return Comp;
                                    },
                                },
                                {
                                    key: 'render',
                                    value: function render() {
                                        var _this$props6 = this.props,
                                            schema = _this$props6.schema,
                                            designMode = _this$props6.designMode,
                                            appHelper = _this$props6.appHelper,
                                            components = _this$props6.components;
                                        if (Object(lodash['isEmpty'])(schema)) {
                                            return null;
                                        }
                                        // 兼容乐高区块模板
                                        if (schema.componentName !== 'Div' && !isFileSchema(schema)) {
                                            utils_logger.error(
                                                'The root component name needs to be one of Page、Block、Component, please check the schema: ',
                                                schema,
                                            );
                                            return '模型结构异常';
                                        }
                                        debug('entry.render');
                                        var allComponents = renderer_objectSpread(
                                            renderer_objectSpread({}, RENDERER_COMPS),
                                            components,
                                        );
                                        var Comp = this.getComp();
                                        if (this.state && this.state.engineRenderError) {
                                            return _createElement(
                                                this.getFaultComponent(),
                                                renderer_objectSpread(
                                                    renderer_objectSpread({}, this.props),
                                                    {},
                                                    {
                                                        error: this.state.error,
                                                    },
                                                ),
                                            );
                                        }
                                        if (Comp) {
                                            return _createElement(
                                                AppContext.Provider,
                                                {
                                                    value: {
                                                        appHelper: appHelper,
                                                        components: allComponents,
                                                        engine: this,
                                                    },
                                                },
                                                _createElement(
                                                    ConfigProvider,
                                                    {
                                                        device: this.props.device,
                                                        locale: this.props.locale,
                                                    },
                                                    _createElement(
                                                        Comp,
                                                        renderer_objectSpread(
                                                            {
                                                                key:
                                                                    schema.__ctx &&
                                                                    ''
                                                                        .concat(schema.__ctx.lceKey, '_')
                                                                        .concat(schema.__ctx.idx || '0'),
                                                                ref: this.__getRef,
                                                                __appHelper: appHelper,
                                                                __components: allComponents,
                                                                __schema: schema,
                                                                __designMode: designMode,
                                                            },
                                                            this.props,
                                                        ),
                                                    ),
                                                ),
                                            );
                                        }
                                        return null;
                                    },
                                },
                            ]);
                        })(Component)),
                        renderer_defineProperty(_Renderer, 'displayName', 'Renderer'),
                        renderer_defineProperty(_Renderer, 'defaultProps', {
                            appHelper: undefined,
                            components: {},
                            designMode: '',
                            suspended: false,
                            schema: {},
                            onCompGetRef: function onCompGetRef() {},
                            onCompGetCtx: function onCompGetCtx() {},
                            thisRequiredInJSE: true,
                        }),
                        renderer_defineProperty(_Renderer, 'findDOMNode', findDOMNode),
                        _Renderer
                    );
                }
                // CONCATENATED MODULE: ../renderer-core/src/renderer/index.ts

                // CONCATENATED MODULE: ../renderer-core/src/types/index.ts

                // CONCATENATED MODULE: ../renderer-core/src/index.ts

                // EXTERNAL MODULE: external {"root":["Next","ConfigProvider"],"amd":["@alifd/next","ConfigProvider"],"commonjs":["@alifd/next","ConfigProvider"],"commonjs2":["@alifd/next","ConfigProvider"]}
                var next_ConfigProvider_ = __webpack_require__(49);
                var next_ConfigProvider_default = /*#__PURE__*/ __webpack_require__.n(next_ConfigProvider_);

                // CONCATENATED MODULE: ./src/index.ts
                function src_typeof(o) {
                    '@babel/helpers - typeof';
                    return (
                        (src_typeof =
                            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                                ? function (o) {
                                      return typeof o;
                                  }
                                : function (o) {
                                      return o &&
                                          'function' == typeof Symbol &&
                                          o.constructor === Symbol &&
                                          o !== Symbol.prototype
                                          ? 'symbol'
                                          : typeof o;
                                  }),
                        src_typeof(o)
                    );
                }
                function src_classCallCheck(a, n) {
                    if (!(a instanceof n)) throw new TypeError('Cannot call a class as a function');
                }
                function src_defineProperties(e, r) {
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        (o.enumerable = o.enumerable || !1),
                            (o.configurable = !0),
                            'value' in o && (o.writable = !0),
                            Object.defineProperty(e, src_toPropertyKey(o.key), o);
                    }
                }
                function src_createClass(e, r, t) {
                    return (
                        r && src_defineProperties(e.prototype, r),
                        t && src_defineProperties(e, t),
                        Object.defineProperty(e, 'prototype', { writable: !1 }),
                        e
                    );
                }
                function src_toPropertyKey(t) {
                    var i = src_toPrimitive(t, 'string');
                    return 'symbol' == src_typeof(i) ? i : i + '';
                }
                function src_toPrimitive(t, r) {
                    if ('object' != src_typeof(t) || !t) return t;
                    var e = t[Symbol.toPrimitive];
                    if (void 0 !== e) {
                        var i = e.call(t, r || 'default');
                        if ('object' != src_typeof(i)) return i;
                        throw new TypeError('@@toPrimitive must return a primitive value.');
                    }
                    return ('string' === r ? String : Number)(t);
                }
                function src_callSuper(t, o, e) {
                    return (
                        (o = src_getPrototypeOf(o)),
                        src_possibleConstructorReturn(
                            t,
                            src_isNativeReflectConstruct()
                                ? Reflect.construct(o, e || [], src_getPrototypeOf(t).constructor)
                                : o.apply(t, e),
                        )
                    );
                }
                function src_possibleConstructorReturn(t, e) {
                    if (e && ('object' == src_typeof(e) || 'function' == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
                    return src_assertThisInitialized(t);
                }
                function src_assertThisInitialized(e) {
                    if (void 0 === e)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                }
                function src_isNativeReflectConstruct() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (src_isNativeReflectConstruct = function _isNativeReflectConstruct() {
                        return !!t;
                    })();
                }
                function src_getPrototypeOf(t) {
                    return (
                        (src_getPrototypeOf = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        src_getPrototypeOf(t)
                    );
                }
                function src_inherits(t, e) {
                    if ('function' != typeof e && null !== e)
                        throw new TypeError('Super expression must either be null or a function');
                    (t.prototype = Object.create(e && e.prototype, {
                        constructor: { value: t, writable: !0, configurable: !0 },
                    })),
                        Object.defineProperty(t, 'prototype', { writable: !1 }),
                        e && src_setPrototypeOf(t, e);
                }
                function src_setPrototypeOf(t, e) {
                    return (
                        (src_setPrototypeOf = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        src_setPrototypeOf(t, e)
                    );
                }

                window.React = external_window_React_default.a;
                window.ReactDom = external_window_ReactDOM_default.a;
                adapter.setRuntime({
                    Component: external_window_React_['Component'],
                    PureComponent: external_window_React_['PureComponent'],
                    createContext: external_window_React_['createContext'],
                    createElement: external_window_React_['createElement'],
                    forwardRef: external_window_React_['forwardRef'],
                    findDOMNode: external_window_ReactDOM_default.a.findDOMNode,
                });
                adapter.setRenderers({
                    PageRenderer: pageRendererFactory(),
                    ComponentRenderer: componentRendererFactory(),
                    BlockRenderer: blockRendererFactory(),
                    AddonRenderer: addonRendererFactory(),
                    TempRenderer: tempRendererFactory(),
                    DivRenderer: blockRendererFactory(),
                });
                adapter.setConfigProvider(next_ConfigProvider_default.a);
                function factory() {
                    var Renderer = rendererFactory();
                    return /*#__PURE__*/ (function (_Renderer) {
                        function ReactRenderer(props, context) {
                            src_classCallCheck(this, ReactRenderer);
                            return src_callSuper(this, ReactRenderer, [props, context]);
                        }
                        src_inherits(ReactRenderer, _Renderer);
                        return src_createClass(ReactRenderer, [
                            {
                                key: 'isValidComponent',
                                value: function isValidComponent(obj) {
                                    var _obj$prototype;
                                    return (
                                        (obj === null || obj === void 0
                                            ? void 0
                                            : (_obj$prototype = obj.prototype) === null || _obj$prototype === void 0
                                            ? void 0
                                            : _obj$prototype.isReactComponent) ||
                                        (obj === null || obj === void 0 ? void 0 : obj.prototype) instanceof
                                            external_window_React_['Component']
                                    );
                                },
                            },
                        ]);
                    })(Renderer);
                }
                /* harmony default export */ var src_0 = (__webpack_exports__['default'] = factory());

                /***/
            },
            /******/
        ],
    );
});
//# sourceMappingURL=react-renderer.js.map
